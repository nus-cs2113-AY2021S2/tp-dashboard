[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version.","lastModifiedDate":"2020-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:","lastModifiedDate":"2020-06-08"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/drugsDuke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   \u003e Task :compileJava","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   \u003e Task :processResources NO-SOURCE","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   \u003e Task :classes","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   \u003e Task :Duke.main()","lastModifiedDate":"2020-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   What is your name?","lastModifiedDate":"2020-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   Type some word and press enter to let the execution proceed to the end.","lastModifiedDate":"2020-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Build automation using Gradle","lastModifiedDate":"2020-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file).","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Testing","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"### I/O redirection tests","lastModifiedDate":"2020-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script.","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### JUnit tests","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. ","lastModifiedDate":"2020-05-24"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"* A skeleton JUnit test (`src/test/java/seedu/drugsDuke/DukeTest.java`) is provided with this project template. ","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"## Checkstyle","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* A sample CheckStyle rule configuration is provided in this project.","lastModifiedDate":"2020-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"## CI using GitHub Actions","lastModifiedDate":"2020-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR.","lastModifiedDate":"2020-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Documentation","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"`/docs` folder contains a skeleton version of the project documentation.","lastModifiedDate":"2020-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Steps for publishing documentation to the public: ","lastModifiedDate":"2020-05-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   If you are using this project template for a team project, go to the team fork on GitHub.","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"1. Click on the `settings` tab.","lastModifiedDate":"2020-05-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Scroll down to the `GitHub Pages` section.","lastModifiedDate":"2020-05-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"1. Set the `source` as `master branch /docs folder`.","lastModifiedDate":"2020-05-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"1. Optionally, use the `choose a theme` button to choose a theme for your documentation.","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"NoorSarrah":2,"-":64}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"jar {","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"    manifest {","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"        attributes(","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"                \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"        )","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-04-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"MingShun98":7,"-":46,"blank-bank":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Owen | [Github](https://github.com/blank-bank) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chiam Jia-En | [Github](https://github.com/Chiamjiaen/tp) | [Portfolio](team/chiamjiaen.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alexander Tan | [Github](https://github.com/AlexanderTanJunAn) | [Portfolio](team/alexandertanjunan.md)","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"-":4,"AlexanderTanJunAn":2,"blank-bank":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"**Developer Guide**","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"## Content Page","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"1. [Introduction](#1-introduction) (jia en)","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"\t1. [What is HealthVault?](#11-what-is-healthvault) ","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"\t2. [About the Developer Guide](#12-about-the-developer-guide)","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"2. [How to use this guide](#2-how-to-use-the-guide) (sarrah)","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"\t1. [Technical Terms](#21-technical-terms)","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"\t2. [Symbols \u0026 Icons](#22-symbols-and-icons)","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"4. [Getting Started](#3-getting-started) (Owen)","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"5. [Design](#4-design) ","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    1. [Architecture](#41-architecture) (owen)","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    2. [UI component](#42-ui-component) (ms)","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    3. [Logic Component](#43-logic-component) (jiaen)","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    4. [Model component](#44-model-component) (alex)","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"    5. [Storage component](#45-storage-component) (sarrah)","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"6. [Implementation](#5-implementation)","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    1. [Staff](#51-staff) ","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    \t1. [Staff Menu](#511-staff-menu)","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    \t2. [Add](#512-add)","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    \t3. [Delete](#513-delete)","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    \t4. [List](#514-list)","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    \t5. [Find](#515-find)","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"    2. [Patient](#52-patient)","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    \t1. [Patient Menu](#521-patient-menu)","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    \t2. [Add](#522-add)","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    \t3. [Delete](#523-delete)","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"    \t4. [List](#524-list)","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"    \t5. [Find](#525-find)","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"    3. [Doctor Appointment](#53-doctor-appointment)","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    \t1. [Doctor Appointment Menu](#531-doctor-appointment-menu)","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    \t2. [Add](#532-add)","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"    \t3. [Delete](#533-delete)","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"    \t4. [List All](#534-list-all)","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"    \t5. [List by Doctor ID or Appointment ID](#535-list-by-doctor-id-or-appointment-id)","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"    4. [Nurse Schedule](#54-nurse-schedule)","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"    \t1. [Nurse Schedule Menu](#541-nurse-schedule-menu)","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    \t2. [Add](#542-add)","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    \t3. [Delete](#543-delete)","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    \t4. [List All](#544-list-all)","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"    \t5. [List by Nurse ID](#545-list-by-nurse-id)","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"    5. [Inventory](#55-inventory)","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        1. [Inventory Menu](#551-inventory-menu)","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"    \t2. [Add](#552-add)","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"    \t3. [Delete](#553-delete)","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"    \t4. [List](#554-list)","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"    6. [Proposed Features](#56-proposed-features)","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    \t1. [Auto Schedule Generator for Nurses](#561-auto-schedule-generator-for-nurses)","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"    \t2. [Personalized Account Login](#562-personalized-account-login)","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"    \t3. [Inventory Alerts](#563-inventory-alerts)","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"[Appendix A: Product Scope](#appendix-a-product-scope) (jiaen)","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"[Appendix B: User Stories](#appendix-b-user-stories) (alex)","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"[Appendix C: Non Functional Requirements](#appendix-c-non-functional-requirements) (mingshun)","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"[Appendix D: Glossary](#appendix-d-glossary) (owen)","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"[Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing) (sarrah)","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"## 1. Introduction","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"### 1.1 What is HealthVault?","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"In light of the recent COVID-19 pandemic. The weakness of modern healthcare systems has surfaced. ","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"Many of which are unsatisfactory in coping with the current needs.","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"HealthVault was thus created to improve the efficiency of hospital and healthcare information management.","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"**HealthVault** is a desktop application made for healthcare workers as their one stop application for recording and ","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"accessing critical patient or staff information.","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"It is optimized for the Command Line Interface, where an experienced typist will be able to ","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"make full use of the informative and minimalistic GUI to achieve significant gains in efficiency","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"### 1.2 About the Developer Guide","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"The HealthVault Developer guide is made specifically for those who are interested in the specifics of how HealthVault is ","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"Chiamjiaen"},"content":"implemented. Such personnel may include: students, technical support staff, web developers, healthcare professionals.","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"Chiamjiaen"},"content":"This Developer guide seeks to inform and instruct readers on the architecture and specific implementation of the various","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"Chiamjiaen"},"content":"functions within HealthVault. So that if they wish to make any fixes or edits to improve on the code for their own ","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"usage, they will be well equipped with both the knowledge and expertise to do so. ","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"The Developer Guide hopes to impart to you the following:","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"1. Properly set up for HealthVault","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"2. HealthVault\u0027s system architecture","lastModifiedDate":"2021-04-09"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"3. The implementation method for HealthVault\u0027s various functions and their considerations","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"4. Instructions for manual testing of the application","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"We hope you will have a fruitful time learning about HealthVault.","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"## 2. How to use the guide","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"NoorSarrah"},"content":"### 2.1 Technical Terms","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Command Line Interface** - Accessing the functionalities of a computer program in the form of lines of text.","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **User Input** - Any information or data sent to a computer by the user using the application.","lastModifiedDate":"2021-04-09"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"### 2.2 Symbols and Icons","lastModifiedDate":"2021-04-10"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **\u003c\u003e** - Angles quotation marks for optional user inputs.","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **[]** - Square brackets for compulsory user inputs.","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; :information_source: This icon denotes a important information to note.","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; :exclamation: Warning sign to inform user against doing certain actions ","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Invalid input is shown with:","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"\t- Invalid input 1","lastModifiedDate":"2021-04-09"},{"lineNumber":118,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid input 2","lastModifiedDate":"2021-04-09"},{"lineNumber":119,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid input 3","lastModifiedDate":"2021-04-09"},{"lineNumber":120,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"## 3. Getting Started","lastModifiedDate":"2021-04-09"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":":exclamation: Caution: Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2021-04-08"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"First fork this repo, and clone the fork into your computer.","lastModifiedDate":"2021-04-09"},{"lineNumber":129,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"**Setting up the project in your computer**","lastModifiedDate":"2021-04-09"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"1. Configuring the JDK to to ensure Intellij is configured to use JDK 11.","lastModifiedDate":"2021-04-09"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"2. Import the project as a Gradle project.","lastModifiedDate":"2021-04-09"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"3. Run the seedu.duke.HealthVault and try a few commands as stated in the User Guide.","lastModifiedDate":"2021-04-09"},{"lineNumber":135,"author":{"gitId":"blank-bank"},"content":"4. Run the tests to ensure they all pass.","lastModifiedDate":"2021-04-09"},{"lineNumber":136,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"blank-bank"},"content":"**Before writing code**","lastModifiedDate":"2021-04-09"},{"lineNumber":138,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"1. If using IDEA, configuring the code style to set up IDEA’s coding style to match ours.","lastModifiedDate":"2021-04-09"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"2. When you are ready to start coding, we recommend that you get some sense of the overall design by reading about HealthVault’s architecture.","lastModifiedDate":"2021-04-09"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":142,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"blank-bank"},"content":"## 4. Design","lastModifiedDate":"2021-04-05"},{"lineNumber":146,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"###  4.1 Architecture","lastModifiedDate":"2021-04-05"},{"lineNumber":148,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/Architecture Diagram.png\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":150,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":151,"author":{"gitId":"blank-bank"},"content":"**Overview Architecture:**","lastModifiedDate":"2021-04-09"},{"lineNumber":152,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":153,"author":{"gitId":"blank-bank"},"content":"Our application utilises many layers of abstraction which allows each individual component to be self contained yet able to work with other components. Each component has been absracted and grouped together based on its function and purpose in the system.","lastModifiedDate":"2021-04-09"},{"lineNumber":154,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"The above diagram shows how each component interacts with the other components. The directed arrows represent the direction in which functions of each component is called and used. For example, the Instance Component utilises the Storage Component.","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"blank-bank"},"content":"**Brief Description of Components:**","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"blank-bank"},"content":"**UI Component:** Controls all the User Interface. All input and output is handled by the UI component.","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":164,"author":{"gitId":"blank-bank"},"content":"**Logic Component:**","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Instance Component: Represents all Menu Instances.","lastModifiedDate":"2021-04-09"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":168,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Parser Component: Parses user input to obtain control flow decisions.","lastModifiedDate":"2021-04-09"},{"lineNumber":169,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Error Checker Component: Contains functions to check validity of user input.","lastModifiedDate":"2021-04-09"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Commands Component: Command Class Objects which executes specified actions.","lastModifiedDate":"2021-04-09"},{"lineNumber":173,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"**Exceptions Component:** All possible Exceptions identified.","lastModifiedDate":"2021-04-09"},{"lineNumber":175,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":176,"author":{"gitId":"blank-bank"},"content":"**Model Component:** Consist of the base objects and its collection.","lastModifiedDate":"2021-04-09"},{"lineNumber":177,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"**Storage Component:** Manages all file I/O.","lastModifiedDate":"2021-04-09"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":182,"author":{"gitId":"blank-bank"},"content":"### 4.2 UI component","lastModifiedDate":"2021-04-05"},{"lineNumber":183,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":184,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/UML UI.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":185,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":186,"author":{"gitId":"MingShun98"},"content":"**API :** `UI.java`","lastModifiedDate":"2021-04-09"},{"lineNumber":187,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":188,"author":{"gitId":"MingShun98"},"content":"The UI of this program can be found under the package named UI. It consists of `UI`, `DoctorAppointmentUI`, `InventoryUI`, `NurseScheduleUI`, `PatientUI` and `StaffUI`.  The main `UI` class as shown in the diagram acts as the parent class with the other classes being its subclasses. Having a main `UI` class allows the program to have a common pool of methods so that each method is reusable in each functionality. Each individual function UI extends the main `UI` and consists of the methods that deals with users unique to their functionality. The UI component interacts with the Logic package and Instance package the most.","lastModifiedDate":"2021-04-09"},{"lineNumber":189,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":190,"author":{"gitId":"MingShun98"},"content":"**The `UI` component**,","lastModifiedDate":"2021-04-09"},{"lineNumber":191,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":192,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Executes user commands using the ‘Logic’ component.","lastModifiedDate":"2021-04-09"},{"lineNumber":193,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":194,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Listens to changes to `Instance` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-04-09"},{"lineNumber":195,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":196,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Is responsible for handling all input and output of the program. ","lastModifiedDate":"2021-04-09"},{"lineNumber":197,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":198,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":199,"author":{"gitId":"Chiamjiaen"},"content":"### 4.3 Logic Component","lastModifiedDate":"2021-04-10"},{"lineNumber":200,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":201,"author":{"gitId":"Chiamjiaen"},"content":"The `Logic` component is responsible for the following tasks:","lastModifiedDate":"2021-04-10"},{"lineNumber":202,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":203,"author":{"gitId":"Chiamjiaen"},"content":"- Run each instance that accepts user inputs in order to access various functionalities.","lastModifiedDate":"2021-04-10"},{"lineNumber":204,"author":{"gitId":"Chiamjiaen"},"content":"- Converts user inputs into data that is usable by the HealthVault.","lastModifiedDate":"2021-04-10"},{"lineNumber":205,"author":{"gitId":"Chiamjiaen"},"content":"- Executes the Command based on interpreted data.","lastModifiedDate":"2021-04-10"},{"lineNumber":206,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":207,"author":{"gitId":"Chiamjiaen"},"content":"To accomplish the above, the `Logic` component, follows the following sequence of steps:","lastModifiedDate":"2021-04-10"},{"lineNumber":208,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":209,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Interpreting user input**:","lastModifiedDate":"2021-04-10"},{"lineNumber":210,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":211,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The `Instance` component runs the main super loop to accept user input. It creates a `Parser` to interpret user inputs. ","lastModifiedDate":"2021-04-10"},{"lineNumber":212,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":213,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Checking User Input**:","lastModifiedDate":"2021-04-10"},{"lineNumber":214,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":215,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; The `Parser` creates an `ErrorChecker` class and uses it to check the user input for any erroneous and unacceptable inputs. ","lastModifiedDate":"2021-04-10"},{"lineNumber":216,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":217,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Creating Command**:","lastModifiedDate":"2021-04-10"},{"lineNumber":218,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":219,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; After checking the input, the `Parser` component then creates the `Command` that corresponds to the user input.","lastModifiedDate":"2021-04-10"},{"lineNumber":220,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":221,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Executing Command**:","lastModifiedDate":"2021-04-10"},{"lineNumber":222,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":223,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; With the interpreted `Command` from the `Parser`, the `Instance` component then executes the `Command`.","lastModifiedDate":"2021-04-10"},{"lineNumber":224,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":225,"author":{"gitId":"Chiamjiaen"},"content":"The following class diagram illustrates the interactions between various logic components","lastModifiedDate":"2021-04-10"},{"lineNumber":226,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":227,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"diagrams/LogicComponent.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":228,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":229,"author":{"gitId":"Chiamjiaen"},"content":"The following class diagram illustrates the group of Commands under the doctorappointment package. Due to the similar Commands in each of the Command packages, the information in the doctorappointment package should be representative of the other Command packages.","lastModifiedDate":"2021-04-10"},{"lineNumber":230,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":231,"author":{"gitId":"Chiamjiaen"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"diagrams/ExampleCommandPackage.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":232,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":233,"author":{"gitId":"Chiamjiaen"},"content":"\u003e:information_source: Similar classes are represented by abbreviations ie. ABCCommand. The actual class names are written in the notes beside the classes. ","lastModifiedDate":"2021-04-10"},{"lineNumber":234,"author":{"gitId":"Chiamjiaen"},"content":"\u003e ","lastModifiedDate":"2021-04-10"},{"lineNumber":235,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. ABCInstance represents the different `Instance` classes.","lastModifiedDate":"2021-04-10"},{"lineNumber":236,"author":{"gitId":"Chiamjiaen"},"content":"\u003e2. PQRParser represents the different `Parser` classes.","lastModifiedDate":"2021-04-10"},{"lineNumber":237,"author":{"gitId":"Chiamjiaen"},"content":"\u003e3. XYZChecker represents the different `ErrorChecker` classes.","lastModifiedDate":"2021-04-10"},{"lineNumber":238,"author":{"gitId":"Chiamjiaen"},"content":"\u003e4. The \"XXX\"Command in each package under the `Command` package represent the different commands relating to each individual feature.","lastModifiedDate":"2021-04-10"},{"lineNumber":239,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":240,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":241,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":242,"author":{"gitId":"Chiamjiaen"},"content":"### 4.4 Model component","lastModifiedDate":"2021-04-10"},{"lineNumber":243,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":244,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/UML Model.png\"\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":245,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":246,"author":{"gitId":"AlexanderTanJunAn"},"content":"The Model component consists of classes that represents the tasks and things that a nurse has to do in the real world. ","lastModifiedDate":"2021-04-10"},{"lineNumber":247,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":248,"author":{"gitId":"AlexanderTanJunAn"},"content":"The `Model`, consists of 5 different types of lists.","lastModifiedDate":"2021-04-09"},{"lineNumber":249,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":250,"author":{"gitId":"AlexanderTanJunAn"},"content":"- AppointmentList stores DoctorAppointment objects. AppointmentList also has methods needed to modify the list with objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":251,"author":{"gitId":"AlexanderTanJunAn"},"content":"- InventoryList stores Inventory objects. InventoryList also has methods to modify the list with objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":252,"author":{"gitId":"AlexanderTanJunAn"},"content":"- NurseScheduleList stores NurseSchedule objects. NurseScheduleList also has methods to modify the list with objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":253,"author":{"gitId":"AlexanderTanJunAn"},"content":"- PatientList stores Patient objects. PatientList also has methods to modify the list with objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":254,"author":{"gitId":"AlexanderTanJunAn"},"content":"- StaffList stores Staff objects. StaffList also has methods to modify the list with objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":255,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":256,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":257,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":258,"author":{"gitId":"Chiamjiaen"},"content":"### 4.5 Storage component","lastModifiedDate":"2021-04-10"},{"lineNumber":259,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/UpdatedStorageUML.png\"\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":260,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":261,"author":{"gitId":"NoorSarrah"},"content":"The Storage component consists of classes that individually reads data from, and writes data to, 5 different .txt files.","lastModifiedDate":"2021-04-11"},{"lineNumber":262,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":263,"author":{"gitId":"NoorSarrah"},"content":"The `Storage`, consists of 5 different types of classes:","lastModifiedDate":"2021-04-11"},{"lineNumber":264,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":265,"author":{"gitId":"NoorSarrah"},"content":"- DoctorApointmentStorage implements `writeToFile()` to write information regarding doctorID, name, date, appointmentID, and gender into DoctorAppointment.txt file. `loadFile()`loads the data in the DoctorAppointment.txt file into an array list to be returned. `loadDoctorFile()` loads the doctor information from the staff database.","lastModifiedDate":"2021-04-11"},{"lineNumber":266,"author":{"gitId":"NoorSarrah"},"content":"- IventoryStorage implements `storeInventory()` to write information regarding drug name, price, and quantity into Inventory.txt file. `loadInventory()`loads the data in the Inventory.txt file into an array list to be returned.","lastModifiedDate":"2021-04-11"},{"lineNumber":267,"author":{"gitId":"NoorSarrah"},"content":"- NurseScheduleStorage implements `writeToFile()` to write information regarding nurseID, patientID, date into NurseSchedule.txt file. `loadPatientFile()` loads the patient information from the patient database.","lastModifiedDate":"2021-04-11"},{"lineNumber":268,"author":{"gitId":"NoorSarrah"},"content":"- StaffStorage implements `writeToFile()` to write information regarding staffID, name, age, and specialisation into Staff.txt file. `loadFile()`loads the data in the Patients.txt file into an array list to be returned.","lastModifiedDate":"2021-04-11"},{"lineNumber":269,"author":{"gitId":"NoorSarrah"},"content":"- PatientStorage implements `storePatients()` to write information regarding patientID, name, age, gender, illness, and drugsNeeded into Patient.txt file. `loadPatients()`loads the data in the Patient.txt file into an array list to be returned.","lastModifiedDate":"2021-04-11"},{"lineNumber":270,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":271,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":272,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":273,"author":{"gitId":"blank-bank"},"content":"## 5. Implementation","lastModifiedDate":"2021-04-05"},{"lineNumber":274,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":275,"author":{"gitId":"Chiamjiaen"},"content":"In this section, we will introduce the implementation of the different functions within each feature.","lastModifiedDate":"2021-04-10"},{"lineNumber":276,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":277,"author":{"gitId":"blank-bank"},"content":"###  5.1 Staff","lastModifiedDate":"2021-04-07"},{"lineNumber":278,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":279,"author":{"gitId":"blank-bank"},"content":"### 5.1.1 Staff Menu","lastModifiedDate":"2021-04-07"},{"lineNumber":280,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":281,"author":{"gitId":"blank-bank"},"content":"Similar to the Start Menu, the Staff Menu will repeatedly request user input until the `return` command is given.","lastModifiedDate":"2021-04-07"},{"lineNumber":282,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":283,"author":{"gitId":"blank-bank"},"content":"Whenever a user input is given to the Staff Menu, the following steps will occur.","lastModifiedDate":"2021-04-07"},{"lineNumber":284,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":285,"author":{"gitId":"blank-bank"},"content":"**Launching Staff Menu**","lastModifiedDate":"2021-04-07"},{"lineNumber":286,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":287,"author":{"gitId":"blank-bank"},"content":"1. `ToStaffInstance.execute()` will create and call `StaffInstance.run()`","lastModifiedDate":"2021-04-07"},{"lineNumber":288,"author":{"gitId":"blank-bank"},"content":"2. `StaffInstance.run()` will start by loading/creating the Staff data .txt file for Staff database records. It will check for any signs of corrupted file when loading. Exception will be thrown if any corruption occurs.","lastModifiedDate":"2021-04-07"},{"lineNumber":289,"author":{"gitId":"blank-bank"},"content":"3. `StaffInstance.run()` will then repeatedly call `commandHandler()`.","lastModifiedDate":"2021-04-07"},{"lineNumber":290,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":291,"author":{"gitId":"blank-bank"},"content":"**Getting User Input**","lastModifiedDate":"2021-04-07"},{"lineNumber":292,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":293,"author":{"gitId":"blank-bank"},"content":"4. `StaffInstance.run()` will repeatedly request for user input and call `StaffParser.commandHandler()`.","lastModifiedDate":"2021-04-07"},{"lineNumber":294,"author":{"gitId":"blank-bank"},"content":"5. `commandHandler()` will call the `smartCommandRecognition()` to assess the given user input and determine which command is most similar to the input","lastModifiedDate":"2021-04-07"},{"lineNumber":295,"author":{"gitId":"blank-bank"},"content":"6. Based on the recognised command by the system, the relevant commands will be carried out.","lastModifiedDate":"2021-04-07"},{"lineNumber":296,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":297,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":298,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":299,"author":{"gitId":"blank-bank"},"content":"### 5.1.2 Add","lastModifiedDate":"2021-04-07"},{"lineNumber":300,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":301,"author":{"gitId":"blank-bank"},"content":"**Implementation:**","lastModifiedDate":"2021-04-07"},{"lineNumber":302,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":303,"author":{"gitId":"blank-bank"},"content":"The function Add takes in 4 compulsory fields (Staff ID, Name, Age, Specialisation) to create the Staff Object and adds it to an aggregation of Staff Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. A StaffAdd Command object is created. StaffAdd command object will be executed to create the Staff Object which will be added to the aggregation of Staff Objects.","lastModifiedDate":"2021-04-07"},{"lineNumber":304,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":305,"author":{"gitId":"blank-bank"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-07"},{"lineNumber":306,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":307,"author":{"gitId":"blank-bank"},"content":"\u003e ","lastModifiedDate":"2021-04-07"},{"lineNumber":308,"author":{"gitId":"blank-bank"},"content":"\t- Invalid Staff ID format","lastModifiedDate":"2021-04-07"},{"lineNumber":309,"author":{"gitId":"blank-bank"},"content":"\t- Duplicated Staff ID","lastModifiedDate":"2021-04-07"},{"lineNumber":310,"author":{"gitId":"blank-bank"},"content":"\t- Age that \u003c 18 or \u003e 150","lastModifiedDate":"2021-04-07"},{"lineNumber":311,"author":{"gitId":"blank-bank"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-07"},{"lineNumber":312,"author":{"gitId":"blank-bank"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-07"},{"lineNumber":313,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":314,"author":{"gitId":"blank-bank"},"content":"**Format** `add/[Staff ID]/[name]/[age]/[specialisation]`","lastModifiedDate":"2021-04-09"},{"lineNumber":315,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":316,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"diagrams/StaffAddSD.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":317,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":318,"author":{"gitId":"blank-bank"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":319,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":320,"author":{"gitId":"blank-bank"},"content":"1. If the command recognised is the add command, `commandHandler()` calls `staffChecker.checkValidDataForAdd()` to ensure data entered is valid","lastModifiedDate":"2021-04-07"},{"lineNumber":321,"author":{"gitId":"blank-bank"},"content":"2. `checkValidDataForAdd()` will call the following function in sequence:","lastModifiedDate":"2021-04-07"},{"lineNumber":322,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":323,"author":{"gitId":"blank-bank"},"content":"\t- checkStaffID()\t","lastModifiedDate":"2021-04-07"},{"lineNumber":324,"author":{"gitId":"blank-bank"},"content":"\t- checkDuplicateStaffID()","lastModifiedDate":"2021-04-07"},{"lineNumber":325,"author":{"gitId":"blank-bank"},"content":"\t- checkStaffAge()","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"blank-bank"},"content":"\t- checkBlankInput2()","lastModifiedDate":"2021-04-07"},{"lineNumber":327,"author":{"gitId":"blank-bank"},"content":"\t- invalidCharactersStaffChecker()","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":329,"author":{"gitId":"blank-bank"},"content":"**Creating StaffAdd command**","lastModifiedDate":"2021-04-07"},{"lineNumber":330,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":331,"author":{"gitId":"blank-bank"},"content":"3. If the input data is valid, a StaffAdd Command object is created. Else a relevant error is thrown.","lastModifiedDate":"2021-04-08"},{"lineNumber":332,"author":{"gitId":"blank-bank"},"content":"4. The StaffAdd Command object is returned to `StaffInstance.run()`","lastModifiedDate":"2021-04-08"},{"lineNumber":333,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":334,"author":{"gitId":"blank-bank"},"content":"**Creating Staff Object with User Input**","lastModifiedDate":"2021-04-07"},{"lineNumber":335,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":336,"author":{"gitId":"blank-bank"},"content":"5. StaffInstance then executes the StaffAdd Command object to begin the process of creating the Staff object","lastModifiedDate":"2021-04-08"},{"lineNumber":337,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":338,"author":{"gitId":"blank-bank"},"content":"6. `StaffAdd.execute()` will call the function in `StaffList.add()`","lastModifiedDate":"2021-04-09"},{"lineNumber":339,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":340,"author":{"gitId":"blank-bank"},"content":"7. `StaffList.add()` will instantiate a new Staff object and add it to the ArrayList\u003cStaff\u003e StaffList. which contains all the Staff Objects. ","lastModifiedDate":"2021-04-09"},{"lineNumber":341,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":342,"author":{"gitId":"blank-bank"},"content":"**Saving Staff Objects into .txt file**","lastModifiedDate":"2021-04-07"},{"lineNumber":343,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":344,"author":{"gitId":"blank-bank"},"content":"8. `StaffList.add()` then calls `staffStorage.writeToFile()` which starts the process of writing the details of all existing Staff Objects, within the StaffList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":345,"author":{"gitId":"blank-bank"},"content":"9. `staffStorage.writeToFile()` then calls `createFile()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-08"},{"lineNumber":346,"author":{"gitId":"blank-bank"},"content":"10. Data is written and saved.","lastModifiedDate":"2021-04-08"},{"lineNumber":347,"author":{"gitId":"blank-bank"},"content":"11. Control is then returned to StaffInstance.","lastModifiedDate":"2021-04-08"},{"lineNumber":348,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":349,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":350,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":351,"author":{"gitId":"blank-bank"},"content":"### 5.1.3 Delete","lastModifiedDate":"2021-04-07"},{"lineNumber":352,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":353,"author":{"gitId":"blank-bank"},"content":"**Implementation:**","lastModifiedDate":"2021-04-07"},{"lineNumber":354,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":355,"author":{"gitId":"blank-bank"},"content":"The function Delete takes in 1 compulsory field (Staff ID) to identify and delete the Staff Object from the aggregation of Staff Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a StaffDelete Command object is created. StaffDelete command object will be executed to iterate through the aggregation of Staff Objects. If Staff Object exists, it will be removed. Else an error message will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":356,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":357,"author":{"gitId":"blank-bank"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-07"},{"lineNumber":358,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":359,"author":{"gitId":"blank-bank"},"content":"\u003e ","lastModifiedDate":"2021-04-07"},{"lineNumber":360,"author":{"gitId":"blank-bank"},"content":"\t- Invalid Staff ID format","lastModifiedDate":"2021-04-07"},{"lineNumber":361,"author":{"gitId":"blank-bank"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-07"},{"lineNumber":362,"author":{"gitId":"blank-bank"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-07"},{"lineNumber":363,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":364,"author":{"gitId":"blank-bank"},"content":"**Format** `delete/Staff ID`","lastModifiedDate":"2021-04-09"},{"lineNumber":365,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":366,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":367,"author":{"gitId":"blank-bank"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":368,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":369,"author":{"gitId":"blank-bank"},"content":"1. If the command recognised is the delete command, `commandHandler()` calls `staffChecker.checkDeleteCommand()` to ensure that there are valid and sufficient inputs","lastModifiedDate":"2021-04-07"},{"lineNumber":370,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":371,"author":{"gitId":"blank-bank"},"content":"**Creating StaffDelete command**","lastModifiedDate":"2021-04-07"},{"lineNumber":372,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":373,"author":{"gitId":"blank-bank"},"content":"2. If the input data is valid, a StaffDelete Command object is created ","lastModifiedDate":"2021-04-07"},{"lineNumber":374,"author":{"gitId":"blank-bank"},"content":"3. The StaffDelete Command object is returned to `StaffInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":375,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":376,"author":{"gitId":"blank-bank"},"content":"**Deleting Staff Object using User Input**","lastModifiedDate":"2021-04-07"},{"lineNumber":377,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":378,"author":{"gitId":"blank-bank"},"content":"4. StaffInstance then executes the StaffDelete Command object to begin the process of deleting the referenced Staff object","lastModifiedDate":"2021-04-07"},{"lineNumber":379,"author":{"gitId":"blank-bank"},"content":"5. `StaffDelete.execute()` will call the function `StaffList.delete()`","lastModifiedDate":"2021-04-09"},{"lineNumber":380,"author":{"gitId":"blank-bank"},"content":"6. `StaffList.delete()` will iterate through the objects in ArrayList\u003cStaff\u003e StaffList. The Staff Object referenced by the input given by the user will be deleted.","lastModifiedDate":"2021-04-09"},{"lineNumber":381,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":382,"author":{"gitId":"blank-bank"},"content":"**Saving changed Staff Objects into .txt file**","lastModifiedDate":"2021-04-07"},{"lineNumber":383,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":384,"author":{"gitId":"blank-bank"},"content":"7. `StaffList.delete()` then calls staffStorage.writeToFile() which starts the process of writing the changed details of Staff Objects, within the StaffList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":385,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":386,"author":{"gitId":"blank-bank"},"content":"8. `staffStorage.writeToFile()` then calls `createFile()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-07"},{"lineNumber":387,"author":{"gitId":"blank-bank"},"content":"9. Data is written and saved.","lastModifiedDate":"2021-04-07"},{"lineNumber":388,"author":{"gitId":"blank-bank"},"content":"10. Control is then returned to StaffInstance.","lastModifiedDate":"2021-04-07"},{"lineNumber":389,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":390,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":391,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":392,"author":{"gitId":"blank-bank"},"content":"### 5.1.4 List","lastModifiedDate":"2021-04-07"},{"lineNumber":393,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":394,"author":{"gitId":"blank-bank"},"content":"**Implementation:**","lastModifiedDate":"2021-04-07"},{"lineNumber":395,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":396,"author":{"gitId":"blank-bank"},"content":"The function list takes in 1 option field (nurses/doctors) to identity and list the category of Staff Objects required from the aggregation of Staff Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a StaffList Command object is created. StaffList command object will be executed to iterate through the aggregation of Staff Objects. Staff Objects will then be displayed based on the user given input.","lastModifiedDate":"2021-04-07"},{"lineNumber":397,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":398,"author":{"gitId":"blank-bank"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-07"},{"lineNumber":399,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":400,"author":{"gitId":"blank-bank"},"content":"\u003e ","lastModifiedDate":"2021-04-07"},{"lineNumber":401,"author":{"gitId":"blank-bank"},"content":"\t- Any input apart from Blank Input (i.e Empty input) OR \"doctors\" OR \"nurses\"","lastModifiedDate":"2021-04-07"},{"lineNumber":402,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":403,"author":{"gitId":"blank-bank"},"content":"**Format** `list/\u003cdoctors/nurses\u003e`","lastModifiedDate":"2021-04-09"},{"lineNumber":404,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":405,"author":{"gitId":"blank-bank"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":406,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":407,"author":{"gitId":"blank-bank"},"content":"1. If the command recognised is the list command, `commandHandler()` calls `staffChecker.checkListCommand()` to check and verify the validity of inputs accompanied by the list command, if any.","lastModifiedDate":"2021-04-07"},{"lineNumber":408,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":409,"author":{"gitId":"blank-bank"},"content":"**Creating StaffList command**","lastModifiedDate":"2021-04-07"},{"lineNumber":410,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":411,"author":{"gitId":"blank-bank"},"content":"2. If the input data is valid, a StaffList Command object is created ","lastModifiedDate":"2021-04-07"},{"lineNumber":412,"author":{"gitId":"blank-bank"},"content":"3. The StaffList Command object is returned to `StaffInstance.run()` ","lastModifiedDate":"2021-04-07"},{"lineNumber":413,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":414,"author":{"gitId":"blank-bank"},"content":"**Viewing Staff Objects**","lastModifiedDate":"2021-04-07"},{"lineNumber":415,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":416,"author":{"gitId":"blank-bank"},"content":"4. StaffInstance then executes the StaffList Command object to begin the process of displaying all Staff objects.","lastModifiedDate":"2021-04-07"},{"lineNumber":417,"author":{"gitId":"blank-bank"},"content":"5. `StaffList.execute()` will call the function `StaffList.list()`","lastModifiedDate":"2021-04-09"},{"lineNumber":418,"author":{"gitId":"blank-bank"},"content":"6. `StaffList.list()` will iterate through the objects in ArrayList\u003cStaff\u003e StaffList. ","lastModifiedDate":"2021-04-09"},{"lineNumber":419,"author":{"gitId":"blank-bank"},"content":"7. Depending on the input given by the user, the relevant Staff Objects will be displayed.","lastModifiedDate":"2021-04-07"},{"lineNumber":420,"author":{"gitId":"blank-bank"},"content":"8. Control is then returned to StaffInstance.","lastModifiedDate":"2021-04-07"},{"lineNumber":421,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":422,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":423,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":424,"author":{"gitId":"blank-bank"},"content":"### 5.1.5 Find","lastModifiedDate":"2021-04-07"},{"lineNumber":425,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":426,"author":{"gitId":"blank-bank"},"content":"**Implementation:**","lastModifiedDate":"2021-04-07"},{"lineNumber":427,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":428,"author":{"gitId":"blank-bank"},"content":"The function Add takes in 1 compulsory field (keyword) to find the relvant Staff Objects within the aggregation of Staff Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. The given input is used to match with every single field of the Staff Object. If there is a match, the Staff Object will be displayed. Else, an error message will be displayed.","lastModifiedDate":"2021-04-07"},{"lineNumber":429,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":430,"author":{"gitId":"blank-bank"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-07"},{"lineNumber":431,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":432,"author":{"gitId":"blank-bank"},"content":"\u003e ","lastModifiedDate":"2021-04-07"},{"lineNumber":433,"author":{"gitId":"blank-bank"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-07"},{"lineNumber":434,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":435,"author":{"gitId":"blank-bank"},"content":"**Format** `find/[keyword]`","lastModifiedDate":"2021-04-09"},{"lineNumber":436,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":437,"author":{"gitId":"blank-bank"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":438,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":439,"author":{"gitId":"blank-bank"},"content":"1. If the command recognised is the find command, `commandHandler()` calls `MainChecker.checkNumInput()`. `MainChecker.checkNumInput()` does a simple check to ensure there is an accompanying input given by the user together with the find command.","lastModifiedDate":"2021-04-07"},{"lineNumber":440,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":441,"author":{"gitId":"blank-bank"},"content":"**Creating StaffFind command**","lastModifiedDate":"2021-04-07"},{"lineNumber":442,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":443,"author":{"gitId":"blank-bank"},"content":"2. If the input data exist, a StaffFind Command object is created ","lastModifiedDate":"2021-04-07"},{"lineNumber":444,"author":{"gitId":"blank-bank"},"content":"3. The StaffFind Command object is returned to `StaffInstance.run()` ","lastModifiedDate":"2021-04-07"},{"lineNumber":445,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":446,"author":{"gitId":"blank-bank"},"content":"**Finding relevant Staff Objects**","lastModifiedDate":"2021-04-07"},{"lineNumber":447,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":448,"author":{"gitId":"blank-bank"},"content":"4. StaffInstance then executes the StaffList Command object to begin the process of finding and displaying relevant Staff objects.","lastModifiedDate":"2021-04-07"},{"lineNumber":449,"author":{"gitId":"blank-bank"},"content":"5. `StaffFind.execute()` will call the function `StaffList.find()`","lastModifiedDate":"2021-04-09"},{"lineNumber":450,"author":{"gitId":"blank-bank"},"content":"6. `StaffList.find()` will iterate through the objects in ArrayList\u003cStaff\u003e StaffList. ","lastModifiedDate":"2021-04-09"},{"lineNumber":451,"author":{"gitId":"blank-bank"},"content":"7. `StaffList.find()` will utilise a search function in StaffList to find any Staff Objects that matches the given keyword by the user. ","lastModifiedDate":"2021-04-09"},{"lineNumber":452,"author":{"gitId":"blank-bank"},"content":"8. The relevant Staff Objects are then displayed.","lastModifiedDate":"2021-04-07"},{"lineNumber":453,"author":{"gitId":"blank-bank"},"content":"9. Control is then returned to StaffInstance.","lastModifiedDate":"2021-04-07"},{"lineNumber":454,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":455,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":456,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":457,"author":{"gitId":"blank-bank"},"content":"###  5.2 Patient","lastModifiedDate":"2021-04-05"},{"lineNumber":458,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":459,"author":{"gitId":"Chiamjiaen"},"content":"### 5.2.1 Patient Menu","lastModifiedDate":"2021-04-09"},{"lineNumber":460,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":461,"author":{"gitId":"Chiamjiaen"},"content":"The Patient Menu will repeatedly request user input until the `return` command is given.","lastModifiedDate":"2021-04-09"},{"lineNumber":462,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":463,"author":{"gitId":"Chiamjiaen"},"content":"Whenever a user input is given to the Patient Menu, the following steps will occur.","lastModifiedDate":"2021-04-09"},{"lineNumber":464,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":465,"author":{"gitId":"Chiamjiaen"},"content":"**Launching Patient Menu**","lastModifiedDate":"2021-04-09"},{"lineNumber":466,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":467,"author":{"gitId":"Chiamjiaen"},"content":"1. `ToPatientInstance.execute()` will create and call `PatientInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":468,"author":{"gitId":"Chiamjiaen"},"content":"2. `PatientInstance.run()` will start by loading/creating the Patient data .txt file for Patient database records. It will check for any signs of corrupted file when loading and exception will be thrown if any corruption is detected.","lastModifiedDate":"2021-04-09"},{"lineNumber":469,"author":{"gitId":"Chiamjiaen"},"content":"3. `PatientInstance.run()` will then enters its running for loop and repeatedly take in user inputs for data processing.","lastModifiedDate":"2021-04-09"},{"lineNumber":470,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":471,"author":{"gitId":"Chiamjiaen"},"content":"**Getting User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":472,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":473,"author":{"gitId":"Chiamjiaen"},"content":"4. `PatientInstance.run()` will repeatedly request for user input and call `PatientParser.patientParse()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":474,"author":{"gitId":"Chiamjiaen"},"content":"5. `patientParse()` will call the `smartCommandRecognition()` to assess the given user input and determine which command is most similar to the input.","lastModifiedDate":"2021-04-09"},{"lineNumber":475,"author":{"gitId":"Chiamjiaen"},"content":"6. The most relevant command is then returned to the parser and the parser then scans the input thoroughly based on the command returned. Relevant errors in the input are detected and the appropriate exceptions thrown.","lastModifiedDate":"2021-04-09"},{"lineNumber":476,"author":{"gitId":"Chiamjiaen"},"content":"7. Only after scanning the input for errors, will the proper command be returned to `PatientInstance` where it will then be executed.","lastModifiedDate":"2021-04-09"},{"lineNumber":477,"author":{"gitId":"Chiamjiaen"},"content":"8. After getting an input, and parsing it into string tokens, a new instance of PatientChecker class `checker` is instantiated to perform error checking.","lastModifiedDate":"2021-04-09"},{"lineNumber":478,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":479,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":480,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":481,"author":{"gitId":"blank-bank"},"content":"### 5.2.2 Add","lastModifiedDate":"2021-04-07"},{"lineNumber":482,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":483,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":484,"author":{"gitId":"Chiamjiaen"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":485,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":486,"author":{"gitId":"Chiamjiaen"},"content":"The function Add takes in 6 compulsory fields (Patient ID, Name, Age, Gender, Illness and Medication Required) to create the Patient Object and adds it to a list of Patient Objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":487,"author":{"gitId":"Chiamjiaen"},"content":"Data input is first checked to ensure validity. Any invalid input detected will result in an exception thrown and command aborted. If there are no exceptions thrown, a PatientAdd Command object is created.","lastModifiedDate":"2021-04-09"},{"lineNumber":488,"author":{"gitId":"Chiamjiaen"},"content":"The PatientAdd command object will be executed to create the Patient Object which will be added to the list of Patient Objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":489,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":490,"author":{"gitId":"Chiamjiaen"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":491,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":492,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":493,"author":{"gitId":"Chiamjiaen"},"content":"\t- Invalid Patient ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":494,"author":{"gitId":"Chiamjiaen"},"content":"\t- Duplicated Patient ID","lastModifiedDate":"2021-04-09"},{"lineNumber":495,"author":{"gitId":"Chiamjiaen"},"content":"\t- Age that \u003c 0 or \u003e 150","lastModifiedDate":"2021-04-09"},{"lineNumber":496,"author":{"gitId":"Chiamjiaen"},"content":"\t- Invalid Gender Input","lastModifiedDate":"2021-04-09"},{"lineNumber":497,"author":{"gitId":"Chiamjiaen"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":498,"author":{"gitId":"Chiamjiaen"},"content":"\t- Inputs that only consist of spaces","lastModifiedDate":"2021-04-09"},{"lineNumber":499,"author":{"gitId":"Chiamjiaen"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-09"},{"lineNumber":500,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":501,"author":{"gitId":"Chiamjiaen"},"content":"**Format**","lastModifiedDate":"2021-04-09"},{"lineNumber":502,"author":{"gitId":"Chiamjiaen"},"content":"`add/[Patient ID]/[name]/[age]/[gender]/[illness]/[medication required]`","lastModifiedDate":"2021-04-09"},{"lineNumber":503,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":504,"author":{"gitId":"Chiamjiaen"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":505,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":506,"author":{"gitId":"Chiamjiaen"},"content":"1. If the command recognised is the add command, `patientParse()` calls `checker.checkAdd()` to ensure data entered is valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":507,"author":{"gitId":"Chiamjiaen"},"content":"2. `checkAdd()` will call the following methods in sequence:","lastModifiedDate":"2021-04-09"},{"lineNumber":508,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":509,"author":{"gitId":"Chiamjiaen"},"content":"\t- emptySpaceCheck();","lastModifiedDate":"2021-04-09"},{"lineNumber":510,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- checkLength();","lastModifiedDate":"2021-04-09"},{"lineNumber":511,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- checkID();","lastModifiedDate":"2021-04-09"},{"lineNumber":512,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- checkAge();","lastModifiedDate":"2021-04-09"},{"lineNumber":513,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- illegalCharacterChecker();","lastModifiedDate":"2021-04-09"},{"lineNumber":514,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- checkGender();","lastModifiedDate":"2021-04-09"},{"lineNumber":515,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":516,"author":{"gitId":"Chiamjiaen"},"content":"**Creating PatientAdd command**","lastModifiedDate":"2021-04-09"},{"lineNumber":517,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":518,"author":{"gitId":"Chiamjiaen"},"content":"3. If the input data is valid, a PatientAdd Command object is created. Else a relevant error is thrown.","lastModifiedDate":"2021-04-09"},{"lineNumber":519,"author":{"gitId":"Chiamjiaen"},"content":"4. The StaffAdd Command object is returned to `PatientInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":520,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":521,"author":{"gitId":"Chiamjiaen"},"content":"**Creating Patient Object with User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":522,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":523,"author":{"gitId":"Chiamjiaen"},"content":"5. PatientInstance then executes the PatientAdd Command object to begin the process of creating the Patient object","lastModifiedDate":"2021-04-09"},{"lineNumber":524,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":525,"author":{"gitId":"Chiamjiaen"},"content":"6. `PatientAdd.execute()` will call the function in `PatientList.add()`","lastModifiedDate":"2021-04-09"},{"lineNumber":526,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":527,"author":{"gitId":"Chiamjiaen"},"content":"7. `PatientList.add()` will instantiate a new Staff object and add it to the ArrayList\u003cPatient\u003e PatientList. which contains all the Patient Objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":528,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":529,"author":{"gitId":"Chiamjiaen"},"content":"**Saving Patient Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":530,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":531,"author":{"gitId":"Chiamjiaen"},"content":"8. PatientInstance then calls `PatientStorage.storePatients()` which starts the process of writing the details of all existing Patient Objects, within the PatientList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":532,"author":{"gitId":"Chiamjiaen"},"content":"9. `PatientStorage.storePatients()` then calls `fileInit()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":533,"author":{"gitId":"Chiamjiaen"},"content":"10. Data is written and saved.","lastModifiedDate":"2021-04-09"},{"lineNumber":534,"author":{"gitId":"Chiamjiaen"},"content":"11. Control is then returned to PatientInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":535,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":536,"author":{"gitId":"Chiamjiaen"},"content":"**Design Considerations**","lastModifiedDate":"2021-04-10"},{"lineNumber":537,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":538,"author":{"gitId":"Chiamjiaen"},"content":"Using an ArrayList over a List as the main data structure:","lastModifiedDate":"2021-04-10"},{"lineNumber":539,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":540,"author":{"gitId":"Chiamjiaen"},"content":"Option 1 (Final choice): Using an ArrayList","lastModifiedDate":"2021-04-10"},{"lineNumber":541,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Able to access a patient given the index and allows for more flexibility in the methods used.","lastModifiedDate":"2021-04-10"},{"lineNumber":542,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Slow accessing when storing and loading as an ArrayList takes more resources than a List.","lastModifiedDate":"2021-04-10"},{"lineNumber":543,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":544,"author":{"gitId":"Chiamjiaen"},"content":"Option 2 : Using a List","lastModifiedDate":"2021-04-10"},{"lineNumber":545,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Able to load and store very fast and also able to perform functions like \"list\" fast.","lastModifiedDate":"2021-04-10"},{"lineNumber":546,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: No random access and thus made certain functions more troublesome code wise.","lastModifiedDate":"2021-04-10"},{"lineNumber":547,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":548,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":549,"author":{"gitId":"blank-bank"},"content":"### 5.2.3 Delete","lastModifiedDate":"2021-04-07"},{"lineNumber":550,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":551,"author":{"gitId":"Chiamjiaen"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":552,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":553,"author":{"gitId":"Chiamjiaen"},"content":"The function Delete takes in 1 compulsory field (Patient ID) to identity and delete the Patient Object from the list of Patient Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a PatientDelete Command object is created. The PatientDelete command object will be executed to iterate through the list of Patient Objects. If Patient Object exists, it will be removed. Else an error message will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":554,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":555,"author":{"gitId":"Chiamjiaen"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":556,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":557,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":558,"author":{"gitId":"Chiamjiaen"},"content":"\t- Invalid Patient ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":559,"author":{"gitId":"Chiamjiaen"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":560,"author":{"gitId":"Chiamjiaen"},"content":"\t- Inputs that only consist of spaces","lastModifiedDate":"2021-04-09"},{"lineNumber":561,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":562,"author":{"gitId":"Chiamjiaen"},"content":"**Format**","lastModifiedDate":"2021-04-09"},{"lineNumber":563,"author":{"gitId":"Chiamjiaen"},"content":"`delete/[Patient ID]`","lastModifiedDate":"2021-04-09"},{"lineNumber":564,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":565,"author":{"gitId":"Chiamjiaen"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":566,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":567,"author":{"gitId":"Chiamjiaen"},"content":"1. If the command recognised is the delete command, `patientParse()` calls `checker.checkLength()` and `checker.checkID()` to ensure data entered is valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":568,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":569,"author":{"gitId":"Chiamjiaen"},"content":"**Creating PatientDelete command**","lastModifiedDate":"2021-04-09"},{"lineNumber":570,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":571,"author":{"gitId":"Chiamjiaen"},"content":"2. If the input data is valid, a PatientDelete Command object is created","lastModifiedDate":"2021-04-09"},{"lineNumber":572,"author":{"gitId":"Chiamjiaen"},"content":"3. The PatientDelete Command object is returned to `PatientInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":573,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":574,"author":{"gitId":"Chiamjiaen"},"content":"**Deleting Patient Object using User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":575,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":576,"author":{"gitId":"Chiamjiaen"},"content":"4. PatientInstance then executes the PatientDelete Command object to begin the process of deleting the referenced Patient object","lastModifiedDate":"2021-04-09"},{"lineNumber":577,"author":{"gitId":"Chiamjiaen"},"content":"5. `PatientDelete.execute()` will call the function `PatientList.deletePatient()`","lastModifiedDate":"2021-04-09"},{"lineNumber":578,"author":{"gitId":"Chiamjiaen"},"content":"6. `PatientList.deletePatient()` will iterate through the objects in ArrayList\u003cPatient\u003e PatientList. The Patient Object referenced by the input given by the user will be deleted.","lastModifiedDate":"2021-04-09"},{"lineNumber":579,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":580,"author":{"gitId":"Chiamjiaen"},"content":"**Saving changed Staff Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":581,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":582,"author":{"gitId":"Chiamjiaen"},"content":"7. PatientInstance then calls `PatientStorage.storePatients()` which starts the process of writing the details of all existing Patient Objects, within the PatientList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":583,"author":{"gitId":"Chiamjiaen"},"content":"8. `PatientStorage.storePatients()` then calls `fileInit()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":584,"author":{"gitId":"Chiamjiaen"},"content":"9. Data is written and saved.","lastModifiedDate":"2021-04-09"},{"lineNumber":585,"author":{"gitId":"Chiamjiaen"},"content":"10. Control is then returned to PatientInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":586,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":587,"author":{"gitId":"Chiamjiaen"},"content":"**Design Considerations**","lastModifiedDate":"2021-04-10"},{"lineNumber":588,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":589,"author":{"gitId":"Chiamjiaen"},"content":"Using an iterator to store the location of the item being deleted:","lastModifiedDate":"2021-04-10"},{"lineNumber":590,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":591,"author":{"gitId":"Chiamjiaen"},"content":"Option 1 (Final choice): Not using an iterator","lastModifiedDate":"2021-04-10"},{"lineNumber":592,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Using the inbuilt commands to iterate through to find the item to delete seems more straightforward.","lastModifiedDate":"2021-04-10"},{"lineNumber":593,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: The flexibility of the data manipulation may be restrictive and this may result in future functions being harder to implement.","lastModifiedDate":"2021-04-10"},{"lineNumber":594,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":595,"author":{"gitId":"Chiamjiaen"},"content":"Option 2 : Using an iterator","lastModifiedDate":"2021-04-10"},{"lineNumber":596,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: An iterator allows for more flexible data access as it allows for more efficient deletion of a block of data and it helps to keep the location of where data was manipulated.","lastModifiedDate":"2021-04-10"},{"lineNumber":597,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Maintenance of the iterator is very difficult and it may not be worth the effort to implement when solutions exist that only require inbuilt functions.","lastModifiedDate":"2021-04-10"},{"lineNumber":598,"author":{"gitId":"Chiamjiaen"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":599,"author":{"gitId":"Chiamjiaen"},"content":"  ","lastModifiedDate":"2021-04-09"},{"lineNumber":600,"author":{"gitId":"blank-bank"},"content":"### 5.2.4 List","lastModifiedDate":"2021-04-07"},{"lineNumber":601,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":602,"author":{"gitId":"Chiamjiaen"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":603,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":604,"author":{"gitId":"Chiamjiaen"},"content":"The function List does not take in any additional inputs, in order to show the user a list of current Patient objects in the database. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a PatientList Command object is created. PatientList command object will be executed to iterate through the list of Patient Objects. Patient Objects will then be displayed based on the user given input.","lastModifiedDate":"2021-04-09"},{"lineNumber":605,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":606,"author":{"gitId":"Chiamjiaen"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":607,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":608,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":609,"author":{"gitId":"Chiamjiaen"},"content":"\t- Any input apart from Blank Input or a single delimiting slash.","lastModifiedDate":"2021-04-09"},{"lineNumber":610,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":611,"author":{"gitId":"Chiamjiaen"},"content":"**Format**","lastModifiedDate":"2021-04-09"},{"lineNumber":612,"author":{"gitId":"Chiamjiaen"},"content":"`list`","lastModifiedDate":"2021-04-09"},{"lineNumber":613,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":614,"author":{"gitId":"Chiamjiaen"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":615,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":616,"author":{"gitId":"Chiamjiaen"},"content":"1. If the command recognised is the list command, `patientParse()` calls `checker.checkLength()` to ensure data entered is valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":617,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":618,"author":{"gitId":"Chiamjiaen"},"content":"**Creating PatientList command**","lastModifiedDate":"2021-04-09"},{"lineNumber":619,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":620,"author":{"gitId":"Chiamjiaen"},"content":"2. If the input data is valid, a PatientList Command object is created","lastModifiedDate":"2021-04-09"},{"lineNumber":621,"author":{"gitId":"Chiamjiaen"},"content":"3. The PatientList Command object is returned to `PatientInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":622,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":623,"author":{"gitId":"Chiamjiaen"},"content":"**Viewing Patient Objects**","lastModifiedDate":"2021-04-09"},{"lineNumber":624,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":625,"author":{"gitId":"Chiamjiaen"},"content":"4. PatientInstance then executes the PatientList Command object to begin the process of displaying all Patient objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":626,"author":{"gitId":"Chiamjiaen"},"content":"5. `PatientList.execute()` will call the function `PatientList.listPatients()`","lastModifiedDate":"2021-04-09"},{"lineNumber":627,"author":{"gitId":"Chiamjiaen"},"content":"6. `PatientList.listPatients()` will iterate through the objects in ArrayList\u003cPatient\u003e PatientList.","lastModifiedDate":"2021-04-09"},{"lineNumber":628,"author":{"gitId":"Chiamjiaen"},"content":"7. Patient Objects will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":629,"author":{"gitId":"Chiamjiaen"},"content":"8. Control is then returned to PatientInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":630,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":631,"author":{"gitId":"Chiamjiaen"},"content":"**Design Considerations**","lastModifiedDate":"2021-04-10"},{"lineNumber":632,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":633,"author":{"gitId":"Chiamjiaen"},"content":"Using pretty print to display the listed objects:","lastModifiedDate":"2021-04-10"},{"lineNumber":634,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":635,"author":{"gitId":"Chiamjiaen"},"content":"Option 1 (Final choice): Using pretty print","lastModifiedDate":"2021-04-10"},{"lineNumber":636,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Visually appealing and neatly puts patients in rows with columns to display attributes. Better for larger lists.","lastModifiedDate":"2021-04-10"},{"lineNumber":637,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Harder to implement and sometimes causes visual errors when the names or display text become too large.","lastModifiedDate":"2021-04-10"},{"lineNumber":638,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":639,"author":{"gitId":"Chiamjiaen"},"content":"Option 2 : Printing the patients in blocks with no common rows or columns.","lastModifiedDate":"2021-04-10"},{"lineNumber":640,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Easy to implement and may be easier to show a single patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":641,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Very difficult to view when the list of patients became increasingly large.","lastModifiedDate":"2021-04-10"},{"lineNumber":642,"author":{"gitId":"Chiamjiaen"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":643,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":644,"author":{"gitId":"blank-bank"},"content":"### 5.2.5 Find","lastModifiedDate":"2021-04-07"},{"lineNumber":645,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":646,"author":{"gitId":"Chiamjiaen"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":647,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":648,"author":{"gitId":"Chiamjiaen"},"content":"The function Find takes in 1 compulsory field (keyword) to find the relvant Patient Objects within the list of Patient Objects. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. The given input is used to match with every single field of the Patient Object. If there is a match, the Patient Object will be displayed. Else, an error message will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":649,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":650,"author":{"gitId":"Chiamjiaen"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":651,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":652,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":653,"author":{"gitId":"Chiamjiaen"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":654,"author":{"gitId":"Chiamjiaen"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-09"},{"lineNumber":655,"author":{"gitId":"Chiamjiaen"},"content":"\t- Inputs that only consist of spaces","lastModifiedDate":"2021-04-09"},{"lineNumber":656,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":657,"author":{"gitId":"Chiamjiaen"},"content":"**Format**","lastModifiedDate":"2021-04-09"},{"lineNumber":658,"author":{"gitId":"Chiamjiaen"},"content":"`find/[keyword]`","lastModifiedDate":"2021-04-09"},{"lineNumber":659,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":660,"author":{"gitId":"Chiamjiaen"},"content":"\u003cimg src\u003d\"diagrams/PatientFindSD.png\"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":661,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":662,"author":{"gitId":"Chiamjiaen"},"content":"**sub-diagram to show the ref**","lastModifiedDate":"2021-04-09"},{"lineNumber":663,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":664,"author":{"gitId":"Chiamjiaen"},"content":"\u003cimg src\u003d\"diagrams/PatientFindParseSD.png\"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":665,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":666,"author":{"gitId":"Chiamjiaen"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":667,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":668,"author":{"gitId":"Chiamjiaen"},"content":"1. If the command recognised is the find command, `patientParse()` calls `checker.checkFind()` to ensure data entered is valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":669,"author":{"gitId":"Chiamjiaen"},"content":"2. `checkFind()` will call the following methods in sequence:","lastModifiedDate":"2021-04-09"},{"lineNumber":670,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":671,"author":{"gitId":"Chiamjiaen"},"content":"\t- emptySpaceCheck();","lastModifiedDate":"2021-04-09"},{"lineNumber":672,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- checkLength();","lastModifiedDate":"2021-04-09"},{"lineNumber":673,"author":{"gitId":"Chiamjiaen"},"content":"\t\t- illegalCharacterChecker();","lastModifiedDate":"2021-04-09"},{"lineNumber":674,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":675,"author":{"gitId":"Chiamjiaen"},"content":"**Creating PatientFind command**","lastModifiedDate":"2021-04-09"},{"lineNumber":676,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":677,"author":{"gitId":"Chiamjiaen"},"content":"3. If the input data exist, a PatientFind Command object is created","lastModifiedDate":"2021-04-09"},{"lineNumber":678,"author":{"gitId":"Chiamjiaen"},"content":"4. The PatientFind Command object is returned to `PatientInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":679,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":680,"author":{"gitId":"Chiamjiaen"},"content":"**Finding relevant Patient Objects**","lastModifiedDate":"2021-04-09"},{"lineNumber":681,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":682,"author":{"gitId":"Chiamjiaen"},"content":"5. PatientInstance then executes the PatientFind Command object to begin the process of finding and displaying relevant Patient objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":683,"author":{"gitId":"Chiamjiaen"},"content":"6. `PatientFind.execute()` will call the function `PatientList.findPatient()`","lastModifiedDate":"2021-04-09"},{"lineNumber":684,"author":{"gitId":"Chiamjiaen"},"content":"7. `PatientList.findPatient()` will iterate through the objects in ArrayList\u003cPatient\u003e PatientList.","lastModifiedDate":"2021-04-09"},{"lineNumber":685,"author":{"gitId":"Chiamjiaen"},"content":"8. `PatientList.findPatient()` will compare the the patient details of every Patient Object in the current list of Patient Objects with the keywork inputted by the user and discover any matches.","lastModifiedDate":"2021-04-09"},{"lineNumber":686,"author":{"gitId":"Chiamjiaen"},"content":"9. The relevant Patient Objects are then displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":687,"author":{"gitId":"Chiamjiaen"},"content":"10. Control is then returned to PatientInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":688,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":689,"author":{"gitId":"Chiamjiaen"},"content":"**Design Considerations**","lastModifiedDate":"2021-04-10"},{"lineNumber":690,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":691,"author":{"gitId":"Chiamjiaen"},"content":"Allowing `find` function to accept case-insensitive inputs:","lastModifiedDate":"2021-04-10"},{"lineNumber":692,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":693,"author":{"gitId":"Chiamjiaen"},"content":"Option 1 (Final choice): Allowing case-insensitive inputs.","lastModifiedDate":"2021-04-10"},{"lineNumber":694,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Provides the user with greater flexibility when querying the list for specific data.","lastModifiedDate":"2021-04-10"},{"lineNumber":695,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Harder to implement and may result in unwanted data being shown.","lastModifiedDate":"2021-04-10"},{"lineNumber":696,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":697,"author":{"gitId":"Chiamjiaen"},"content":"Option 2 : Only allowing case-sensitive inputs.","lastModifiedDate":"2021-04-10"},{"lineNumber":698,"author":{"gitId":"Chiamjiaen"},"content":"* Pros: Easy to implement and can be more specific.","lastModifiedDate":"2021-04-10"},{"lineNumber":699,"author":{"gitId":"Chiamjiaen"},"content":"* Cons: Harder to consistently type and very punishing for users who don\u0027t know if what they are searching for has capital letters.","lastModifiedDate":"2021-04-10"},{"lineNumber":700,"author":{"gitId":"blank-bank"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":701,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":702,"author":{"gitId":"blank-bank"},"content":"###  5.3 Doctor Appointment","lastModifiedDate":"2021-04-05"},{"lineNumber":703,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":704,"author":{"gitId":"blank-bank"},"content":"### 5.3.1 Doctor Appointment Menu","lastModifiedDate":"2021-04-07"},{"lineNumber":705,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":706,"author":{"gitId":"blank-bank"},"content":"Similar to the Start Menu, the Doctor Appointment Menu will repeatedly request user input until the `return` command is given.","lastModifiedDate":"2021-04-09"},{"lineNumber":707,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":708,"author":{"gitId":"MingShun98"},"content":"Whenever a user input is given to the Doctor Appointment Menu, the following steps will occur.","lastModifiedDate":"2021-04-09"},{"lineNumber":709,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":710,"author":{"gitId":"MingShun98"},"content":"**Launching Doctor Appointment Menu**","lastModifiedDate":"2021-04-09"},{"lineNumber":711,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":712,"author":{"gitId":"MingShun98"},"content":"1. `ToDoctorAppointment.execute()` will create and call `DoctorAppointmentInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":713,"author":{"gitId":"MingShun98"},"content":"2. `DoctorAppointmentInstance.run()` will start by loading/creating the DoctorAppointment data .txt file for database records. It will check for any signs of corrupted file when loading. Exception will be thrown if any corruption occurs.","lastModifiedDate":"2021-04-09"},{"lineNumber":714,"author":{"gitId":"MingShun98"},"content":"3. `DoctorAppointmentInstance.run()` will then repeatedly call `DoctorAppointmentParser.parse()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":715,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":716,"author":{"gitId":"MingShun98"},"content":"**Getting User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":717,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":718,"author":{"gitId":"MingShun98"},"content":"4. `DoctorAppointmentInstance.run()` will repeatedly, requesting for user input and calling `DoctorAppointmentParser.parse()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":719,"author":{"gitId":"blank-bank"},"content":"5. `parse()` will call the `smartCommandRecognition()` to assess the given user input and determine which command is most similar to the input","lastModifiedDate":"2021-04-09"},{"lineNumber":720,"author":{"gitId":"blank-bank"},"content":"6. Based on the recognised command by the system, the relevant commands will be carried out.","lastModifiedDate":"2021-04-09"},{"lineNumber":721,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":722,"author":{"gitId":"MingShun98"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":723,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":724,"author":{"gitId":"blank-bank"},"content":"### 5.3.2 Add","lastModifiedDate":"2021-04-07"},{"lineNumber":725,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":726,"author":{"gitId":"MingShun98"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":727,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":728,"author":{"gitId":"MingShun98"},"content":"The function Add takes in 5 compulsory fields (Doctor ID, Appointment ID, Patient\u0027s Name, Gender, Date) to create the DoctorAppointment Object to be added. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. A DoctorAppointmentAdd Command object is created and executed to create the DoctorAppointment Object to be added.","lastModifiedDate":"2021-04-09"},{"lineNumber":729,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":730,"author":{"gitId":"MingShun98"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":731,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":732,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":733,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Doctor ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":734,"author":{"gitId":"MingShun98"},"content":"\t- Non-existent Doctor ID ","lastModifiedDate":"2021-04-09"},{"lineNumber":735,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Appointment ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":736,"author":{"gitId":"MingShun98"},"content":"\t- Duplicated Appointment ID","lastModifiedDate":"2021-04-09"},{"lineNumber":737,"author":{"gitId":"MingShun98"},"content":"\t- Illegal Characters for Names","lastModifiedDate":"2021-04-09"},{"lineNumber":738,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Gender format","lastModifiedDate":"2021-04-09"},{"lineNumber":739,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Date format","lastModifiedDate":"2021-04-09"},{"lineNumber":740,"author":{"gitId":"MingShun98"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":741,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":742,"author":{"gitId":"MingShun98"},"content":"`add/[Doctor ID]/[Appointment ID]/[Patient\u0027s Name]/[Gender]/[Date]`","lastModifiedDate":"2021-04-09"},{"lineNumber":743,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":744,"author":{"gitId":"MingShun98"},"content":"\u003cimg src\u003d\"diagrams/DG DoctorAppSequencePlantLatest.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":745,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":746,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":747,"author":{"gitId":"MingShun98"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":748,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":749,"author":{"gitId":"blank-bank"},"content":"1. If the command recognised is the add command, `DoctorAppointmentParser.parse()` calls `MainChecker.checkNumInput()` and `DoctorAppointmentChecker.checkValidDataForAdd()` to ensure data entered is valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":750,"author":{"gitId":"MingShun98"},"content":"2. `checkValidDataForAdd()` will call the following function in sequence:","lastModifiedDate":"2021-04-09"},{"lineNumber":751,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":752,"author":{"gitId":"MingShun98"},"content":"\t- isValidDocID()\t","lastModifiedDate":"2021-04-09"},{"lineNumber":753,"author":{"gitId":"MingShun98"},"content":"\t- isValidAppointmentID()","lastModifiedDate":"2021-04-09"},{"lineNumber":754,"author":{"gitId":"MingShun98"},"content":"\t- illegalCharacterChecker()","lastModifiedDate":"2021-04-09"},{"lineNumber":755,"author":{"gitId":"MingShun98"},"content":"\t- isValidGender()","lastModifiedDate":"2021-04-09"},{"lineNumber":756,"author":{"gitId":"MingShun98"},"content":"\t- checkValidDate(); ","lastModifiedDate":"2021-04-09"},{"lineNumber":757,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":758,"author":{"gitId":"MingShun98"},"content":"**Creating DoctorAppointmentAdd command**","lastModifiedDate":"2021-04-09"},{"lineNumber":759,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":760,"author":{"gitId":"MingShun98"},"content":"3. If the input data is valid, a DoctorAppointment Command object is created. Otherwise a relevant error will be thrown.","lastModifiedDate":"2021-04-09"},{"lineNumber":761,"author":{"gitId":"blank-bank"},"content":"4. The Command object is returned to `DoctorAppoitmentInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":762,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":763,"author":{"gitId":"MingShun98"},"content":"**Creating DoctorAppointment Object with User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":764,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":765,"author":{"gitId":"MingShun98"},"content":"5. DoctorAppointmentInstance then executes the DoctorAppointment Add Command object by running `DoctorAppointmentAdd.execute()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":766,"author":{"gitId":"MingShun98"},"content":"6. `AppointmentList.addAppointment()` will be called in which a DoctorAppointment object will be created and added into the ArrayList\u003cDoctorAppointment\u003e appointmentList, which contains all the DoctorAppointment Objects. ","lastModifiedDate":"2021-04-09"},{"lineNumber":767,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":768,"author":{"gitId":"MingShun98"},"content":"**Saving DoctorAppointment Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":769,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":770,"author":{"gitId":"blank-bank"},"content":"7. `AppointmentList.addAppointment()` then calls `DoctorAppointmentStorage.writeToFile()` which all existing DoctorAppointment Objects within the appointmentList is written into a DoctorAppointment.txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":771,"author":{"gitId":"blank-bank"},"content":"8. `staffStorage.writeToFile()` then calls `createFile()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":772,"author":{"gitId":"blank-bank"},"content":"9. Control is then returned to DoctorAppointmentInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":773,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":774,"author":{"gitId":"MingShun98"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":775,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":776,"author":{"gitId":"blank-bank"},"content":"### 5.3.3 Delete","lastModifiedDate":"2021-04-07"},{"lineNumber":777,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":778,"author":{"gitId":"MingShun98"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":779,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":780,"author":{"gitId":"blank-bank"},"content":"The delete function takes in 1 compulsory field (Doctor ID/ Appointment ID) to identity and delete the corresponding DoctorAppointment Object from ArrayList \u003cDoctorAppointment\u003e appointmentList . Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a DoctorAppointmentDelete Command object is created and executed in which the program will iterate through appointmentList. If the desired DoctorID or Appointment ID exists, it will be removed. Else an error message will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":781,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":782,"author":{"gitId":"MingShun98"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":783,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":784,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":785,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Doctor ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":786,"author":{"gitId":"MingShun98"},"content":"\t- Non-existent Doctor ID","lastModifiedDate":"2021-04-09"},{"lineNumber":787,"author":{"gitId":"MingShun98"},"content":"\t- Invalid Appointment ID format","lastModifiedDate":"2021-04-09"},{"lineNumber":788,"author":{"gitId":"MingShun98"},"content":"\t- Non-existent Appointment ID","lastModifiedDate":"2021-04-09"},{"lineNumber":789,"author":{"gitId":"MingShun98"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":790,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":791,"author":{"gitId":"MingShun98"},"content":"`delete/[Doctor ID/ Appointment ID]`","lastModifiedDate":"2021-04-09"},{"lineNumber":792,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":793,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":794,"author":{"gitId":"MingShun98"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":795,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":796,"author":{"gitId":"MingShun98"},"content":"1. If the command is recognised as the delete command, `DoctorAppointmentParser.parse()` calls `MainChecker.checkNumInput()` and `DoctorAppointmentChecker.checkValidDataForDelete()` to ensure that the inputs are valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":797,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":798,"author":{"gitId":"MingShun98"},"content":"**Creating DoctorAppointmentDelete command**","lastModifiedDate":"2021-04-09"},{"lineNumber":799,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":800,"author":{"gitId":"MingShun98"},"content":"2. A DoctorAppointmentDelete Command object is created if the inputs are valid. ","lastModifiedDate":"2021-04-09"},{"lineNumber":801,"author":{"gitId":"MingShun98"},"content":"3. The Command object is returned to `DoctorAppointmentInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":802,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":803,"author":{"gitId":"MingShun98"},"content":"**Deleting DoctorAppointment Object using User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":804,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":805,"author":{"gitId":"MingShun98"},"content":"4. DoctorAppointmentInstance then executes the DoctorAppointmentDelete Command object by running `DoctorAppointmentDelete.execute()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":806,"author":{"gitId":"MingShun98"},"content":"5. `AppointmentList.deleteAppointment()` is called, which iterates through the objects in ArrayList\u003cDoctorAppointment\u003e appointmentList. The DoctorAppointment Object matching the input given by the user will be removed from the array list.","lastModifiedDate":"2021-04-09"},{"lineNumber":807,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":808,"author":{"gitId":"MingShun98"},"content":"**Saving changed DoctorAppointment Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":809,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":810,"author":{"gitId":"blank-bank"},"content":"6. `AppointmentList.deleteAppointment()` then calls `DoctorAppointmentStorage.writeToFile()` which rewrites the updated appointmentList into the DoctorAppointment.txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":811,"author":{"gitId":"blank-bank"},"content":"7. Control is then returned to StaffInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":812,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":813,"author":{"gitId":"MingShun98"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":814,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":815,"author":{"gitId":"MingShun98"},"content":"### 5.3.4 List all","lastModifiedDate":"2021-04-09"},{"lineNumber":816,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":817,"author":{"gitId":"MingShun98"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":818,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":819,"author":{"gitId":"MingShun98"},"content":"The function lists all Doctor Appointment Objects currently in ArrayList \u003cDoctorAppointment\u003e appointmentList. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a DoctorAppointmentList Command object is created and executed in which the program will iterate and display all DoctorAppoinment Objects currently within the array list.","lastModifiedDate":"2021-04-09"},{"lineNumber":820,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":821,"author":{"gitId":"MingShun98"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":822,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":823,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":824,"author":{"gitId":"MingShun98"},"content":"\t- Any input apart from Blank Input (i.e Empty input) OR \"all\" OR \"Appointment ID\" OR \"Doctor ID\" ","lastModifiedDate":"2021-04-09"},{"lineNumber":825,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":826,"author":{"gitId":"MingShun98"},"content":"`list/all`","lastModifiedDate":"2021-04-09"},{"lineNumber":827,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":828,"author":{"gitId":"MingShun98"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":829,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":830,"author":{"gitId":"MingShun98"},"content":"1. If the command recognised is the list command, `DoctorAppointmentParser.parse()` calls `MainChecker.checkNumInput()` and `DoctorAppointmentChecker.checkValidDataForList()` to check and verify the validity of inputs accompanied by the list command, if any.","lastModifiedDate":"2021-04-09"},{"lineNumber":831,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":832,"author":{"gitId":"MingShun98"},"content":"**Creating DoctorAppointmentList command**","lastModifiedDate":"2021-04-09"},{"lineNumber":833,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":834,"author":{"gitId":"MingShun98"},"content":"2. A DoctorAppointmentList Command object is created if the inputs are valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":835,"author":{"gitId":"MingShun98"},"content":"3. The Command object is returned to `DoctorAppointmentInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":836,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":837,"author":{"gitId":"MingShun98"},"content":"**Viewing DoctorAppointment Objects**","lastModifiedDate":"2021-04-09"},{"lineNumber":838,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":839,"author":{"gitId":"MingShun98"},"content":"4. DoctorAppointmentInstance then executes the DoctorAppointmentList Command object by running `DoctorAppointmentList.execute()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":840,"author":{"gitId":"MingShun98"},"content":"5. `AppointmentList.listAppointment()` is called, and will iterate through the objects in ArrayList\u003cDoctorAppointment\u003e appointmentList.","lastModifiedDate":"2021-04-09"},{"lineNumber":841,"author":{"gitId":"MingShun98"},"content":"6. All DoctorAppointment Objects in the array list will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":842,"author":{"gitId":"MingShun98"},"content":"7. Control is then returned to DoctorAppointmentInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":843,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":844,"author":{"gitId":"MingShun98"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":845,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":846,"author":{"gitId":"MingShun98"},"content":"### 5.3.5 List by Doctor ID or Appointment ID","lastModifiedDate":"2021-04-09"},{"lineNumber":847,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":848,"author":{"gitId":"MingShun98"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":849,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":850,"author":{"gitId":"MingShun98"},"content":"The function list takes in 1 compulsory field (keyword) to list the relevant DoctorAppoitment Objects currently in ArrayList \u003cDoctorAppointment\u003e appointmentList.Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a DoctorAppointmentList Command object is created and executed in which the program will iterate and display the DoctorAppoinment Objects matching the user input currently within the array list.","lastModifiedDate":"2021-04-09"},{"lineNumber":851,"author":{"gitId":"MingShun98"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":852,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":853,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":854,"author":{"gitId":"MingShun98"},"content":"\t- Any input apart from Blank Input (i.e Empty input) OR \"all\" OR \"Appointment ID\" OR \"Doctor ID\" ","lastModifiedDate":"2021-04-09"},{"lineNumber":855,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":856,"author":{"gitId":"MingShun98"},"content":"`list/[Doctor ID/ Appointment ID]`","lastModifiedDate":"2021-04-09"},{"lineNumber":857,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":858,"author":{"gitId":"MingShun98"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":859,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":860,"author":{"gitId":"MingShun98"},"content":"1. If the command recognised is the list command, `DoctorAppointmentParser.parse()` calls `MainChecker.checkNumInput()` and `DoctorAppointmentChecker.checkValidDataForList()` to check and verify the validity of inputs accompanied by the list command, if any.","lastModifiedDate":"2021-04-09"},{"lineNumber":861,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":862,"author":{"gitId":"MingShun98"},"content":"**Creating DoctorAppointmentList command**","lastModifiedDate":"2021-04-09"},{"lineNumber":863,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":864,"author":{"gitId":"MingShun98"},"content":"2. A DoctorAppointmentList Command object is created if the inputs are valid.","lastModifiedDate":"2021-04-09"},{"lineNumber":865,"author":{"gitId":"MingShun98"},"content":"3. The Command object is returned to `DoctorAppointmentInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":866,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":867,"author":{"gitId":"MingShun98"},"content":"**Viewing DoctorAppointment Objects**","lastModifiedDate":"2021-04-09"},{"lineNumber":868,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":869,"author":{"gitId":"MingShun98"},"content":"4. DoctorAppointmentInstance then executes the DoctorAppointmentList Command object by running `DoctorAppointmentList.execute()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":870,"author":{"gitId":"MingShun98"},"content":"5. `AppointmentList.listAppointment()` is called, and will iterate through the objects in ArrayList\u003cDoctorAppointment\u003e appointmentList.","lastModifiedDate":"2021-04-09"},{"lineNumber":871,"author":{"gitId":"MingShun98"},"content":"6. DoctorAppointment Objects matching the user input present in the array list will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":872,"author":{"gitId":"MingShun98"},"content":"7. Control is then returned to DoctorAppointmentInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":873,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":874,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":875,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":876,"author":{"gitId":"blank-bank"},"content":"###  5.4 Nurse Schedule","lastModifiedDate":"2021-04-05"},{"lineNumber":877,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":878,"author":{"gitId":"blank-bank"},"content":"### 5.4.1 Nurse Schedule Menu","lastModifiedDate":"2021-04-07"},{"lineNumber":879,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":880,"author":{"gitId":"AlexanderTanJunAn"},"content":"Similar to the start menu, the Nurse Schedule menu will repeatedly request user input until the `return` command is given.","lastModifiedDate":"2021-04-07"},{"lineNumber":881,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":882,"author":{"gitId":"AlexanderTanJunAn"},"content":"Whenever a user input is given to the Nurse Schedule Menu, the following steps will occur","lastModifiedDate":"2021-04-07"},{"lineNumber":883,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":884,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Launching Nurse Schedule Menu**","lastModifiedDate":"2021-04-07"},{"lineNumber":885,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":886,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. `ToNurseScheduleInstance.execute()` will create and call `NurseScheduleInstance.runCommandLoopUntilExit()`.","lastModifiedDate":"2021-04-07"},{"lineNumber":887,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":888,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. `runCommandLoopUntilExit()` will start by loading/creating the NurseSchedule.txt for database records. It will check for any signs of file corruption when loading. An exception will be thrown if any corruption is present.","lastModifiedDate":"2021-04-07"},{"lineNumber":889,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":890,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. `runCommandLoopUntilExit()` will then repeatedly call nurseParse().","lastModifiedDate":"2021-04-07"},{"lineNumber":891,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":892,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Getting User Input**","lastModifiedDate":"2021-04-07"},{"lineNumber":893,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":894,"author":{"gitId":"AlexanderTanJunAn"},"content":"4. User inputs are repeatedly requested by `runCommandLoopUntilExit`.","lastModifiedDate":"2021-04-07"},{"lineNumber":895,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":896,"author":{"gitId":"AlexanderTanJunAn"},"content":"5. `nurseParse()` will call `smartCommandRecognition` to assess the given user input and determine which command is the most similar to the input.","lastModifiedDate":"2021-04-07"},{"lineNumber":897,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":898,"author":{"gitId":"AlexanderTanJunAn"},"content":"6. Based on the recognised command, the relevant execution will be carried out.","lastModifiedDate":"2021-04-07"},{"lineNumber":899,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":900,"author":{"gitId":"blank-bank"},"content":"### 5.4.2 Add","lastModifiedDate":"2021-04-07"},{"lineNumber":901,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":902,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Implementation**","lastModifiedDate":"2021-04-07"},{"lineNumber":903,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":904,"author":{"gitId":"AlexanderTanJunAn"},"content":"The function Add takes in 3 compulsory fields (Nurse ID, Patient ID, Date) to create a new Nurse Schedule object to be added. The Nurse ID, Patient ID and Date inputs will be first checked to ensure validty. Any invalid input detected will result in an Exception thrown and command will be aborted. Else, a NurseScheduleAddCommand object is created and executed which will create a NurseSchedule object to be added.","lastModifiedDate":"2021-04-08"},{"lineNumber":905,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":906,"author":{"gitId":"AlexanderTanJunAn"},"content":"Invalid Inputs include:","lastModifiedDate":"2021-04-07"},{"lineNumber":907,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":908,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":909,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Invalid Nurse ID or Patient ID format","lastModifiedDate":"2021-04-07"},{"lineNumber":910,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Non-existent Nurse ID or Patient ID","lastModifiedDate":"2021-04-07"},{"lineNumber":911,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Blank input","lastModifiedDate":"2021-04-07"},{"lineNumber":912,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-07"},{"lineNumber":913,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Illegal date format","lastModifiedDate":"2021-04-07"},{"lineNumber":914,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Duplicate schedules (i.e similar Patient ID and date)","lastModifiedDate":"2021-04-07"},{"lineNumber":915,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t","lastModifiedDate":"2021-04-07"},{"lineNumber":916,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Format**: `add/[Nurse ID]/[Date (DDMMYYYY)]`","lastModifiedDate":"2021-04-10"},{"lineNumber":917,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":918,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Checking validity of data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":919,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":920,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. If the command recognised is the add command, the parameters will first be checked for their validity. The following functios will be called in sequence:","lastModifiedDate":"2021-04-07"},{"lineNumber":921,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- isValidDate()","lastModifiedDate":"2021-04-07"},{"lineNumber":922,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- checkNumInput()","lastModifiedDate":"2021-04-07"},{"lineNumber":923,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- illegalCharacterChecker()","lastModifiedDate":"2021-04-07"},{"lineNumber":924,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t","lastModifiedDate":"2021-04-07"},{"lineNumber":925,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Creating NurseScheduleAddCommand object with User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":926,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":927,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. If the parameters are valid, a NurseScheduleAddCommand object is created, which will be passed back to `NurseScheduleInstance.runCommandLoopUntilExit()`.","lastModifiedDate":"2021-04-07"},{"lineNumber":928,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":929,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. The Command objected is then executed and `NurseScheduleList.addSchedule()` will be called which creates a NurseSchedule object an adds it into the array list.","lastModifiedDate":"2021-04-09"},{"lineNumber":930,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":931,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Saving NurseSchedule objects into .txt file**","lastModifiedDate":"2021-04-07"},{"lineNumber":932,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":933,"author":{"gitId":"AlexanderTanJunAn"},"content":"4. The command loop then calls `NurseScheduleStorage.writeToFile()` which starts the process of writing detials of all existing Nurse Schedule objects within the Arraylist into a specific .txt file.","lastModifiedDate":"2021-04-07"},{"lineNumber":934,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":935,"author":{"gitId":"AlexanderTanJunAn"},"content":"5. Control is then returned to NurseScheduleInstance.","lastModifiedDate":"2021-04-07"},{"lineNumber":936,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":937,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":938,"author":{"gitId":"blank-bank"},"content":"### 5.4.3 Delete","lastModifiedDate":"2021-04-07"},{"lineNumber":939,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":940,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Implementation**","lastModifiedDate":"2021-04-07"},{"lineNumber":941,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":942,"author":{"gitId":"AlexanderTanJunAn"},"content":"The delete function takes in 2 compulsory field (Nurse ID, Date) to identify and delete the Nurse Schedule object from the arraylist of Nurse Schedule objects. The Nurse ID and date will first be checked for its validity. Any invalid input detected will result in an exception thrown and command will be aborted. Else, a NurseScheduleDeleteCommand object is created and executed.","lastModifiedDate":"2021-04-08"},{"lineNumber":943,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":944,"author":{"gitId":"AlexanderTanJunAn"},"content":"Invalid Inputs include:","lastModifiedDate":"2021-04-07"},{"lineNumber":945,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":946,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":947,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Invalid Nurse ID format","lastModifiedDate":"2021-04-07"},{"lineNumber":948,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Non-existent Nurse ID","lastModifiedDate":"2021-04-07"},{"lineNumber":949,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Blank input","lastModifiedDate":"2021-04-07"},{"lineNumber":950,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-07"},{"lineNumber":951,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Illegal date format","lastModifiedDate":"2021-04-07"},{"lineNumber":952,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t","lastModifiedDate":"2021-04-07"},{"lineNumber":953,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Format**: `delete/[Nurse ID]/[Date (DDMMYYYY)]`","lastModifiedDate":"2021-04-10"},{"lineNumber":954,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":955,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Checking validity of data input**","lastModifiedDate":"2021-04-07"},{"lineNumber":956,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":957,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. If the command is recognised as a delete command, the parameters provided will first be checked for its validity.","lastModifiedDate":"2021-04-07"},{"lineNumber":958,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":959,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Creating NurseScheduleDeleteCommand object**","lastModifiedDate":"2021-04-09"},{"lineNumber":960,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":961,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. If the parameters are valid, a NurseScheduleDeleteCommand object is created, which will be passed back to `NurseScheduleInstance.runCommandLoopUntilExit()`.","lastModifiedDate":"2021-04-07"},{"lineNumber":962,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":963,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. `NurseScheduleDelete.execute()` will call the function `NurseScheduleList.deleteSchedule()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":964,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":965,"author":{"gitId":"AlexanderTanJunAn"},"content":"4. `deleteSchedule` iterates through the arraylist and removes the first object that matches the user input given.","lastModifiedDate":"2021-04-07"},{"lineNumber":966,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":967,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Saving updated NurseSchedule objects into .txt file**","lastModifiedDate":"2021-04-07"},{"lineNumber":968,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":969,"author":{"gitId":"AlexanderTanJunAn"},"content":"5. `runCommandLoopUntilExit()` will then call `NurseScheduleStorage.writeToFile()` which starts the process of writing detials of all existing Nurse Schedule objects within the Arraylist into a specific .txt file.","lastModifiedDate":"2021-04-07"},{"lineNumber":970,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":971,"author":{"gitId":"AlexanderTanJunAn"},"content":"6. Control is then returned to NurseScheduleInstance.","lastModifiedDate":"2021-04-07"},{"lineNumber":972,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":973,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.4.4 List all","lastModifiedDate":"2021-04-08"},{"lineNumber":974,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":975,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Implementation**","lastModifiedDate":"2021-04-08"},{"lineNumber":976,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":977,"author":{"gitId":"AlexanderTanJunAn"},"content":"This function lists all Nurse Schedule objects, sorted by earliest added Nurse ID, then sorted by earliest date. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a NurseScheduleListCommand object is created. NurseScheduleListCommand object will be executed to iterate through the arraylist of Nurse Schedule objects. Nurse Schedule Objects will then be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":978,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":979,"author":{"gitId":"AlexanderTanJunAn"},"content":"Invalid Inputs include:","lastModifiedDate":"2021-04-08"},{"lineNumber":980,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":981,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":982,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Any input apart from \"all\" OR \"NurseID\"","lastModifiedDate":"2021-04-08"},{"lineNumber":983,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":984,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Format**: `list/all`","lastModifiedDate":"2021-04-10"},{"lineNumber":985,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":986,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cimg src\u003d\"diagrams/NurseScheduleListSD.png\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":987,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":988,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Checking validity of data input**","lastModifiedDate":"2021-04-08"},{"lineNumber":989,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":990,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. If the command recognised is the list command, the number of fields in inputs will first be checked.","lastModifiedDate":"2021-04-08"},{"lineNumber":991,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":992,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Creating NurseScheduleListCommand object**","lastModifiedDate":"2021-04-09"},{"lineNumber":993,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":994,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. If the input is valid, a NurseScheduleListCommand object is created.","lastModifiedDate":"2021-04-08"},{"lineNumber":995,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":996,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. The NurseScheduleListCommand object is returned to `NurseScheduleInstance.runCommandLoopUntilExit()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":997,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":998,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Viewing Nurse Schedule objects**","lastModifiedDate":"2021-04-08"},{"lineNumber":999,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1000,"author":{"gitId":"AlexanderTanJunAn"},"content":"4. NurseScheduleInstance then executes the NurseScheduleListCommand object to begin the process of displaying Nurse Schedule objects.","lastModifiedDate":"2021-04-08"},{"lineNumber":1001,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1002,"author":{"gitId":"AlexanderTanJunAn"},"content":"5. `NurseScheduleListCommand.execute()` will call the function `NurseScheduleList.listSchedules()` which calls `listAllSchedules()`.","lastModifiedDate":"2021-04-10"},{"lineNumber":1003,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1004,"author":{"gitId":"AlexanderTanJunAn"},"content":"6. `listAllSchedules()` iterates through the arraylist of Nurse Schedule objects, printing all schedules.","lastModifiedDate":"2021-04-08"},{"lineNumber":1005,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1006,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1007,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.4.5 List by Nurse ID","lastModifiedDate":"2021-04-08"},{"lineNumber":1008,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1009,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Implementation**","lastModifiedDate":"2021-04-08"},{"lineNumber":1010,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1011,"author":{"gitId":"AlexanderTanJunAn"},"content":"This function lists specified Nurse Schedule objects, sorted by earliest date. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a NurseScheduleListCommand object is created. NurseScheduleListCommand object will be executed to iterate through the arraylist of Nurse Schedule objects. Nurse Schedule objects will then be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":1012,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1013,"author":{"gitId":"AlexanderTanJunAn"},"content":"Invalid Inputs include:","lastModifiedDate":"2021-04-08"},{"lineNumber":1014,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1015,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":1016,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t- Any input apart from \"all\" OR \"NurseID\"","lastModifiedDate":"2021-04-08"},{"lineNumber":1017,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1018,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Format**: `list/[Nurse ID]`","lastModifiedDate":"2021-04-10"},{"lineNumber":1019,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1020,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Checking validity of data input**","lastModifiedDate":"2021-04-08"},{"lineNumber":1021,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1022,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. If the command recognised is the list command, the number of fields in inputs will first be checked.","lastModifiedDate":"2021-04-08"},{"lineNumber":1023,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1024,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Creating NurseScheduleListCommand object**","lastModifiedDate":"2021-04-09"},{"lineNumber":1025,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1026,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. If the input is valid, a NurseScheduleListCommand object is created.","lastModifiedDate":"2021-04-08"},{"lineNumber":1027,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1028,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. The NurseScheduleListCommand object is returned to `NurseScheduleInstance.runCommandLoopUntilExit()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":1029,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1030,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Viewing Nurse Schedule objects**","lastModifiedDate":"2021-04-08"},{"lineNumber":1031,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1032,"author":{"gitId":"AlexanderTanJunAn"},"content":"4. NurseScheduleInstance then executes the NurseScheduleListCommand object to begin the process of displaying Nurse Schedule objects.","lastModifiedDate":"2021-04-08"},{"lineNumber":1033,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1034,"author":{"gitId":"AlexanderTanJunAn"},"content":"5. `NurseScheduleListCommand.execute()` will call the function `NurseScheduleList.listSchedules()` which calls `getSchedulesByID`.","lastModifiedDate":"2021-04-10"},{"lineNumber":1035,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":1036,"author":{"gitId":"AlexanderTanJunAn"},"content":"6. `getSchedulesByID` iterates through the arraylist of Nurse Schedule objects, printing schedules of the relevant Nurse ID.","lastModifiedDate":"2021-04-08"},{"lineNumber":1037,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":1038,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":1039,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1040,"author":{"gitId":"NoorSarrah"},"content":"###  5.5 Inventory","lastModifiedDate":"2021-04-10"},{"lineNumber":1041,"author":{"gitId":"NoorSarrah"},"content":"###  5.5.1 Inventory Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1042,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1043,"author":{"gitId":"NoorSarrah"},"content":"Similar to the Start Menu, the Inventory Menu will repeatedly request user input until the `return` command is given.","lastModifiedDate":"2021-04-09"},{"lineNumber":1044,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1045,"author":{"gitId":"NoorSarrah"},"content":"Whenever a user input is given to the Inventory Menu, the following steps will occur.","lastModifiedDate":"2021-04-09"},{"lineNumber":1046,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1047,"author":{"gitId":"NoorSarrah"},"content":"**Launching Inventory Menu**","lastModifiedDate":"2021-04-09"},{"lineNumber":1048,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1049,"author":{"gitId":"NoorSarrah"},"content":"1. `ToInventoryInstance.execute()` will create and call `InventoryInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":1050,"author":{"gitId":"NoorSarrah"},"content":"2. `InventoryInstance.run()` will start by loading/creating the Inventory data .txt file for Inventory database records. It will check for any signs of corrupted file when loading. Exception will be thrown if any corruption occurs.","lastModifiedDate":"2021-04-09"},{"lineNumber":1051,"author":{"gitId":"NoorSarrah"},"content":"3. `InventoryInstance.run()` will then repeatedly call `InventoryParser()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":1052,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1053,"author":{"gitId":"NoorSarrah"},"content":"**Getting User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1054,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1055,"author":{"gitId":"NoorSarrah"},"content":"4. `InventoryInstance.run()` will repeatedly request for user input and call `InventoryParser.inventoryParse()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":1056,"author":{"gitId":"NoorSarrah"},"content":"5. `inventoryParse()` will call the `smartCommandRecognition()` to assess the given user input and determine which command is most similar to the input","lastModifiedDate":"2021-04-09"},{"lineNumber":1057,"author":{"gitId":"NoorSarrah"},"content":"6. Based on the recognised command by the system, the relevant commands will be carried out.","lastModifiedDate":"2021-04-09"},{"lineNumber":1058,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1059,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":1060,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1061,"author":{"gitId":"NoorSarrah"},"content":"### 5.5.2 Add","lastModifiedDate":"2021-04-10"},{"lineNumber":1062,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1063,"author":{"gitId":"NoorSarrah"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":1064,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1065,"author":{"gitId":"NoorSarrah"},"content":"The function Add takes in 3 compulsory fields (Drug Name, Price, Quantity) to create the Inventory Object to be added.  Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. A InventoryAdd Command object is created. InventoryAdd command object will be executed to create the Inventory Object to be added.","lastModifiedDate":"2021-04-09"},{"lineNumber":1066,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1067,"author":{"gitId":"NoorSarrah"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":1068,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1069,"author":{"gitId":"NoorSarrah"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":1070,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid Price ","lastModifiedDate":"2021-04-09"},{"lineNumber":1071,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid Quantity","lastModifiedDate":"2021-04-09"},{"lineNumber":1072,"author":{"gitId":"NoorSarrah"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":1073,"author":{"gitId":"NoorSarrah"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-09"},{"lineNumber":1074,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1075,"author":{"gitId":"NoorSarrah"},"content":"`add/[Drug Name]/[Price]/[Quantity]`","lastModifiedDate":"2021-04-09"},{"lineNumber":1076,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1077,"author":{"gitId":"NoorSarrah"},"content":"*upload diagram*","lastModifiedDate":"2021-04-09"},{"lineNumber":1078,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1079,"author":{"gitId":"NoorSarrah"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1080,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1081,"author":{"gitId":"NoorSarrah"},"content":"1. If the command recognised is the add command, `InventoryParser.parse()` calls `InventoryChecker.checkAdd()`, `MainChecker.checkNumInput()`, and `MainChecker.checkBlankInput()` to ensure data entered is valid","lastModifiedDate":"2021-04-09"},{"lineNumber":1082,"author":{"gitId":"NoorSarrah"},"content":"2. `checkAdd()` will call the following function in sequence:","lastModifiedDate":"2021-04-09"},{"lineNumber":1083,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1084,"author":{"gitId":"NoorSarrah"},"content":"\t- emptySpaceCheck()\t","lastModifiedDate":"2021-04-09"},{"lineNumber":1085,"author":{"gitId":"NoorSarrah"},"content":"\t- checkStorageLength()","lastModifiedDate":"2021-04-09"},{"lineNumber":1086,"author":{"gitId":"NoorSarrah"},"content":"\t- illegalCharacterChecker()","lastModifiedDate":"2021-04-09"},{"lineNumber":1087,"author":{"gitId":"NoorSarrah"},"content":"\t- checkPrice()","lastModifiedDate":"2021-04-09"},{"lineNumber":1088,"author":{"gitId":"NoorSarrah"},"content":"\t- checkQuantity()","lastModifiedDate":"2021-04-09"},{"lineNumber":1089,"author":{"gitId":"NoorSarrah"},"content":"\t- checkDuplicate()","lastModifiedDate":"2021-04-09"},{"lineNumber":1090,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1091,"author":{"gitId":"NoorSarrah"},"content":"**Creating InventoryAdd command**","lastModifiedDate":"2021-04-09"},{"lineNumber":1092,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1093,"author":{"gitId":"NoorSarrah"},"content":"3. If the input data is valid, a InventoryAdd Command object is created. Otherwise a relevant error is thrown.","lastModifiedDate":"2021-04-09"},{"lineNumber":1094,"author":{"gitId":"NoorSarrah"},"content":"4. The InventoryAdd Command object is returned to `InventoryInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":1095,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1096,"author":{"gitId":"NoorSarrah"},"content":"**Creating Inventory Object with User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1097,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1098,"author":{"gitId":"NoorSarrah"},"content":"5. InventoryInstance then executes the InventoryAdd Command object by running `InventoryAdd.execute()`.","lastModifiedDate":"2021-04-09"},{"lineNumber":1099,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1100,"author":{"gitId":"NoorSarrah"},"content":"6. `InventoryList.addDrugs()` will be called in which a Inventory object will be created and added into the ArrayList\u003cInventory\u003e inventoryList which contains all the Inventory Objects. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1101,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1102,"author":{"gitId":"NoorSarrah"},"content":"7. If the list already contains data with the same Drug Name and Price, the Quantity of the Drug will be increased in the list by the value in the user input Quantity field. `InventoryList.addDrugs()` will call `Inventory.addQuantity`. This will modify the Quantity of that specified Drug.","lastModifiedDate":"2021-04-09"},{"lineNumber":1103,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1104,"author":{"gitId":"NoorSarrah"},"content":"**Saving Inventory Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":1105,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1106,"author":{"gitId":"NoorSarrah"},"content":"7. `InventoryInstance` then calls `InventoryStorage.storeInventory()` which starts the process of writing the details of all existing Inventory Objects, within the InventoryList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":1107,"author":{"gitId":"NoorSarrah"},"content":"8. `InventoryStorage.writeToFile()` then calls `fileInit()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":1108,"author":{"gitId":"NoorSarrah"},"content":"9. Data is written and saved.","lastModifiedDate":"2021-04-09"},{"lineNumber":1109,"author":{"gitId":"NoorSarrah"},"content":"10. Control is then returned to InventoryInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":1110,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1111,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":1112,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1113,"author":{"gitId":"NoorSarrah"},"content":"### 5.5.3 Delete","lastModifiedDate":"2021-04-10"},{"lineNumber":1114,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1115,"author":{"gitId":"NoorSarrah"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":1116,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1117,"author":{"gitId":"NoorSarrah"},"content":"The function Delete takes in 2 compulsory field (Drug Name, Quantity) to identify and decrease the Quantity of the Inventory Object from ArrayList\u003cInventory\u003e list. Data input is first checked to ensure validity. Any invalid input detected will result in an Exception thrown and command aborted. After validation, a InventoryDelete Command object is created. InventoryDelete command object will be executed to iterate through the ArrayList\u003cInventory\u003e InventoryList. If Inventory Object exists, its Quantity will be decreased by the Quantity indicated in the user input. Else an error message will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":1118,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1119,"author":{"gitId":"NoorSarrah"},"content":"Invalid Input includes:","lastModifiedDate":"2021-04-09"},{"lineNumber":1120,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1121,"author":{"gitId":"NoorSarrah"},"content":"\u003e ","lastModifiedDate":"2021-04-09"},{"lineNumber":1122,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid Quantity","lastModifiedDate":"2021-04-09"},{"lineNumber":1123,"author":{"gitId":"NoorSarrah"},"content":"\t- Invalid Name","lastModifiedDate":"2021-04-09"},{"lineNumber":1124,"author":{"gitId":"NoorSarrah"},"content":"\t- Blank input (i.e Empty inputs)","lastModifiedDate":"2021-04-09"},{"lineNumber":1125,"author":{"gitId":"NoorSarrah"},"content":"\t- Illegal Characters","lastModifiedDate":"2021-04-09"},{"lineNumber":1126,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1127,"author":{"gitId":"NoorSarrah"},"content":"`delete/Drug Name/Quantity`","lastModifiedDate":"2021-04-09"},{"lineNumber":1128,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1129,"author":{"gitId":"NoorSarrah"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1130,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1131,"author":{"gitId":"NoorSarrah"},"content":"1. If the command recognised is the delete command, `InventoryParser.parse()` calls `InventoryChecker.checkDelete()`, `MainChecker.checkNumInput()`, and `MainChecker.checkBlankInput()` to ensure that there are valid and sufficient inputs","lastModifiedDate":"2021-04-09"},{"lineNumber":1132,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1133,"author":{"gitId":"NoorSarrah"},"content":"**Creating StaffDelete command**","lastModifiedDate":"2021-04-09"},{"lineNumber":1134,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1135,"author":{"gitId":"NoorSarrah"},"content":"2. If the input data is valid, a InventoryDelete Command object is created ","lastModifiedDate":"2021-04-09"},{"lineNumber":1136,"author":{"gitId":"NoorSarrah"},"content":"3. The Command object is returned to `InventoryInstance.run()`","lastModifiedDate":"2021-04-09"},{"lineNumber":1137,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1138,"author":{"gitId":"NoorSarrah"},"content":"**Deleting Quantity from a Inventory Object using User Input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1139,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1140,"author":{"gitId":"NoorSarrah"},"content":"4. InventoryInstance then executes the InventoryDelete Command object to begin the process of deleting the referenced Quantitiy of the Inventory object","lastModifiedDate":"2021-04-09"},{"lineNumber":1141,"author":{"gitId":"NoorSarrah"},"content":"5. `InventoryList.deleteDrugs()` is called, which iterate through the objects in ArrayList\u003cInventory\u003e InventoryList. The Inventory Object referenced by the input given by the user, will have its Quanitity reduced by the Quantity indicated in the user input.","lastModifiedDate":"2021-04-09"},{"lineNumber":1142,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1143,"author":{"gitId":"NoorSarrah"},"content":"**Saving changed Inventory Objects into .txt file**","lastModifiedDate":"2021-04-09"},{"lineNumber":1144,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1145,"author":{"gitId":"NoorSarrah"},"content":"7. `InventoryInstance` then calls `InventoryStorage.storeInventory()` which starts the process of writing the details of all existing Inventory Objects, within the InventoryList into a specified .txt file.","lastModifiedDate":"2021-04-09"},{"lineNumber":1146,"author":{"gitId":"NoorSarrah"},"content":"8. `InventoryStorage.writeToFile()` then calls `fileInit()` which ensures that the specified .txt file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":1147,"author":{"gitId":"NoorSarrah"},"content":"9. Data is written and saved.","lastModifiedDate":"2021-04-09"},{"lineNumber":1148,"author":{"gitId":"NoorSarrah"},"content":"10. Control is then returned to InventoryInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":1149,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1150,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":1151,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1152,"author":{"gitId":"NoorSarrah"},"content":"### 5.5.4 List","lastModifiedDate":"2021-04-10"},{"lineNumber":1153,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1154,"author":{"gitId":"NoorSarrah"},"content":"**Implementation:**","lastModifiedDate":"2021-04-09"},{"lineNumber":1155,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1156,"author":{"gitId":"NoorSarrah"},"content":"This function lists all the Inventories currently in the ArrayList\u003cInventory\u003e InventoryList. A InventoryList Command object is created. InventoryList command object will be executed to iterate through the list of Inventory Objects. Inventory Objects will then be displayed based on the user given input.","lastModifiedDate":"2021-04-09"},{"lineNumber":1157,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1158,"author":{"gitId":"NoorSarrah"},"content":"**Check validity of the data input**","lastModifiedDate":"2021-04-09"},{"lineNumber":1159,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1160,"author":{"gitId":"NoorSarrah"},"content":"1. If the command recognised is the list command, `InventoryParser.parse()` calls `MainChecker.checkNumInput()` to check and verify the validity of inputs accompanied by the list command, if any.","lastModifiedDate":"2021-04-09"},{"lineNumber":1161,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1162,"author":{"gitId":"NoorSarrah"},"content":"**Creating InventoryList command**","lastModifiedDate":"2021-04-09"},{"lineNumber":1163,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1164,"author":{"gitId":"NoorSarrah"},"content":"2. If the input data is valid, a InventoryList Command object is created ","lastModifiedDate":"2021-04-09"},{"lineNumber":1165,"author":{"gitId":"NoorSarrah"},"content":"3. The InventoryList Command object is returned to `InventoryInstance.run()` ","lastModifiedDate":"2021-04-09"},{"lineNumber":1166,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1167,"author":{"gitId":"NoorSarrah"},"content":"**Viewing Inventory Objects**","lastModifiedDate":"2021-04-09"},{"lineNumber":1168,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1169,"author":{"gitId":"NoorSarrah"},"content":"4. InventoryInstance then executes the InventoryList Command object to begin the process of displaying all Inventory objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":1170,"author":{"gitId":"NoorSarrah"},"content":"5. `InventoryList.execute()` will call `InventoryList.listInventory()` and will iterate through the objects in ArrayList\u003cInventory\u003e InventoryList.","lastModifiedDate":"2021-04-09"},{"lineNumber":1171,"author":{"gitId":"NoorSarrah"},"content":"7. Depending on the input given by the user, the relevant Inventory Objects will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":1172,"author":{"gitId":"NoorSarrah"},"content":"8. Control is then returned to InventoryInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":1173,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1174,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1175,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1176,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.6 Proposed Features","lastModifiedDate":"2021-04-10"},{"lineNumber":1177,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":1178,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.6.1 Auto Schedule Generator for Nurses","lastModifiedDate":"2021-04-10"},{"lineNumber":1179,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1180,"author":{"gitId":"AlexanderTanJunAn"},"content":"This feature will be able to generate the daily schedule for individual nurses with the schedules in the database. This will allow nurses to have a clear view of their daily tasks, allowing them to plan their day better. Hence this feature has been proposed as one of the goals of HealthVault is to improve the efficiency of hospital and healthcare information management, something we believe this feature will do.","lastModifiedDate":"2021-04-10"},{"lineNumber":1181,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1182,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Brief Implementation**","lastModifiedDate":"2021-04-10"},{"lineNumber":1183,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1184,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. User specifies which Nurse ID a schedule should be generated for.","lastModifiedDate":"2021-04-10"},{"lineNumber":1185,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. Program will sort all schedules tied to specified Nurse ID.","lastModifiedDate":"2021-04-10"},{"lineNumber":1186,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. A schedule will be generated based on the earliest schedule.","lastModifiedDate":"2021-04-10"},{"lineNumber":1187,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1188,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.6.2 Personalized Account Login","lastModifiedDate":"2021-04-10"},{"lineNumber":1189,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1190,"author":{"gitId":"AlexanderTanJunAn"},"content":"This feature will allow medical personnel to have a personalized account within HealthVault, enabling them to only access relevant functionalities of the app. By cutting down on the unnecessary information one has to deal with, the team believes this will aid medical personnel working in a high-stress environment.","lastModifiedDate":"2021-04-10"},{"lineNumber":1191,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1192,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.6.3 Inventory Alerts","lastModifiedDate":"2021-04-10"},{"lineNumber":1193,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1194,"author":{"gitId":"AlexanderTanJunAn"},"content":"This feature will alert nurses whenever an inventory of a drug is low. This ensures that essential drugs will never be unavailable as nurses will always have up to date information on which specific drug needs to be restocked.","lastModifiedDate":"2021-04-10"},{"lineNumber":1195,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1196,"author":{"gitId":"AlexanderTanJunAn"},"content":"**Brief Implementation**","lastModifiedDate":"2021-04-10"},{"lineNumber":1197,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1198,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. User adds a threshold stock quantity for when an alert should be raised.","lastModifiedDate":"2021-04-10"},{"lineNumber":1199,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. Program checks inventory database everytime inventory is accessed.","lastModifiedDate":"2021-04-10"},{"lineNumber":1200,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. Alert will be raised, reminding the nurses that the drug is low on inventory level.","lastModifiedDate":"2021-04-10"},{"lineNumber":1201,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1202,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1203,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":1204,"author":{"gitId":"blank-bank"},"content":"## Appendix A: Product Scope","lastModifiedDate":"2021-04-09"},{"lineNumber":1205,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1206,"author":{"gitId":"Chiamjiaen"},"content":"**Target user profile:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1207,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":1208,"author":{"gitId":"Chiamjiaen"},"content":"HealtVault targets users who work primarily in the healthcare industry. Such users include: Nurses, Hospital ","lastModifiedDate":"2021-04-10"},{"lineNumber":1209,"author":{"gitId":"Chiamjiaen"},"content":"Administrative Staff and Hospital Management Staff. Its features optimize it for users seeking:","lastModifiedDate":"2021-04-10"},{"lineNumber":1210,"author":{"gitId":"Chiamjiaen"},"content":"* Speed in recording down new details relating to critical healthcare services like nurse schedules and doctors appointments.","lastModifiedDate":"2021-04-10"},{"lineNumber":1211,"author":{"gitId":"Chiamjiaen"},"content":"* A cohesive database that records the critical information of everyone in the hospital, staff and patients included.","lastModifiedDate":"2021-04-10"},{"lineNumber":1212,"author":{"gitId":"Chiamjiaen"},"content":"* A desktop CLI application that has a minimalistic GUI.","lastModifiedDate":"2021-04-10"},{"lineNumber":1213,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1214,"author":{"gitId":"Chiamjiaen"},"content":"**Value Proposition:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1215,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1216,"author":{"gitId":"Chiamjiaen"},"content":"With its organized and portable database and its features to improve efficiency,","lastModifiedDate":"2021-04-10"},{"lineNumber":1217,"author":{"gitId":"Chiamjiaen"},"content":"HealthVault aspires to help its users achieve the following results:","lastModifiedDate":"2021-04-10"},{"lineNumber":1218,"author":{"gitId":"Chiamjiaen"},"content":"* Improve working speed of healthcare staff, as they can store and retrieve critical information quickly and accurately.","lastModifiedDate":"2021-04-10"},{"lineNumber":1219,"author":{"gitId":"Chiamjiaen"},"content":"* Minimize administrative errors with its inbuilt cross validation.","lastModifiedDate":"2021-04-10"},{"lineNumber":1220,"author":{"gitId":"Chiamjiaen"},"content":"* Easy implementation within a hospital environment with minimal setup steps and data reusability.","lastModifiedDate":"2021-04-10"},{"lineNumber":1221,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1222,"author":{"gitId":"Chiamjiaen"},"content":"  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1223,"author":{"gitId":"Chiamjiaen"},"content":"Every second matters in the healthcare industry when patient lives are at stake. We believe that HealthVault can help","lastModifiedDate":"2021-04-10"},{"lineNumber":1224,"author":{"gitId":"Chiamjiaen"},"content":"its users save those precious seconds.","lastModifiedDate":"2021-04-10"},{"lineNumber":1225,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1226,"author":{"gitId":"blank-bank"},"content":"## Appendix B: User Stories","lastModifiedDate":"2021-04-09"},{"lineNumber":1227,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1228,"author":{"gitId":"AlexanderTanJunAn"},"content":"| Priority | As a... |                          I want to...                         |                 So that I can...                 |","lastModifiedDate":"2021-04-09"},{"lineNumber":1229,"author":{"gitId":"AlexanderTanJunAn"},"content":"|:--------:|:-------:|:-------------------------------------------------------------:|:------------------------------------------------:|","lastModifiedDate":"2021-04-09"},{"lineNumber":1230,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |              quickly refer to usage instructions              |      quickly get on track with the workflow      |","lastModifiedDate":"2021-04-09"},{"lineNumber":1231,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |                    add a new staff/patient                    |                                                  |","lastModifiedDate":"2021-04-09"},{"lineNumber":1232,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |                     delete staff/patients                     |          remove entries i no longer need         |","lastModifiedDate":"2021-04-09"},{"lineNumber":1233,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |                         view all staff                        |                                                  |","lastModifiedDate":"2021-04-09"},{"lineNumber":1234,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  | quickly add schedules for nurses and appointments for doctors |       reduce the waiting time for patients       |","lastModifiedDate":"2021-04-09"},{"lineNumber":1235,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |     quickly look up schedules for both nurses and doctors     |              plan my schedule better             |","lastModifiedDate":"2021-04-09"},{"lineNumber":1236,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |                 delete schedules/appointments                 |        eliminate wasted time and resources       |","lastModifiedDate":"2021-04-09"},{"lineNumber":1237,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |              quickly add/delete drug inventories              |           manage our inventories better          |","lastModifiedDate":"2021-04-09"},{"lineNumber":1238,"author":{"gitId":"AlexanderTanJunAn"},"content":"|   * * *  |  nurse  |                quickly look up drug inventories               |  plan what and when to restock our drug supplies |","lastModifiedDate":"2021-04-09"},{"lineNumber":1239,"author":{"gitId":"AlexanderTanJunAn"},"content":"|     *    |  nurse  |       have the program recognize slight errors in typing      | have leeway working in a high-stress environment |","lastModifiedDate":"2021-04-09"},{"lineNumber":1240,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":1241,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1242,"author":{"gitId":"blank-bank"},"content":"## Appendix C: Non Functional Requirements","lastModifiedDate":"2021-04-09"},{"lineNumber":1243,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1244,"author":{"gitId":"MingShun98"},"content":"* Should work on any mainstream OS if it has Java 11 or above installed.","lastModifiedDate":"2021-04-09"},{"lineNumber":1245,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1246,"author":{"gitId":"MingShun98"},"content":"* Database should be able to hold up to 1000 patients, staff, appointments, nurses’ schedules, and drugs inventory without feeling a noticeable lag in the program. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1247,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1248,"author":{"gitId":"MingShun98"},"content":"* A user with above average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-04-09"},{"lineNumber":1249,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1250,"author":{"gitId":"MingShun98"},"content":"* The data retrieval time should return near instant without feeling a pause in between command and output.","lastModifiedDate":"2021-04-09"},{"lineNumber":1251,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1252,"author":{"gitId":"MingShun98"},"content":"* New features for example, auto generation of nurses’ schedules and personalized account login are currently in the works to demonstrate that this program is still being developed to be better and accommodate more of the concerns medical personnel have. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1253,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1254,"author":{"gitId":"MingShun98"},"content":"* Application would be affordable to the general masses","lastModifiedDate":"2021-04-09"},{"lineNumber":1255,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1256,"author":{"gitId":"MingShun98"},"content":"* The security and accessibility of the system is relatively secure, but authorization and authentication scheme is in consideration to be implemented for greater protection.","lastModifiedDate":"2021-04-09"},{"lineNumber":1257,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1258,"author":{"gitId":"MingShun98"},"content":"* All data process and management is in accordance to Singapore IMDA and MOH policy","lastModifiedDate":"2021-04-09"},{"lineNumber":1259,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1260,"author":{"gitId":"MingShun98"},"content":"* Healthvault is not accountable for any data lost due to individuals computer failure. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1261,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1262,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":1263,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1264,"author":{"gitId":"blank-bank"},"content":"## Appendix D: Glossary","lastModifiedDate":"2021-04-09"},{"lineNumber":1265,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1266,"author":{"gitId":"blank-bank"},"content":"* *Illegal Characters* - Non-alphanumeric characters","lastModifiedDate":"2021-04-09"},{"lineNumber":1267,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1268,"author":{"gitId":"blank-bank"},"content":"* *Aggregation* - Any collection of objects. In this case, we utilise an ArrayList to store all our objects. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1269,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1270,"author":{"gitId":"blank-bank"},"content":"* *Features* - In this case, we refer to the entire interaction with the various types of objects. E.g. any interaction with Staff/Patient/Doctor Appointment/Nurse Schedules/Inventory.","lastModifiedDate":"2021-04-09"},{"lineNumber":1271,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1272,"author":{"gitId":"blank-bank"},"content":"* *Functionalities* - Any command that is given to the feature. E.g. `help` command, `list` command.","lastModifiedDate":"2021-04-09"},{"lineNumber":1273,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1274,"author":{"gitId":"blank-bank"},"content":"* *Blank Input* - Refers to any whitespace input. E.g. \" \", \"\\t\".","lastModifiedDate":"2021-04-09"},{"lineNumber":1275,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-09"},{"lineNumber":1276,"author":{"gitId":"blank-bank"},"content":"* *No Input* - Refers to no input given. ","lastModifiedDate":"2021-04-09"},{"lineNumber":1277,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":1278,"author":{"gitId":"blank-bank"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":1279,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1280,"author":{"gitId":"blank-bank"},"content":"## Appendix E: Instructions for Manual Testing","lastModifiedDate":"2021-04-09"},{"lineNumber":1281,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":1282,"author":{"gitId":"NoorSarrah"},"content":"Given below are instructions to test HealthVault manually.","lastModifiedDate":"2021-04-10"},{"lineNumber":1283,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1284,"author":{"gitId":"NoorSarrah"},"content":"\u003e * These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2021-04-10"},{"lineNumber":1285,"author":{"gitId":"NoorSarrah"},"content":"\u003e testers are expected to do more *exploratory* testing.","lastModifiedDate":"2021-04-10"},{"lineNumber":1286,"author":{"gitId":"NoorSarrah"},"content":"\u003e * You can refer to the [User Guide]() for further information regarding the command formats.","lastModifiedDate":"2021-04-10"},{"lineNumber":1287,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1288,"author":{"gitId":"NoorSarrah"},"content":"### Launching HealthVault","lastModifiedDate":"2021-04-10"},{"lineNumber":1289,"author":{"gitId":"NoorSarrah"},"content":"1. Initial launch of HealthVault","lastModifiedDate":"2021-04-10"},{"lineNumber":1290,"author":{"gitId":"NoorSarrah"},"content":"    1.1 Download the jar file [here](https://github.com/AY2021S2-CS2113T-FO8-2/tp/releases) and copy into an empty folder.","lastModifiedDate":"2021-04-10"},{"lineNumber":1291,"author":{"gitId":"NoorSarrah"},"content":"    1.2 Open up a command window to that folder with the jar file.","lastModifiedDate":"2021-04-10"},{"lineNumber":1292,"author":{"gitId":"NoorSarrah"},"content":"    1.3 Run the command `java -jar tp.jar` ","lastModifiedDate":"2021-04-10"},{"lineNumber":1293,"author":{"gitId":"NoorSarrah"},"content":"        ","lastModifiedDate":"2021-04-10"},{"lineNumber":1294,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** HealthVault will be loaded, and a welcome message will be shown. Ensure \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;that the version number in the welcome matches version of the jar file downloaded.","lastModifiedDate":"2021-04-11"},{"lineNumber":1295,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1296,"author":{"gitId":"NoorSarrah"},"content":"### Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1297,"author":{"gitId":"NoorSarrah"},"content":"1. Choose a directory from the Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1298,"author":{"gitId":"NoorSarrah"},"content":"    \u003e Ensure that the location that you are trying to access is in the Start Menu or else ","lastModifiedDate":"2021-04-10"},{"lineNumber":1299,"author":{"gitId":"NoorSarrah"},"content":"    \u003e error message will pop up","lastModifiedDate":"2021-04-10"},{"lineNumber":1300,"author":{"gitId":"NoorSarrah"},"content":"    \u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1301,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.1 **Test case:** `staff` (where you will be directed to the Staff Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1302,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1303,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1304,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1305,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1306,"author":{"gitId":"NoorSarrah"},"content":"\tWelcome to Staff Menu!","lastModifiedDate":"2021-04-10"},{"lineNumber":1307,"author":{"gitId":"NoorSarrah"},"content":"\tType \"help\" for staff menu commands","lastModifiedDate":"2021-04-10"},{"lineNumber":1308,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1309,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1310,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.2 **Test case:** `patient` (where you will be directed to the Patient Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1311,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1312,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1313,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1314,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1315,"author":{"gitId":"NoorSarrah"},"content":"\tWelcome to the patient Commands section!","lastModifiedDate":"2021-04-10"},{"lineNumber":1316,"author":{"gitId":"NoorSarrah"},"content":"\tType \"help\" for patient menu command","lastModifiedDate":"2021-04-10"},{"lineNumber":1317,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1318,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1319,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.3 **Test case:** `appointments` (where you will be directed to the Appointments\u0027 Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1320,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1321,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1322,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1323,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1324,"author":{"gitId":"NoorSarrah"},"content":"\tWelcome to the Appointments\u0027 Menu!","lastModifiedDate":"2021-04-10"},{"lineNumber":1325,"author":{"gitId":"NoorSarrah"},"content":"\tType \u0027help\u0027 for appointment menu commands","lastModifiedDate":"2021-04-10"},{"lineNumber":1326,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1327,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1328,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.4 **Test case:** `schedules` (where you will be directed to the Schedules\u0027 Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1329,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1330,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1331,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1332,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1333,"author":{"gitId":"NoorSarrah"},"content":"\tWelcome to Nurse Schedules!","lastModifiedDate":"2021-04-10"},{"lineNumber":1334,"author":{"gitId":"NoorSarrah"},"content":"\tType \"help\" to for nurse schedules commands","lastModifiedDate":"2021-04-10"},{"lineNumber":1335,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1336,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1337,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.5 **Test case:** `inventory` (where you will be directed to the Staff Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1338,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1339,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1340,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1341,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1342,"author":{"gitId":"NoorSarrah"},"content":"\tWelcome to Inventory Menu!","lastModifiedDate":"2021-04-10"},{"lineNumber":1343,"author":{"gitId":"NoorSarrah"},"content":"\tType \"help\" for Inventory menu commands","lastModifiedDate":"2021-04-10"},{"lineNumber":1344,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1345,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1346,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1347,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.6 **Test case:** `help` (where you will be directed to the Help Menu)","lastModifiedDate":"2021-04-10"},{"lineNumber":1348,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1349,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1350,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1351,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1352,"author":{"gitId":"NoorSarrah"},"content":"\tCommands       Description                             Format    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1353,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1354,"author":{"gitId":"NoorSarrah"},"content":"\tstaff          To go to staff                          -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1355,"author":{"gitId":"NoorSarrah"},"content":"\tpatient        To go to patients                       -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1356,"author":{"gitId":"NoorSarrah"},"content":"\tappointments   To go to doctors appointments           -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1357,"author":{"gitId":"NoorSarrah"},"content":"\tschedules      To go to nurse schedules                -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1358,"author":{"gitId":"NoorSarrah"},"content":"\tinventory      To go to inventory                      -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1359,"author":{"gitId":"NoorSarrah"},"content":"\thelp           To see what commands for Start Menu     -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1360,"author":{"gitId":"NoorSarrah"},"content":"\texit           To exit the application                 -         ","lastModifiedDate":"2021-04-10"},{"lineNumber":1361,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1362,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1363,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.7 **Test case:** `exit` (where you will exit the program)","lastModifiedDate":"2021-04-10"},{"lineNumber":1364,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1365,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Goodbye! Have a nice day!```","lastModifiedDate":"2021-04-11"},{"lineNumber":1366,"author":{"gitId":"NoorSarrah"},"content":"\t ","lastModifiedDate":"2021-04-10"},{"lineNumber":1367,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1368,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1369,"author":{"gitId":"NoorSarrah"},"content":"### Choose which feature you want to use from Staff Menu\t ","lastModifiedDate":"2021-04-10"},{"lineNumber":1370,"author":{"gitId":"NoorSarrah"},"content":"1. Adding a new staff","lastModifiedDate":"2021-04-10"},{"lineNumber":1371,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1372,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1373,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted user ID starts with a D (for doctor ID) or N (for nurse ID)  and has **exactly** 5 digits in the number following!   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1374,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input field in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-10"},{"lineNumber":1375,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. The age field input should be a positive integer starting from 0 but less than 150","lastModifiedDate":"2021-04-10"},{"lineNumber":1376,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1377,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1378,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted user ID starts with a D (for doctor ID) or N (for nurse ID)  and has **exactly** 5 digits in the number following!   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1379,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input field in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-10"},{"lineNumber":1380,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. The age field input should be a positive integer starting from 0 but less than 150","lastModifiedDate":"2021-04-10"},{"lineNumber":1381,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1382,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```add/D12345/MingShun/30/Pediatrician```","lastModifiedDate":"2021-04-10"},{"lineNumber":1383,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1384,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Doctor MingShun hired :)```","lastModifiedDate":"2021-04-10"},{"lineNumber":1385,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1386,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1387,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-10"},{"lineNumber":1388,"author":{"gitId":"NoorSarrah"},"content":"2. Deleting staff","lastModifiedDate":"2021-04-10"},{"lineNumber":1389,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1390,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1391,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted user ID starts with a D (for doctor ID) or N (for nurse ID)  and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1392,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1393,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```delete/D12345```","lastModifiedDate":"2021-04-10"},{"lineNumber":1394,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1395,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```D12345 has been fired :(```","lastModifiedDate":"2021-04-10"},{"lineNumber":1396,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1397,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1398,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1399,"author":{"gitId":"NoorSarrah"},"content":"3. Listing all doctors and nurses","lastModifiedDate":"2021-04-10"},{"lineNumber":1400,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1401,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1402,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. \u003c\u003e implies that the inputs are optional","lastModifiedDate":"2021-04-10"},{"lineNumber":1403,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1404,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.1 **Test case:** ```list/nurses ```","lastModifiedDate":"2021-04-10"},{"lineNumber":1405,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1406,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1407,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1408,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1409,"author":{"gitId":"NoorSarrah"},"content":"\tID         | Name       | Age   | Specialisation      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1410,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1411,"author":{"gitId":"NoorSarrah"},"content":"\tN12345     | Sarrah     | 30    | Emergency    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1412,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1413,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1414,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.2 **Test case:** ```list/doctors ```","lastModifiedDate":"2021-04-10"},{"lineNumber":1415,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1416,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1417,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1418,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1419,"author":{"gitId":"NoorSarrah"},"content":"\tID         | Name       | Age   | Specialisation      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1420,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1421,"author":{"gitId":"NoorSarrah"},"content":"\tD12345     | MingShun   | 30    | Pediatrician    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1422,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1423,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1424,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.3 **Test case:** ```list ```","lastModifiedDate":"2021-04-10"},{"lineNumber":1425,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1426,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1427,"author":{"gitId":"NoorSarrah"},"content":"\t\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1428,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1429,"author":{"gitId":"NoorSarrah"},"content":"\tID         | Name       | Age   | Specialisation      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1430,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1431,"author":{"gitId":"NoorSarrah"},"content":"\tN12345     | Sarrah     | 30    | Emergency  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1432,"author":{"gitId":"NoorSarrah"},"content":"\tD12345     | MingShun   | 30    | Pediatrician    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1433,"author":{"gitId":"NoorSarrah"},"content":"\tD12355     | Alex       | 28    | Oncology","lastModifiedDate":"2021-04-10"},{"lineNumber":1434,"author":{"gitId":"NoorSarrah"},"content":"\t```\t\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1435,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1436,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1437,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1438,"author":{"gitId":"NoorSarrah"},"content":"4. Finding a staff","lastModifiedDate":"2021-04-10"},{"lineNumber":1439,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1440,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1441,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Any keyword input will be searched through every field of Staff details. i.e. It can be used to search Staff ID, name, age and specialisation.","lastModifiedDate":"2021-04-10"},{"lineNumber":1442,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1443,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```find/Oncology```","lastModifiedDate":"2021-04-10"},{"lineNumber":1444,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1445,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-10"},{"lineNumber":1446,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1447,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1448,"author":{"gitId":"NoorSarrah"},"content":"\tID         | Name       | Age   | Specialisation      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1449,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1450,"author":{"gitId":"NoorSarrah"},"content":"\tD12355     | Alex       | 28    | Oncology            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1451,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1452,"author":{"gitId":"NoorSarrah"},"content":"\tStaff --\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1453,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1454,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1455,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1456,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1457,"author":{"gitId":"NoorSarrah"},"content":"5. Returning to Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1458,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1459,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```return```","lastModifiedDate":"2021-04-10"},{"lineNumber":1460,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1461,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Returning to start menu!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1462,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1463,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1464,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1465,"author":{"gitId":"NoorSarrah"},"content":"6. Directing to help function","lastModifiedDate":"2021-04-10"},{"lineNumber":1466,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1467,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```help```","lastModifiedDate":"2021-04-10"},{"lineNumber":1468,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1469,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1470,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1471,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1472,"author":{"gitId":"NoorSarrah"},"content":"\tHere is a list of Staff commands: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1473,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1474,"author":{"gitId":"NoorSarrah"},"content":"\tCommands  Description                                                 Format                                            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1475,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1476,"author":{"gitId":"NoorSarrah"},"content":"\thelp      Brings up the list of commands for Staff!                   -                                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1477,"author":{"gitId":"NoorSarrah"},"content":"\tadd       Adds Staff details to the Staff database!                   add/[Staff ID]/[Name]/[Age]/[Specialisation]      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1478,"author":{"gitId":"NoorSarrah"},"content":"\tlist      Brings up the list of all current Staff in database!        list/\u003cinput\u003e, where input \u003d\u003d doctor or nurse      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1479,"author":{"gitId":"NoorSarrah"},"content":"\tdelete    Deletes the Staff with the specified ID from the list!      delete/[Staff ID]                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1480,"author":{"gitId":"NoorSarrah"},"content":"\tfind      Finds a matching Staff using a keyword or phrase!           find/[keyword or phrase]                          ","lastModifiedDate":"2021-04-10"},{"lineNumber":1481,"author":{"gitId":"NoorSarrah"},"content":"\treturn    Returns you to the Start Menu!                              -                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1482,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1483,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1484,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1485,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1486,"author":{"gitId":"NoorSarrah"},"content":"### Choose which feature you want to use from Patient Menu\t ","lastModifiedDate":"2021-04-10"},{"lineNumber":1487,"author":{"gitId":"NoorSarrah"},"content":"1. Adding a new patient","lastModifiedDate":"2021-04-10"},{"lineNumber":1488,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1489,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1490,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1491,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted user ID starts with a P and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1492,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input field in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-10"},{"lineNumber":1493,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. The gender field input should only be \"M\", \"F\" or \"Others\"","lastModifiedDate":"2021-04-10"},{"lineNumber":1494,"author":{"gitId":"NoorSarrah"},"content":"\u003e4. The age field input should be a positive integer starting from 0 but less than 150","lastModifiedDate":"2021-04-10"},{"lineNumber":1495,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1496,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1497,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```add/P55555/Sam/40/M/Fever/Paracetamol```","lastModifiedDate":"2021-04-10"},{"lineNumber":1498,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1499,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Sam is now a patient here!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1500,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1501,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1502,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-10"},{"lineNumber":1503,"author":{"gitId":"NoorSarrah"},"content":"2. Deleting a patient","lastModifiedDate":"2021-04-10"},{"lineNumber":1504,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1505,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1506,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1507,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted user ID starts with a P and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1508,"author":{"gitId":"NoorSarrah"},"content":"  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1509,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```delete/P55555```","lastModifiedDate":"2021-04-10"},{"lineNumber":1510,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1511,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1512,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1513,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1514,"author":{"gitId":"NoorSarrah"},"content":"\tNoted. I\u0027ve removed this patient: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1515,"author":{"gitId":"NoorSarrah"},"content":"\tSam","lastModifiedDate":"2021-04-10"},{"lineNumber":1516,"author":{"gitId":"NoorSarrah"},"content":"\tNow you have 0 patients in the list","lastModifiedDate":"2021-04-10"},{"lineNumber":1517,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1518,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1519,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1520,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1521,"author":{"gitId":"NoorSarrah"},"content":"3. Listing all patients","lastModifiedDate":"2021-04-10"},{"lineNumber":1522,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1523,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```list```","lastModifiedDate":"2021-04-10"},{"lineNumber":1524,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1525,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1526,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1527,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1528,"author":{"gitId":"NoorSarrah"},"content":"\tHere are the patients currently in the list!","lastModifiedDate":"2021-04-10"},{"lineNumber":1529,"author":{"gitId":"NoorSarrah"},"content":"\tID       | Name                 | Age    | Gender   | Illness              | Medication Required ","lastModifiedDate":"2021-04-10"},{"lineNumber":1530,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1531,"author":{"gitId":"NoorSarrah"},"content":"\tP55555   | Sam                  | 40     | M        | Fever                | Paracetamol    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1532,"author":{"gitId":"NoorSarrah"},"content":"\tP12345   | Amy                  | 35     | F        | Flu                  | Panadol","lastModifiedDate":"2021-04-10"},{"lineNumber":1533,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1534,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1535,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1536,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1537,"author":{"gitId":"NoorSarrah"},"content":"4. Finding a patient","lastModifiedDate":"2021-04-10"},{"lineNumber":1538,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1539,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1540,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Any keyword input will be searched through every field of Patient details. i.e. It can be used to search Patient ID, name, age, illness, medication required.","lastModifiedDate":"2021-04-10"},{"lineNumber":1541,"author":{"gitId":"NoorSarrah"},"content":"\u003e The keyword input can be case insensitive and still find matches in the database.","lastModifiedDate":"2021-04-10"},{"lineNumber":1542,"author":{"gitId":"NoorSarrah"},"content":"\u003e ","lastModifiedDate":"2021-04-10"},{"lineNumber":1543,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1544,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4.1 **Test case:** ```find/P55555```","lastModifiedDate":"2021-04-10"},{"lineNumber":1545,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1546,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1547,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1548,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1549,"author":{"gitId":"NoorSarrah"},"content":"\tID       | Name                 | Age    | Gender   | Illness              | Medication Required ","lastModifiedDate":"2021-04-10"},{"lineNumber":1550,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1551,"author":{"gitId":"NoorSarrah"},"content":"\tP55555   | Sam                  | 40     | M        | Fever                | Paracetamol    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1552,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1553,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4.2 **Test case:** ```find/Sam```","lastModifiedDate":"2021-04-10"},{"lineNumber":1554,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1555,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1556,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1557,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1558,"author":{"gitId":"NoorSarrah"},"content":"\tID       | Name                 | Age    | Gender   | Illness              | Medication Required ","lastModifiedDate":"2021-04-10"},{"lineNumber":1559,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1560,"author":{"gitId":"NoorSarrah"},"content":"\tP55555   | Sam                  | 40     | M        | Fever                | Paracetamol    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1561,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1562,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1563,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1564,"author":{"gitId":"NoorSarrah"},"content":"5. Returning to Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1565,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1566,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```return```","lastModifiedDate":"2021-04-10"},{"lineNumber":1567,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1568,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Returning to start menu!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1569,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1570,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1571,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1572,"author":{"gitId":"NoorSarrah"},"content":"6. Directing to help function","lastModifiedDate":"2021-04-10"},{"lineNumber":1573,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1574,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```help```","lastModifiedDate":"2021-04-10"},{"lineNumber":1575,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1576,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-10"},{"lineNumber":1577,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1578,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1579,"author":{"gitId":"NoorSarrah"},"content":"\tHere is a list of Patient commands: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1580,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1581,"author":{"gitId":"NoorSarrah"},"content":"\tCommands  Description                                                 Format                                                                ","lastModifiedDate":"2021-04-10"},{"lineNumber":1582,"author":{"gitId":"NoorSarrah"},"content":"\t__________________________________________________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1583,"author":{"gitId":"NoorSarrah"},"content":"\thelp      Brings up the list of commands for Patient!                 -                                                                     ","lastModifiedDate":"2021-04-10"},{"lineNumber":1584,"author":{"gitId":"NoorSarrah"},"content":"\tadd       Adds Patient details to the Patient database!               add/[Patient ID]/[Name]/[Age]/[Gender]/[Illness]/[Medication Needed]  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1585,"author":{"gitId":"NoorSarrah"},"content":"\tlist      Brings up the list of all current Patient in database!      -                                                                     ","lastModifiedDate":"2021-04-10"},{"lineNumber":1586,"author":{"gitId":"NoorSarrah"},"content":"\tdelete    Deletes the Patient with the specified ID from the list!    delete/[Patient ID]                                                   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1587,"author":{"gitId":"NoorSarrah"},"content":"\tfind      Finds a matching Patient using a keyword or phrase!         find/[keyword or phrase]                                              ","lastModifiedDate":"2021-04-10"},{"lineNumber":1588,"author":{"gitId":"NoorSarrah"},"content":"\treturn    Returns you to the Start Menu!                              -                                ","lastModifiedDate":"2021-04-10"},{"lineNumber":1589,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1590,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1591,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1592,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1593,"author":{"gitId":"NoorSarrah"},"content":"### Choose which feature you want to use from Appointments\u0027 Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1594,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1595,"author":{"gitId":"NoorSarrah"},"content":"1. Adding a new appointment","lastModifiedDate":"2021-04-10"},{"lineNumber":1596,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1597,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1598,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following!  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1599,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input fields in HealthVault only accepts space and alphanumeric characters.","lastModifiedDate":"2021-04-10"},{"lineNumber":1600,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. The gender field input should only be \"M\", \"F\".","lastModifiedDate":"2021-04-10"},{"lineNumber":1601,"author":{"gitId":"NoorSarrah"},"content":"\u003e4. This function **allows** the adding of past appointments.","lastModifiedDate":"2021-04-10"},{"lineNumber":1602,"author":{"gitId":"NoorSarrah"},"content":"     ","lastModifiedDate":"2021-04-10"},{"lineNumber":1603,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```add/D12345/A12345/Alex/M/21012021```","lastModifiedDate":"2021-04-10"},{"lineNumber":1604,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1605,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Appointment Added```","lastModifiedDate":"2021-04-10"},{"lineNumber":1606,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1607,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1608,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-10"},{"lineNumber":1609,"author":{"gitId":"NoorSarrah"},"content":"2. Deleting an appointment","lastModifiedDate":"2021-04-10"},{"lineNumber":1610,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1611,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1612,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1613,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1614,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.1 **Test case:** ```delete/D12345```","lastModifiedDate":"2021-04-10"},{"lineNumber":1615,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1616,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```DoctorID / Appointment ID: D12345/A12345 has been deleted!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1617,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1618,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.2 **Test case:** ```delete/A12346```","lastModifiedDate":"2021-04-10"},{"lineNumber":1619,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1620,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```DoctorID / Appointment ID: D12345/A12345 has been deleted!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1621,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1622,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1623,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1624,"author":{"gitId":"NoorSarrah"},"content":"3. Listing appointments","lastModifiedDate":"2021-04-10"},{"lineNumber":1625,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1626,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1627,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure the input `all` is lower caps.","lastModifiedDate":"2021-04-10"},{"lineNumber":1628,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1629,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1630,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.1 **Test case:** ```list/all```","lastModifiedDate":"2021-04-10"},{"lineNumber":1631,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1632,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1633,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1634,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1635,"author":{"gitId":"NoorSarrah"},"content":"\tDoctor ID      | Appointment ID | Name           | Gender         | Date          ","lastModifiedDate":"2021-04-10"},{"lineNumber":1636,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1637,"author":{"gitId":"NoorSarrah"},"content":"\tD11111         | A54321         | Owen           | M              | 01/04/2021","lastModifiedDate":"2021-04-10"},{"lineNumber":1638,"author":{"gitId":"NoorSarrah"},"content":"\tD12345         | A12345         | Alex           | M              | 21/01/2021  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1639,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1640,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1641,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.2 **Test case:** ```list/D12345```","lastModifiedDate":"2021-04-10"},{"lineNumber":1642,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1643,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1644,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1645,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1646,"author":{"gitId":"NoorSarrah"},"content":"\tDoctor ID      | Appointment ID | Name           | Gender         | Date          ","lastModifiedDate":"2021-04-10"},{"lineNumber":1647,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1648,"author":{"gitId":"NoorSarrah"},"content":"\tD12345         | A12345         | Alex           | M              | 21/01/2021  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1649,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1650,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1651,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.3 **Test case:** ```list/A12345 ```","lastModifiedDate":"2021-04-10"},{"lineNumber":1652,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1653,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-11"},{"lineNumber":1654,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1655,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1656,"author":{"gitId":"NoorSarrah"},"content":"\tDoctor ID      | Appointment ID | Name           | Gender         | Date          ","lastModifiedDate":"2021-04-10"},{"lineNumber":1657,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1658,"author":{"gitId":"NoorSarrah"},"content":"\tD12345         | A12345         | Alex           | M              | 21/01/2021  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1659,"author":{"gitId":"NoorSarrah"},"content":"\t```\t\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1660,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1661,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1662,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1663,"author":{"gitId":"NoorSarrah"},"content":"4. Returning to Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1664,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1665,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```return```","lastModifiedDate":"2021-04-10"},{"lineNumber":1666,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1667,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Returning to start menu!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1668,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1669,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1670,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1671,"author":{"gitId":"NoorSarrah"},"content":"5. Directing to help function","lastModifiedDate":"2021-04-10"},{"lineNumber":1672,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1673,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```help```","lastModifiedDate":"2021-04-10"},{"lineNumber":1674,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1675,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1676,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1677,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1678,"author":{"gitId":"NoorSarrah"},"content":"\tHere is a list of Doctor Appointments Commands: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1679,"author":{"gitId":"NoorSarrah"},"content":"\tCommands  Description                                                           Format                                            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1680,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1681,"author":{"gitId":"NoorSarrah"},"content":"\thelp      Brings up the list of commands for Doctor Appointments!               -                                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1682,"author":{"gitId":"NoorSarrah"},"content":"\tadd       Adds Doctor Appointment details to the database!                      add/[Doctor ID]/[Appointment ID]/[Name]/[Gender]/[Date (DDMMYYYY)]","lastModifiedDate":"2021-04-10"},{"lineNumber":1683,"author":{"gitId":"NoorSarrah"},"content":"\tlist      Brings up the list of all current Doctors\u0027 Appointments in database!  list/[DoctorID/AppointmentID]                     ","lastModifiedDate":"2021-04-10"},{"lineNumber":1684,"author":{"gitId":"NoorSarrah"},"content":"\tdelete    Deletes the Appointment with the specified ID from the list!          delete/[DoctorID/Appointment ID]                  ","lastModifiedDate":"2021-04-10"},{"lineNumber":1685,"author":{"gitId":"NoorSarrah"},"content":"\treturn    Returns you to the Start Menu!                   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1686,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1687,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1688,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1689,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1690,"author":{"gitId":"NoorSarrah"},"content":"### Choose which feature you want to use from Schedules\u0027 Menu\t ","lastModifiedDate":"2021-04-10"},{"lineNumber":1691,"author":{"gitId":"NoorSarrah"},"content":"1. Adding a new schedule","lastModifiedDate":"2021-04-10"},{"lineNumber":1692,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1693,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1694,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure Nurse ID exists in Staff and Patient ID exists in Patients before adding.","lastModifiedDate":"2021-04-10"},{"lineNumber":1695,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Make sure that the inputted user ID starts with a N for Nurse, P for Patient and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1696,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. Any input fields in HealthVault only accepts space and alphanumeric characters.","lastModifiedDate":"2021-04-10"},{"lineNumber":1697,"author":{"gitId":"NoorSarrah"},"content":"\u003e4. HealhVault currently only allows the adding of **1** schedule per patient per day.","lastModifiedDate":"2021-04-10"},{"lineNumber":1698,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1699,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```add/N12345/P12345/30012020```","lastModifiedDate":"2021-04-10"},{"lineNumber":1700,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1701,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Trip to P12345 on 30/01/2020 added!```","lastModifiedDate":"2021-04-11"},{"lineNumber":1702,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1703,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1704,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-10"},{"lineNumber":1705,"author":{"gitId":"NoorSarrah"},"content":"2. Deleting schedule","lastModifiedDate":"2021-04-10"},{"lineNumber":1706,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1707,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1708,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1709,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted Nurse ID starts with a N for Nurse, and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1710,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. HealthVault only accepts valid Date inputs.","lastModifiedDate":"2021-04-10"},{"lineNumber":1711,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1712,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```delete/N12345/30012020```","lastModifiedDate":"2021-04-10"},{"lineNumber":1713,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1714,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Trip to P12345 on 30/01/2020 has been cancelled!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1715,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1716,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1717,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1718,"author":{"gitId":"NoorSarrah"},"content":"3. Listing schedules","lastModifiedDate":"2021-04-10"},{"lineNumber":1719,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1720,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1721,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1722,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted Nurse ID starts with a N for Nurse, and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-10"},{"lineNumber":1723,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1724,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.1 **Test case:** ```list/N12345 ```","lastModifiedDate":"2021-04-10"},{"lineNumber":1725,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1726,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1727,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1728,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1729,"author":{"gitId":"NoorSarrah"},"content":"\tNurse ID   | Patient ID | Date      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1730,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1731,"author":{"gitId":"NoorSarrah"},"content":"\tN12345     | P12345     | 30/01/2020 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1732,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1733,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1734,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.2 **Test case:** ```list/all```","lastModifiedDate":"2021-04-10"},{"lineNumber":1735,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1736,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-11"},{"lineNumber":1737,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1738,"author":{"gitId":"NoorSarrah"},"content":"\tNurse ID   | Patient ID | Date      ","lastModifiedDate":"2021-04-10"},{"lineNumber":1739,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1740,"author":{"gitId":"NoorSarrah"},"content":"\tN12345     | P12345     | 30/01/2020","lastModifiedDate":"2021-04-10"},{"lineNumber":1741,"author":{"gitId":"NoorSarrah"},"content":"\tN55555     | P55555     | 30/01/2020   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1742,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1743,"author":{"gitId":"NoorSarrah"},"content":"\t\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1744,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1745,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1746,"author":{"gitId":"NoorSarrah"},"content":"4. Returning to Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1747,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1748,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```return```","lastModifiedDate":"2021-04-10"},{"lineNumber":1749,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1750,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Returning to start menu!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1751,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1752,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1753,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1754,"author":{"gitId":"NoorSarrah"},"content":"5. Directing to help function","lastModifiedDate":"2021-04-10"},{"lineNumber":1755,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1756,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```help```","lastModifiedDate":"2021-04-10"},{"lineNumber":1757,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1758,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ","lastModifiedDate":"2021-04-10"},{"lineNumber":1759,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1760,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1761,"author":{"gitId":"NoorSarrah"},"content":"\tHere is a list of Nurse Schedule commands: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1762,"author":{"gitId":"NoorSarrah"},"content":"\tCommands  Description                                                      Format                                            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1763,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1764,"author":{"gitId":"NoorSarrah"},"content":"\thelp      Brings up the list of commands for Nurse Schedule!               -                                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1765,"author":{"gitId":"NoorSarrah"},"content":"\tadd       Adds Nurse Schedule details to the database!                     add/[Nurse ID]/[Patient ID]/[Date (DDMMYYYY)]     ","lastModifiedDate":"2021-04-10"},{"lineNumber":1766,"author":{"gitId":"NoorSarrah"},"content":"\tlist      Brings up the list of all current Nurse Schedules in database!   list/[NurseID/all]                                ","lastModifiedDate":"2021-04-10"},{"lineNumber":1767,"author":{"gitId":"NoorSarrah"},"content":"\tdelete    Deletes the Schedule with the specified ID from the list!        delete/[Nurse ID]/[Date (DDMMYYYY)]               ","lastModifiedDate":"2021-04-10"},{"lineNumber":1768,"author":{"gitId":"NoorSarrah"},"content":"\treturn    Returns you to the Start Menu!                                   -    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1769,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1770,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1771,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1772,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1773,"author":{"gitId":"NoorSarrah"},"content":"### Choose which feature you want to use from Inventory Menu\t ","lastModifiedDate":"2021-04-10"},{"lineNumber":1774,"author":{"gitId":"NoorSarrah"},"content":"1. Adding a new drug or increasing quantity of current drug","lastModifiedDate":"2021-04-10"},{"lineNumber":1775,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1776,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-10"},{"lineNumber":1777,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":1778,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted price is valid and does not have more than 2 decimal places!   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1779,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input fields in HealthVault only accepts space and alphanumeric characters!","lastModifiedDate":"2021-04-10"},{"lineNumber":1780,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. Avoid using uppercase letters!","lastModifiedDate":"2021-04-10"},{"lineNumber":1781,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1782,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```add/paracetamol/3/90```","lastModifiedDate":"2021-04-10"},{"lineNumber":1783,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1784,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```90 paracetamol is added into Inventory!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1785,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1786,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1787,"author":{"gitId":"NoorSarrah"},"content":" ","lastModifiedDate":"2021-04-10"},{"lineNumber":1788,"author":{"gitId":"NoorSarrah"},"content":"2. Decreasing quantity of drugs","lastModifiedDate":"2021-04-10"},{"lineNumber":1789,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1790,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the format","lastModifiedDate":"2021-04-10"},{"lineNumber":1791,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Avoid using uppercase letters","lastModifiedDate":"2021-04-10"},{"lineNumber":1792,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1793,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```delete/paracetamol/20```","lastModifiedDate":"2021-04-10"},{"lineNumber":1794,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1795,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Noted. I\u0027ve removed 20 paracetamol```","lastModifiedDate":"2021-04-10"},{"lineNumber":1796,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1797,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1798,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1799,"author":{"gitId":"NoorSarrah"},"content":"3. Listing all drugs","lastModifiedDate":"2021-04-10"},{"lineNumber":1800,"author":{"gitId":"NoorSarrah"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":1801,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```list```","lastModifiedDate":"2021-04-10"},{"lineNumber":1802,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1803,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1804,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1805,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1806,"author":{"gitId":"NoorSarrah"},"content":"\tDrugName        | Price      | Quantity","lastModifiedDate":"2021-04-10"},{"lineNumber":1807,"author":{"gitId":"NoorSarrah"},"content":"\t------------------------------------------------------------","lastModifiedDate":"2021-04-10"},{"lineNumber":1808,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1809,"author":{"gitId":"NoorSarrah"},"content":"\tparacetamol     | 3.00       | 70   ","lastModifiedDate":"2021-04-10"},{"lineNumber":1810,"author":{"gitId":"NoorSarrah"},"content":"\tPanadol         | 4.80       | 36 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1811,"author":{"gitId":"NoorSarrah"},"content":"\t```\t\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1812,"author":{"gitId":"NoorSarrah"},"content":"\t","lastModifiedDate":"2021-04-10"},{"lineNumber":1813,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1814,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1815,"author":{"gitId":"NoorSarrah"},"content":"4. Returning to Start Menu","lastModifiedDate":"2021-04-10"},{"lineNumber":1816,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1817,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```return```","lastModifiedDate":"2021-04-10"},{"lineNumber":1818,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1819,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:** ```Returning to start Menu!```","lastModifiedDate":"2021-04-10"},{"lineNumber":1820,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1821,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":1822,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1823,"author":{"gitId":"NoorSarrah"},"content":"4. Directing to help function","lastModifiedDate":"2021-04-10"},{"lineNumber":1824,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1825,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Test case:** ```help```","lastModifiedDate":"2021-04-10"},{"lineNumber":1826,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1827,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected:**","lastModifiedDate":"2021-04-10"},{"lineNumber":1828,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1829,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1830,"author":{"gitId":"NoorSarrah"},"content":"\tHere is a list of Inventory commands: ","lastModifiedDate":"2021-04-10"},{"lineNumber":1831,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1832,"author":{"gitId":"NoorSarrah"},"content":"\tCommands  Description                                                 Format                                            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1833,"author":{"gitId":"NoorSarrah"},"content":"\t____________________________________________________________________________________________________","lastModifiedDate":"2021-04-10"},{"lineNumber":1834,"author":{"gitId":"NoorSarrah"},"content":"\thelp      Brings up the list of commands for Inventory!               -                                                 ","lastModifiedDate":"2021-04-10"},{"lineNumber":1835,"author":{"gitId":"NoorSarrah"},"content":"\tadd       Adds Inventory details to the database!                     add/[Drug name]/[Price]/[Quantity]                ","lastModifiedDate":"2021-04-10"},{"lineNumber":1836,"author":{"gitId":"NoorSarrah"},"content":"\tlist      Brings up the list of all current Inventory in database!    list                                              ","lastModifiedDate":"2021-04-10"},{"lineNumber":1837,"author":{"gitId":"NoorSarrah"},"content":"\tdelete    Deletes the Inventory item from the list!                   delete/[Drug Name]                                ","lastModifiedDate":"2021-04-10"},{"lineNumber":1838,"author":{"gitId":"NoorSarrah"},"content":"\treturn    Returns you to the Start Menu!                              -            ","lastModifiedDate":"2021-04-10"},{"lineNumber":1839,"author":{"gitId":"NoorSarrah"},"content":"\t```","lastModifiedDate":"2021-04-10"},{"lineNumber":1840,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":1841,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"NoorSarrah":724,"MingShun98":191,"Chiamjiaen":326,"-":15,"AlexanderTanJunAn":216,"blank-bank":369}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"# HealthVault","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cimg src\u003d\"images/HealthVaultLogo.png\" width \u003d \"200\"\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"HealthVault is a desktop application made for healthcare personnel as their one stop application for recording and accessing critical patient or staff information. It is optimized for the Command Line Interface, where an experienced typist will be able to make full use of the informative and minimalistic GUI to achieve significant gains in efficiency.","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"* For Users, see our [User Guide](UserGuide.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"* For Developers, see our [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"* Find out more about the team behind HealthVault in [About Us](AboutUs.md)","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"AlexanderTanJunAn":9,"-":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"# HealthVault User Guide","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"images/HealthVaultLogo.png\" width \u003d \"200\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"## Opening Words","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":" Welcome to HealthVault application\u0027s User Guide!\t\t\t\t\t ","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"The purpose of this User Guide is to assist you in the usage of the application. You will be able to utilize all the features of the HealthVault application to create the most efficient healthcare environment!","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"## Content Page","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"1. [Introduction](#1-introduction)","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"\t1. [What is HealthVault?](#11-what-is-healthvault)","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"\t2. [About the User Guide](#12-about-the-user-guide)","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"2. [How to use this guide](#2-how-to-use-the-guide)","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"\t1. [Technical terms](#21-technical-terms)","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"\t2. [Symbols \u0026 Icons](#22-symbols--icons)","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"3. [Getting Started](#3-getting-started)","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"\t1. [Introduction to Command Line Interface (CLI)](#31-introduction-to-command-line-interface-cli)","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"\t2. [Installation Guide](#-32-installation-guide)","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"4. [Start Menu](#4-start-menu)","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":" \t1. [Interpreting help commands](#41-interpreting-help-commands)","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"5. [Features](#5-features)","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t1. [Staff](#51-staff)","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t2. [Patient](#52-patient)","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"\t3. [Doctor\u0027s Appointment](#53-doctors-appointment)","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t4. [Schedules for Nurses](#54-schedules-for-nurses)","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"\t5. [Inventory](#55-inventory)","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"6. [FAQ](#6-faq)","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"7. [Command Summary](#7-command-summary)","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"## 1. Introduction","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"### 1.1 What is HealthVault?","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"To save a life is the top priority of any healthcare worker. ","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"In such a precarious situation, every second matters and a Head Nurse cannot afford to waste time when they need to store or view critical information.","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"Introducting HealthVault, a Head Nurse\u0027s personal information recording system. HealthVault is a desktop app for managing doctor, nurse, patient and inventory information, optimised for use through the command line interface. If the user can type fast, HealthVault brings both convenience and speed for a Head Nurse to view and store critical information.","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"In this application there are 5 main features that are provided for the user. ","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"* **Staff:** Keeps record of and allows you to access staff information.","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"* **Patient:** Keeps record of and allows you to access patient information.","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"* **Doctor Appointments:** Keeps record of and allows you to create and view Doctor Appointments.","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"* **Nurse Schedules:** Keeps record of and allows you to create and view Nurse Schedules.","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"* **Inventory:** Keeps record of and allows you to view your current hospital inventory of supplies","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"Each feature can be accessed by accessing its specific menu. For example, the Patient details can be accessed by accessing the Patient Menu from the Start Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"### 1.2 About the User Guide","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"This user guide helps you to understand how to use the HealthVault application by introducing the various commands and interfaces to you.","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"Various helpful screenshots from the application also help to guide you through the application.","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"This user guide will cover the following:","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"* How to set up the application","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"* How to use Command Line Interface - CLI","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"* Helpful tips on how to use the guide","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"* How to use each of the features","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"* Frequently asked questions","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"## 2. How to use the guide","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"### 2.1 Technical Terms","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Command Line Interface** - Accessing the functionalities of a computer program in the form of lines of text.","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Graphical User Interface** - Allows users to interact with the functionalities of a computer program through graphical icons ","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; and audio indicators, instead of text-based user interfaces, typed command labels or text navigation.","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Case Sensitive** - Differentiating between capital and lower-case letters.","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **User Input** - Any information or data sent to a computer by the user using the application.","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Alphanumeric** - Consisting of only alphabets and numerals.","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Delimiter** - A character that seperates different sections of a text or input","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"### 2.2 Symbols \u0026 Icons","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **[]** - Square brackets for compulsory user inputs.","lastModifiedDate":"2021-04-01"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **\u003c\u003e** - Angled quotation marks for optional user inputs.","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; :information_source: This icon denotes a important information to note.","lastModifiedDate":"2021-04-01"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; :exclamation: Warning sign to inform user against doing certain actions ","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"## 3. Getting Started","lastModifiedDate":"2021-04-04"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"### 3.1 Introduction to Command Line Interface (CLI)","lastModifiedDate":"2021-04-01"},{"lineNumber":101,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"HealthVault uses the Command Line Interface (CLI) to run. And CLI is primary input method for interacting with HealthVault.","lastModifiedDate":"2021-04-01"},{"lineNumber":103,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"As CLI is not commonly used, this section hopes to orientate you with the CLI environment if you are new, and acts as a refresher for returning users.","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"Chiamjiaen"},"content":"CLI takes in a user input from the input marker as shown in the image included below. The red arrow points to where the users input will appear.","lastModifiedDate":"2021-04-01"},{"lineNumber":107,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"Chiamjiaen"},"content":"\u003cimg src\u003d\"images/CLIimage.jpg\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"After keying in their input, the most common way to enter the response into the system is to press the \u003ckbd\u003eEnter\u003c/kbd\u003e key for the command to be registered.","lastModifiedDate":"2021-04-01"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":113,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"### \u003ca name\u003d\"section2\"\u003e 3.2 Installation Guide","lastModifiedDate":"2021-04-04"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"1. Ensure system has Java 11","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"2. Download the latest JAR file from this [website](https://github.com/AY2021S2-CS2113T-F08-2/tp/releases)","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"3. Open the command window ","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Click the search icon in the bottom left side of the screen ","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Type ‘command prompt’ in the search bar","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Select the application called ‘Command Prompt’","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"4. `cd` into the folder containing the JAR file","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Locate the file path of the JAR file that you have downloaded","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"   - For example:  (C:\\Users\\JohnDoe\\Downloads), where JohnDoe is the user’s name","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Then, run the following command: `cd [File Path]`","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"AlexanderTanJunAn"},"content":"   - Example: `cd C:\\Users\\JohnDoe\\Downloads`","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"Chiamjiaen"},"content":"   - Run the following command: `java -jar [JAR file name]`","lastModifiedDate":"2021-04-04"},{"lineNumber":131,"author":{"gitId":"AlexanderTanJunAn"},"content":"  ","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":133,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"## 4. Start Menu","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"blank-bank"},"content":"The Start Menu is the first menu you will encounter upon running the application after following the installation guide in [section 3](#section3). ","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"blank-bank"},"content":"Here is an example of how the welcome screen of HealthVault will look like.","lastModifiedDate":"2021-04-01"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"images/Start Menu.PNG\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"The Start Menu allows you to access various Menus in the application based on the feature that you would like to access.","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"For example, the Staff Menu allows you to access the Staff feature within the database. ","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"blank-bank"},"content":"The welcome screen of HealthVault presents you with the basic commands and a description of their functionalities.","lastModifiedDate":"2021-04-01"},{"lineNumber":146,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"Input any command to access the respective features and input the `exit` command to quit the application.","lastModifiedDate":"2021-04-01"},{"lineNumber":148,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"### 4.1 Interpreting help commands","lastModifiedDate":"2021-04-01"},{"lineNumber":150,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":151,"author":{"gitId":"AlexanderTanJunAn"},"content":":information_source: All instances of commands and code will be highlighted in grey and will have a different font.","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"blank-bank"},"content":"This is an example of a typical help command in the application.","lastModifiedDate":"2021-04-01"},{"lineNumber":154,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"images/StaffHelp.PNG\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"The **Commands** column gives the command that allows you to accomplish a certain action with the relevant features. ","lastModifiedDate":"2021-04-01"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"For example, the `add` command allows you to add a new staff and their relevant details into the database.","lastModifiedDate":"2021-04-01"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":159,"author":{"gitId":"blank-bank"},"content":"The **Description** column gives you an explaination on the usage and purpose of the command.","lastModifiedDate":"2021-04-01"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":161,"author":{"gitId":"blank-bank"},"content":"The **Format** column gives the appropriate format for you to use the command.","lastModifiedDate":"2021-04-01"},{"lineNumber":162,"author":{"gitId":"blank-bank"},"content":"For example, the `add` format requires specific details regarding the staff that will be added into the database.","lastModifiedDate":"2021-04-01"},{"lineNumber":163,"author":{"gitId":"blank-bank"},"content":"The \u0027-\u0027 in the format column specifies that the command can be used alone without any additional details.","lastModifiedDate":"2021-04-01"},{"lineNumber":164,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"The detailed explaination of each command will be explained in the subsequent sections.","lastModifiedDate":"2021-04-01"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":169,"author":{"gitId":"NoorSarrah"},"content":"## 5. Features ","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":" :exclamation: WARNING: You are recommended not to edit any text files generated by HealthVault manually. ","lastModifiedDate":"2021-04-01"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":173,"author":{"gitId":"NoorSarrah"},"content":"### 5.1 Staff","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"NoorSarrah"},"content":"The functions in Staff menu allow you, the head nurse, to access and modify the details of each staff in the hospital. ","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"NoorSarrah"},"content":"(Note for Staff ID: D/N \u003d Doctor/Nurse)","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"This is an example of the welcome screen for Staff Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"images/StaffWelcome.PNG\" width \u003d \"850\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":181,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":182,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":183,"author":{"gitId":"NoorSarrah"},"content":"#### Adding a new staff: `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new doctor or nurse to the respective staff lists. ","lastModifiedDate":"2021-04-01"},{"lineNumber":185,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":187,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":188,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `add/[Staff ID]/[Name]/[Age]/[Specialisation]` ","lastModifiedDate":"2021-04-01"},{"lineNumber":189,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":190,"author":{"gitId":"blank-bank"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":191,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted user ID starts with a D (for doctor ID) or N (for nurse ID)  and has **exactly** 5 digits in the number following!","lastModifiedDate":"2021-04-04"},{"lineNumber":192,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":193,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `N12345`, `D54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":194,"author":{"gitId":"blank-bank"},"content":"\u003e   ","lastModifiedDate":"2021-04-01"},{"lineNumber":195,"author":{"gitId":"Chiamjiaen"},"content":"\u003e2. Any input field in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-04"},{"lineNumber":196,"author":{"gitId":"Chiamjiaen"},"content":"\u003e3. The age field input should be a positive integer starting from 0 but less than 150","lastModifiedDate":"2021-04-04"},{"lineNumber":197,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":198,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":199,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":200,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":201,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adding a Pediatrician Doctor MingShun with Staff ID of D12345 of age 30","lastModifiedDate":"2021-04-01"},{"lineNumber":202,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":203,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Staff --\u003e add/D12345/MingShun/30/Pediatrician```","lastModifiedDate":"2021-04-01"},{"lineNumber":204,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":205,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":206,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":207,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/StaffAdd.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":208,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":209,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":210,"author":{"gitId":"blank-bank"},"content":" ","lastModifiedDate":"2021-04-01"},{"lineNumber":211,"author":{"gitId":"NoorSarrah"},"content":"#### Deleting a staff: `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":212,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":213,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deletes a staff from the staff list.","lastModifiedDate":"2021-04-01"},{"lineNumber":214,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":215,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":216,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":217,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `delete/[Staff ID]`","lastModifiedDate":"2021-04-01"},{"lineNumber":218,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":219,"author":{"gitId":"blank-bank"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":220,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted user ID starts with a D (for doctor ID) or N (for nurse ID)  and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":221,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":222,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `N12345`, `D54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":223,"author":{"gitId":"blank-bank"},"content":"\u003e   ","lastModifiedDate":"2021-04-01"},{"lineNumber":224,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":225,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":226,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":227,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deleting Staff with ID D12345.","lastModifiedDate":"2021-04-01"},{"lineNumber":228,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":229,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Staff --\u003e delete/D12345 ```","lastModifiedDate":"2021-04-01"},{"lineNumber":230,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":231,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":232,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":233,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffDelete.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":234,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":235,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":236,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":237,"author":{"gitId":"NoorSarrah"},"content":"#### Listing all doctors or nurses: `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Lists either all doctors or all nurses.","lastModifiedDate":"2021-04-01"},{"lineNumber":239,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":240,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":241,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":242,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `list/\u003cdoctors/nurses\u003e`","lastModifiedDate":"2021-04-01"},{"lineNumber":243,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":244,"author":{"gitId":"blank-bank"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":245,"author":{"gitId":"blank-bank"},"content":"\u003e1. \u003c\u003e implies that the inputs are optional","lastModifiedDate":"2021-04-01"},{"lineNumber":246,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":247,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `list`, `list/doctors`","lastModifiedDate":"2021-04-01"},{"lineNumber":248,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":249,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (doctors)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":250,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":251,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; List all Doctors Details.","lastModifiedDate":"2021-04-01"},{"lineNumber":252,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":253,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Staff --\u003e list/doctors ```","lastModifiedDate":"2021-04-01"},{"lineNumber":254,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":255,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome (doctors)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":256,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":257,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffListDoc.PNG\" width \u003d \"850\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":258,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":259,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":260,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (nurses)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":261,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":262,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; List all Nurses Details.","lastModifiedDate":"2021-04-01"},{"lineNumber":263,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":264,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Staff --\u003e list/nurses ```","lastModifiedDate":"2021-04-01"},{"lineNumber":265,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":266,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome (nurses)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":267,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":268,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffListNurse.PNG\" width \u003d \"850\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":269,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":270,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":271,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (no input)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":272,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":273,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; List all Staff Details.","lastModifiedDate":"2021-04-01"},{"lineNumber":274,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":275,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Staff --\u003e list```","lastModifiedDate":"2021-04-01"},{"lineNumber":276,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":277,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome(no input)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":278,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":279,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffList.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":280,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":281,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":282,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":283,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":284,"author":{"gitId":"blank-bank"},"content":"#### Finding a staff: `find`","lastModifiedDate":"2021-04-01"},{"lineNumber":285,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Find a staff from the staff list with a keyword.","lastModifiedDate":"2021-04-01"},{"lineNumber":286,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":287,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":288,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":289,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `find/[keyword]`","lastModifiedDate":"2021-04-01"},{"lineNumber":290,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":291,"author":{"gitId":"blank-bank"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":292,"author":{"gitId":"blank-bank"},"content":"\u003e1. Any keyword input will be searched through every field of Staff details. i.e. It can be used to search Staff ID, name, age and specialisation.","lastModifiedDate":"2021-04-01"},{"lineNumber":293,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":294,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `find/19`, `find/D12345`","lastModifiedDate":"2021-04-01"},{"lineNumber":295,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":296,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":297,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":298,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Find all Staff with Oncology specialisation.","lastModifiedDate":"2021-04-01"},{"lineNumber":299,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":300,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Staff --\u003e find/Oncology```","lastModifiedDate":"2021-04-01"},{"lineNumber":301,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":302,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":303,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":304,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/StaffFind.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":305,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":306,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":307,"author":{"gitId":"NoorSarrah"},"content":"#### Returning to Start Menu: `return`","lastModifiedDate":"2021-03-31"},{"lineNumber":308,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":309,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Return you to the Start Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":310,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":311,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":312,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":313,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffReturn.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":314,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":315,"author":{"gitId":"NoorSarrah"},"content":"#### Help: `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":316,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":317,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Display the commands for the Staff Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":318,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":319,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":320,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":321,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cimg src\u003d\"images/StaffHelp.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":322,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":323,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":324,"author":{"gitId":"NoorSarrah"},"content":"### 5.2 Patient","lastModifiedDate":"2021-03-31"},{"lineNumber":325,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":326,"author":{"gitId":"NoorSarrah"},"content":"The functions in the Patient menu allow you, the head nurse, to add, view, find, and delete patients in the patient list.","lastModifiedDate":"2021-03-31"},{"lineNumber":327,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":328,"author":{"gitId":"Chiamjiaen"},"content":"When you first enter the Patient menu, you will be greeted with the following welcome message.","lastModifiedDate":"2021-04-01"},{"lineNumber":329,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":330,"author":{"gitId":"Chiamjiaen"},"content":"\u003cimg src \u003d \"images/PatientWelcome.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":331,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":332,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":333,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":334,"author":{"gitId":"NoorSarrah"},"content":"#### Adding a new patient: `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":335,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new patient to the patient list.","lastModifiedDate":"2021-04-01"},{"lineNumber":336,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":337,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":338,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":339,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `add/[Patient ID]/[Name]/[Age]/[Gender]/[Illness]/[Drugs needed]`","lastModifiedDate":"2021-04-01"},{"lineNumber":340,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":341,"author":{"gitId":"Chiamjiaen"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":342,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":343,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted user ID starts with a P and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":344,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":345,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `P12345`, `P54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":346,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":347,"author":{"gitId":"Chiamjiaen"},"content":"\u003e2. Any input field in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-04"},{"lineNumber":348,"author":{"gitId":"Chiamjiaen"},"content":"\u003e3. The gender field input should only be \"M\", \"F\" or \"Others\"","lastModifiedDate":"2021-04-01"},{"lineNumber":349,"author":{"gitId":"Chiamjiaen"},"content":"\u003e4. The age field input should be a positive integer starting from 0 but less than 150","lastModifiedDate":"2021-04-04"},{"lineNumber":350,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":351,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":352,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":353,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adding a Patient Sam (Age 40, Male who is having a fever and needs Paracetamol) with the Patient ID of P55555. ","lastModifiedDate":"2021-04-01"},{"lineNumber":354,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":355,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Patient --\u003e add/P55555/Sam/40/M/Fever/Paracetamol```","lastModifiedDate":"2021-04-01"},{"lineNumber":356,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":357,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":358,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":359,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src \u003d \"images/PatientAdd.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":360,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":361,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":362,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":363,"author":{"gitId":"NoorSarrah"},"content":"#### Deleting a patient: `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":364,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deletes a patient from the patient list.","lastModifiedDate":"2021-04-01"},{"lineNumber":365,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":366,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":367,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":368,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `delete/[Patient ID]`","lastModifiedDate":"2021-04-01"},{"lineNumber":369,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":370,"author":{"gitId":"Chiamjiaen"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":371,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":372,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted user ID starts with a P and has **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":373,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":374,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `P12345`, `P54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":375,"author":{"gitId":"blank-bank"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":376,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":377,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":378,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":379,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Patient --\u003e delete/P55555```","lastModifiedDate":"2021-04-01"},{"lineNumber":380,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":381,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":382,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":383,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src \u003d \"images/PatientDelete.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":384,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":385,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":386,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":387,"author":{"gitId":"NoorSarrah"},"content":"#### Listing all patients: `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":388,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":389,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Lists all patients in the patient list.","lastModifiedDate":"2021-04-01"},{"lineNumber":390,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":391,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":392,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":393,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `list`","lastModifiedDate":"2021-04-01"},{"lineNumber":394,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":395,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":396,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":397,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Staff --\u003e list```","lastModifiedDate":"2021-04-01"},{"lineNumber":398,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":399,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":400,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":401,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src \u003d \"images/PatientList.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":402,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":403,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":404,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":405,"author":{"gitId":"NoorSarrah"},"content":"#### Finding a patient: `find`","lastModifiedDate":"2021-03-31"},{"lineNumber":406,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Finds a patient currently in the patient list.","lastModifiedDate":"2021-04-01"},{"lineNumber":407,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":408,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":409,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":410,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `find/[Keyword/Phrase]`","lastModifiedDate":"2021-04-01"},{"lineNumber":411,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":412,"author":{"gitId":"Chiamjiaen"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":413,"author":{"gitId":"blank-bank"},"content":"\u003e1. Any keyword input will be searched through every field of Patient details. i.e. It can be used to search Patient ID, name, age, illness, medication required.","lastModifiedDate":"2021-04-01"},{"lineNumber":414,"author":{"gitId":"Chiamjiaen"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":415,"author":{"gitId":"blank-bank"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `find/19`, `find/P12345`","lastModifiedDate":"2021-04-01"},{"lineNumber":416,"author":{"gitId":"Chiamjiaen"},"content":"\u003e ","lastModifiedDate":"2021-04-04"},{"lineNumber":417,"author":{"gitId":"Chiamjiaen"},"content":"\u003e The keyword input can be case insensitive and still find matches in the database.","lastModifiedDate":"2021-04-04"},{"lineNumber":418,"author":{"gitId":"Chiamjiaen"},"content":"\u003e ","lastModifiedDate":"2021-04-04"},{"lineNumber":419,"author":{"gitId":"Chiamjiaen"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `find/john` is able to match with a name field \"John\" or \"JOHN\"","lastModifiedDate":"2021-04-04"},{"lineNumber":420,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":421,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":422,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":423,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Finding through inputting the ID","lastModifiedDate":"2021-04-01"},{"lineNumber":424,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":425,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Patient --\u003e find/P54321```","lastModifiedDate":"2021-04-01"},{"lineNumber":426,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":427,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":428,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":429,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src \u003d \"images/PatientFindID.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":430,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":431,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":432,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":433,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Finding through inputting the name","lastModifiedDate":"2021-04-01"},{"lineNumber":434,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":435,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Patient --\u003e find/Sam```","lastModifiedDate":"2021-04-01"},{"lineNumber":436,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":437,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":438,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":439,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src \u003d \"images/PatientFindName.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":440,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":441,"author":{"gitId":"Chiamjiaen"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":442,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":443,"author":{"gitId":"NoorSarrah"},"content":"#### Help: `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":444,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":445,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Display the commands for the Staff Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":446,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":447,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":448,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":449,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/PatientHelp.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":450,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":451,"author":{"gitId":"Chiamjiaen"},"content":"#### Returning to Start Menu: `return`","lastModifiedDate":"2021-04-01"},{"lineNumber":452,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":453,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Return you to the Start Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":454,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":455,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":456,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":457,"author":{"gitId":"blank-bank"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/PatientReturn.PNG\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":458,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":459,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":460,"author":{"gitId":"NoorSarrah"},"content":"### 5.3 Doctor\u0027s Appointment","lastModifiedDate":"2021-03-31"},{"lineNumber":461,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":462,"author":{"gitId":"MingShun98"},"content":"The functions in the Doctors\u0027 Appointment menu allow you, the head nurse, to add, view, and delete appointments made with a specific doctor.","lastModifiedDate":"2021-04-09"},{"lineNumber":463,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":464,"author":{"gitId":"MingShun98"},"content":"This is an example of the welcome screen for Doctors\u0027 Appointment Menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":465,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":466,"author":{"gitId":"MingShun98"},"content":"\u003cimg src\u003d\"images/DoctorAppointmentWelcome.jpg\" width \u003d \"800\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":467,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":468,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":469,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":470,"author":{"gitId":"NoorSarrah"},"content":"#### Adding an appointment: `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":471,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new doctor\u0027s appointment to the list of appointments.","lastModifiedDate":"2021-04-01"},{"lineNumber":472,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":473,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":474,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":475,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `add/[Doctor ID]/[Appointment ID]/[Patient’s Name]/[Gender]/[DDMMYYYY]` ","lastModifiedDate":"2021-04-01"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":477,"author":{"gitId":"MingShun98"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":478,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":479,"author":{"gitId":"MingShun98"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":480,"author":{"gitId":"MingShun98"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `D12345`, `A54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":481,"author":{"gitId":"MingShun98"},"content":"\u003e   ","lastModifiedDate":"2021-04-01"},{"lineNumber":482,"author":{"gitId":"blank-bank"},"content":"\u003e2. Any input fields in HealthVault only accepts space and alphanumeric characters","lastModifiedDate":"2021-04-01"},{"lineNumber":483,"author":{"gitId":"MingShun98"},"content":"\u003e3. The gender field input should only be \"M\", \"F\".","lastModifiedDate":"2021-04-01"},{"lineNumber":484,"author":{"gitId":"MingShun98"},"content":"\u003e4. This function **allows** the adding of past appointments, **Example**: `add/D12345/A12345/Alex/M/21011998`.","lastModifiedDate":"2021-04-09"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":486,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":487,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":488,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":489,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adding an appointment for Alex, a male, with Doctor ID D12345 on 21/01/2021.","lastModifiedDate":"2021-04-01"},{"lineNumber":490,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":491,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e add/D12345/A12345/Alex/M/21012021```","lastModifiedDate":"2021-04-01"},{"lineNumber":492,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":493,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":494,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":495,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentAdd.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":496,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":497,"author":{"gitId":"MingShun98"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":498,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":499,"author":{"gitId":"MingShun98"},"content":"#### Deleting an appointment: `delete`","lastModifiedDate":"2021-04-01"},{"lineNumber":500,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deletes an appointment from the list of appointments or deletes all appointments belonging to a doctor.","lastModifiedDate":"2021-04-01"},{"lineNumber":501,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":502,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":503,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":504,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `delete/[DoctorID/ Appointment ID]` ","lastModifiedDate":"2021-04-01"},{"lineNumber":505,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":506,"author":{"gitId":"MingShun98"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":507,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":508,"author":{"gitId":"MingShun98"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":509,"author":{"gitId":"MingShun98"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `D12345`, `A54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":510,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-01"},{"lineNumber":511,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":512,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (Doctor ID)**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":513,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":514,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deleting all Appointments for Doctor with ID D12345.","lastModifiedDate":"2021-04-01"},{"lineNumber":515,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":516,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e delete/D12345```","lastModifiedDate":"2021-04-01"},{"lineNumber":517,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":518,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":519,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":520,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentDeleteDocID.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":521,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":522,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (Appointment ID)**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":523,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":524,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deleting the Appointment with ID A12346","lastModifiedDate":"2021-04-01"},{"lineNumber":525,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":526,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e delete/A12346```","lastModifiedDate":"2021-04-01"},{"lineNumber":527,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":528,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":529,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":530,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentDeleteAptID.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":531,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":532,"author":{"gitId":"MingShun98"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":533,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":534,"author":{"gitId":"MingShun98"},"content":"#### Listing an appointment: `list`","lastModifiedDate":"2021-04-01"},{"lineNumber":535,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Lists all of the appointments of a specific doctor or list an individual appointment.","lastModifiedDate":"2021-04-01"},{"lineNumber":536,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":537,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**:","lastModifiedDate":"2021-04-01"},{"lineNumber":538,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":539,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `list/[all/ DoctorID/ Appointment ID]` ","lastModifiedDate":"2021-04-09"},{"lineNumber":540,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":541,"author":{"gitId":"MingShun98"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":542,"author":{"gitId":"MingShun98"},"content":"\u003e1. Make sure the input `all` is lower caps.","lastModifiedDate":"2021-04-09"},{"lineNumber":543,"author":{"gitId":"MingShun98"},"content":"\u003e2. Make sure that the inputted doctor/appointment ID starts with a D/A and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-09"},{"lineNumber":544,"author":{"gitId":"MingShun98"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":545,"author":{"gitId":"MingShun98"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `D12345`, `A54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":546,"author":{"gitId":"MingShun98"},"content":"\u003e ","lastModifiedDate":"2021-04-01"},{"lineNumber":547,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":548,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (All)**:\u003cbr/\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":549,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":550,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Listing all Appointments currently in the database.","lastModifiedDate":"2021-04-09"},{"lineNumber":551,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":552,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e list/all```","lastModifiedDate":"2021-04-09"},{"lineNumber":553,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":554,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-09"},{"lineNumber":555,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":556,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentListAll.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":557,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":558,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (Doctor ID)**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":559,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":560,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Listing all Appointments for Doctor with ID D12345.","lastModifiedDate":"2021-04-01"},{"lineNumber":561,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":562,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e list/D12345```","lastModifiedDate":"2021-04-01"},{"lineNumber":563,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":564,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":565,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":566,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentListDocID.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":567,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":568,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage (Appointment ID)**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":569,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":570,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; List the Appointment with ID A12345","lastModifiedDate":"2021-04-01"},{"lineNumber":571,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":572,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` Appointments --\u003e list/A12345```","lastModifiedDate":"2021-04-01"},{"lineNumber":573,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":574,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":575,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":576,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentListAptID.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":577,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":578,"author":{"gitId":"MingShun98"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":579,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":580,"author":{"gitId":"MingShun98"},"content":"#### Returns to Start Menu: `return`","lastModifiedDate":"2021-04-01"},{"lineNumber":581,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Returning to the Main Menu from the Doctor Appointment\u0027s Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":582,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":583,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":584,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":585,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentReturn.jpg\" width \u003d \"800\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":586,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":587,"author":{"gitId":"MingShun98"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":588,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":589,"author":{"gitId":"MingShun98"},"content":"#### Help: `help`","lastModifiedDate":"2021-04-01"},{"lineNumber":590,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Display the commands for the Doctor Appointment\u0027s Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":591,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":592,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":593,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":594,"author":{"gitId":"MingShun98"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/DoctorAppointmentHelp.jpg\" width \u003d \"850\" \u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":595,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":596,"author":{"gitId":"MingShun98"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":597,"author":{"gitId":"AlexanderTanJunAn"},"content":"### 5.4 Schedules for Nurses","lastModifiedDate":"2021-04-04"},{"lineNumber":598,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":599,"author":{"gitId":"NoorSarrah"},"content":"The functions in the Nurse Schedule menu allow you, the head nurse, to add, view, and delete schedules of your nurses.","lastModifiedDate":"2021-03-31"},{"lineNumber":600,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":601,"author":{"gitId":"AlexanderTanJunAn"},"content":"This is an example of the welcome screen for the Nurse Schedule Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":602,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cimg src\u003d\"images/NurseScheduleStartScreen.png\" width \u003d \"600\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":603,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":604,"author":{"gitId":"AlexanderTanJunAn"},"content":"#### Adding a new schedule: `add`","lastModifiedDate":"2021-03-28"},{"lineNumber":605,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":606,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new schedule to the list of nurse schedules.","lastModifiedDate":"2021-04-01"},{"lineNumber":607,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":608,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":609,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":610,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  `add/[Nurse ID]/[Patient ID]/[Date (DDMMYYYY)]`","lastModifiedDate":"2021-04-01"},{"lineNumber":611,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":612,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":613,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e1. Make sure Nurse ID exists in Staff and Patient ID exists in Patients before adding.","lastModifiedDate":"2021-04-04"},{"lineNumber":614,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e2. Make sure that the inputted user ID starts with a N for Nurse, P for Patient and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":615,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":616,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `N12345`, `P54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":617,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":618,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e3. Any input fields in HealthVault only accepts space and alphanumeric characters.","lastModifiedDate":"2021-04-04"},{"lineNumber":619,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e4. HealhVault currently only allows the adding of **1** schedule per patient per day.","lastModifiedDate":"2021-04-04"},{"lineNumber":620,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":621,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":622,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":623,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adding a schedule for Nurse ID N12345 to visit P12345 on 30/01/2020","lastModifiedDate":"2021-04-01"},{"lineNumber":624,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":625,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` NSchedule --\u003e add/N12345/P12345/30012020 ```","lastModifiedDate":"2021-04-03"},{"lineNumber":626,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":627,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":628,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":629,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/NurseScheduleAdd.png\" width \u003d \"500\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":630,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":631,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":632,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":633,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":634,"author":{"gitId":"NoorSarrah"},"content":"#### Deleting a schedule: `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":635,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deletes a schedule from the list of nurse schedules.","lastModifiedDate":"2021-04-01"},{"lineNumber":636,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":637,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":638,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":639,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `delete/[Nurse ID]/[Date (DDMMYYYY)]`","lastModifiedDate":"2021-04-01"},{"lineNumber":640,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":641,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":642,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":643,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted Nurse ID starts with a N for Nurse, and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":644,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":645,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `N12345`, `P54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":646,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":647,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e2. HealthVault only accepts valid Date inputs.","lastModifiedDate":"2021-04-01"},{"lineNumber":648,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":649,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":650,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":651,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Deletes a schedule with the specified Nurse ID and Date.","lastModifiedDate":"2021-04-01"},{"lineNumber":652,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":653,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` NSchedule --\u003e delete/N12345/30012020 ```","lastModifiedDate":"2021-04-03"},{"lineNumber":654,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":655,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":656,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":657,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/NurseScheduleDelete.png\" width \u003d \"550\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":658,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":659,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":660,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":661,"author":{"gitId":"AlexanderTanJunAn"},"content":"#### Listing schedules: `list`","lastModifiedDate":"2021-03-28"},{"lineNumber":662,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; List either all schedules or specified Nurse ID\u0027s schedule.","lastModifiedDate":"2021-04-01"},{"lineNumber":663,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":664,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":665,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; `list/[Nurse ID/all]`","lastModifiedDate":"2021-04-01"},{"lineNumber":666,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":667,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":668,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":669,"author":{"gitId":"Chiamjiaen"},"content":"\u003e1. Make sure that the inputted Nurse ID starts with a N for Nurse, and have **exactly** 5 digits in the number following! ","lastModifiedDate":"2021-04-04"},{"lineNumber":670,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":671,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `N12345`, `P54321`","lastModifiedDate":"2021-04-01"},{"lineNumber":672,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":673,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage(Nurse ID)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":674,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":675,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Listing all schedules of specified Nurse ID.","lastModifiedDate":"2021-04-01"},{"lineNumber":676,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":677,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` NSchedule --\u003e list/N12345 ```","lastModifiedDate":"2021-04-01"},{"lineNumber":678,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":679,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome(Nurse ID)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":680,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":681,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cimg src\u003d\"images/NurseScheduleListNurseID.png\" width \u003d \"550\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":682,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":683,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":684,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":685,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage(all)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":686,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":687,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Listing all schedules.","lastModifiedDate":"2021-04-01"},{"lineNumber":688,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":689,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ``` NSchedule --\u003e list/all ```","lastModifiedDate":"2021-04-01"},{"lineNumber":690,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":691,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome(all)**:","lastModifiedDate":"2021-04-01"},{"lineNumber":692,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":693,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/NurseScheduleListAll.png\" width \u003d \"550\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":695,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":696,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":697,"author":{"gitId":"NoorSarrah"},"content":"#### Returning to Start Menu: `return`","lastModifiedDate":"2021-03-31"},{"lineNumber":698,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":699,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Returns to Start Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":700,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":701,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":703,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/NurseScheduleReturn.png\" width \u003d \"250\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":705,"author":{"gitId":"AlexanderTanJunAn"},"content":"#### Help: `help`","lastModifiedDate":"2021-04-01"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":707,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Prints Nurse Schedule help message.","lastModifiedDate":"2021-04-01"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":709,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":711,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/NurseScheduleHelp.png\" width \u003d \"850\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":712,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":713,"author":{"gitId":"AlexanderTanJunAn"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":714,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":715,"author":{"gitId":"NoorSarrah"},"content":"### 5.5 Inventory","lastModifiedDate":"2021-03-31"},{"lineNumber":716,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":717,"author":{"gitId":"NoorSarrah"},"content":"The functions in the Inventory menu allow you, the head nurse, to add, view, and delete drugs existing in your inventory.","lastModifiedDate":"2021-03-31"},{"lineNumber":718,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":719,"author":{"gitId":"NoorSarrah"},"content":"This is an example of the welcome screen for the Inventory Menu.","lastModifiedDate":"2021-04-05"},{"lineNumber":720,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":721,"author":{"gitId":"blank-bank"},"content":"\u003cimg src\u003d\"images/InventoryWelcomeHeader.PNG\" width \u003d \"600\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":722,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":723,"author":{"gitId":"NoorSarrah"},"content":"#### Adding a drug: `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":724,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":725,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new drug or increase the quantity of an existing drug in the drug inventory.","lastModifiedDate":"2021-04-04"},{"lineNumber":726,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":727,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":728,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  `add/[Name]/[Price]/[Quantity]`","lastModifiedDate":"2021-04-01"},{"lineNumber":729,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":730,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the input format","lastModifiedDate":"2021-04-01"},{"lineNumber":731,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":732,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Make sure that the inputted price is valid and does not have more than 2 decimal places!","lastModifiedDate":"2021-04-04"},{"lineNumber":733,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":734,"author":{"gitId":"NoorSarrah"},"content":"\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example**: `3`, `3.0`, `3.00`","lastModifiedDate":"2021-04-01"},{"lineNumber":735,"author":{"gitId":"NoorSarrah"},"content":"\u003e   ","lastModifiedDate":"2021-04-01"},{"lineNumber":736,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Any input fields in HealthVault only accepts space and alphanumeric characters!","lastModifiedDate":"2021-04-04"},{"lineNumber":737,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":738,"author":{"gitId":"NoorSarrah"},"content":"\u003e3. Note that the examples for adding a new drug and increasing the quantity of an existing drug are related!","lastModifiedDate":"2021-04-04"},{"lineNumber":739,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":740,"author":{"gitId":"NoorSarrah"},"content":"\u003e4. Avoid using uppercase letters!","lastModifiedDate":"2021-04-05"},{"lineNumber":741,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":742,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **1. Example of usage(add a new drug)**:","lastModifiedDate":"2021-04-04"},{"lineNumber":743,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":744,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Inventory --\u003e add/paracetamol/3/90```","lastModifiedDate":"2021-04-01"},{"lineNumber":745,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":746,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":747,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":748,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/InventoryAddDrug.PNG\" width \u003d \"500\"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":749,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":750,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **List example**:","lastModifiedDate":"2021-04-04"},{"lineNumber":751,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":752,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```DrugName        | Price      | Quantity```","lastModifiedDate":"2021-04-04"},{"lineNumber":753,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":754,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```------------------------------------------------------------```","lastModifiedDate":"2021-04-04"},{"lineNumber":755,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":756,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```paracetamol     | 3.00       | 90   ```","lastModifiedDate":"2021-04-04"},{"lineNumber":757,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":758,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **1. Example of usage(increases quantity of existing drug)**:","lastModifiedDate":"2021-04-04"},{"lineNumber":759,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":760,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Inventory --\u003e add/paracetamol/3/50```","lastModifiedDate":"2021-04-04"},{"lineNumber":761,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":762,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-04"},{"lineNumber":763,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":764,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/inventoryIncreaseQuantity.PNG\" width \u003d \"500\"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":765,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":766,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **List example**:","lastModifiedDate":"2021-04-04"},{"lineNumber":767,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":768,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```DrugName        | Price      | Quantity```","lastModifiedDate":"2021-04-04"},{"lineNumber":769,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":770,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```------------------------------------------------------------```","lastModifiedDate":"2021-04-04"},{"lineNumber":771,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":772,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```paracetamol     | 3.00       | 140   ```","lastModifiedDate":"2021-04-04"},{"lineNumber":773,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":774,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":775,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":776,"author":{"gitId":"NoorSarrah"},"content":"#### Deleting a drug: `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":777,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Decreases the quantity of an existing drug in the inventory list.","lastModifiedDate":"2021-04-04"},{"lineNumber":778,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":779,"author":{"gitId":"NoorSarrah"},"content":"\u003e:information_source: Important notes about the format","lastModifiedDate":"2021-04-04"},{"lineNumber":780,"author":{"gitId":"NoorSarrah"},"content":"\u003e1. Note that the example from add(increasing quantity of existing drug) feature is used for this feature\u0027s example!","lastModifiedDate":"2021-04-04"},{"lineNumber":781,"author":{"gitId":"NoorSarrah"},"content":"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":782,"author":{"gitId":"NoorSarrah"},"content":"\u003e2. Avoid using uppercase letters","lastModifiedDate":"2021-04-05"},{"lineNumber":783,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":784,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":785,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  `delete/[Name]/[Quantity]`","lastModifiedDate":"2021-04-04"},{"lineNumber":786,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":787,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":788,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":789,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Inventory --\u003e delete/paracetamol/20```","lastModifiedDate":"2021-04-04"},{"lineNumber":790,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":791,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":792,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":793,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/InventoryDecreaseQuantity.PNG\" width \u003d \"550\"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":794,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":795,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **List example**:","lastModifiedDate":"2021-04-04"},{"lineNumber":796,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":797,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```DrugName        | Price      | Quantity```","lastModifiedDate":"2021-04-04"},{"lineNumber":798,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":799,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```------------------------------------------------------------```","lastModifiedDate":"2021-04-04"},{"lineNumber":800,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":801,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```paracetamol     | 3.00       | 120   ```","lastModifiedDate":"2021-04-04"},{"lineNumber":802,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":803,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":804,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":805,"author":{"gitId":"NoorSarrah"},"content":"#### Listing drugs: `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":806,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Lists all the drugs in the inventory.","lastModifiedDate":"2021-04-01"},{"lineNumber":807,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":808,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Format**: ","lastModifiedDate":"2021-04-01"},{"lineNumber":809,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  `list`","lastModifiedDate":"2021-04-01"},{"lineNumber":810,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":811,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Example of usage**:","lastModifiedDate":"2021-04-01"},{"lineNumber":812,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":813,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ```Inventory --\u003e list```","lastModifiedDate":"2021-04-01"},{"lineNumber":814,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":815,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":816,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":817,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/InventoryList.PNG\" width \u003d \"600\"\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":818,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":819,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":820,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":821,"author":{"gitId":"NoorSarrah"},"content":"#### Returning to Start Menu: `return`","lastModifiedDate":"2021-03-31"},{"lineNumber":822,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":823,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Returns to Start Menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":824,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":825,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":826,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":827,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/InventoryReturn.PNG\" width \u003d \"600\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":828,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":829,"author":{"gitId":"NoorSarrah"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":830,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":831,"author":{"gitId":"NoorSarrah"},"content":"#### Help: `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":832,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":833,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Prints Inventory help message.","lastModifiedDate":"2021-04-01"},{"lineNumber":834,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":835,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; **Expected Outcome**:","lastModifiedDate":"2021-04-01"},{"lineNumber":836,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":837,"author":{"gitId":"NoorSarrah"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cimg src\u003d\"images/InventoryHelpNew.PNG\" width \u003d \"600\"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":838,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":839,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":840,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":841,"author":{"gitId":"NoorSarrah"},"content":"## 6. FAQ","lastModifiedDate":"2021-03-31"},{"lineNumber":842,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":843,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? ","lastModifiedDate":"2020-05-24"},{"lineNumber":844,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":845,"author":{"gitId":"blank-bank"},"content":"**A**: Navigate to where the TP jar file is located and identify the data folder. Simply copy this data folder and transfer it via thumbdrive or other means to your other computer. When setting up the jar file in a new folder in your other computer, move the data folder into the new folder in which you have set up the jar before starting the application. You\u0027re now good to go to start accessing the data on your new computer!","lastModifiedDate":"2021-04-01"},{"lineNumber":846,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":847,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":848,"author":{"gitId":"blank-bank"},"content":"**Q**: Why is HealthVault telling me there is a Corrupted File?","lastModifiedDate":"2021-04-01"},{"lineNumber":849,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":850,"author":{"gitId":"Chiamjiaen"},"content":"**A**: Corrupted Files are a result of editing the text file manually and causing unpermissible inputs into the data fields. As a result HealthVault is unable process and retrieve the data.","lastModifiedDate":"2021-04-04"},{"lineNumber":851,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":852,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":853,"author":{"gitId":"blank-bank"},"content":"**Q**: What do i do when HealthVault tells me there is a Corrupted File?","lastModifiedDate":"2021-04-01"},{"lineNumber":854,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":855,"author":{"gitId":"blank-bank"},"content":"**A**: First, exit the HealthVault application. Then locate the relevant .txt file that is corrupted. Either delete the .txt file, or edit the .txt file so that it matches the required input fields that is accepted by HealthVault. Finally relaunch the HealthVault application.","lastModifiedDate":"2021-04-01"},{"lineNumber":856,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":857,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":858,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":859,"author":{"gitId":"blank-bank"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":860,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":861,"author":{"gitId":"NoorSarrah"},"content":"## 7. Command Summary","lastModifiedDate":"2021-03-31"},{"lineNumber":862,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":863,"author":{"gitId":"AlexanderTanJunAn"},"content":"| Command             | Example                                                                                                    |","lastModifiedDate":"2021-03-29"},{"lineNumber":864,"author":{"gitId":"AlexanderTanJunAn"},"content":"|---------------------|------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2021-03-29"},{"lineNumber":865,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Start Menu**      |                                                                                                            |","lastModifiedDate":"2021-03-29"},{"lineNumber":866,"author":{"gitId":"AlexanderTanJunAn"},"content":"| staff               | `staff`                                                                                                    |","lastModifiedDate":"2021-03-29"},{"lineNumber":867,"author":{"gitId":"AlexanderTanJunAn"},"content":"| patient             | `patient`                                                                                                  |","lastModifiedDate":"2021-03-29"},{"lineNumber":868,"author":{"gitId":"AlexanderTanJunAn"},"content":"| appointments        | `appointments`                                                                                             |","lastModifiedDate":"2021-03-29"},{"lineNumber":869,"author":{"gitId":"AlexanderTanJunAn"},"content":"| schedules           | `schedules`                                                                                                |","lastModifiedDate":"2021-03-29"},{"lineNumber":870,"author":{"gitId":"AlexanderTanJunAn"},"content":"| inventory           | `inventory`                                                                                                |","lastModifiedDate":"2021-03-29"},{"lineNumber":871,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":872,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Staff**           |                                                                                                            |","lastModifiedDate":"2021-03-29"},{"lineNumber":873,"author":{"gitId":"AlexanderTanJunAn"},"content":"| add                 | `add/[Staff ID]/[Name]/[Age]/[Specialisation]`\u003cbr/\u003e\u003cbr/\u003e`add/D12345/A12345/Alex/M 21012021`                |","lastModifiedDate":"2021-03-29"},{"lineNumber":874,"author":{"gitId":"AlexanderTanJunAn"},"content":"| delete              | `delete/[Staff ID]`\u003cbr/\u003e\u003cbr/\u003e`delete/D12345`                                                               |","lastModifiedDate":"2021-03-29"},{"lineNumber":875,"author":{"gitId":"blank-bank"},"content":"| find\t\t      | `find/[keyword]`\u003cbr/\u003e\u003cbr/\u003e`find/D12345` \t\t\t\t\t\t\t\t   |","lastModifiedDate":"2021-04-01"},{"lineNumber":876,"author":{"gitId":"AlexanderTanJunAn"},"content":"| list                | `list`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":877,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":878,"author":{"gitId":"AlexanderTanJunAn"},"content":"| return              | `return`                                                                                                   |","lastModifiedDate":"2021-03-29"},{"lineNumber":879,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Patient**         |                                                                                                            |","lastModifiedDate":"2021-03-29"},{"lineNumber":880,"author":{"gitId":"AlexanderTanJunAn"},"content":"| add                 | `add/[Patient ID]/[Name] [Age]/[Gender]/[Illness]/[Drugs needed]`\u003cbr/\u003e\u003cbr/\u003e`add/P55555/Sam/40/Male Fever/Paracetamol`   |","lastModifiedDate":"2021-03-29"},{"lineNumber":881,"author":{"gitId":"AlexanderTanJunAn"},"content":"| delete              | `delete/[Patient ID]`\u003cbr/\u003e\u003cbr/\u003e`delete/P55555`                                                                          |","lastModifiedDate":"2021-03-29"},{"lineNumber":882,"author":{"gitId":"blank-bank"},"content":"| find                | `find/[keyword]`\u003cbr/\u003e\u003cbr/\u003e`find/P55555`                                                                              |","lastModifiedDate":"2021-04-01"},{"lineNumber":883,"author":{"gitId":"AlexanderTanJunAn"},"content":"| list                | `list`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":884,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":885,"author":{"gitId":"AlexanderTanJunAn"},"content":"| return              | `return`                                                                                                   |","lastModifiedDate":"2021-03-29"},{"lineNumber":886,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Doctor Appointments** |                                                                                                        |","lastModifiedDate":"2021-03-29"},{"lineNumber":887,"author":{"gitId":"MingShun98"},"content":"| add                 | `add/[Doctor ID]/[Appointment ID]/[Patient’s Name]/[Gender]/[DDMMYYYY]`\u003cbr/\u003e\u003cbr/\u003e`add/D12345/A12345/Mingshun/M/19082021`    |","lastModifiedDate":"2021-04-01"},{"lineNumber":888,"author":{"gitId":"MingShun98"},"content":"| delete              | `delete/[Doctor ID/Appointment ID]` \u003cbr/\u003e\u003cbr/\u003e`delete/D12345`\u003cbr/\u003e\u003cbr/\u003e`delete/A12345`                      |","lastModifiedDate":"2021-04-01"},{"lineNumber":889,"author":{"gitId":"MingShun98"},"content":"| list                | `list/[Doctor ID/Appointment ID]` \u003cbr/\u003e\u003cbr/\u003e`list/D12345`\u003cbr/\u003e\u003cbr/\u003e`list/A12345`\t\t\t     \t   |","lastModifiedDate":"2021-04-01"},{"lineNumber":890,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":891,"author":{"gitId":"AlexanderTanJunAn"},"content":"| return              | `return`                                                                                                   |","lastModifiedDate":"2021-03-29"},{"lineNumber":892,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Nurse Schedules** |                                                                                                            |","lastModifiedDate":"2021-03-29"},{"lineNumber":893,"author":{"gitId":"AlexanderTanJunAn"},"content":"| add                 | `add/[Nurse ID]/[Patient ID]/[DDMMYYYY]`\u003cbr/\u003e\u003cbr/\u003e`add/N12345/P56789/30012020`                             |","lastModifiedDate":"2021-03-29"},{"lineNumber":894,"author":{"gitId":"AlexanderTanJunAn"},"content":"| delete              | `delete/[Nurse ID]/[DDMMYYYY]`\u003cbr/\u003e\u003cbr/\u003e`delete/N12345/30012020`                                           |","lastModifiedDate":"2021-03-29"},{"lineNumber":895,"author":{"gitId":"AlexanderTanJunAn"},"content":"| list                | `list/[Nurse ID/all]`\u003cbr/\u003e\u003cbr/\u003e`list/N12345/list/all`                                                      |","lastModifiedDate":"2021-03-29"},{"lineNumber":896,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":897,"author":{"gitId":"AlexanderTanJunAn"},"content":"| return              | `return`                                                                                                   |","lastModifiedDate":"2021-03-29"},{"lineNumber":898,"author":{"gitId":"AlexanderTanJunAn"},"content":"| **Drugs Inventory** |                                                                                                            |","lastModifiedDate":"2021-03-29"},{"lineNumber":899,"author":{"gitId":"NoorSarrah"},"content":"| add                 | `add/[Name]/[Price]/[Quantity]`\u003cbr/\u003e\u003cbr/\u003e`add/paracetamol/3/90`                                           |","lastModifiedDate":"2021-04-04"},{"lineNumber":900,"author":{"gitId":"NoorSarrah"},"content":"| delete              | `delete/[Name]/[Quantity]`\u003cbr/\u003e\u003cbr/\u003e`delete/paracetamol/20`                                                              |","lastModifiedDate":"2021-04-04"},{"lineNumber":901,"author":{"gitId":"AlexanderTanJunAn"},"content":"| list                | `list`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":902,"author":{"gitId":"AlexanderTanJunAn"},"content":"| help                | `help`                                                                                                     |","lastModifiedDate":"2021-03-29"},{"lineNumber":903,"author":{"gitId":"AlexanderTanJunAn"},"content":"| return              | `return`                                                                                                   |","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":185,"MingShun98":123,"Chiamjiaen":91,"AlexanderTanJunAn":168,"-":31,"blank-bank":305}},{"path":"docs/diagrams/ExampleCommandPackage.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"@startuml","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"hide members","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"hide circle","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"package logic{","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"package doctorappointment {","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- ABCCommand","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"note right: ABCCommand \u003d DoctorAppointmentAddCommand, \\n DoctorAppointmentDeleteCommand,\\n DoctorAppointmentHelpCommand,\\n DoctorAppointmentListCommand, \\n DoctorAppointmentReturnCommand","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"@enduml","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"Chiamjiaen":12}},{"path":"docs/diagrams/LogicComponent.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"@startuml","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"hide members","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"hide circle","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"package logic{","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"package command{","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"package doctorappointment {","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- ABCCommand","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"package inventory {","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- DEFCommand","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"package nurseschedule {","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- GHICommand","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"package patient {","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- JKLCommand","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"package staff {","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- MNOCommand","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"package startmenu {","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"Command \u003c|-- PQRCommand","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"package errorchecker{","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"Class XYZChecker","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"note right: XYZChecker \u003d DoctorAppointmentChecker, \\n InventoryChecker, \\n MainChecker, \\n NurseScheduleChecker, \\n PatientChecker, \\n StaffChecker","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"package parser{","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"Class PQRParser","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"note right: PQRParser \u003d DoctorAppointmentParser, \\n InventoryParser, \\n NurseScheduleParser, \\n PatientParser, \\n StaffParser, \\n StartMenuParser","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .down.\u003e XYZChecker : creates \u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e ABCCommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e DEFCommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e GHICommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e JKLCommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e MNOCommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"PQRParser .up.\u003e PQRCommand : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"package instance {","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"Class ABCInstance","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"note left: ABCInstance \u003d DoctorAppointmentInstance, \\n InventoryInstance, \\n NurseScheduleInstance, \\n StaffInstance, \\n StartMenuInstance","lastModifiedDate":"2021-04-11"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"ABCInstance .RIGHT.\u003e PQRParser : creates \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"ABCInstance .RIGHT.\u003e Command : executes \u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"@enduml","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Chiamjiaen":54}},{"path":"docs/diagrams/NurseScheduleListSD.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"@startuml","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"hide footbox","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"actor user","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":NurseScheduleInstance\" as NurseScheduleInstance","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":NurseScheduleParser\" as NurseScheduleParser","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":UI\" as UI","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":NurseScheduleChecker\" as NurseScheduleChecker","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":Command\" as Command","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"participant \":NurseScheduleList\" as NurseScheduleList","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"user -\u003e NurseScheduleInstance: \"list\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleInstance -\u003e NurseScheduleParser: nurseParse()","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e UI: smartCommandRecognition()","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"UI --\u003e NurseScheduleParser: String intended_command","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e NurseScheduleParser: getDetails()","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e NurseScheduleChecker: checkEmptyInput()","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleChecker --\u003e NurseScheduleParser","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e NurseScheduleChecker: isValidDate()","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleChecker --\u003e NurseScheduleParser","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e NurseScheduleChecker: checkNumInput()","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleChecker --\u003e NurseScheduleParser","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser -\u003e NurseScheduleChecker: illegalCharacterChecker()","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleChecker --\u003e NurseScheduleParser","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleParser --\u003e NurseScheduleInstance: NurseScheduleListCommand","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleInstance -\u003e Command: execute()","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"Command -\u003e NurseScheduleList: listSchedules()","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleList -\u003e NurseScheduleList: printSchedules()","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"NurseScheduleList --\u003e NurseScheduleInstance","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"@enduml","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"AlexanderTanJunAn":48}},{"path":"docs/diagrams/PatientFindParseSD.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"@startuml","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"hide footbox","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"participant \":MainChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"participant \":UI\"","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"mainframe \u003cb\u003e sub diagram \u003c/b\u003e parsing user input in patient instance","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientParser\" -\u003e \":MainChecker\": checkNumInput()","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    \":MainChecker\" --\u003e \":PatientParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientParser\" -\u003e \":UI\" :smartCommandRecognition()","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    \":UI\" --\u003e \":PatientParser\" :String_Intended_Command","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    create \":PatientChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientParser\" -\u003e \":PatientChecker\" : checkFind()","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientChecker\" -\u003e \":PatientChecker\" : emptySpaceCheck()","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientChecker\" -\u003e \":PatientChecker\" : checkLength()","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientChecker\" -\u003e \":PatientChecker\" : illegalCharacterChecker()","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientChecker\" --\u003e \":PatientParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"@enduml","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Chiamjiaen":32}},{"path":"docs/diagrams/PatientFindSD.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"@startuml","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"hide footbox","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"actor user","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientInstance\"","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"participant \":MainChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"participant \":UI\"","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientFindCommand\"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientList\"","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"participant \":Patient\"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientUI\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"participant \":PatientStorage\"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"user -\u003e \":PatientInstance\" : \"find\"","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientInstance\" -\u003e \":PatientParser\": patientParse()","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"ref over \":PatientChecker\", \":MainChecker\", \":UI\" : parsing user input","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"create \":PatientFindCommand\"","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientParser\" -\u003e \":PatientFindCommand\"","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientFindCommand\" --\u003e \":PatientParser\" : Command","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientParser\" -\u003e \":PatientInstance\" : Command","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientInstance\" -\u003e \":PatientFindCommand\" : execute","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientFindCommand\" -\u003e \":PatientList\" : findPatients()","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"loop for all Patients in PatientList","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"    \":PatientList\" -\u003e \":Patient\" : getPatientDetails()","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"    \":Patient\" --\u003e \":PatientList\" : patient\u0027s_details","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"        alt patient details contains input string","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"            \":PatientList\" -\u003e \":PatientUI\" : printPatientDetails()","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"            \":PatientUI\" --\u003e \":PatientList\" : user shown message","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        end","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"end","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientList\" --\u003e \":PatientFindCommand\"","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientFindCommand\" --\u003e \":PatientInstance\"","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientInstance\" -\u003e \":PatientStorage\" : storePatients()","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientStorage\" --\u003e \":PatientInstance\"","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"\":PatientInstance\" --\u003e user : user sees find result","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"@enduml","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Chiamjiaen":55}},{"path":"docs/diagrams/StaffAddSD.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"@startuml","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"hide footbox","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"actor       User       as User","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"participant \":StaffInstance\"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"participant \":StaffParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"participant \":MainChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"participant \":UI\"","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"participant \":StaffChecker\"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"participant \":StaffAddCommand\"","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"participant \":StaffList\"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"User-\u003e \":StaffInstance\": \"add\"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d Getting User Input \u003d\u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"\":StaffInstance\" -\u003e \":StaffParser\": commandHandler()","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"\":StaffParser\" -\u003e \":UI\": smartCommandRecognition()","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"return String intended_command","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d Check validity of the data input \u003d\u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"\":StaffParser\" -\u003e \":StaffChecker\": checkValidDataForAdd()","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" -\u003e \":StaffChecker\": checkStaffID()","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" -\u003e \":StaffChecker\": checkDuplicateStaffID()","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" -\u003e \":StaffChecker\": checkStaffAge()","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" -\u003e \":StaffChecker\": checkBlankInput()","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" -\u003e \":StaffChecker\": invalidCharactersStaffChecker()","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"\":StaffChecker\" --\u003e \":StaffParser\"","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d Creating StaffAddCommand \u003d\u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"\":StaffParser\" --\u003e \":StaffInstance\": StaffAddCommand","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d Creating Staff Object with User Input \u003d\u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"\":StaffInstance\" -\u003e \":StaffAddCommand\": execute()","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"\":StaffAddCommand\" -\u003e \":StaffList\": add() ","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"\u003d\u003d Saving Staff Objects into .txt file \u003d\u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"\":StaffAddCommand\" -\u003e \":StaffStorage\": writeToFile()","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"return","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"\":StaffAddCommand\" --\u003e \":StaffInstance\":","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"@enduml","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"blank-bank":52}},{"path":"docs/team/alexandertanjunan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"# Alexander Tan\u0027s Portfolio Page","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"### Project: HealthVault","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"HealthVault is a hospital management system designed to help nurses manage their workflow. It is a desktop app capable of managing doctor, nurse, patient and inventory information, optimised for use through the command line interface. A user with fast typing skills will be able to navigate through the application with ease and greater efficiency as compared to a normal Graphical User Interface application. This program is written entirely in Java and has about 6 kLoC.","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **New Feature**: Created the Schedules for Nurses menu and functionalities.","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - What it does: Provides the ability to add/delete/list schedules for different nurses. Schedules are sorted by date.","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Justification: Being able to efficiently add/delete/list schedules allows nurses to quickly get into their workflow with minimal disruption, reducing downtime and wait-time of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Highlights: The NurseSchedule Class implements the Comparable Interface allows the ordering of the Schedules to be sorted based on the compareTo() function. The sorting is so that the nurses will be able to view their next closest schedule on the application.","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **New Feature**: Added the ability to store and load data","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - What it does: Provides the ability for continuous usage, even after the program is terminated.","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Justification: Nurses need to quickly get to work and it would not make sense for them to re-enter all their relevant schedules after terminating the program","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Highlights: Due to the vulnerabilities of corrupted data files in this enhancement, extra data validation components had to be added to the reading of files. This ensures that the program does not deviate to far from normal operation should somebody tamper with the file.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **New Feature**: Added Cross-Validation","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - What it does: Ensures that all schedules added are with valid Nurse ID\u0027s and Patient ID\u0027s (i.e present within the database)","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Justification: If no checking is done across the different data files, schedules with non-existent Nurse ID\u0027s or Patient ID\u0027s will be added in to the system. This results in wasted resources and poor scheduling for nurses, something that this program aims to minimize.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Highlights: Due to the modular nature of our application, the loading of data files of other types was easy to implement. However, extra care had to be taken to ensure that these files were not corrupted as well.","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **Code contributed**: [*RepoSense* Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dAlexanderTanJunAn).","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **Contributions to documentation**:","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - User Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added documentation for the features `add`, `delete`, `list`, `return`, `help` in Schedules for Nurses. [\\#196](), [\\#188](), [\\#187](), [\\#98]()","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added command summary. [\\#117]()","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added application logo","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Developer Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added implementation details of Nurse Schedules, including all of its features. [\\#330](), [\\#305](), [\\#288]()","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added User Stories table [\\#324]()","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added Model Component with diagram [\\#324]()","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"    - Added Proposed Features section [\\#364]()","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **Contributions to Team-Based Tasks**:","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - General code enhancements","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Fixed Java CI","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Maintained issue tracker with creation of some labels","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **Review/Mentoring contributions**:","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - PR\u0027s reviewed: #35, #171, #334, #333, #343, #349","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"- **Contributions beyond the team**:","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Helped find and reported bugs on other products such as [iGraduate](https://github.com/AY2021S2-CS2113T-W09-2/tp)","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Recommended possible solutions for bugs","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"  - Peer reviewed User Guides and Developer Guides of other teams and provided constructive feedback for improvement","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"AlexanderTanJunAn":49}},{"path":"docs/team/blank-bank.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"# Owen Yip\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-11"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"## Overview","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"HealthVault is a hospital information recording system made for nurses. HealthVault is a desktop app for managing doctor, nurse, patient and inventory information, optimised for use through the command line interface. A user with fast typing skills would be able to navigate through the application with ease and at greater efficiency as compared to a normal database application. The program is written entirely in Java.","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"### Summary of Contributions","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"Given below are my contributions to the project","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"- **New Feature**: Created the Staff menu and functionality from scratch","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"    - What it does: To allow users to be able to manage the staff information within the hospital.","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    - Justification: This functionality is created to optimize managing administrative tasks of coordinating personnel information in the hospital.","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    - Highlights: This feature has been developed such that staff information is easily accessible by the user and desired information is displayed in a easily readable and user-friendly format. ","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"- **New Feature**: Added the feature of save and load","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    - What it does: Data added or deleted from the staff list is instantaneously saved in a text file.","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    - Justification: In the event of a system malfunction, the data from staff list would not be lost if the program was not exited properly. In addition, it would be terribly inconvenient for nurses to manually update the database each time there is a change in staff information. This feature solves the issue.","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    - Highlights: There is no need to manually update the database. It has been automated for easy usage by the users.","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"- **New Feature**: Checking corruption of data","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    - What it does: Data loaded from a text file is validated before added into the system.","lastModifiedDate":"2021-04-11"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    - Justification: In the event that the text file is corrupted by accident, the system will not display corrupted data. This prevents users from being misled by false information displyed by the application. ","lastModifiedDate":"2021-04-11"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    - Highlights: Due to the vulnerabilities of corrupted data files in this enhancement, extra data validation components had to be added to the reading of files. A safety checker is added in place to examine the data from the files to make sure that corrupted data is not registered by the system. ","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"- **New Feature**: Created the Smart Command Recognition feature from scratch","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"    - What it does: Reads in a certain input from the user and tries to match the user input with a relevant commands (All possible commands within a menu) for that particular menu. If the user input does not match any commands exactly, it will try to guess the user\u0027s intended input and prompt the user. If the user confirms the intended command (Command that is guessed by the algorithm), the menu will continue execution based on the intended command. Otherwise, it will register the user input as a unrecognised input.","lastModifiedDate":"2021-04-11"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    - Justification: Under high stress situation in the hospital, it is easy to make simple typing errors. Even if one is very skilled using the Command Line Interface (CLI), one will make errors. This feature tries to reduce situations that the whole line of data had to be re-entered due to a single error when typing the command. It save time and boost efficiency.","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    - Highlights: There is even a feature to determine how strict the algorithm should be when determining the intended command. For example, if the allowance is set to a higher number, the feature will be less strict in its conditions for guesing the intended command. The algorithm design is orginal and created from scratch. As a result, the feature has been made to be able to be very flexible in its application. It is currently used in every single menu within HealthVault to enhance usability.","lastModifiedDate":"2021-04-11"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"- **Code contributed**: [*RepoSense* Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dblank-bank).","lastModifiedDate":"2021-04-11"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"- **Contributions to documentation**:","lastModifiedDate":"2021-04-11"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    - [User Guide](https://github.com/AY2021S2-CS2113T-F08-2/tp/blob/master/docs/UserGuide.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"        - Added documentation for the features `add`, `delete`, `list`, `return`,` find`, `help` in Staff. ","lastModifiedDate":"2021-04-11"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        - Edited Content Page.","lastModifiedDate":"2021-04-11"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        - Edited section \"How to use the User Guide\".","lastModifiedDate":"2021-04-11"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"        - Edited section \"Command Summary\".","lastModifiedDate":"2021-04-11"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        - Edited section \"Start Menu\".","lastModifiedDate":"2021-04-11"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"        - Edited section \"Interpreting help commands\".","lastModifiedDate":"2021-04-11"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    - [Developer Guide:](https://github.com/AY2021S2-CS2113T-F08-2/tp/blob/master/docs/DeveloperGuide.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"        - Added implementation details of Staff, including all of its features.","lastModifiedDate":"2021-04-11"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        - Added section \"Getting Started\". ","lastModifiedDate":"2021-04-11"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        - Added section \"Architecture\"","lastModifiedDate":"2021-04-11"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"        - Added Architecture Diagram.","lastModifiedDate":"2021-04-11"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        - Added Sequence Diagram for Staff Add.","lastModifiedDate":"2021-04-11"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"        - Added Glossary Component.","lastModifiedDate":"2021-04-11"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"        - Helped to vet the UML diagrams. ","lastModifiedDate":"2021-04-11"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"- **Contributions to Team-Based Tasks**:","lastModifiedDate":"2021-04-11"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"    - Leading project goals and deadlines","lastModifiedDate":"2021-04-11"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"    - Coordinating project to-dos between members: #311, #304, #300","lastModifiedDate":"2021-04-11"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"    - Contributing common classes and functions: #163, #145, #141, #136, #130, #92, #76","lastModifiedDate":"2021-04-11"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"    - General code enhancements (Code quality, Bugfixes, Logging, Junit Tests)","lastModifiedDate":"2021-04-11"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"    - Adjusting code for Java CI: #371","lastModifiedDate":"2021-04-11"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"    - Release management: Released both v1.0 and v2.0. #204, #60","lastModifiedDate":"2021-04-11"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"    - Maintained issue tracker with creation of labels ","lastModifiedDate":"2021-04-11"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"    - Hardcore testing for everyone\u0027s code","lastModifiedDate":"2021-04-11"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"- **Review/Mentoring contributions**:","lastModifiedDate":"2021-04-11"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"    - PR\u0027s reviewed: #310","lastModifiedDate":"2021-04-11"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    - Managing code structure for the entire project: #92. #20","lastModifiedDate":"2021-04-11"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"    - Looking through other\u0027s code and bugfixed other\u0027s code: #205, #127","lastModifiedDate":"2021-04-11"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"    - Help to vet UML diagrams and Sequence diagrams.","lastModifiedDate":"2021-04-11"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"- **Contributions beyond the team**:","lastModifiedDate":"2021-04-11"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"    - Helped find and reported bugs in other team\u0027s application","lastModifiedDate":"2021-04-11"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"    - Sharing common mistakes made by other team\u0027s program","lastModifiedDate":"2021-04-11"}],"authorContributionMap":{"blank-bank":70}},{"path":"docs/team/chiamjiaen.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"# Chiam Jia-En\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-11"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"## Project: HealthVault","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"HealthVault is a desktop application made for healthcare workers as their one stop application for recording and accessing critical patient or staff information. It is optimized for the Command Line Interface, where an experienced typist will be able to make full use of the informative and minimalistic GUI to achieve significant gains in efficiency","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"### Summary of Contributions","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"- **New Feature**: Developed the Patient Menu and its various functionalities.","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    - What it does: Provides the functionality of adding/deleting/listing/finding Patients.","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    - Justification: Being able to store and access critical patient information will allow healthcare workers to minimize time spent on these administrative activities.","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    - Highlights: The find functionality implemented allows for comparisons to be made without case-sensitivity. This allows for faster and more flexible searching.","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"- **New Feature**: Developed the Patient storage.","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"  - What it does: Provides the functionality of saving the existing patient details to text format.","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"  - Justification: Having the data in a portable format which is a text file will allow nurses to work on multiple computers as long as the computer has the application installed, and the nurse possesses the text file containing the details.","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"  - Highlights: The application does rigorous testing for corruption of the data files, hence tampering with the files and corrupting the data will be caught by the program.","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"- **New Feature**: Developed the handler (Start Menu) that allows running a separate instance within the main program instance.","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    - What it does: Allows there to be clear instance separation between groups of classes that handle different features.","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"    - Justification: Users and developers now have a specific instance in which certain commands relating to a specific area of the application can be accessed from, increasing the organization level of the application.","lastModifiedDate":"2021-04-11"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    - Highlights: The Start Menu has a help function that allows users to get an overview of what each feature does.","lastModifiedDate":"2021-04-11"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"- **Code contributed**: [*RepoSense* Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dChiamjiaen).","lastModifiedDate":"2021-04-11"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"- **Contributions to documentation**:","lastModifiedDate":"2021-04-11"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    - User Guide:","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"        - Added documentation for the features `add`, `delete`, `list`, `return`, `help`, `find` in Patients. ","lastModifiedDate":"2021-04-11"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"        - Added Introduction and CLI guide ","lastModifiedDate":"2021-04-11"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"    - Developer Guide:","lastModifiedDate":"2021-04-11"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        - Added implementation details of Patients, including all of its features. ","lastModifiedDate":"2021-04-11"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"        - Added details of Product Scope ","lastModifiedDate":"2021-04-11"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"        - Added Logic Component with diagram ","lastModifiedDate":"2021-04-11"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"- **Contributions to Team-Based Tasks**:","lastModifiedDate":"2021-04-11"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"    - General code enhancements","lastModifiedDate":"2021-04-11"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"    - Fixed Java CI","lastModifiedDate":"2021-04-11"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"    - Shifted code to adopt Command Classes architecture","lastModifiedDate":"2021-04-11"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"    - Added common logger class","lastModifiedDate":"2021-04-11"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"    - Organized meetings and helped schedule consults","lastModifiedDate":"2021-04-11"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    - Helped to do rigorous code testing and helped teammates with debugging problems.","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"- **Review/Mentoring contributions**:","lastModifiedDate":"2021-04-11"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    - PR\u0027s reviewed: ","lastModifiedDate":"2021-04-11"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"- **Contributions beyond the team**:","lastModifiedDate":"2021-04-11"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"    - Helped find and reported bugs on other products such as [Finux](https://github.com/AY2021S2-CS2113T-W09-1/tp)","lastModifiedDate":"2021-04-11"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"    - Recommended possible solutions for bugs","lastModifiedDate":"2021-04-11"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"    - Peer reviewed User Guides and Developer Guides of other teams and provided constructive feedback for improvement","lastModifiedDate":"2021-04-11"}],"authorContributionMap":{"Chiamjiaen":51}},{"path":"docs/team/mingshun98.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"MingShun98"},"content":"# Kwek Ming Shun\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"## Overview","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"HealthVault is a hospital information recording system made for nurses. HealthVault is a desktop app for managing doctor, nurse, patient and inventory information, optimised for use through the command line interface. A user with fast typing skills would be able to navigate through the application with ease and at greater efficiency as compared to a normal database application. The program is written entirely in Java.","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"### Summary of Contributions","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"Given below are my contributions to the project","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"- **New Feature**: Created the Doctors\u0027 Appointment menu and functionality from scratch","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"    - What it does: To allow current and new patients to make a doctor\u0027s appointment with a doctor registered in the hospital.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"    - Justification: This functionality is created to optimize the appointment making process in hospital","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"    - Highlights: This feature has been developed as a database where appointment information is easily accessible by the user and desired information is displayed in a easily readable and user-friendly format.","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"- **New Feature**: Added the feature of save and load","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    - What it does: Data added or deleted from the appointment list is instantaneously saved in a text file.","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"    - Justification: In the event of a system malfunction, the data from appointments would not be lost if the program was not exited properly. In addition, it would be terribly inconvenient for nurses to manually take down and upload all appointments of the day. This feature solves the issue.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"    - Highlights: Due to the vulnerabilities of corrupted data files in this enhancement, extra data validation components had to be added to the reading of files. A safety checker is added in place to examine the data from the files to make sure that corrupted data is not registered by the system.","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"- **New Feature**: Added Cross-Validation","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"    - What it does: Ensures that all appointments added into the system is assigned to a doctor that is registered and present in the hospital (i.e present within the database). The system will reject the addition of an appointment if the Doctor\u0027s ID is not found in the staff database.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"    - Justification: This is to prevent as miscommunication between the hospitals and the patients, ensuring that all appointments made will be seen through without issues (i.e the doctor is not on duty that day or the desired doctor is not working at the queried hospital).","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"    - Highlights: The program includes a staff database that is implemented by other team members, making the use of cross validation easier to implement and more applicable to today\u0027s issue. This demonstrates a cohesive system. However, this feature depends on the staff data in the system and will prevent addition of appointment if there is corrupted staff data.","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"- **Code contributed**: [*RepoSense* Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dMingShun98).","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"- **Contributions to documentation**:","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    - User Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"        - Added documentation for the features `add`, `delete`, `list`, `return`, `help` in Doctors\u0027 Appointment. [\\#9710558](), [\\#51fa4c6](), [\\#0e513a6](), [\\#943977e]()","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"        - Edited command summary. [\\#2c516c9]()","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"    - Developer Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"        - Added implementation details of Doctors\u0027 Appointment, including all of its features. [\\#1b1a7c2](), [\\#6d353a7]()","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"        - Added UI component / diagram. [\\#f4f6e62](), [\\#088bff6]()","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"        - Added Non-functional requirements Component. [\\#ac6f3eb]()","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"- **Contributions to Team-Based Tasks**:","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"    - Weekly meeting host","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"    - General code enhancements","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"    - Adjusting code for Java CI","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"    - Maintained issue tracker with creation of labels","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"    - Setting Milestones","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"    - Creating team organisation/ repository.","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"- **Review/Mentoring contributions**:","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"    - PR\u0027s reviewed: #66, #76, #143, #171, #304, #310, #317, #320, #327","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"- **Contributions beyond the team**:","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"    - Helped find and reported bugs in other team\u0027s application","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"    - Sharing common mistakes made by other team\u0027s program","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"MingShun98":50}},{"path":"src/main/java/seedu/duke/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"public class Constants {","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"    public static final String LINEBREAK \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String LISTLINEBREAK \u003d \"________________________________________________________\"","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"            + \"____________________________________________\";","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String HELPLINEBREAK \u003d \"________________________________________________________\"","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"            + \"__________________________________________________________________________________\";","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"    public static final String LOGO \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"            \" __   __  ______  _______  _  ________  __   __  __  __  _______  __   __  _             __   \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"             + \"|  | |  ||   ___||   _   || ||___    _||  | |  ||  ||  ||   _   ||  | |  || | _   _     /  \\\\  \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"             + \"|  |_|  ||  |___ |  |_|  || |    |  |  |  |_|  ||  ||  ||  |_|  ||  | |  || || |_| |___/ / \\\\\\\\ \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"             + \"|   _   ||   ___||   _   || |    ||\u003d|  |   _   |\\\\  \\\\/  /|   _   ||  | |  || ||_________  | | |\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"             + \"|  | |  ||  |___ |  | |  || |___ ||\u003d|  |  | |  | \\\\    / |  | |  ||  |_|  || |_____     \\\\ \\\\ // \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"             + \"|__| |__||______||__| |__||_____||__|  |__| |__|  \\\\__/  |__| |__||_______||_______|     \\\\__/  \\n\";","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String PATIENT_FILE_PATH \u003d \"data/Patients.txt\";","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String APPOINTMENT_FILE_PATH \u003d \"data/DoctorAppointment.txt\";","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String INVENTORY_FILE_PATH \u003d \"data/Inventory.txt\";","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String STAFF_FILE_PATH \u003d \"data/Staff.txt\";","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String SCHEDULES_FILE_PATH \u003d \"data/NurseSchedule.txt\";","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String HEALTHVAULT_LOGS_FILE_PATH \u003d \"data/logs/HealthVaultLogs.log\";","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String PATIENT_LOGS_FILE_PATH \u003d \"\";","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String APPOINTMENT_LOGS_FILE_PATH \u003d \"\";","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String INVENTORY_LOGS_FILE_PATH \u003d \"\";","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String STAFF_LOGS_FILE_PATH \u003d \"\";","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String SCHEDULES_LOGS_FILE_PATH \u003d \"data/logs/NurseSchedules.log\";","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String TO_STAFF_INSTANCE \u003d \"staff\";","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String TO_PATIENT_INSTANCE \u003d \"patient\";","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String TO_APPOINTMENTS_INSTANCE \u003d \"appointments\";","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String TO_SCHEDULES_INSTANCE \u003d \"schedules\";","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String TO_INVENTORY_INSTANCE \u003d \"inventory\";","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"    public static final String TO_STAFF_INSTANCE_DESCRIPTION \u003d \"To go to staff\";","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"    public static final String TO_PATIENT_INSTANCE_DESCRIPTION \u003d \"To go to patients\";","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    public static final String TO_APPOINTMENTS_INSTANCE_DESCRIPTION \u003d \"To go to doctors appointments\";","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    public static final String TO_SCHEDULES_INSTANCE_DESCRIPTION \u003d \"To go to nurse schedules\";","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    public static final String TO_INVENTORY_INSTANCE_DESCRIPTION \u003d \"To go to inventory\";","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"    public static final String EXIT_COMMAND_DESCRIPTION \u003d \"To exit the application\";","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"    public static final String HELP_COMMAND_DESCRIPTION \u003d \"To see what commands for Start Menu\";","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String EXIT_COMMAND \u003d \"exit\";","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"    public static final String ADD_COMMAND \u003d \"add\";","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    public static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"    public static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"    public static final String RETURN_COMMAND \u003d \"return\";","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"    //field Checking","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String[] VALID_GENDER_INPUT \u003d {\"m\", \"f\", \"others\"};","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"    // Miscellaneous","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String BLANK \u003d \"\";","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String MARK_BLANK \u003d \"-\";","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"    public static final String RETURN_DESCRIPTION \u003d \"Returns you to the Start Menu!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"    // HELP HEADER","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    public static final String HELP_HEADER_COMMAND \u003d \"Commands\";","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"    public static final String HELP_HEADER_DESCRIPTION \u003d \"Description\";","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"    public static final String HELP_HEADER_FORMAT \u003d \"Format\";","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"    // HELP FUNCTION DESCRIPTION","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_HELP_DESCRIPTION \u003d \"Brings up the list of commands for Staff!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"    public static final String PATIENT_HELP_DESCRIPTION \u003d \"Brings up the list of commands for Patient!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"    public static final String APPOINTMENTS_HELP_DESCRIPTION \u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"            \"Brings up the list of commands for Doctor Appointments!\";","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"    public static final String SCHEDULES_HELP_DESCRIPTION \u003d \"Brings up the list of commands for Nurse Schedule!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"    public static final String INVENTORY_HELP_DESCRIPTION \u003d \"Brings up the list of commands for Inventory!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"    // ADD FUNCTION DESCRIPTION","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_ADD_DESCRIPTION \u003d \"Adds Staff details to the Staff database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"    public static final String PATIENT_ADD_DESCRIPTION \u003d \"Adds Patient details to the Patient database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"    public static final String APPOINTMENTS_ADD_DESCRIPTION \u003d \"Adds Doctor Appointment details to the database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"    public static final String SCHEDULES_ADD_DESCRIPTION \u003d \"Adds Nurse Schedule details to the database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"    public static final String INVENTORY_ADD_DESCRIPTION \u003d \"Adds Inventory details to the database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"    // ADD FUNCTION FORMATTING","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_ADD_FORMAT \u003d \"add/[Staff ID]/[Name]/[Age]/[Specialisation]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String PATIENT_ADD_FORMAT \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"            \"add/[Patient ID]/[Name]/[Age]/[Gender]/[Illness]/[Medication Needed]\";","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String APPOINTMENTS_ADD_FORMAT \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"            \"add/[Doctor ID]/[Appointment ID]/[Name]/[Gender]/[Date (DDMMYYYY)]\";","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String SCHEDULES_ADD_FORMAT \u003d \"add/[Nurse ID]/[Patient ID]/[Date (DDMMYYYY)]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"NoorSarrah"},"content":"    public static final String INVENTORY_ADD_FORMAT \u003d \"add/[Drug name]/[Price]/[Quantity]\";","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"    // LIST FUNCTION DESCRIPTION","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_LIST_DESCRIPTION \u003d \"Brings up the list of all current Staff in database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"    public static final String PATIENT_LIST_DESCRIPTION \u003d \"Brings up the list of all current Patient in database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String APPOINTMENTS_LIST_DESCRIPTION \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"            \"Brings up the list of all current Doctors\u0027 Appointments in database!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String SCHEDULES_LIST_DESCRIPTION \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"            \"Brings up the list of all current Nurse Schedules in database!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"    public static final String INVENTORY_LIST_DESCRIPTION \u003d \"Brings up the list of all current Inventory in database!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"    // LIST FUNCTION FORMATTING","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_LIST_FORMAT \u003d \"list/\u003cinput\u003e, where input \u003d\u003d doctor or nurse\";","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"MingShun98"},"content":"    public static final String APPOINTMENTS_LIST_FORMAT \u003d \"list/[DoctorID/AppointmentID]\";","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static final String SCHEDULES_LIST_FORMAT \u003d \"list/[NurseID/all]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"NoorSarrah"},"content":"    public static final String INVENTORY_LIST_FORMAT \u003d \"list\";","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"    // DELETE FUNCTION DESCRIPTION","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_DELETE_DESCRIPTION \u003d \"Deletes the Staff with the specified ID from the list!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"    public static final String PATIENT_DELETE_DESCRIPTION \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"            \"Deletes the Patient with the specified ID from the list!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String APPOINTMENTS_DELETE_DESCRIPTION \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"Chiamjiaen"},"content":"            \"Deletes the Appointment with the specified ID from the list!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String SCHEDULES_DELETE_DESCRIPTION \u003d","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"Chiamjiaen"},"content":"            \"Deletes the Schedule with the specified ID from the list!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"NoorSarrah"},"content":"    public static final String INVENTORY_DELETE_DESCRIPTION \u003d \"Deletes the Inventory item from the list!\";","lastModifiedDate":"2021-04-07"},{"lineNumber":119,"author":{"gitId":"blank-bank"},"content":"    // DELETE FUNCTION FORMATTING","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_DELETE_FORMAT \u003d \"delete/[Staff ID]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"    public static final String PATIENT_DELETE_FORMAT \u003d \"delete/[Patient ID]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"MingShun98"},"content":"    public static final String APPOINTMENTS_DELETE_FORMAT \u003d \"delete/[DoctorID/Appointment ID]\";","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"    public static final String SCHEDULES_DELETE_FORMAT \u003d \"delete/[Nurse ID]/[Date (DDMMYYYY)]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"NoorSarrah"},"content":"    public static final String INVENTORY_DELETE_FORMAT \u003d \"delete/[Drug Name]\";","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"    // FIND FUNCTION DESCRIPTION","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_FIND_DESCRIPTION \u003d \"Finds a matching Staff using a keyword or phrase!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String PATIENT_FIND_DESCRIPTION \u003d \"Finds a matching Patient using a keyword or phrase!\";","lastModifiedDate":"2021-04-04"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"    // FIND FUNCTION FORMATTING","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"    public static final String STAFF_FIND_FORMAT \u003d \"find/[keyword or phrase]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"Chiamjiaen"},"content":"    public static final String PATIENT_FIND_FORMAT \u003d \"find/[keyword or phrase]\";","lastModifiedDate":"2021-04-04"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":4,"MingShun98":2,"Chiamjiaen":41,"AlexanderTanJunAn":8,"blank-bank":81}},{"path":"src/main/java/seedu/duke/HealthVault.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.parser.StartMenuParser;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class HealthVault {","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    private UI ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    private StartMenuParser parser;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private HealthVault() {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        ui \u003d new UI();","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"        parser \u003d new StartMenuParser();","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"     * Calls for the running of a new HealthVault instance.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"     * @param args Runtime arguments are unused.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"        new HealthVault().run();","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    public void run() {","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"        UI.printWelcome();","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"        UI.printStartMenu();","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"        while (!isExit) {","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"            try {","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"                String userInput \u003d ui.getInput(\"Start Menu\");","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"                UI.printEmptyLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"                Command c \u003d parser.startMenuParse(userInput);","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"                c.execute();","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"                if (isExit) {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"                    ui.printGoodbye();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"                //Command C can return as null if an error is triggered in parser","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"NoorSarrah":12,"Chiamjiaen":22,"-":3,"AlexanderTanJunAn":4,"blank-bank":4}},{"path":"src/main/java/seedu/exceptions/CorruptedFileException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handles any sort of corruption in file data that is unintended.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class CorruptedFileException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    private String file;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Constructor for exception class.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @param file File Path to the corrupted file.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public CorruptedFileException(String file) {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        this.file \u003d file;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     * Returns the corrupted file error message with the given file path.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"        return \"The file \" + this.file + \" is corrupted\";","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":27}},{"path":"src/main/java/seedu/exceptions/DuplicateIdException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle duplicate ID when adding objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class DuplicateIdException extends HealthVaultException {","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    private String idType;","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Constructor for DuplicateIDException.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @param idType Type of ID (Nurse/Doctor/Patient) input.","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public DuplicateIdException(String idType) {","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        this.idType \u003d idType;","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     * Returns the error message with crafted based on ID type.","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"        return \"The \" + idType + \" ID has already been taken! Use a different ID!\";","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Chiamjiaen":8,"blank-bank":20}},{"path":"src/main/java/seedu/exceptions/EmptyListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" * Exception to handle any sort of listing when list is empty.","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"public class EmptyListException extends HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Returns the simple list empty error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"        return \"OOPS!!! The list is empty!\";","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"MingShun98":6,"blank-bank":12}},{"path":"src/main/java/seedu/exceptions/ExcessInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle any excess inputs given to commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class ExcessInputException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns the excess input error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"OOPS! There are too many inputs for this command\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"AlexanderTanJunAn":3,"blank-bank":13}},{"path":"src/main/java/seedu/exceptions/HealthVaultException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"public class HealthVaultException extends Exception {","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"    protected String error;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"    public HealthVaultException(String error) {","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"    public HealthVaultException() {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"     * Shows the error encountered by the user.","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"     * @param input error type","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"    public void getError(String input) {","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"        switch (error) {","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"        case \"loadFile\":","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! The file format is wrong! It may have been corrupted! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"                    + \"Please delete the file \\\"data/PatientList.txt\\\" so we can make a new file for you! \");","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"        case \"add\":","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"                    + \"There should not be any space in the name! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 7 inputted terms including \\\"add\\\" \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"        case \"find\":","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 2 inputted terms including \\\"find\\\" \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"        case \"delete\":","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 2 inputted terms including \\\"delete\\\" \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"        case \"return\":","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 1 inputted term which is \\\"return\\\" \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"        case \"help\":","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 1 inputted term which is \\\"help\\\"\");","lastModifiedDate":"2021-04-11"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"        case \"list\":","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"                    + \"There should only be 1 inputted term which is \\\"list\\\" \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"        case \"IDLength\":","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Looks like your ID length is incorrect! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"                    + \"Please ensure that the ID has 6 characters!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"        case \"IDType\":","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Looks like your ID type is incorrect! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"                    + \"Please ensure that the ID starts with \\\"P\\\"!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"        case \"IDValue\":","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Looks like your ID value is incorrect! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"                    + \"Please ensure that the ID includes 5 numbers after \\\"P\\\"! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"                    + \"eg. P12345 or P67891\");","lastModifiedDate":"2021-04-11"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"        case \"IDTaken\":","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Looks like the ID has been taken! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"                    + \"Try a different ID! You can use the \\\"list\\\" command to see which IDs have been taken!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"        case \"IDDoesNotExist\":","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Looks like the ID does not exist! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"                    + \"Check that you have inputted the right ID! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"                    + \"You can use the \\\"list\\\" command to see which IDs exist!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"NoorSarrah"},"content":"        case \"DrugStored\":","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"NoorSarrah"},"content":"            System.out.println(\"OOPS! Looks like this drug has already been stored!\");","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"NoorSarrah"},"content":"        case \"IllegalCharacter\":","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"NoorSarrah"},"content":"            System.out.println(\"OOPS! You have an illegal character in your input!\");","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-04-03"},{"lineNumber":83,"author":{"gitId":"Chiamjiaen"},"content":"        default:","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! Your command may not be valid! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"                    + \"Please check the list of available commands using \\\"help\\\"\");","lastModifiedDate":"2021-04-11"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"        return \"There seems to be an error!\";","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"NoorSarrah":6,"MingShun98":2,"Chiamjiaen":45,"blank-bank":40}},{"path":"src/main/java/seedu/exceptions/IdNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-04-11"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle any Find Command that returns nothing.","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class IdNotFoundException extends HealthVaultException {","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"    private String idType;","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     * Constructor for IDNotFoundException class.","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     * @param idType Type of ID (Nurse/Doctor/Patient) input.","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    public IdNotFoundException(String idType) {","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"        this.idType \u003d idType;","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"        return \"The \" + idType + \" ID does not exist!\";","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-04-11"}],"authorContributionMap":{"blank-bank":21}},{"path":"src/main/java/seedu/exceptions/IllegalCharacterException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle any non alphanumeric character foynd in input fields.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class IllegalCharacterException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    private String errorField;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Constructor for IllegalCharacterException class.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @param errorField Field that has illegal characters.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public IllegalCharacterException(String errorField) {","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"        this.errorField \u003d errorField;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     * Returns the Illegal Characters error message with the given input field.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"        return \"You have an illegal character in your: \" + errorField;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":11,"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/InsufficientInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle any insufficient inputs given to commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class InsufficientInputException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns the insufficient input error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"OOPS! There is too little input for this command\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/InvalidDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid date format.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class InvalidDateException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns date format error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"The date format is invalid!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/InvalidGenderException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid gender input.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class InvalidGenderException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns invalid gender input error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"The gender is invalid!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/InvalidIdException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid ID format.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class InvalidIdException extends HealthVaultException {","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns invalid ID format error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"        return \"OOPS! Looks like your ID value is incorrect!\";","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"MingShun98":1,"AlexanderTanJunAn":1,"blank-bank":14}},{"path":"src/main/java/seedu/exceptions/InvalidIntegerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle non-numeric inputs when numeric inputs are expected.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class InvalidIntegerException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns invalid numeric input error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"The numeric input is invalid!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/NoInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle empty input fields (Whitespace).","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class NoInputException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns blank input error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"There is an empty field in the input! All fields must be filled!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"blank-bank":16}},{"path":"src/main/java/seedu/exceptions/UnrecognizedCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Exception to handle unrecognised command input.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class UnrecognizedCommandException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"     * Returns invalid command error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"        return \"OOPS! Your command may not be valid! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"                + \"Please check the list of available commands using \\\"help\\\"\";","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":5,"blank-bank":12}},{"path":"src/main/java/seedu/exceptions/doctorappointment/DocIdNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MingShun98"},"content":"package seedu.exceptions.doctorappointment;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":" * Exception to handle invalid Doctor Id when Id not found in staff Data base.","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"public class DocIdNotFoundException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"    private String idType;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"    public DocIdNotFoundException(String idType) {","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"        this.idType \u003d idType;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"     * Returns the  error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"        return \"The \" + idType + \" ID does not exist in the Staff Database!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"MingShun98":23}},{"path":"src/main/java/seedu/exceptions/doctorappointment/InvalidGenderException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MingShun98"},"content":"package seedu.exceptions.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":" * Exception to handle invalid gender input.","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"public class InvalidGenderException extends HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"        return \"Sorry please type in M or F for gender.\";","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":18}},{"path":"src/main/java/seedu/exceptions/doctorappointment/WrongAptIdFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"MingShun98"},"content":"package seedu.exceptions.doctorappointment;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":" * Exception to handle invalid Appointment Id Format.","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"public class WrongAptIdFormatException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"        return \"Error in Appointment ID input\\nPlease input with the following format [A][5 digit ID number]\";","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"MingShun98":17}},{"path":"src/main/java/seedu/exceptions/inventory/DuplicateDrugException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.exceptions.inventory;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class DuplicateDrugException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    public DuplicateDrugException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    public void getError(String input) {","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"OOPS! This drug already exists in the Inventory!\");","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":9,"Chiamjiaen":2,"blank-bank":2}},{"path":"src/main/java/seedu/exceptions/inventory/InvalidPriceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.exceptions.inventory;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class InvalidPriceException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    public InvalidPriceException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    public void getError(String input) {","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"Please input a valid price. Eg 3 or 3.00\");","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":10,"blank-bank":2}},{"path":"src/main/java/seedu/exceptions/inventory/InvalidQuantityException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.exceptions.inventory;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"public class InvalidQuantityException extends HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    public void getError() {","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"Input quantity is more than that in the inventory!\");","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"NoorSarrah":9}},{"path":"src/main/java/seedu/exceptions/inventory/NonExistentDrugException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.exceptions.inventory;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class NonExistentDrugException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    public NonExistentDrugException(String error) {","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"    public void getError(String input) {","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"OOPS! This drug does not exist in the Inventory!\");;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":11,"blank-bank":2}},{"path":"src/main/java/seedu/exceptions/inventory/WrongNumberException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.exceptions.inventory;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"public class WrongNumberException extends HealthVaultException {","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    protected String errorField;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"    public WrongNumberException(String errorField) {","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"        this.errorField \u003d errorField;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"    public void getError() {","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"Please enter a valid \" + this.errorField + \"!\");","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"NoorSarrah":15}},{"path":"src/main/java/seedu/exceptions/nurseschedules/DuplicateScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-04-04"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class DuplicateScheduleException extends HealthVaultException {","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    String date;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor for DuplicateScheduleException.","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param date User input date that is duplicated","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public DuplicateScheduleException(String date) {","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"Patient has already been scheduled on \" + date + \"!\";","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"AlexanderTanJunAn":26}},{"path":"src/main/java/seedu/exceptions/nurseschedules/EmptyListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class EmptyListException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"OOPS! No schedules are found in the system!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"AlexanderTanJunAn":12,"blank-bank":3}},{"path":"src/main/java/seedu/exceptions/nurseschedules/InvalidScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-04-04"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class InvalidScheduleException extends HealthVaultException {","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"Schedule you are trying to delete does not exist!\";","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"AlexanderTanJunAn":15}},{"path":"src/main/java/seedu/exceptions/nurseschedules/InvalidiDTypeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class InvalidiDTypeException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"OOPS! Looks like your ID value is incorrect! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + \"Please ensure that the ID includes 5 numbers after \\\"N\\\" or \\\"P\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + \"eg. N12345 or P67891\";","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"AlexanderTanJunAn":17}},{"path":"src/main/java/seedu/exceptions/nurseschedules/NurseCrossValidationError.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseCrossValidationError extends HealthVaultException {","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"Staff file is not loaded, Nurse ID cannot be validated.\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + System.lineSeparator() + \"Please delete data/Staff.txt before trying again\";","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"AlexanderTanJunAn":16}},{"path":"src/main/java/seedu/exceptions/nurseschedules/NurseIdNotFound.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class NurseIdNotFound extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"NurseID does not exist! Please check Staff List and try again!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"AlexanderTanJunAn":12,"blank-bank":3}},{"path":"src/main/java/seedu/exceptions/nurseschedules/PatientCrossValidationError.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class PatientCrossValidationError extends HealthVaultException {","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"Patient file is not loaded, Patient ID cannot be validated.\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + System.lineSeparator() + \"Please delete data/Patient.txt before trying again\";","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"AlexanderTanJunAn":16}},{"path":"src/main/java/seedu/exceptions/nurseschedules/PatientIdNotFound.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class PatientIdNotFound extends HealthVaultException {","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"PatientID does not exist! Please check Patient List and try again!\";","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"AlexanderTanJunAn":15}},{"path":"src/main/java/seedu/exceptions/nurseschedules/WrongInputsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions.nurseschedules;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class WrongInputsException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return error message","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return \"OOPS! Please check to see if your command is properly formatted!\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"AlexanderTanJunAn":9,"blank-bank":6}},{"path":"src/main/java/seedu/exceptions/patient/InvalidFieldsNumberException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.patient;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class InvalidFieldsNumberException extends HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    String error;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    public InvalidFieldsNumberException(String error) {","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"        switch (error) {","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        case \"add\":","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 7 inputted terms including \\\"add\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        case \"find\":","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 2 inputted terms including \\\"find\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"        case \"delete\":","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 2 inputted terms including \\\"delete\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"        case \"return\":","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 1 inputted term which is \\\"return\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"        case \"help\":","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 1 inputted term which is \\\"help\\\"\";","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"        case \"list\":","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"There should only be 1 inputted term which is \\\"list\\\" \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"                    + \"Please type \\\"help\\\" to see the right command format!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"        default:","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"            return \"You have inputted the wrong number of parameters!\";","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"Chiamjiaen":43}},{"path":"src/main/java/seedu/exceptions/patient/InvalidIdLengthException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.patient;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class InvalidIdLengthException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    public InvalidIdLengthException(String error) {","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        return \"Looks like your ID length is incorrect! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"                + \"Please ensure that the ID has 6 characters!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"Chiamjiaen":16}},{"path":"src/main/java/seedu/exceptions/patient/InvalidIdTypeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.patient;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class InvalidIdTypeException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    public InvalidIdTypeException(String error) {","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        return \"Looks like your ID type is incorrect! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"                + \"Please ensure that the ID starts with \\\"P\\\"!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"Chiamjiaen":15}},{"path":"src/main/java/seedu/exceptions/patient/InvalidIdValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.patient;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class InvalidIdValueException extends HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    public InvalidIdValueException(String error) {","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        return \"Looks like your ID value is incorrect! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"                + \"Please ensure that the ID includes 5 numbers after \\\"P\\\"! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"                + \"eg. P12345 or P67891\";","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"Chiamjiaen":16}},{"path":"src/main/java/seedu/exceptions/patient/InvalidPatientAgeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"public class InvalidPatientAgeException extends HealthVaultException {","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"        return \"Your age input is invalid! \\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"                + \"Please ensure that the age is an integer between 0 and 150 inclusive!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":9,"blank-bank":2}},{"path":"src/main/java/seedu/exceptions/staff/InvalidStaffAgeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.exceptions.staff;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid Staff Age input when adding Staff.","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"public class InvalidStaffAgeException extends HealthVaultException {","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Returns the error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        return \"Your age input is invalid! \\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"                + \"Please ensure that the age is an integer between 18 and 150 inclusive!\";","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":4,"blank-bank":15}},{"path":"src/main/java/seedu/exceptions/staff/WrongListInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid Staff List input when listing Staff.","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"public class WrongListInputException extends HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Returns the list error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        return \"Invalid List command parameter\\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"                + \"Please input with the either of the following format:\\n\\tlist\\n\\tlist/nurses\\n\\tlist/doctors\";","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Chiamjiaen":1,"blank-bank":18}},{"path":"src/main/java/seedu/exceptions/staff/WrongStaffIdException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.exceptions.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":" * Exception to handle invalid Staff ID input when adding Staff.","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"public class WrongStaffIdException extends HealthVaultException {","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"     * Returns the invalid Staff ID error message.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"     * @return Error Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public String getMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        return \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Chiamjiaen":1,"blank-bank":17}},{"path":"src/main/java/seedu/logger/HealthVaultLogger.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.File;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HEALTHVAULT_LOGS_FILE_PATH;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":" * Main logger of HealthVault.","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"public class HealthVaultLogger {","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public static HealthVaultLogger hvLogger \u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    private Logger logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    private HealthVaultLogger() {","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"            File file \u003d new File(HEALTHVAULT_LOGS_FILE_PATH);","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"            if (!(file.exists())) {","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"                file.createNewFile();","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"            FileHandler fileHandler \u003d new FileHandler(HEALTHVAULT_LOGS_FILE_PATH);","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"            fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"            logger \u003d Logger.getLogger(\"HealthVaultLogger\");","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"            logger.setUseParentHandlers(false);","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (IOException | SecurityException | IllegalArgumentException e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"     * Returns the common logger to the calling class.","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"     * @return the main HealthVault logger.","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    public static Logger getLogger() {","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        if (hvLogger \u003d\u003d null) {","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"            hvLogger \u003d new HealthVaultLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"        return hvLogger.logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"Chiamjiaen":49}},{"path":"src/main/java/seedu/logic/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.DuplicateIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.InvalidQuantityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.nurseschedules.DuplicateScheduleException;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":" * Abstract class that represents a command to be executed.","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"public abstract class Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    public Command() {","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"    public void execute(PatientList patients, PatientUI ui){","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staff, StaffUI staffUI, StaffStorage staffStorage) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"    public void execute(InventoryList drugs, InventoryUI ui) throws InvalidQuantityException {","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute(AppointmentList appointment, DoctorAppointmentUI ui) throws HealthVaultException, IOException,","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"            Exception {","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute(NurseScheduleList nurseSchedule, NurseScheduleUI ui) throws NurseIdNotFound,","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"            InvalidiDTypeException, NurseCrossValidationError, DuplicateIdException, PatientIdNotFound,","lastModifiedDate":"2021-04-11"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"            PatientCrossValidationError, DuplicateScheduleException {","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":4,"MingShun98":2,"Chiamjiaen":37,"blank-bank":16}},{"path":"src/main/java/seedu/logic/command/doctorappointment/DoctorAppointmentAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":" * DoctorAppointmentAddCommand executes the necessary action for adding a DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentAddCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"    private String[] input;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointmentAddCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"     * @param parsedInput Array of inputs for DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointmentAddCommand(String[] parsedInput) {","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"        input \u003d parsedInput;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"     * Adds a DoctorAppointment object to the appointmentList and write the DoctorAppointment","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"     * object data to a text file.","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     * @param appointment Instance of AppointmentList used by the AppointmentAddCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * @param ui          Not utilised here.","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    public void execute(AppointmentList appointment, DoctorAppointmentUI ui) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"        AppointmentList.addAppointment(input);","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"     * @return false.","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":28,"Chiamjiaen":16,"blank-bank":3}},{"path":"src/main/java/seedu/logic/command/doctorappointment/DoctorAppointmentDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":" * DoctorAppointmentDeleteCommand executes the necessary action for deleting a DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentDeleteCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    private String[] input;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    private String id;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointmentDeleteCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"     * @param parsedInput Array of inputs for DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointmentDeleteCommand(String[] parsedInput) {","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"        id \u003d parsedInput[1];","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"        input \u003d parsedInput;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     * Deletes a DoctorAppointment object to the appointmentList and write the DoctorAppointment","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * object data to a text file.","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     * @param appointment Instance of AppointmentList used by the AppointmentDeleteCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     * @param ui          Not utilised here.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    public void execute(AppointmentList appointment, DoctorAppointmentUI ui) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"        AppointmentList.deleteAppointment(id);","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"     * @return false.","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":33,"Chiamjiaen":16,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/doctorappointment/DoctorAppointmentHelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":" * DoctorAppointmentHelpCommand executes the necessary action for deleting a DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentHelpCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"     * Displays the help message for DoctorAppointment Menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"     * @param appointment  Not utilised here.","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"     * @param ui Instance of DoctorAppointmentUI used by the DoctorAppointmentHelpCommand for displaying help message.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    public void execute(AppointmentList appointment, DoctorAppointmentUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"        AppointmentList.helpAppointment();","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"     * @return false.","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":21,"Chiamjiaen":10,"blank-bank":3}},{"path":"src/main/java/seedu/logic/command/doctorappointment/DoctorAppointmentListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":" * DoctorAppointmentListCommand executes the necessary action for listing DoctorAppointment Objects.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentListCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    private String[] input;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    private String id;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointmentListCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"     * @param parsedInput Array of inputs for DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointmentListCommand(String[] parsedInput) {","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"        id \u003d parsedInput[1];","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"        input \u003d parsedInput;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"     * Lists the DoctorAppointment objects in the appointmentList.","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * @param appointment Instance of AppointmentList used by the DoctorAppointmentListCommand to list objects.","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     * @param ui          Not utilised here.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"    public void execute(AppointmentList appointment, DoctorAppointmentUI ui) throws ParseException,","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"            HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"        AppointmentList.listAppointment(id);","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":29,"Chiamjiaen":14,"blank-bank":1}},{"path":"src/main/java/seedu/logic/command/doctorappointment/DoctorAppointmentReturnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.doctorappointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":" *  DoctorAppointmentReturnCommand executes exits the Doctor Appointment Menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentReturnCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"     * @return true.","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":9,"Chiamjiaen":10}},{"path":"src/main/java/seedu/logic/command/inventory/InventoryAdd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.inventory;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryAdd extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"    public InventoryAdd(String[] args) {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"        this.argArr \u003d args;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public void execute(InventoryList drugs, InventoryUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"        drugs.addDrugs(argArr);","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"        ui.drugAddedMessage(argArr[0], argArr[2]);","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":11,"Chiamjiaen":11,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/inventory/InventoryDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.inventory;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.InvalidQuantityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryDelete extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"    private String[] argArr;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"    public InventoryDelete(String[] args) {","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"        this.argArr \u003d args;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"    public void execute(InventoryList drugs, InventoryUI ui) throws InvalidQuantityException {","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"        drugs.deleteDrugs(argArr);","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"        ui.deleteDrugMessage(argArr[1], argArr[2]);","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":13,"Chiamjiaen":11,"blank-bank":1}},{"path":"src/main/java/seedu/logic/command/inventory/InventoryHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.inventory;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryHelp extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    public void execute(InventoryList drugs, InventoryUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"        ui.printInventoryHelpMessage();","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":5,"Chiamjiaen":11,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/inventory/InventoryList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.inventory;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryList extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"    public void execute(seedu.model.inventory.InventoryList inventory, InventoryUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"        inventory.listDrugs();","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"NoorSarrah":5,"Chiamjiaen":11,"blank-bank":1}},{"path":"src/main/java/seedu/logic/command/inventory/InventoryReturn.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.inventory;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryReturn extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":11}},{"path":"src/main/java/seedu/logic/command/nurseschedule/NurseScheduleAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.nurseschedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.DuplicateIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.DuplicateScheduleException;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleAddCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor for NurseScheduleAddCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param args Array of inputs for NurseSchedule objects","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseScheduleAddCommand(String [] args) {","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"        argArr \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Adds a NurseSchedule object to the arraylist.","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of objects","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param ui Program outputs","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if nurseID does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if ID is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseCrossValidationError if Staff.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"     * @throws DuplicateIdException if id has been taken","lastModifiedDate":"2021-04-11"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientIdNotFound if patientID does not exit","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientCrossValidationError if Patients.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws DuplicateScheduleException if schedules are duplicated","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void execute(NurseScheduleList nurseSchedules, NurseScheduleUI ui)","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throws NurseIdNotFound, InvalidiDTypeException,","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"            NurseCrossValidationError, DuplicateIdException,","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"            PatientIdNotFound, PatientCrossValidationError, DuplicateScheduleException {","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"        nurseSchedules.addSchedule(argArr);","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns true if return command is given.","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return false","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":9,"AlexanderTanJunAn":44,"blank-bank":4}},{"path":"src/main/java/seedu/logic/command/nurseschedule/NurseScheduleDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.nurseschedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidScheduleException;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleDeleteCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor for NurseScheduleDeleteCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param args Array of user inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseScheduleDeleteCommand(String [] args) {","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"        argArr \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Deletes a NurseSchedule object from the arraylist.","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of NurseSchedule objects","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param ui Program outputs","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    public void execute(NurseScheduleList nurseSchedules, NurseScheduleUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nurseSchedules.deleteSchedule(argArr);","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (NurseIdNotFound | InvalidScheduleException e) {","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns true if return command is given.","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return false","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"AlexanderTanJunAn":34,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/nurseschedule/NurseScheduleHelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.nurseschedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleHelpCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Prints help message for Nurse Schedule menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules Arraylist of nurse schedule objects","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param ui Program outputs","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    public void execute(NurseScheduleList nurseSchedules, NurseScheduleUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"        ui.printNurseScheduleHelpList();","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns true if return command is given.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return false","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"AlexanderTanJunAn":17,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/nurseschedule/NurseScheduleListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.nurseschedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.EmptyListException;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleListCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor of NurseScheduleListCommand.","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param args Array of user inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseScheduleListCommand(String [] args) {","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"        argArr \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Lists schedules.","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules Arraylist of NurseSchedule objects","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param ui Program outputs","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void execute(NurseScheduleList nurseSchedules, NurseScheduleUI ui) {","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nurseSchedules.listSchedules(argArr);","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (EmptyListException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (NurseIdNotFound e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns true if return command is given.","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return false","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"AlexanderTanJunAn":38}},{"path":"src/main/java/seedu/logic/command/nurseschedule/NurseScheduleReturnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.nurseschedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleReturnCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns true if return command is given.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return true","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"AlexanderTanJunAn":6}},{"path":"src/main/java/seedu/logic/command/patient/PatientAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users to add a new patient to the list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientAddCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    public PatientAddCommand(String[] args) {","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        argArr \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    public void execute(PatientList patients, PatientUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        patients.addPatient(argArr);","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"        ui.patientAddedMessage(argArr[1]);","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":25,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/patient/PatientDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users to delete an existing patient from the list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientDeleteCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    private String args;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    public PatientDeleteCommand(String args) {","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    public void execute(PatientList patients, PatientUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        patients.deletePatient(args);","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":24,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/patient/PatientFindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users to find an existing patient from the list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientFindCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    private String args;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    public PatientFindCommand(String args) {","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    public void execute(PatientList patients, PatientUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"        patients.findPatient(args);","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":25,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/patient/PatientHelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users to access the list of commands for reference.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientHelpCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    public void execute(PatientList patients, PatientUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"        ui.printPatientHelpList();","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":19,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/patient/PatientListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users to view the list of existing patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientListCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"    public void execute(seedu.model.patient.PatientList patients, PatientUI ui) {","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"        patients.listPatients();","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":19,"blank-bank":1}},{"path":"src/main/java/seedu/logic/command/patient/PatientReturnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a command that allows users exit from the patient instance.","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientReturnCommand extends Command {","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":14}},{"path":"src/main/java/seedu/logic/command/staff/StaffAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":" * StaffAdd Command executes the necessary action for adding a Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"public class StaffAddCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    private String[] argArr;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffAdd command.","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     * @param args Array of inputs for Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    public StaffAddCommand(String[] args) {","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"        argArr \u003d args;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     * Adds a Staff object to the StaffList and write the Staff object data to a text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Instance of StaffList used by the StaffAdd command to store Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Instance of StaffStorage used by the StaffAdd command to write","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     *                     Staff objects data into relevant text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) {","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        staffList.add(argArr);","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"            staffStorage.writeToFile(staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"     * @return false.","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"blank-bank":44}},{"path":"src/main/java/seedu/logic/command/staff/StaffDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":" * StaffDelete Command executes the necessary action for deleting a Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"public class StaffDeleteCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    private String input;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffDelete command.","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     * @param input String input for identifying Staff object to be deleted.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    public StaffDeleteCommand(String input) {","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     * Deletes a Staff object from the StaffList and write the updated Staff object data to text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Instance of StaffList used by the StaffDelete command to delete Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Instance of StaffStorage used by the StaffDelete command to update","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     *                     Staff objects data into relevant text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"        staffList.delete(input);","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        staffStorage.writeToFile(staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"     * @return false.","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"blank-bank":39}},{"path":"src/main/java/seedu/logic/command/staff/StaffFindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":" * StaffAdd Command executes the necessary action for finding a Staff object within a StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"public class StaffFindCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    private String input;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffFind command.","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     * @param line Inputs to find Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    public StaffFindCommand(String line) {","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"        this.input \u003d line;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     * Find a Staff object in the StaffList based on the input.","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Instance of StaffList used by the StaffFind command to find Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Instance of StaffUI used by the StaffFind command for displaying any output.","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"        staffList.find(this.input.split(\"/\")[1]);","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"     * @return false.","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"blank-bank":39}},{"path":"src/main/java/seedu/logic/command/staff/StaffHelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":" * StaffHelp Command executes the necessary action for displaying the help message.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"public class StaffHelpCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     * Displays the help message for Staff Menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Instance of StaffUI used by the StaffHelp command for displaying help message.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) {","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"        StaffUI.printStaffHelpMessage();","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     * @return false.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"blank-bank":23}},{"path":"src/main/java/seedu/logic/command/staff/StaffListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":" * StaffList Command executes the necessary action for displaying relevant Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"public class StaffListCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"    private String[] input;","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffList command.","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"     * @param array Array of inputs for StaffList comamnd.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    public StaffListCommand(String[] array) {","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"        this.input \u003d array;","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"     * Lists all relevant Staff object from the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Instance of StaffList (Model) used by the StaffList","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     *                   (Command) command to display all Staff objects.","lastModifiedDate":"2021-04-11"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Instance of StaffUI used by the StaffList command for output.","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"    public void execute(seedu.model.staff.StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) {","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"        staffList.list(this.input);","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"     * @return false.","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":12,"blank-bank":34}},{"path":"src/main/java/seedu/logic/command/staff/StaffReturnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":" * StaffReturn Command executes resets given StaffList and exits the Staff Menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"public class StaffReturnCommand extends Command {","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"     * Resets the given StaffList object.","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  Instance of StaffList to be reset.","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"     * @param staffUI Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"     * @param staffStorage Not utilised here.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    public void execute(StaffList staffList, StaffUI staffUI, StaffStorage staffStorage) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"        staffList.resetList();","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     * Returns true if return command is given to exit the menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     * @return true.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":10,"blank-bank":25}},{"path":"src/main/java/seedu/logic/command/startmenu/MainExit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"public class MainExit extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":11}},{"path":"src/main/java/seedu/logic/command/startmenu/MainHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"public class MainHelp extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"        UI.printStartMenu();","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":17}},{"path":"src/main/java/seedu/logic/command/startmenu/ToDoctorAppointmentInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.instance.DoctorAppointmentInstance;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.APPOINTMENT_FILE_PATH;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class ToDoctorAppointmentInstance extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"        DoctorAppointmentInstance appointmentInstance \u003d new DoctorAppointmentInstance(APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        appointmentInstance.run();","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":19}},{"path":"src/main/java/seedu/logic/command/startmenu/ToInventoryInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.instance.InventoryInstance;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.INVENTORY_FILE_PATH;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class ToInventoryInstance extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        InventoryInstance inventory \u003d new InventoryInstance(INVENTORY_FILE_PATH);","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"        inventory.run();","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":20}},{"path":"src/main/java/seedu/logic/command/startmenu/ToNurseScheduleInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.instance.NurseScheduleInstance;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"public class ToNurseScheduleInstance extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseScheduleInstance schedules \u003d new NurseScheduleInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"        schedules.runCommandLoopUntilExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":11,"AlexanderTanJunAn":7}},{"path":"src/main/java/seedu/logic/command/startmenu/ToPatientInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.instance.PatientInstance;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_FILE_PATH;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class ToPatientInstance extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"        PatientInstance patients \u003d new PatientInstance(PATIENT_FILE_PATH);","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"        patients.run();","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":17,"blank-bank":2}},{"path":"src/main/java/seedu/logic/command/startmenu/ToStaffInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.command.startmenu;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.instance.StaffInstance;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_FILE_PATH;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"public class ToStaffInstance extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    public void execute() {","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"        StaffInstance staffInstance \u003d new StaffInstance(STAFF_FILE_PATH);","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"        staffInstance.run();","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Chiamjiaen":11,"AlexanderTanJunAn":1,"blank-bank":7}},{"path":"src/main/java/seedu/logic/errorchecker/DoctorAppointmentChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.*;","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.doctorappointment.DocIdNotFoundException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.doctorappointment.InvalidGenderException;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.doctorappointment.WrongAptIdFormatException;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.DoctorAppointment;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import seedu.model.staff.Staff;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import seedu.storage.DoctorAppointmentStorage;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"public class DoctorAppointmentChecker extends MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    private static String doctorID;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"    private static String appointmentID;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"    private static String name;","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    private static String id;","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"    private static String gender;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"    private static String date;","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"    public static Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     * Checks the data is valid to execute the add command.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"     * @param input String Array from input.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data to be added does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"    public static void checkValidDataForAdd(String[] input) throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        doctorID \u003d input[1];","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"        appointmentID \u003d input[2];","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"        name \u003d input[3];","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"        gender \u003d input[4];","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"        date \u003d input[5];","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking for Valid data after add command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"        if (!isValidDocID(doctorID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"            throw new DocIdNotFoundException(doctorID);","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"        if (!isValidAppointmentID(appointmentID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"            throw new IdNotFoundException(appointmentID);","lastModifiedDate":"2021-04-11"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"        illegalCharacterChecker(name, \"name\");","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"        if (!isValidGender(gender)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"            throw new InvalidGenderException();","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"        checkValidDate(date);","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"     * Checks the data is valid to execute the List command.","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"     * @param input String Array from Input.","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data to execute list command does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"    public static void checkValidDataForList(String[] input) throws HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"        id \u003d input[1];","lastModifiedDate":"2021-04-10"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"        if (AppointmentList.appointmentList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"        if (id.equals(\"all\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"            return;","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking for Valid data after list command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"        if (!isValidDocID(id) \u0026\u0026 !isValidListAppointmentID(id)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"            throw new InvalidIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"     * Checks the data is valid to execute the Delete command.","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"     * @param input String Array from Input.","lastModifiedDate":"2021-04-10"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"     * @throws InvalidIdException If the data to execute delete command does not fit the parameters.","lastModifiedDate":"2021-04-11"},{"lineNumber":86,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"    public static void checkValidDataForDelete(String[] input) throws InvalidIdException {","lastModifiedDate":"2021-04-11"},{"lineNumber":89,"author":{"gitId":"MingShun98"},"content":"        id \u003d input[1];","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking for Valid data after delete command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"MingShun98"},"content":"        if (!isValidIdToDelete(id)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"            throw new InvalidIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":93,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"MingShun98"},"content":"     * Checks if the Appointment ID is in the correct format.","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"MingShun98"},"content":"     * @param id The input Appointment Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"MingShun98"},"content":"     * @throws WrongAptIdFormatException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":102,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"MingShun98"},"content":"    public static void checkAptID(String id) throws WrongAptIdFormatException {","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"MingShun98"},"content":"            Integer.parseInt(id.substring(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Checking for Valid Appointment ID\");","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"MingShun98"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"MingShun98"},"content":"            throw new WrongAptIdFormatException();","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"MingShun98"},"content":"        if (!(id.charAt(0) \u003d\u003d \u0027A\u0027) || (id.length()) !\u003d 6) {","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"MingShun98"},"content":"            throw new WrongAptIdFormatException();","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"MingShun98"},"content":"     * Checks if the input name contains any illegal character.","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"MingShun98"},"content":"     * @param name The input name.","lastModifiedDate":"2021-04-10"},{"lineNumber":119,"author":{"gitId":"MingShun98"},"content":"     * @param path The file path.","lastModifiedDate":"2021-04-10"},{"lineNumber":120,"author":{"gitId":"MingShun98"},"content":"     * @throws IllegalCharacterException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":121,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":122,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"MingShun98"},"content":"    public static void illegalCharacterChecker(String name, String path) throws IllegalCharacterException {","lastModifiedDate":"2021-04-01"},{"lineNumber":124,"author":{"gitId":"MingShun98"},"content":"        String cleanedInput \u003d UI.cleanseInput(name);","lastModifiedDate":"2021-04-01"},{"lineNumber":125,"author":{"gitId":"MingShun98"},"content":"        if (!name.equals(cleanedInput)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"MingShun98"},"content":"            throw new IllegalCharacterException(path);","lastModifiedDate":"2021-04-01"},{"lineNumber":127,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":129,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":130,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":131,"author":{"gitId":"MingShun98"},"content":"     * Checks if the name data from storage contains any illegal character.","lastModifiedDate":"2021-04-10"},{"lineNumber":132,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":133,"author":{"gitId":"MingShun98"},"content":"     * @param name The input name.","lastModifiedDate":"2021-04-10"},{"lineNumber":134,"author":{"gitId":"MingShun98"},"content":"     * @throws CorruptedFileException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":135,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":136,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":137,"author":{"gitId":"MingShun98"},"content":"    public static void illegalCharacterNameCheckerForStorage(String name) throws CorruptedFileException {","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking for Illegal Character for Name from storage data \");","lastModifiedDate":"2021-04-09"},{"lineNumber":139,"author":{"gitId":"MingShun98"},"content":"        String cleanedInput \u003d UI.cleanseInput(name);","lastModifiedDate":"2021-04-01"},{"lineNumber":140,"author":{"gitId":"MingShun98"},"content":"        if (!name.equals(cleanedInput)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"MingShun98"},"content":"            throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":146,"author":{"gitId":"MingShun98"},"content":"     * Checks data that is being read from storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":147,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":148,"author":{"gitId":"MingShun98"},"content":"     * @param input       input","lastModifiedDate":"2021-04-10"},{"lineNumber":149,"author":{"gitId":"MingShun98"},"content":"     * @param storageList Current loaded files of data.","lastModifiedDate":"2021-04-10"},{"lineNumber":150,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":151,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":152,"author":{"gitId":"MingShun98"},"content":"    public static void checkDataFromStorage(String input, ArrayList\u003cString\u003e storageList) throws HealthVaultException {","lastModifiedDate":"2021-04-01"},{"lineNumber":153,"author":{"gitId":"MingShun98"},"content":"        String[] inputArray \u003d input.split(\"\\\\s\\\\|\\\\s\", 5);","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"MingShun98"},"content":"        checkID(inputArray[0], inputArray[1]);","lastModifiedDate":"2021-04-01"},{"lineNumber":155,"author":{"gitId":"MingShun98"},"content":"        illegalCharacterNameCheckerForStorage(inputArray[2]);","lastModifiedDate":"2021-04-01"},{"lineNumber":156,"author":{"gitId":"MingShun98"},"content":"        illegalCharacterNameCheckerForStorage(inputArray[1]);","lastModifiedDate":"2021-04-01"},{"lineNumber":157,"author":{"gitId":"MingShun98"},"content":"        checkDuplicateAptIdFromStorage(inputArray[1], storageList);","lastModifiedDate":"2021-04-10"},{"lineNumber":158,"author":{"gitId":"MingShun98"},"content":"        checkValidDate(inputArray[4]);","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking Validity of storage data \");","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"MingShun98"},"content":"        if (!isValidGender(inputArray[3])) {","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"MingShun98"},"content":"            throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-04-01"},{"lineNumber":162,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":163,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":164,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":165,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":166,"author":{"gitId":"MingShun98"},"content":"     * Checks if there is any duplicate appointment Id in storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":167,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":168,"author":{"gitId":"MingShun98"},"content":"     * @param appointmentID appointment Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":169,"author":{"gitId":"MingShun98"},"content":"     * @param storageList   Current loaded files of data.","lastModifiedDate":"2021-04-10"},{"lineNumber":170,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":171,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":172,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":173,"author":{"gitId":"MingShun98"},"content":"    public static void checkDuplicateAptIdFromStorage(String appointmentID, ArrayList\u003cString\u003e storageList)","lastModifiedDate":"2021-04-10"},{"lineNumber":174,"author":{"gitId":"MingShun98"},"content":"            throws HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":175,"author":{"gitId":"MingShun98"},"content":"        for (String storageID : storageList) {","lastModifiedDate":"2021-04-01"},{"lineNumber":176,"author":{"gitId":"MingShun98"},"content":"            if (storageID.equals(appointmentID)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":177,"author":{"gitId":"MingShun98"},"content":"                throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":181,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":183,"author":{"gitId":"MingShun98"},"content":"     * Checks the validity of the Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":184,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":185,"author":{"gitId":"MingShun98"},"content":"     * @param doctorID      doctor Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":186,"author":{"gitId":"MingShun98"},"content":"     * @param appointmentID Appointment Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":187,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":188,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":189,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":190,"author":{"gitId":"MingShun98"},"content":"    public static void checkID(String doctorID, String appointmentID) throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":191,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Checking Validity Doctor and Appointment ID from storage data \");","lastModifiedDate":"2021-04-09"},{"lineNumber":193,"author":{"gitId":"MingShun98"},"content":"            Integer.parseInt(doctorID.substring(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":194,"author":{"gitId":"MingShun98"},"content":"            Integer.parseInt(appointmentID.substring(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":195,"author":{"gitId":"MingShun98"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"MingShun98"},"content":"            throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"MingShun98"},"content":"        if (!(doctorID.charAt(0) \u003d\u003d \u0027D\u0027) || (doctorID.length()) !\u003d 6) {","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"MingShun98"},"content":"            throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-03-31"},{"lineNumber":200,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":201,"author":{"gitId":"MingShun98"},"content":"        if (!(appointmentID.charAt(0) \u003d\u003d \u0027A\u0027) || (doctorID.length()) !\u003d 6) {","lastModifiedDate":"2021-03-31"},{"lineNumber":202,"author":{"gitId":"MingShun98"},"content":"            throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-03-31"},{"lineNumber":203,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":205,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":206,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":207,"author":{"gitId":"MingShun98"},"content":"     * Checks if there is a existing doctor Id in Staff Database.","lastModifiedDate":"2021-04-10"},{"lineNumber":208,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":209,"author":{"gitId":"MingShun98"},"content":"     * @param doctorID input doctor Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":210,"author":{"gitId":"MingShun98"},"content":"     * @return true if doctorId exists in staff database.","lastModifiedDate":"2021-04-10"},{"lineNumber":211,"author":{"gitId":"MingShun98"},"content":"     * @throws FileNotFoundException If staff file does not exists.","lastModifiedDate":"2021-04-10"},{"lineNumber":212,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":213,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":214,"author":{"gitId":"MingShun98"},"content":"    public static boolean isValidDocID(String doctorID) {","lastModifiedDate":"2021-03-31"},{"lineNumber":215,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":216,"author":{"gitId":"MingShun98"},"content":"            final String[] character \u003d doctorID.split(\"\");","lastModifiedDate":"2021-04-10"},{"lineNumber":217,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Checking Validity Doctor ID during program commands \");","lastModifiedDate":"2021-04-09"},{"lineNumber":218,"author":{"gitId":"MingShun98"},"content":"            if (character[0].equals(\"D\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":219,"author":{"gitId":"MingShun98"},"content":"                ArrayList\u003cStaff\u003e doctorList;","lastModifiedDate":"2021-03-31"},{"lineNumber":220,"author":{"gitId":"MingShun98"},"content":"                doctorList \u003d DoctorAppointmentStorage.loadDoctorFile();","lastModifiedDate":"2021-03-31"},{"lineNumber":221,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":222,"author":{"gitId":"MingShun98"},"content":"                for (Staff id : doctorList) {","lastModifiedDate":"2021-03-31"},{"lineNumber":223,"author":{"gitId":"MingShun98"},"content":"                    if (id.getId().equals(doctorID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":224,"author":{"gitId":"MingShun98"},"content":"                        return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":225,"author":{"gitId":"MingShun98"},"content":"                    }","lastModifiedDate":"2021-03-31"},{"lineNumber":226,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":227,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":228,"author":{"gitId":"MingShun98"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":229,"author":{"gitId":"MingShun98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-04-10"},{"lineNumber":230,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":231,"author":{"gitId":"MingShun98"},"content":"        return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":232,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":233,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":234,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":235,"author":{"gitId":"MingShun98"},"content":"     * Check if the Appointment Id to be added is valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":236,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":237,"author":{"gitId":"MingShun98"},"content":"     * @param appointmentID appointment Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":238,"author":{"gitId":"MingShun98"},"content":"     * @return true if the appointment Id is valid and does not exist in appointmentList.","lastModifiedDate":"2021-04-10"},{"lineNumber":239,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException If the data does not fit the parameters.","lastModifiedDate":"2021-04-10"},{"lineNumber":240,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":241,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":242,"author":{"gitId":"MingShun98"},"content":"    public static boolean isValidAppointmentID(String appointmentID) throws HealthVaultException {","lastModifiedDate":"2021-04-01"},{"lineNumber":243,"author":{"gitId":"MingShun98"},"content":"        final String[] character \u003d appointmentID.split(\"\");","lastModifiedDate":"2021-04-10"},{"lineNumber":244,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":245,"author":{"gitId":"MingShun98"},"content":"        checkAptID(appointmentID);","lastModifiedDate":"2021-03-31"},{"lineNumber":246,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking Validity Appointment ID during ADD command \");","lastModifiedDate":"2021-04-09"},{"lineNumber":247,"author":{"gitId":"MingShun98"},"content":"        illegalCharacterChecker(appointmentID, \"Appointment ID\");","lastModifiedDate":"2021-04-01"},{"lineNumber":248,"author":{"gitId":"MingShun98"},"content":"        if (character[0].equals(\"A\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":249,"author":{"gitId":"blank-bank"},"content":"            for (DoctorAppointment id : AppointmentList.appointmentList) {","lastModifiedDate":"2021-04-07"},{"lineNumber":250,"author":{"gitId":"MingShun98"},"content":"                if (id.getAppointmentId().equals(appointmentID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":251,"author":{"gitId":"blank-bank"},"content":"                    throw new DuplicateIdException(appointmentID);","lastModifiedDate":"2021-04-11"},{"lineNumber":252,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":253,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":254,"author":{"gitId":"MingShun98"},"content":"            return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":255,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":256,"author":{"gitId":"MingShun98"},"content":"        return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":257,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":258,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":260,"author":{"gitId":"MingShun98"},"content":"     * Checks if the input Appointment Id exist in the appointmentList.","lastModifiedDate":"2021-04-10"},{"lineNumber":261,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":262,"author":{"gitId":"MingShun98"},"content":"     * @param appointmentID appointment Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":263,"author":{"gitId":"MingShun98"},"content":"     * @return true if the same appointment Id exists.","lastModifiedDate":"2021-04-10"},{"lineNumber":264,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":265,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":266,"author":{"gitId":"MingShun98"},"content":"    public static boolean isValidListAppointmentID(String appointmentID) {","lastModifiedDate":"2021-03-31"},{"lineNumber":267,"author":{"gitId":"MingShun98"},"content":"        String[] character \u003d appointmentID.split(\"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":268,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking Validity Appointment ID during LIST command \");","lastModifiedDate":"2021-04-09"},{"lineNumber":269,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":270,"author":{"gitId":"MingShun98"},"content":"        if (character[0].equals(\"A\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":271,"author":{"gitId":"blank-bank"},"content":"            for (DoctorAppointment id : AppointmentList.appointmentList) {","lastModifiedDate":"2021-04-07"},{"lineNumber":272,"author":{"gitId":"MingShun98"},"content":"                if (id.getAppointmentId().equals(appointmentID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":273,"author":{"gitId":"MingShun98"},"content":"                    return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":274,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":275,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":276,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":277,"author":{"gitId":"MingShun98"},"content":"        return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":278,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":279,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":280,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":281,"author":{"gitId":"MingShun98"},"content":"     * Checks if the input gender is valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":282,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":283,"author":{"gitId":"MingShun98"},"content":"     * @param gender input gender","lastModifiedDate":"2021-04-10"},{"lineNumber":284,"author":{"gitId":"MingShun98"},"content":"     * @return true if the gender is M or F.","lastModifiedDate":"2021-04-10"},{"lineNumber":285,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":286,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":287,"author":{"gitId":"MingShun98"},"content":"    public static boolean isValidGender(String gender) {","lastModifiedDate":"2021-03-31"},{"lineNumber":288,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking Validity of gender\");","lastModifiedDate":"2021-04-09"},{"lineNumber":289,"author":{"gitId":"MingShun98"},"content":"        return gender.equals(\"M\") || gender.equals(\"F\");","lastModifiedDate":"2021-03-31"},{"lineNumber":290,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":291,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":292,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":293,"author":{"gitId":"MingShun98"},"content":"     * Checks if the input date is valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":294,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":295,"author":{"gitId":"MingShun98"},"content":"     * @param date input date","lastModifiedDate":"2021-04-10"},{"lineNumber":296,"author":{"gitId":"MingShun98"},"content":"     * @throws InvalidDateException if the date input does not fit the correct format.","lastModifiedDate":"2021-04-10"},{"lineNumber":297,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":298,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":299,"author":{"gitId":"MingShun98"},"content":"    public static void checkValidDate(final String date) throws InvalidDateException {","lastModifiedDate":"2021-04-09"},{"lineNumber":300,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":301,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Checking Validity of date\");","lastModifiedDate":"2021-04-09"},{"lineNumber":302,"author":{"gitId":"MingShun98"},"content":"            LocalDate.parse(date,","lastModifiedDate":"2021-04-09"},{"lineNumber":303,"author":{"gitId":"MingShun98"},"content":"                    DateTimeFormatter.ofPattern(\"ddMMuuuu\")","lastModifiedDate":"2021-04-09"},{"lineNumber":304,"author":{"gitId":"MingShun98"},"content":"                            .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-04-09"},{"lineNumber":305,"author":{"gitId":"MingShun98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-04-09"},{"lineNumber":306,"author":{"gitId":"MingShun98"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2021-04-09"},{"lineNumber":307,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":308,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":309,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":310,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":311,"author":{"gitId":"MingShun98"},"content":"     * Checks if the input date is valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":312,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":313,"author":{"gitId":"MingShun98"},"content":"     * @param id appointment/doctor iD to be checked.","lastModifiedDate":"2021-04-10"},{"lineNumber":314,"author":{"gitId":"MingShun98"},"content":"     * @return true if the corresponding iD exists in teh appointmentList.","lastModifiedDate":"2021-04-10"},{"lineNumber":315,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":316,"author":{"gitId":"MingShun98"},"content":"    public static boolean isValidIdToDelete(String id) {","lastModifiedDate":"2021-04-10"},{"lineNumber":317,"author":{"gitId":"MingShun98"},"content":"        String[] idKeyword \u003d id.split(\"\");","lastModifiedDate":"2021-04-10"},{"lineNumber":318,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Checking Validity of Doctor/ Appointment ID to be deleted\");","lastModifiedDate":"2021-04-09"},{"lineNumber":319,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":320,"author":{"gitId":"blank-bank"},"content":"        for (DoctorAppointment doc : AppointmentList.appointmentList) {","lastModifiedDate":"2021-04-07"},{"lineNumber":321,"author":{"gitId":"MingShun98"},"content":"            if (idKeyword[0].equals(\"A\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":322,"author":{"gitId":"MingShun98"},"content":"                if (doc.getAppointmentId().equals(id)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":323,"author":{"gitId":"MingShun98"},"content":"                    return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":324,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":325,"author":{"gitId":"MingShun98"},"content":"            } else if (idKeyword[0].equals(\"D\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":326,"author":{"gitId":"MingShun98"},"content":"                if (doc.getDoctorId().equals(id)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":327,"author":{"gitId":"MingShun98"},"content":"                    return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":328,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":329,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":330,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":331,"author":{"gitId":"MingShun98"},"content":"        return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":332,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":333,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"MingShun98":317,"blank-bank":16}},{"path":"src/main/java/seedu/logic/errorchecker/InventoryChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.CorruptedFileException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.DuplicateDrugException;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.NonExistentDrugException;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.WrongNumberException;","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.Inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"public class InventoryChecker extends MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    private InventoryList inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"    private ArrayList\u003cInventory\u003e inventoryArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    private String[] stringTokens;","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"    private int numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    public InventoryChecker(InventoryList inventory, String[] stringTokens, int numberOfTokens) {","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"        this.inventory \u003d inventory;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"        this.stringTokens \u003d stringTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"        this.numberOfTokens \u003d numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    public InventoryChecker(ArrayList\u003cInventory\u003e inventory, String[] stringTokens, int numberOfTokens) {","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"        inventoryArrayList \u003d inventory;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"        this.stringTokens \u003d stringTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"        this.numberOfTokens \u003d numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"    public void checkStorage() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"        emptySpaceCheck();","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"        checkStorageLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"        illegalCharacterChecker(stringTokens[0], \"name\");","lastModifiedDate":"2021-04-02"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        illegalCharacterChecker(stringTokens[2], \"quantity\");","lastModifiedDate":"2021-04-02"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"        checkPrice(stringTokens[1]);","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"        checkQuantity(stringTokens[2]);","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"        checkDuplicate(stringTokens[0], Double.parseDouble(stringTokens[1]));","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"    public void checkAdd() throws DuplicateDrugException, WrongNumberException, IllegalCharacterException {","lastModifiedDate":"2021-04-11"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"        illegalCharacterChecker(stringTokens[1], \"name\");","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        illegalCharacterChecker(stringTokens[3], \"quantity\");","lastModifiedDate":"2021-04-02"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"        checkPrice(stringTokens[2]);","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"        checkQuantity(stringTokens[3]);","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"        checkDuplicate(stringTokens[1], Double.parseDouble(stringTokens[2]));","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"NoorSarrah"},"content":"    public void checkDelete() throws IllegalCharacterException, NonExistentDrugException {","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"NoorSarrah"},"content":"        illegalCharacterChecker(stringTokens[1], \"name\");","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"NoorSarrah"},"content":"        isNameExist(stringTokens[1], inventory);","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"NoorSarrah"},"content":"    public void checkStorageLength() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"NoorSarrah"},"content":"        if (numberOfTokens !\u003d 3) {","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"NoorSarrah"},"content":"            throw new CorruptedFileException(\"Inventory\");","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"NoorSarrah"},"content":"    public void emptySpaceCheck() throws NoInputException {","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"NoorSarrah"},"content":"        for (int i \u003d 0; i \u003c numberOfTokens; i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"            if (stringTokens[i].trim().equals(\"\")) {","lastModifiedDate":"2021-04-02"},{"lineNumber":68,"author":{"gitId":"NoorSarrah"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"NoorSarrah"},"content":"    public static void checkDuplicate(String inputString, Double price) throws DuplicateDrugException {","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"        for (Inventory inventory : InventoryList.list) {","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"NoorSarrah"},"content":"            String drugName \u003d inventory.getDrugName();","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"NoorSarrah"},"content":"            Double drugPrice \u003d inventory.getDoublePrice();","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"NoorSarrah"},"content":"            if (drugName.equals(inputString) \u0026\u0026 !drugPrice.equals(price)) {","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"NoorSarrah"},"content":"                throw new DuplicateDrugException();","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":83,"author":{"gitId":"NoorSarrah"},"content":"    public static void checkQuantity(String number) throws WrongNumberException {","lastModifiedDate":"2021-04-03"},{"lineNumber":84,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":85,"author":{"gitId":"NoorSarrah"},"content":"            Integer.parseInt(number);","lastModifiedDate":"2021-04-03"},{"lineNumber":86,"author":{"gitId":"NoorSarrah"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"NoorSarrah"},"content":"            throw new WrongNumberException(\"quantity\");","lastModifiedDate":"2021-04-03"},{"lineNumber":88,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"NoorSarrah"},"content":"        if (Integer.parseInt(number) \u003c 0) {","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"NoorSarrah"},"content":"            throw new WrongNumberException(\"quantity\");","lastModifiedDate":"2021-04-03"},{"lineNumber":91,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":93,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":94,"author":{"gitId":"NoorSarrah"},"content":"    public static boolean checkPrice(String price) throws WrongNumberException {","lastModifiedDate":"2021-04-03"},{"lineNumber":95,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"NoorSarrah"},"content":"            Double.parseDouble(price);","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"NoorSarrah"},"content":"        } catch (NumberFormatException e) { //check if price is a double","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"NoorSarrah"},"content":"            throw new WrongNumberException(\"price\");","lastModifiedDate":"2021-04-03"},{"lineNumber":99,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-03"},{"lineNumber":100,"author":{"gitId":"NoorSarrah"},"content":"        if (Double.parseDouble(price) \u003c 0) {","lastModifiedDate":"2021-04-03"},{"lineNumber":101,"author":{"gitId":"NoorSarrah"},"content":"            throw new WrongNumberException(\"price\");","lastModifiedDate":"2021-04-03"},{"lineNumber":102,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"NoorSarrah"},"content":"        return false;","lastModifiedDate":"2021-04-01"},{"lineNumber":104,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"    public void isNameExist(String userInput, InventoryList drugs) throws NonExistentDrugException {","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"NoorSarrah"},"content":"        if (!drugs.isDrugStored(userInput)) {","lastModifiedDate":"2021-04-03"},{"lineNumber":108,"author":{"gitId":"NoorSarrah"},"content":"            throw new NonExistentDrugException(\"NameDoesNotExist\");","lastModifiedDate":"2021-04-03"},{"lineNumber":109,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-03"},{"lineNumber":110,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":111,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":112,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"NoorSarrah":94,"blank-bank":18}},{"path":"src/main/java/seedu/logic/errorchecker/MainChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.ExcessInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.InsufficientInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.InvalidGenderException;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.VALID_GENDER_INPUT;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"public class MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"    public static void checkNumInput(String line, int max, int min) throws InsufficientInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"            ExcessInputException {","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"        if (line.split(\"/\").length \u003c min) {","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"            throw new InsufficientInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"        if (line.split(\"/\").length \u003e max) {","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"            throw new ExcessInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"    public static void checkNumInput(String[] array, int max, int min) throws InsufficientInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"            ExcessInputException {","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"        if (array.length \u003c min) {","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"            throw new InsufficientInputException();","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"        if (array.length \u003e max) {","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"            throw new ExcessInputException();","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"    public static void checkDataNumInput(String line, int max, int min) throws InsufficientInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"            ExcessInputException {","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        if (line.split(\"\\\\|\").length \u003c min) {","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"            throw new InsufficientInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"        if (line.split(\"\\\\|\").length \u003e max) {","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"            throw new ExcessInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    public static void checkNumericInput(String number) throws NumberFormatException, InvalidIntegerException {","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"            Integer.parseInt(number);     // Check age is numeric","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"        if (Integer.parseInt(number) \u003c 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"            throw new InvalidIntegerException();","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"    public static void checkBlankInput(String line) throws NoInputException {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"        String[] array \u003d line.split(\"/\");","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"        for (String s : array) {","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"            if (s.trim().equals(\"\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"    public static void checkBlankInput(String[] array) throws NoInputException {","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"        for (String s : array) {","lastModifiedDate":"2021-04-06"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"            if (s.trim().equals(\"\")) {","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"    public static void checkBlankInputForStorage(String line) throws NoInputException {","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"        String[] array \u003d line.split(\"\\\\|\");","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"        for (String s : array) {","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"            if (s.trim().equals(\"\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkGender(String stringToken) throws InvalidGenderException {","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"        String gender \u003d stringToken;","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"        if (!Arrays.stream(VALID_GENDER_INPUT).anyMatch(gender::equals)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidGenderException();","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"    public static void illegalCharacterChecker(String stringToken, String fieldInput)","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"            throws IllegalCharacterException {","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"        String cleanedInput \u003d UI.cleanseInput(stringToken.trim());","lastModifiedDate":"2021-04-03"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"        if (!stringToken.equals(cleanedInput)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"            throw new IllegalCharacterException(fieldInput);","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":5,"MingShun98":9,"Chiamjiaen":17,"AlexanderTanJunAn":2,"blank-bank":70}},{"path":"src/main/java/seedu/logic/errorchecker/NurseScheduleChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InvalidDateException;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.DuplicateScheduleException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.parser.NurseSchedulesParser;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseSchedule;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.Patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.model.staff.Staff;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.storage.DoctorAppointmentStorage;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.storage.NurseScheduleStorage;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.List;","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleChecker extends MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if date is valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param date string date","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidDateException if date is not valid","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void isValidDate(final String date) throws InvalidDateException {","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"            LocalDate.parse(date,","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    DateTimeFormatter.ofPattern(\"ddMMuuuu\")","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if input is empty.","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param line raw user input","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NoInputException if input is empty","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkEmptyInput(String line) throws NoInputException {","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] array \u003d line.split(\"/\");","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"        for (String s : array) {","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (s.trim().equals(\"\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if nurseID exists in staff database.","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseID id to be checked","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if id does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseCrossValidationError if staff database cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkNurseiDExist(String nurseID) throws NurseIdNotFound, NurseCrossValidationError {","lastModifiedDate":"2021-04-10"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ArrayList\u003cStaff\u003e doctorList;","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"            doctorList \u003d DoctorAppointmentStorage.loadDoctorFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"            for (Staff id : doctorList) {","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (id.getId().equals(nurseID)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    return;","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new NurseIdNotFound();","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new NurseCrossValidationError();","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new NurseIdNotFound();","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if patientID exists in patient database.","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param patientID id to be checked","lastModifiedDate":"2021-04-10"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientIdNotFound if id does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientCrossValidationError if patient database cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkPatientiDExist(String patientID) throws PatientIdNotFound, PatientCrossValidationError {","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ArrayList\u003cPatient\u003e patientList;","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"            patientList \u003d NurseScheduleStorage.loadPatientFile();","lastModifiedDate":"2021-04-01"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"            for (Patient id : patientList) {","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (id.getPatientID().equals(patientID)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    return;","lastModifiedDate":"2021-04-01"},{"lineNumber":100,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-04-01"},{"lineNumber":101,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new PatientIdNotFound();","lastModifiedDate":"2021-04-01"},{"lineNumber":103,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":104,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new PatientCrossValidationError();","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new PatientIdNotFound();","lastModifiedDate":"2021-04-01"},{"lineNumber":107,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if nurse id is of correct format.","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param userID user inputted id","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if id is not valid","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkValidNurseID(String userID) throws InvalidiDTypeException {","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (userID.length() !\u003d 6) {","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else if (!(userID.charAt(0) \u003d\u003d \u0027N\u0027)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":121,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else if (numberOfIntegersInString(userID) !\u003d 5) {","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":128,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if patient id is of correct format.","lastModifiedDate":"2021-04-10"},{"lineNumber":129,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":130,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param userID user inputted id","lastModifiedDate":"2021-04-10"},{"lineNumber":131,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if id is not valid","lastModifiedDate":"2021-04-10"},{"lineNumber":132,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":133,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkValidPatientID(String userID) throws InvalidiDTypeException {","lastModifiedDate":"2021-04-10"},{"lineNumber":134,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (userID.length() !\u003d 6) {","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":136,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }  else if (!(userID.charAt(0) \u003d\u003d \u0027P\u0027)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":138,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else if (numberOfIntegersInString(userID) !\u003d 5) {","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new InvalidiDTypeException();","lastModifiedDate":"2021-04-10"},{"lineNumber":140,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":144,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks the number of integers in id.","lastModifiedDate":"2021-04-10"},{"lineNumber":145,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":146,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param userInput user inputted id","lastModifiedDate":"2021-04-10"},{"lineNumber":147,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return number of integers","lastModifiedDate":"2021-04-10"},{"lineNumber":148,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":149,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static int numberOfIntegersInString(String userInput) {","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int numberOfIntegers \u003d 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"AlexanderTanJunAn"},"content":"        for (int i \u003d 0; i \u003c userInput.length(); i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (Character.isDigit(userInput.charAt(i))) {","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"AlexanderTanJunAn"},"content":"                numberOfIntegers++;","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return numberOfIntegers;","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":159,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":160,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if patientID is duplicated.","lastModifiedDate":"2021-04-10"},{"lineNumber":161,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":162,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param id patient id","lastModifiedDate":"2021-04-10"},{"lineNumber":163,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param date date of schedule","lastModifiedDate":"2021-04-10"},{"lineNumber":164,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param list arraylist of nurseschedules","lastModifiedDate":"2021-04-10"},{"lineNumber":165,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws DuplicateScheduleException if patient already has a schedule on that date","lastModifiedDate":"2021-04-10"},{"lineNumber":166,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":167,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void checkDuplicatePatientID(String id, String date, ArrayList\u003cNurseSchedule\u003e list)","lastModifiedDate":"2021-04-10"},{"lineNumber":168,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throws DuplicateScheduleException {","lastModifiedDate":"2021-04-10"},{"lineNumber":169,"author":{"gitId":"AlexanderTanJunAn"},"content":"        for (NurseSchedule patient : list) {","lastModifiedDate":"2021-04-01"},{"lineNumber":170,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (patient.getPatientID().equals(id)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":171,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (patient.getDate().equals(date)) {","lastModifiedDate":"2021-04-09"},{"lineNumber":172,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    try {","lastModifiedDate":"2021-04-04"},{"lineNumber":173,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        date \u003d NurseSchedulesParser.formatDate(date);","lastModifiedDate":"2021-04-04"},{"lineNumber":174,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    } catch (ParseException ignored) {","lastModifiedDate":"2021-04-10"},{"lineNumber":175,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        //Exception ignored","lastModifiedDate":"2021-04-10"},{"lineNumber":176,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    }","lastModifiedDate":"2021-04-10"},{"lineNumber":177,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    throw new DuplicateScheduleException(date);","lastModifiedDate":"2021-04-04"},{"lineNumber":178,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-04-04"},{"lineNumber":179,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":180,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":181,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":182,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":183,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":184,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Checks if nurseID exists within schedules.","lastModifiedDate":"2021-04-04"},{"lineNumber":185,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":186,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules List of all schedules","lastModifiedDate":"2021-04-04"},{"lineNumber":187,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param id NurseID to check","lastModifiedDate":"2021-04-04"},{"lineNumber":188,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return boolean","lastModifiedDate":"2021-04-04"},{"lineNumber":189,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if id does not exist","lastModifiedDate":"2021-04-04"},{"lineNumber":190,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":191,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private boolean isValidNurseID(List\u003cNurseSchedule\u003e nurseSchedules, String id) throws NurseIdNotFound {","lastModifiedDate":"2021-04-04"},{"lineNumber":192,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-04-04"},{"lineNumber":193,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c nurseSchedules.size()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":194,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (nurseSchedules.get(i).getNurseID().equals(id)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":195,"author":{"gitId":"AlexanderTanJunAn"},"content":"                return true;","lastModifiedDate":"2021-04-04"},{"lineNumber":196,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":197,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-04-04"},{"lineNumber":198,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":199,"author":{"gitId":"AlexanderTanJunAn"},"content":"        throw new NurseIdNotFound();","lastModifiedDate":"2021-04-04"},{"lineNumber":200,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":201,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"AlexanderTanJunAn":196,"blank-bank":5}},{"path":"src/main/java/seedu/logic/errorchecker/PatientChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.CorruptedFileException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.DuplicateIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IdNotFoundException;","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.patient.InvalidFieldsNumberException;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.patient.InvalidIdLengthException;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.patient.InvalidIdTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.patient.InvalidIdValueException;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.patient.InvalidPatientAgeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.Patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":" * Checks the user input for any characters and format that causes volatility in the program.","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"public class PatientChecker extends MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    private PatientList patients;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    private ArrayList\u003cPatient\u003e patientArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    private String[] stringTokens;","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    private String command;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    private int numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"     * Constructor for patient data internally received from parser.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"     * @param patients patients currently in the list.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"     * @param stringTokens the string that has already been split using the delimiter.","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"     * @param command the command that the user is trying to access.","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"     * @param numberOfTokens the number of tokens in the resulting string array.","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    public PatientChecker(PatientList patients, String[] stringTokens, String command, int numberOfTokens) {","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        this.stringTokens \u003d stringTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"        this.numberOfTokens \u003d numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"     * Constructor for patient data retrieved from storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"     * @param patients patients currently in the list.","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"     * @param stringTokens the string that has already been split using the delimiter.","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"     * @param numberOfTokens the number of tokens in the resulting string array.","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"    public PatientChecker(ArrayList\u003cPatient\u003e patients, String[] stringTokens, int numberOfTokens) {","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"        patientArrayList \u003d patients;","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"        this.stringTokens \u003d stringTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"        this.numberOfTokens \u003d numberOfTokens;","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"     * Uses methods to check the input from the storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"     * Throws an exception if there is a violation found.","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkStorage() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"        emptySpaceCheck();","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"        checkStorageLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"        checkIdStorage();","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"        checkAge(stringTokens[2]);","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[1], \"name\");","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[4], \"Illness\");","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[5], \"medication required\");","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"        checkGender(stringTokens[3].toLowerCase());","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"Chiamjiaen"},"content":"     * Uses methods to check the input from the user using the add command.","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"     * Throws an exception if there is a violation found.","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkAdd() throws HealthVaultException, NumberFormatException {","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"        emptySpaceCheck();","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"        checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"        checkId();","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"        checkAge(stringTokens[3]);","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[2], \"name\");","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[5], \"Illness\");","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[6], \"medication required\");","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"        checkGender(stringTokens[4].toLowerCase());","lastModifiedDate":"2021-04-08"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"Chiamjiaen"},"content":"     * Uses methods to check the input from the user using the find command.","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"Chiamjiaen"},"content":"     * Throws an exception if there is a violation found.","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkFind() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"        emptySpaceCheck();","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"Chiamjiaen"},"content":"        checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"Chiamjiaen"},"content":"        illegalCharacterChecker(stringTokens[1], \"keyword\");","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":108,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the number of tokens in the split input from the storage is acceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws CorruptedFileException when file is corrupted.","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkStorageLength() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"Chiamjiaen"},"content":"        if (numberOfTokens !\u003d 6) {","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Corrupted patient file.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"Chiamjiaen"},"content":"            throw new CorruptedFileException(\"Patient\");","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":120,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the number of tokens in the split input from the storage is acceptable for the given command.","lastModifiedDate":"2021-04-10"},{"lineNumber":121,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":122,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws InvalidFieldsNumberException when the number of input fields is incorrect.","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":124,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkLength() throws HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"Chiamjiaen"},"content":"        if (command.equals(\"add\") \u0026\u0026 numberOfTokens !\u003d 7) {","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient add command input fields.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":127,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidFieldsNumberException(command);","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"Chiamjiaen"},"content":"        } else if ((command.equals(\"delete\") || command.equals(\"find\")) \u0026\u0026 numberOfTokens !\u003d 2) {","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient delete or find command input fields.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":130,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidFieldsNumberException(command);","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"Chiamjiaen"},"content":"        } else if ((command.equals(\"list\") || command.equals(\"return\") || command.equals(\"help\"))","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"Chiamjiaen"},"content":"                \u0026\u0026 numberOfTokens !\u003d 1) {","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient list, return or help command input fields.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":134,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidFieldsNumberException(command);","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":139,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks in the user has inputted an empty string or no text into an input field.","lastModifiedDate":"2021-04-10"},{"lineNumber":140,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":141,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws NoInputException when the user has omitted a required field.","lastModifiedDate":"2021-04-10"},{"lineNumber":142,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":143,"author":{"gitId":"Chiamjiaen"},"content":"    private void emptySpaceCheck() throws NoInputException {","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"Chiamjiaen"},"content":"        for (int i \u003d 0; i \u003c numberOfTokens; i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"Chiamjiaen"},"content":"            if (stringTokens[i].trim().equals(\"\")) {","lastModifiedDate":"2021-04-01"},{"lineNumber":146,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Input field is empty.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":147,"author":{"gitId":"Chiamjiaen"},"content":"                throw new NoInputException();","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":149,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":153,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the Age of the patient is appropriate.","lastModifiedDate":"2021-04-10"},{"lineNumber":154,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":155,"author":{"gitId":"Chiamjiaen"},"content":"     * @param stringToken the age of the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":156,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws NumberFormatException when the input from the user is not an integer.","lastModifiedDate":"2021-04-10"},{"lineNumber":157,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":158,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":159,"author":{"gitId":"Chiamjiaen"},"content":"    private void checkAge(String stringToken) throws NumberFormatException, HealthVaultException {","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"Chiamjiaen"},"content":"        checkNumericInput(stringToken);","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"Chiamjiaen"},"content":"        checkAgeRange(stringToken);","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":165,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the age of the patient is within the appropriate range.","lastModifiedDate":"2021-04-10"},{"lineNumber":166,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":167,"author":{"gitId":"Chiamjiaen"},"content":"     * @param ageString the age of the patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":168,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws InvalidPatientAgeException when the patient\u0027s age is not acceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":169,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"    private void checkAgeRange(String ageString) throws InvalidPatientAgeException {","lastModifiedDate":"2021-04-06"},{"lineNumber":171,"author":{"gitId":"Chiamjiaen"},"content":"        int age \u003d Integer.parseInt(ageString);","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"Chiamjiaen"},"content":"        if (!(age \u003e\u003d 0 \u0026\u0026 age \u003c\u003d 150)) {","lastModifiedDate":"2021-04-08"},{"lineNumber":173,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Patient age is out of range.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"            throw new InvalidPatientAgeException();","lastModifiedDate":"2021-04-06"},{"lineNumber":175,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":179,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the ID of the patient from the parser is acceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":180,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":181,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":182,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":183,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkId() throws HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":184,"author":{"gitId":"Chiamjiaen"},"content":"        checkValidId(stringTokens[1]);","lastModifiedDate":"2021-04-10"},{"lineNumber":185,"author":{"gitId":"Chiamjiaen"},"content":"        checkIdExist(stringTokens[1], patients, command);","lastModifiedDate":"2021-04-10"},{"lineNumber":186,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":189,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the ID of the patient from the storage is acceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":190,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":191,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":192,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":193,"author":{"gitId":"Chiamjiaen"},"content":"    public void checkIdStorage() throws HealthVaultException {","lastModifiedDate":"2021-04-10"},{"lineNumber":194,"author":{"gitId":"Chiamjiaen"},"content":"        checkValidId(stringTokens[0]);","lastModifiedDate":"2021-04-10"},{"lineNumber":195,"author":{"gitId":"Chiamjiaen"},"content":"        checkIdExistStorage(stringTokens[0]);","lastModifiedDate":"2021-04-10"},{"lineNumber":196,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":199,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks the number of integers in the string.","lastModifiedDate":"2021-04-10"},{"lineNumber":200,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":201,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userInput the user input to be checked.","lastModifiedDate":"2021-04-10"},{"lineNumber":202,"author":{"gitId":"Chiamjiaen"},"content":"     * @return the number of integers in the user input.","lastModifiedDate":"2021-04-10"},{"lineNumber":203,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":204,"author":{"gitId":"Chiamjiaen"},"content":"    private int numberOfIntegersInString(String userInput) {","lastModifiedDate":"2021-03-31"},{"lineNumber":205,"author":{"gitId":"Chiamjiaen"},"content":"        int numberOfIntegers \u003d 0;","lastModifiedDate":"2021-03-31"},{"lineNumber":206,"author":{"gitId":"Chiamjiaen"},"content":"        for (int i \u003d 0; i \u003c userInput.length(); i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":207,"author":{"gitId":"Chiamjiaen"},"content":"            if (Character.isDigit(userInput.charAt(i))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":208,"author":{"gitId":"Chiamjiaen"},"content":"                numberOfIntegers++;","lastModifiedDate":"2021-03-31"},{"lineNumber":209,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":210,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":211,"author":{"gitId":"Chiamjiaen"},"content":"        return numberOfIntegers;","lastModifiedDate":"2021-03-31"},{"lineNumber":212,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":213,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":214,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":215,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the ID is of the proper format.","lastModifiedDate":"2021-04-10"},{"lineNumber":216,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":217,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userID the string containing the ID of the patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":218,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws InvalidIdLengthException when the length of the ID is unacceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":219,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws InvalidIdTypeException when the type of the ID is unacceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":220,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws InvalidIdValueException when the value of the ID is unacceptable.","lastModifiedDate":"2021-04-10"},{"lineNumber":221,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":222,"author":{"gitId":"Chiamjiaen"},"content":"    private void checkValidId(String userID) throws InvalidIdLengthException, InvalidIdTypeException,","lastModifiedDate":"2021-04-10"},{"lineNumber":223,"author":{"gitId":"Chiamjiaen"},"content":"            InvalidIdValueException {","lastModifiedDate":"2021-04-10"},{"lineNumber":224,"author":{"gitId":"Chiamjiaen"},"content":"        if (userID.length() !\u003d 6) {","lastModifiedDate":"2021-03-31"},{"lineNumber":225,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient ID length.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":226,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidIdLengthException(\"IDLength\");","lastModifiedDate":"2021-04-10"},{"lineNumber":227,"author":{"gitId":"Chiamjiaen"},"content":"        } else if (!(userID.charAt(0) \u003d\u003d \u0027P\u0027)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":228,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient ID type.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":229,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidIdTypeException(\"IDType\");","lastModifiedDate":"2021-04-10"},{"lineNumber":230,"author":{"gitId":"Chiamjiaen"},"content":"        } else if (numberOfIntegersInString(userID) !\u003d 5) {","lastModifiedDate":"2021-03-31"},{"lineNumber":231,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Incorrect patient ID value.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":232,"author":{"gitId":"Chiamjiaen"},"content":"            throw new InvalidIdValueException(\"IDValue\");","lastModifiedDate":"2021-04-10"},{"lineNumber":233,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":234,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":235,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":236,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":237,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if there is a matching ID in the patient list retrieved from storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":238,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":239,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userID the string containing the ID of the patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":240,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws CorruptedFileException when file is corrupted.","lastModifiedDate":"2021-04-10"},{"lineNumber":241,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":242,"author":{"gitId":"Chiamjiaen"},"content":"    private void checkIdExistStorage(String userID) throws CorruptedFileException {","lastModifiedDate":"2021-04-10"},{"lineNumber":243,"author":{"gitId":"Chiamjiaen"},"content":"        if (isIdTakenStorage(userID)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":244,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Duplicate patient ID in storage.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":245,"author":{"gitId":"Chiamjiaen"},"content":"            throw new CorruptedFileException(\"Patient\");","lastModifiedDate":"2021-03-31"},{"lineNumber":246,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":247,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":248,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":249,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":250,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the ID already exists within the list of patients from the storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":251,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":252,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userID the string containing the ID of the patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":253,"author":{"gitId":"Chiamjiaen"},"content":"     * @return true if the ID is taken already and false if the ID is new.","lastModifiedDate":"2021-04-10"},{"lineNumber":254,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":255,"author":{"gitId":"Chiamjiaen"},"content":"    private boolean isIdTakenStorage(String userID) {","lastModifiedDate":"2021-04-10"},{"lineNumber":256,"author":{"gitId":"Chiamjiaen"},"content":"        for (Patient patient : patientArrayList) {","lastModifiedDate":"2021-03-31"},{"lineNumber":257,"author":{"gitId":"Chiamjiaen"},"content":"            String patientID \u003d patient.getPatientID();","lastModifiedDate":"2021-03-31"},{"lineNumber":258,"author":{"gitId":"Chiamjiaen"},"content":"            if (patientID.equals(userID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"Chiamjiaen"},"content":"                return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":260,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":261,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":262,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":263,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":264,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":265,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":266,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the ID already exists in the list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":267,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":268,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userID the string containing the ID of the patient.","lastModifiedDate":"2021-04-10"},{"lineNumber":269,"author":{"gitId":"Chiamjiaen"},"content":"     * @param patients the current list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":270,"author":{"gitId":"Chiamjiaen"},"content":"     * @param command the command that the user is trying to access.","lastModifiedDate":"2021-04-10"},{"lineNumber":271,"author":{"gitId":"blank-bank"},"content":"     * @throws IdNotFoundException when the ID does not exist in the patient list","lastModifiedDate":"2021-04-11"},{"lineNumber":272,"author":{"gitId":"blank-bank"},"content":"     * @throws DuplicateIdException when there is already an existing ID in the patient list.","lastModifiedDate":"2021-04-11"},{"lineNumber":273,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":274,"author":{"gitId":"blank-bank"},"content":"    private void checkIdExist(String userID, PatientList patients, String command) throws IdNotFoundException,","lastModifiedDate":"2021-04-11"},{"lineNumber":275,"author":{"gitId":"blank-bank"},"content":"            DuplicateIdException {","lastModifiedDate":"2021-04-11"},{"lineNumber":276,"author":{"gitId":"Chiamjiaen"},"content":"        if (patients.isIdTaken(userID)) {","lastModifiedDate":"2021-04-10"},{"lineNumber":277,"author":{"gitId":"Chiamjiaen"},"content":"            if (command.equals(\"add\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":278,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Duplicate patient ID in patient list.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":279,"author":{"gitId":"blank-bank"},"content":"                throw new DuplicateIdException(\"Patient\");","lastModifiedDate":"2021-04-11"},{"lineNumber":280,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":281,"author":{"gitId":"Chiamjiaen"},"content":"        } else {","lastModifiedDate":"2021-03-31"},{"lineNumber":282,"author":{"gitId":"Chiamjiaen"},"content":"            if ((command.equals(\"delete\") || command.equals(\"find\"))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":283,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Patient ID does not exist.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":284,"author":{"gitId":"blank-bank"},"content":"                throw new IdNotFoundException(\"Patient\");","lastModifiedDate":"2021-04-11"},{"lineNumber":285,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":286,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":287,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":288,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Chiamjiaen":270,"blank-bank":18}},{"path":"src/main/java/seedu/logic/errorchecker/StaffChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.errorchecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.DuplicateIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.ExcessInputException;","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.InsufficientInputException;","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.staff.InvalidStaffAgeException;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.staff.WrongListInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.staff.WrongStaffIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.Staff;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"public class StaffChecker extends MainChecker {","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"     * Compares an Integer and String to check if the numeric value is the same.","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"     * @param a  Integer a.","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     * @param b String b.","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     * @return boolean If String of b is an integer with value same as a.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    public boolean isSameInt(int a, String b) {","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"            int temp \u003d Integer.parseInt(b);","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"            return a \u003d\u003d temp;","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"            return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"     * Returns an array of inputs that were delimited by \"/\"","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"     * and removes all trailing and leading whitespaces.","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"     * @param line  String input of entire command given.","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"     * @return array Array of Strings used as input fields.","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"     * @throws InsufficientInputException  If number of input fields is less than 5.","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"     * @throws ExcessInputException  If number of input fields is more than 5.","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"    public String[] getTrimInput(String line) throws InsufficientInputException, ExcessInputException {","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        String[] array \u003d line.trim().split(\"/\");","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"        checkNumInput(array, 5, 5);","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"        array \u003d Arrays.copyOfRange(array, 1, 5);","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c array.length; i++) {","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"            array[i] \u003d array[i].trim();","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"        return array;","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"     * Calls various checker functions to determine the validity of inputs for Add command.","lastModifiedDate":"2021-04-11"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"     * @param line  String input of entire command given.","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"     * @param staffList StaffList object that is an aggregation of all Staff Objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"     * @return array String Array from getTrimInput()","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any input field is invalid.","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"    public String[] checkValidDataForAdd(String line, StaffList staffList) throws HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Staff Data before adding.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"        String[] array \u003d getTrimInput(line);","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"        checkStaffID(array[0]);","lastModifiedDate":"2021-04-06"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"        checkDuplicateStaffID(array[0], staffList.getList());","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"        checkStaffAge(array[2]);","lastModifiedDate":"2021-04-06"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"        checkBlankInput(array);","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"        invalidCharactersStaffChecker(array);","lastModifiedDate":"2021-04-06"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"        return array;","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"     * Calls various checker functions to determine the validity of data","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"     * when loading data from text files.","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"     * @param line  String input of entire command given.","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"     * @param list ArrayList that is an aggregation of all Staff Objects to be loaded.","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any input field from sata files is corrupted.","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"    public void checkValidDataFromStorage(String line, ArrayList\u003cStaff\u003e list) throws HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Staff Data before loading.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"        checkDataNumInput(line,4,4);","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"        checkStaffID(line.split(\"\\\\|\")[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"        checkDuplicateStaffID(line.split(\"\\\\|\")[0], list);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"        checkStaffAge(line.split(\"\\\\|\")[2]);","lastModifiedDate":"2021-04-06"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"        checkBlankInputForStorage(line);","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"     * Checks if Staff ID given is already found in the ArrayList.","lastModifiedDate":"2021-04-09"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"     * @param id  String of ID to be checked against the ArrayList.","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"     * @param list ArrayList containing data for Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"     * @throws DuplicateIdException  If id is found in list","lastModifiedDate":"2021-04-11"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"    public void checkDuplicateStaffID(String id, ArrayList\u003cStaff\u003e list) throws DuplicateIdException {","lastModifiedDate":"2021-04-11"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Duplicated Staff ID.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"        for (Staff staff : list) {","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"            if (staff.getId().equals(id)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"                throw new DuplicateIdException(\"Staff\");","lastModifiedDate":"2021-04-11"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"     * Checks if a given String id has valid Staff ID format.","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"     * @param id  String of Staff ID","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"     * @throws WrongStaffIdException  If the format of Staff ID is not valid ([D/N][5 digit integer])","lastModifiedDate":"2021-04-11"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"    public void checkStaffID(String id) throws WrongStaffIdException {","lastModifiedDate":"2021-04-11"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Staff ID.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"blank-bank"},"content":"            if (id.length() \u003c 5) {","lastModifiedDate":"2021-04-08"},{"lineNumber":119,"author":{"gitId":"blank-bank"},"content":"                throw new WrongStaffIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"            if (!(id.charAt(0) \u003d\u003d \u0027D\u0027 || id.charAt(0) \u003d\u003d \u0027N\u0027) || (id.length()) !\u003d 6) {","lastModifiedDate":"2021-04-09"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"                throw new WrongStaffIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"            if (Integer.parseInt(id.substring(1)) \u003c 0) {","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"                throw new WrongStaffIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"            throw new WrongStaffIdException();","lastModifiedDate":"2021-04-11"},{"lineNumber":129,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"     * Checks if a given String input has is valid to be used as Staff Age.","lastModifiedDate":"2021-04-09"},{"lineNumber":135,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":136,"author":{"gitId":"blank-bank"},"content":"     * @param number String of age.","lastModifiedDate":"2021-04-09"},{"lineNumber":137,"author":{"gitId":"blank-bank"},"content":"     * @throws NumberFormatException  If input is not numeric.","lastModifiedDate":"2021-04-09"},{"lineNumber":138,"author":{"gitId":"blank-bank"},"content":"     * @throws InvalidIntegerException  If integer is \u003c 0.","lastModifiedDate":"2021-04-09"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"     * @throws InvalidStaffAgeException  If age does nat fall within the range of 18 \u003c\u003d age \u003c\u003d 150.","lastModifiedDate":"2021-04-09"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"    public void checkStaffAge(String number) throws NumberFormatException,","lastModifiedDate":"2021-04-08"},{"lineNumber":142,"author":{"gitId":"blank-bank"},"content":"            InvalidIntegerException, InvalidStaffAgeException {","lastModifiedDate":"2021-04-06"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Staff Age.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":144,"author":{"gitId":"blank-bank"},"content":"        checkNumericInput(number);","lastModifiedDate":"2021-04-06"},{"lineNumber":145,"author":{"gitId":"blank-bank"},"content":"        if (Integer.parseInt(number) \u003c 18 || Integer.parseInt(number) \u003e 150) {","lastModifiedDate":"2021-04-06"},{"lineNumber":146,"author":{"gitId":"blank-bank"},"content":"            throw new InvalidStaffAgeException();","lastModifiedDate":"2021-04-06"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":148,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":150,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":151,"author":{"gitId":"blank-bank"},"content":"     * Checks if any input has illegal characters (Non alphanumeric and non whitespace) for Add command.","lastModifiedDate":"2021-04-09"},{"lineNumber":152,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":153,"author":{"gitId":"blank-bank"},"content":"     * @param array  Array of inputs.","lastModifiedDate":"2021-04-09"},{"lineNumber":154,"author":{"gitId":"blank-bank"},"content":"     * @throws IllegalCharacterException  If any illegal characters is present.","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"    public void invalidCharactersStaffChecker(String[] array) throws IllegalCharacterException {","lastModifiedDate":"2021-04-06"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Checking Illegal Characters in Staff input.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"        String[] field \u003d {\"ID\", \"name\", \"age\", \"specialisation\"};","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c array.length; i++) {","lastModifiedDate":"2021-04-06"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"            illegalCharacterChecker(array[i], field[i]);","lastModifiedDate":"2021-04-06"},{"lineNumber":161,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"     * Checks if any input has illegal characters (Non alphanumeric and non whitespace)","lastModifiedDate":"2021-04-09"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"     * from data storage before loading, to prevent corrupted data from loading.","lastModifiedDate":"2021-04-09"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":168,"author":{"gitId":"blank-bank"},"content":"     * @param line String of data from storage.","lastModifiedDate":"2021-04-09"},{"lineNumber":169,"author":{"gitId":"blank-bank"},"content":"     * @throws IllegalCharacterException  If any illegal characters is present.","lastModifiedDate":"2021-04-09"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":"    public String[] invalidCharactersStaffCheckerForStorage(String line) throws IllegalCharacterException {","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"        String [] cleanArray \u003d line.split(\"\\\\|\");","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"blank-bank"},"content":"        String[] field \u003d {\"ID\", \"name\", \"age\", \"specialisation\"};","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c (cleanArray.length); i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"blank-bank"},"content":"            illegalCharacterChecker(cleanArray[i], field[i]);","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"blank-bank"},"content":"        return cleanArray;","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":181,"author":{"gitId":"blank-bank"},"content":"     * Checks if input is equals to \"nurses\" (case insensitive).","lastModifiedDate":"2021-04-09"},{"lineNumber":182,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":183,"author":{"gitId":"blank-bank"},"content":"     * @param input String input.","lastModifiedDate":"2021-04-09"},{"lineNumber":184,"author":{"gitId":"blank-bank"},"content":"     * @return boolean If input equals \"nurses\" case insensitive","lastModifiedDate":"2021-04-09"},{"lineNumber":185,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":186,"author":{"gitId":"blank-bank"},"content":"    public boolean isEqualNurses(String input) {","lastModifiedDate":"2021-04-06"},{"lineNumber":187,"author":{"gitId":"blank-bank"},"content":"        return input.trim().equalsIgnoreCase(\"nurses\");","lastModifiedDate":"2021-04-06"},{"lineNumber":188,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":189,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":190,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":191,"author":{"gitId":"blank-bank"},"content":"     * Checks if input is equals to \"doctors\" (case insensitive).","lastModifiedDate":"2021-04-09"},{"lineNumber":192,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":193,"author":{"gitId":"blank-bank"},"content":"     * @param input String input.","lastModifiedDate":"2021-04-09"},{"lineNumber":194,"author":{"gitId":"blank-bank"},"content":"     * @return boolean If input equals \"doctors\" case insensitive","lastModifiedDate":"2021-04-09"},{"lineNumber":195,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":196,"author":{"gitId":"blank-bank"},"content":"    public boolean isEqualDoctors(String input) {","lastModifiedDate":"2021-04-06"},{"lineNumber":197,"author":{"gitId":"blank-bank"},"content":"        return input.trim().equalsIgnoreCase(\"doctors\");","lastModifiedDate":"2021-04-06"},{"lineNumber":198,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":199,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":201,"author":{"gitId":"blank-bank"},"content":"     * Checks validity of the list command.","lastModifiedDate":"2021-04-09"},{"lineNumber":202,"author":{"gitId":"blank-bank"},"content":"     * Returns String array that contains input fields for StaffList command.","lastModifiedDate":"2021-04-09"},{"lineNumber":203,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":204,"author":{"gitId":"blank-bank"},"content":"     * @param line  Entire command input.","lastModifiedDate":"2021-04-09"},{"lineNumber":205,"author":{"gitId":"blank-bank"},"content":"     * @return array of inputs for StaffList command.","lastModifiedDate":"2021-04-09"},{"lineNumber":206,"author":{"gitId":"blank-bank"},"content":"     * @throws WrongListInputException  If zone is \u003c\u003d 0.","lastModifiedDate":"2021-04-09"},{"lineNumber":207,"author":{"gitId":"blank-bank"},"content":"     * @throws InsufficientInputException  If number of input fields is less than 1.","lastModifiedDate":"2021-04-09"},{"lineNumber":208,"author":{"gitId":"blank-bank"},"content":"     * @throws ExcessInputException  If number of input fields is more than 2.","lastModifiedDate":"2021-04-09"},{"lineNumber":209,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":210,"author":{"gitId":"blank-bank"},"content":"    public String[] checkListCommand(String line) throws WrongListInputException,","lastModifiedDate":"2021-04-07"},{"lineNumber":211,"author":{"gitId":"blank-bank"},"content":"            ExcessInputException, InsufficientInputException {","lastModifiedDate":"2021-04-07"},{"lineNumber":212,"author":{"gitId":"blank-bank"},"content":"        String[] array \u003d line.split(\"/\");","lastModifiedDate":"2021-04-06"},{"lineNumber":213,"author":{"gitId":"blank-bank"},"content":"        if ((array.length \u003e 1)","lastModifiedDate":"2021-04-11"},{"lineNumber":214,"author":{"gitId":"blank-bank"},"content":"                \u0026\u0026 !(isEqualNurses(array[1]) || isEqualDoctors(array[1]))) {","lastModifiedDate":"2021-04-11"},{"lineNumber":215,"author":{"gitId":"blank-bank"},"content":"            throw new WrongListInputException();","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"blank-bank"},"content":"        MainChecker.checkNumInput(array,2,1);","lastModifiedDate":"2021-04-08"},{"lineNumber":218,"author":{"gitId":"blank-bank"},"content":"        return array;","lastModifiedDate":"2021-04-06"},{"lineNumber":219,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":221,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":222,"author":{"gitId":"blank-bank"},"content":"     * Checks validity of the delete command.","lastModifiedDate":"2021-04-09"},{"lineNumber":223,"author":{"gitId":"blank-bank"},"content":"     * Returns String of the Staff ID to be deleted.","lastModifiedDate":"2021-04-09"},{"lineNumber":224,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":225,"author":{"gitId":"blank-bank"},"content":"     * @param line  Entire delete command input.","lastModifiedDate":"2021-04-09"},{"lineNumber":226,"author":{"gitId":"blank-bank"},"content":"     * @return Staff ID to be deleted.","lastModifiedDate":"2021-04-09"},{"lineNumber":227,"author":{"gitId":"blank-bank"},"content":"     * @throws WrongStaffIdException  If zone is \u003c\u003d 0.","lastModifiedDate":"2021-04-11"},{"lineNumber":228,"author":{"gitId":"blank-bank"},"content":"     * @throws InsufficientInputException  If number of input fields is less than 2.","lastModifiedDate":"2021-04-09"},{"lineNumber":229,"author":{"gitId":"blank-bank"},"content":"     * @throws ExcessInputException  If number of input fields is more than 2.","lastModifiedDate":"2021-04-09"},{"lineNumber":230,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":231,"author":{"gitId":"blank-bank"},"content":"    public String checkDeleteCommand(String line) throws ExcessInputException,","lastModifiedDate":"2021-04-07"},{"lineNumber":232,"author":{"gitId":"blank-bank"},"content":"            InsufficientInputException, WrongStaffIdException {","lastModifiedDate":"2021-04-11"},{"lineNumber":233,"author":{"gitId":"blank-bank"},"content":"        checkNumInput(line.split(\"/\"),2,2);","lastModifiedDate":"2021-04-08"},{"lineNumber":234,"author":{"gitId":"blank-bank"},"content":"        String input \u003d line.split(\"/\")[1];","lastModifiedDate":"2021-04-07"},{"lineNumber":235,"author":{"gitId":"blank-bank"},"content":"        checkStaffID(input);","lastModifiedDate":"2021-04-07"},{"lineNumber":236,"author":{"gitId":"blank-bank"},"content":"        return input;","lastModifiedDate":"2021-04-07"},{"lineNumber":237,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":238,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"blank-bank":238}},{"path":"src/main/java/seedu/logic/instance/DoctorAppointmentInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.instance;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.CorruptedFileException;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.parser.DoctorAppointmentParser;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.DoctorAppointmentStorage;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":" * Doctor Appointment Instance where the functionality of Doctor Appointment Menu Starts Running.","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentInstance {","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    private DoctorAppointmentUI ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    private AppointmentList details;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"    private DoctorAppointmentStorage doctorAppointmentStorage;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointmentInstance.","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     * @param filepath String of the filepath for DoctorAppointmentStorage.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointmentInstance(String filepath) {","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"        ui \u003d new DoctorAppointmentUI();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"        doctorAppointmentStorage \u003d new DoctorAppointmentStorage(filepath);","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"     * Executes the DoctorAppointment Menu.","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"    public void run() {","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"            details \u003d doctorAppointmentStorage.loadFile();","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"            try {","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"                doctorAppointmentStorage.createFile();","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"                details \u003d doctorAppointmentStorage.loadFile();","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"            } catch (IOException | CorruptedFileException e1) {","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"                System.out.println(e1.getMessage());","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.WARNING, \"DoctorAppointment.txt is corrupted.\");","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"            } catch (HealthVaultException e2) {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"                e2.getMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.WARNING, \"Error Creating File.\");","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"        } catch (CorruptedFileException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentUI.corruptedFileErrorMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.WARNING, \"DoctorAppointment.txt is corrupted.\");","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"        } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.WARNING, \"An Error occur during storage loading\");","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"            e.getMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"        UI.showLine();","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"        DoctorAppointmentUI.doctorAppointmentsWelcome();","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"        ui.printAppointmentMenuPrompt();","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Accessing Doctor Appointment Menu\");","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"        boolean isReturnToStartMenu \u003d false;","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"        while (!isReturnToStartMenu) {","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"            try {","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"                String input \u003d ui.getInput(\"Appointment\");","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"                UI.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"                Command c \u003d DoctorAppointmentParser.parse(input, details);","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"                c.execute(details, ui);","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"                isReturnToStartMenu \u003d c.isExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.INFO, \"Exiting Doctor Appointment Menu\");","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"                if (isReturnToStartMenu) {","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"                    UI.returningToStartMenuMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.printNewLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.WARNING, \"Command from Parser return as NULL\");","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"MingShun98"},"content":"                //Command C can return as null if an error is triggered in parser","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"MingShun98"},"content":"                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"MingShun98"},"content":"            } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.WARNING, \"Handling HealthVault exceptions during Doctor Appointment Menu\");","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"MingShun98"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.printNewLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"MingShun98"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"MingShun98"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-04-01"},{"lineNumber":93,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.SEVERE, \"Something went wrong that is not handled by Healthvault exception\");","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.printNewLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"MingShun98":91,"AlexanderTanJunAn":1,"blank-bank":6}},{"path":"src/main/java/seedu/logic/instance/InventoryInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.instance;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.InsufficientInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.ExcessInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.DuplicateDrugException;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.InvalidQuantityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.WrongNumberException;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.parser.InventoryParser;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.Inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"import seedu.storage.InventoryStorage;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"public class InventoryInstance {","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"     * Main entry-point for the java.duke.DrugInstance application.","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"    private InventoryUI ui;","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    private InventoryList inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"    private InventoryStorage inventoryStorage;","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"    private InventoryParser parser;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    public InventoryInstance(String filePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"        ui \u003d new InventoryUI();","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"        inventoryStorage \u003d new InventoryStorage(filePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"        parser \u003d new InventoryParser();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"    public void run() {","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"            ArrayList\u003cInventory\u003e list \u003d inventoryStorage.loadInventory();","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"            inventory \u003d new InventoryList(list);","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"        } catch (HealthVaultException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"            ui.corruptedFileErrorMessage();","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"            inventory \u003d new InventoryList();","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"            return;","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"        InventoryUI.inventoryMenuHeader();","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"        boolean isReturnToStartMenu \u003d false;","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"NoorSarrah"},"content":"        while (!isReturnToStartMenu) {","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"NoorSarrah"},"content":"            try {","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"                UI.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"                String fullCommand \u003d ui.getInput(\"Inventory\");","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"                Command c \u003d parser.inventoryParse(fullCommand, inventory);","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"                c.execute(inventory, ui);","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"NoorSarrah"},"content":"                inventoryStorage.storeInventory(inventory);","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"NoorSarrah"},"content":"                isReturnToStartMenu \u003d c.isExit();","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"NoorSarrah"},"content":"                if (isReturnToStartMenu) {","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"NoorSarrah"},"content":"                    UI.returningToStartMenuMessage();","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"NoorSarrah"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"NoorSarrah"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"NoorSarrah"},"content":"                //Command C can return as null if an error is triggered in parser","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"NoorSarrah"},"content":"                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"NoorSarrah"},"content":"            } catch (WrongNumberException e) {","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"NoorSarrah"},"content":"                e.getError();","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"            } catch (DuplicateDrugException e) {","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"NoorSarrah"},"content":"                e.getError(\"DrugStored\");","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"NoorSarrah"},"content":"            } catch (IllegalCharacterException | InsufficientInputException","lastModifiedDate":"2021-04-11"},{"lineNumber":66,"author":{"gitId":"NoorSarrah"},"content":"                    | ExcessInputException | NoInputException e) {","lastModifiedDate":"2021-04-11"},{"lineNumber":67,"author":{"gitId":"NoorSarrah"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-04-03"},{"lineNumber":68,"author":{"gitId":"NoorSarrah"},"content":"            } catch (InvalidQuantityException e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"NoorSarrah"},"content":"                e.getError();","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"NoorSarrah"},"content":"            } catch (HealthVaultException e) {","lastModifiedDate":"2021-04-03"},{"lineNumber":71,"author":{"gitId":"NoorSarrah"},"content":"                e.getError(\"\");","lastModifiedDate":"2021-04-03"},{"lineNumber":72,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"NoorSarrah":65,"Chiamjiaen":2,"blank-bank":8}},{"path":"src/main/java/seedu/logic/instance/NurseScheduleInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.instance;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InvalidDateException;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.NurseSchedulesParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.NurseScheduleStorage;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":" * Main entry-point for the NurseSchedules instance.","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleInstance {","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private NurseSchedulesParser parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    private NurseScheduleList nurseSchedules;","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private NurseScheduleStorage storage;","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private NurseScheduleUI ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor for NurseScheduleInstance.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseScheduleInstance() {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"        parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"        storage \u003d new NurseScheduleStorage();","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"        ui \u003d new NurseScheduleUI();","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /** Reads the user command and executes it, until the user issues the exit command. */","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void runCommandLoopUntilExit() {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nurseSchedules \u003d new NurseScheduleList(storage.load());","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (IOException | NullPointerException | ArrayIndexOutOfBoundsException","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"                | NurseIdNotFound | InvalidiDTypeException | PatientIdNotFound | InvalidDateException e) {","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ui.corruptedFileErrorMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING, \"Error loading NurseSchedule.txt\");","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (NurseCrossValidationError e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING,\"Error loading Staff.txt\");","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return;","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (PatientCrossValidationError e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING,\"Error loading Patients.txt\");","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"        ui.printNurseScheduleWelcomeMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"        boolean isReturnToStartMenu \u003d false;","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (!isReturnToStartMenu) {","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.info(\"Nurse Schedule super loop started\");","lastModifiedDate":"2021-04-02"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"            try {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"                String line \u003d ui.getInput(\"NSchedule\");","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"                Command c \u003d parser.nurseParse(line, ui);","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"                c.execute(nurseSchedules, ui);","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"                storage.writeToFile(nurseSchedules);","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"                isReturnToStartMenu \u003d c.isExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (isReturnToStartMenu) {","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    nurseSchedules.clearSchedules();","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    UI.returningToStartMenuMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    logger.info(\"Exiting nurse schedule instance\");","lastModifiedDate":"2021-04-02"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"            } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"                //ui.invalidInputsMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"                //Command C can return as null if an error is triggered in parser","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"                logger.log(Level.WARNING, \"null command returned\");","lastModifiedDate":"2021-04-02"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"AlexanderTanJunAn":80,"-":2,"blank-bank":6}},{"path":"src/main/java/seedu/logic/instance/PatientInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.instance;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.parser.PatientParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.PatientStorage;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":" * Instance in which user can access patient related functions.","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"public class PatientInstance {","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"    private PatientUI ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    private PatientList patients;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    private PatientStorage patientStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    private PatientParser parser;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    public PatientInstance(String filepath) {","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"        ui \u003d new PatientUI();","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"        patientStorage \u003d new PatientStorage(filepath);","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"        parser \u003d new PatientParser();","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"     * Runs the patient instance.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"    public void run() {","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"        //tries to load patients from the storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"            patients \u003d new PatientList(patientStorage.loadPatients());","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (HealthVaultException | NumberFormatException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Patient file corrupted. Access Denied\");","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"            ui.corruptedFileErrorMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"            patients \u003d new PatientList();","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        PatientUI.patientCommandWelcome();","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"        logger.log(Level.INFO, \"Patient instance accessed.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"        boolean isReturnToStartMenu \u003d false;","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"        //main patient instance super loop.","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"        while (!isReturnToStartMenu) {","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"            try {","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"                String fullCommand \u003d ui.getInput(\"Patient\");","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"                Command c \u003d parser.patientParse(fullCommand, patients);","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"                c.execute(patients, ui);","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"                patientStorage.storePatients(patients);","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.INFO, \"Patient file saved.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"                isReturnToStartMenu \u003d c.isExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"                if (isReturnToStartMenu) {","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"                    UI.returningToStartMenuMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"                    logger.log(Level.INFO, \"Exiting patient instance\");","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Command Returned as null.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"                //Command C can return as null if an error is triggered in parser.","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"            } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Handling HealthVaultException in patient instance.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"                System.out.println(\"Your age input is not an accepted integer!\");","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"                ui.lineBreak();","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"Handling NumberFormatException.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":64,"blank-bank":14}},{"path":"src/main/java/seedu/logic/instance/StaffInstance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.instance;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.StaffParser;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.StaffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"public class StaffInstance {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    private StaffUI staffUI;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    private StaffList staffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    private StaffStorage staffStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    private StaffParser staffParser;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffInstance.","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     * @param filepath String of the filepath for StaffStorage.","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    public StaffInstance(String filepath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"        staffUI \u003d new StaffUI();","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"        staffStorage \u003d new StaffStorage(filepath);","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"        staffParser \u003d new StaffParser();","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"        staffList \u003d new StaffList();","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"     * Executes the Staff Menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    public void run() {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"            staffStorage.fileHandling(staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"        } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.WARNING, \"Staff file corrupted.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"            StaffUI.corruptedFileErrorMessage();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        StaffUI.staffMenuHeader();","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Staff instance accessed.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        while (true) {","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"            String line;","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"            UI.printEmptyLine();","lastModifiedDate":"2021-04-11"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"            line \u003d staffUI.getInput(\"Staff\");","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"            try {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"                Command c \u003d staffParser.commandHandler(line, staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"                if (c \u003d\u003d null) {","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"                    continue;","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"                c.execute(staffList, staffUI, staffStorage);","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"                if (c.isExit()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"                    System.out.println(\"Returning to start Menu!\\n\");","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"                    logger.log(Level.WARNING, \"Handling HealthVaultException.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"                    break;","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"            } catch (HealthVaultException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"                logger.log(Level.WARNING, \"Handling HealthVaultException.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"                StaffUI.invalidNumericErrorMessage();","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"                logger.log(Level.WARNING, \"Handling NumberFormatException.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"blank-bank":74}},{"path":"src/main/java/seedu/logic/parser/DoctorAppointmentParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.UnrecognizedCommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.doctorappointment.DoctorAppointmentAddCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.doctorappointment.DoctorAppointmentDeleteCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.doctorappointment.DoctorAppointmentListCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.doctorappointment.DoctorAppointmentReturnCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.doctorappointment.DoctorAppointmentHelpCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.errorchecker.DoctorAppointmentChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.errorchecker.MainChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentParser {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    public static Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"    static final String[] COMMANDS \u003d {\"add\", \"delete\", \"list\", \"return\", \"help\"};","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"     * Returns a Command Object which dictates the actions to be carried out on the DoctorAppointment objects.","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * @param input   Entire input command.","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     * @param details AppointmentList object that contains all AppointmentList.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     * @return Command object.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException         If any invalid input given.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"     * @throws UnrecognizedCommandException If the input is not recognized by the system.","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"    public static Command parse(String input, AppointmentList details) throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"        String[] inputArray \u003d input.split(\"/\");","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        assert inputArray.length \u003e 0;","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"        assert inputArray.length \u003c 7;","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"        MainChecker.checkBlankInput(input);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        MainChecker.checkNumInput(input, 6, 1);","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"        switch (smartCommandRecognition(COMMANDS, input.split(\"/\")[0])) {","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"        case \"add\": {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Parsing Add command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"            MainChecker.checkNumInput(input, 6, 6);","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentChecker.checkValidDataForAdd(inputArray);","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"            c \u003d new DoctorAppointmentAddCommand(inputArray);","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"        case \"list\": {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Parsing List command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"            MainChecker.checkNumInput(input, 2, 2);","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentChecker.checkValidDataForList(inputArray);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"            c \u003d new DoctorAppointmentListCommand(inputArray);","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"        case \"delete\": {","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Parsing Delete command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"            MainChecker.checkNumInput(input, 2, 2);","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentChecker.checkValidDataForDelete(inputArray);","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"            c \u003d new DoctorAppointmentDeleteCommand(inputArray);","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"        case \"return\":","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Parsing Return command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"            c \u003d new DoctorAppointmentReturnCommand();","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"        case \"help\":","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.INFO, \"Parsing Help command\");","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"            c \u003d new DoctorAppointmentHelpCommand();","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"        default:","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"            logger.log(Level.WARNING, \"Unrecognized Command Exception being handled\");","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"            throw new UnrecognizedCommandException();","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"        return c;","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"MingShun98":80,"blank-bank":4}},{"path":"src/main/java/seedu/logic/parser/InventoryParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.inventory.InventoryAdd;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.inventory.InventoryDelete;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.inventory.InventoryHelp;","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.command.inventory.InventoryReturn;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.errorchecker.InventoryChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.errorchecker.MainChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"public class InventoryParser {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"    static final String[] COMMANDS \u003d {\"add\", \"delete\", \"list\", \"return\", \"help\"};","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"    private InventoryChecker checker;","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    public Command inventoryParse(String fullCommand, InventoryList inventories)","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"            throws ArrayIndexOutOfBoundsException,","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"            HealthVaultException {","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"        String[] stringTokens \u003d fullCommand.trim().split(\"/\");","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"        int numberOfTokens \u003d stringTokens.length;","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"        MainChecker.checkNumInput(fullCommand, 4, 1);","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"        String command \u003d smartCommandRecognition(COMMANDS, stringTokens[0]);","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"        checker \u003d new InventoryChecker(inventories, stringTokens, numberOfTokens);","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"        switch (command) {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"        case \"list\":","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"            int numberOfInputs \u003d 1;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkNumInput(fullCommand, numberOfInputs, numberOfInputs);","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"            c \u003d new seedu.logic.command.inventory.InventoryList();","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"        case \"add\":","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"            numberOfInputs \u003d 4;","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkNumInput(fullCommand, numberOfInputs, numberOfInputs);","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkBlankInput(fullCommand);","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"NoorSarrah"},"content":"            checker.checkAdd();","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"            String[] addFormat \u003d parseToAddFormat(stringTokens);","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"            c \u003d new InventoryAdd(addFormat);","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"        case \"delete\":","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"            numberOfInputs \u003d 3;","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkNumInput(fullCommand, numberOfInputs, numberOfInputs);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkBlankInput(fullCommand);","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"NoorSarrah"},"content":"            checker.checkDelete();","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"NoorSarrah"},"content":"            c \u003d new InventoryDelete(stringTokens);","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"        case \"help\":","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"            numberOfInputs \u003d 1;","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkNumInput(fullCommand, numberOfInputs, numberOfInputs);","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"NoorSarrah"},"content":"            c \u003d new InventoryHelp();","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"NoorSarrah"},"content":"        case \"return\":","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"NoorSarrah"},"content":"            numberOfInputs \u003d 1;","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"NoorSarrah"},"content":"            MainChecker.checkNumInput(fullCommand, numberOfInputs, numberOfInputs);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"NoorSarrah"},"content":"            c \u003d new InventoryReturn();","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"NoorSarrah"},"content":"        default:","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"NoorSarrah"},"content":"            UI.invalidCommandErrorMessage();","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"NoorSarrah"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"NoorSarrah"},"content":"        return c;","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":67,"author":{"gitId":"NoorSarrah"},"content":"    private String[] parseToAddFormat(String[] stringTokens) {","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"NoorSarrah"},"content":"        String[] addFormat;","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"NoorSarrah"},"content":"        addFormat \u003d new String[] {stringTokens[1], stringTokens[2], stringTokens[3]};","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"NoorSarrah"},"content":"        return addFormat;","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":69,"blank-bank":3}},{"path":"src/main/java/seedu/logic/parser/NurseSchedulesParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.ExcessInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InsufficientInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InvalidDateException;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.nurseschedules.WrongInputsException;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.nurseschedule.NurseScheduleAddCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.nurseschedule.NurseScheduleDeleteCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.nurseschedule.NurseScheduleHelpCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.nurseschedule.NurseScheduleListCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.command.nurseschedule.NurseScheduleReturnCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.errorchecker.MainChecker;","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.errorchecker.NurseScheduleChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.Date;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-02"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseSchedulesParser {","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    static final String[] COMMANDS \u003d {\"ADD\", \"DELETE\", \"LIST\", \"RETURN\", \"HELP\"};","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"    NurseScheduleChecker checker \u003d new NurseScheduleChecker();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns the command of user.","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param text User input","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return First word of user input","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getFirstWord(String text) {","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int index \u003d text.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (index \u003e -1) {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return text.substring(0, index).trim();","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return text;","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns array with trimmed inputs.","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param parts Array of raw user inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return trimmedArray","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private String[] trimInputs(String[] parts) {","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] trimmedArray \u003d new String[parts.length];","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"        for (int i \u003d 0; i \u003c parts.length; i++) {","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"            trimmedArray[i] \u003d parts[i].trim();","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return trimmedArray;","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Splits user input based on command to extract relevant information.","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param input raw user input","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param command Command to be executed, i.e first word","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return array of valid details","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws WrongInputsException If any inputs are missing","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NoInputException If any inputs are empty","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws ExcessInputException If too many inputs are included","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InsufficientInputException If too little inputs are included","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws IllegalCharacterException If illegal characters are in inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidDateException If date is incorrect","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String[] getDetails(String input, String command) throws WrongInputsException, NoInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ExcessInputException, InsufficientInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"            IllegalCharacterException, InvalidDateException {","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseScheduleChecker.checkEmptyInput(input);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] details \u003d new String[3];","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] parts \u003d input.split(\"/\");","lastModifiedDate":"2021-04-01"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"        parts \u003d trimInputs(parts);","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assert parts.length \u003e 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (parts.length \u003c\u003d 1) {","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new WrongInputsException();","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"        switch (command) {","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"ADD\":","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"            checker.isValidDate(parts[3]);","lastModifiedDate":"2021-04-03"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.checkNumInput(input, 4, 4);","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[0] \u003d parts[1];","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[1] \u003d parts[2];","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[2] \u003d parts[3];","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.illegalCharacterChecker(details[0], \"Nurse ID\");","lastModifiedDate":"2021-04-03"},{"lineNumber":103,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.illegalCharacterChecker(details[1], \"Patient ID\");","lastModifiedDate":"2021-04-03"},{"lineNumber":104,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"DELETE\":","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"            checker.isValidDate(parts[2]);","lastModifiedDate":"2021-04-03"},{"lineNumber":107,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.checkNumInput(input, 3, 3);","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[0] \u003d parts[1];","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[1] \u003d parts[2];","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.illegalCharacterChecker(details[0], \"Nurse ID\");","lastModifiedDate":"2021-04-03"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"LIST\":","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"AlexanderTanJunAn"},"content":"            MainChecker.checkNumInput(input, 2, 2);","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details[0] \u003d parts[1];","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"        default:","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return details;","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Formats String date into Date object.","lastModifiedDate":"2021-04-10"},{"lineNumber":124,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":125,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param datetime string date","lastModifiedDate":"2021-04-10"},{"lineNumber":126,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return Date object","lastModifiedDate":"2021-04-10"},{"lineNumber":127,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws ParseException if string is unparseable","lastModifiedDate":"2021-04-10"},{"lineNumber":128,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":129,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static String formatDate(String datetime) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"AlexanderTanJunAn"},"content":"        SimpleDateFormat parser \u003d new SimpleDateFormat(\"ddMMyyyy\");","lastModifiedDate":"2021-03-22"},{"lineNumber":131,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Date date \u003d parser.parse(datetime);","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"AlexanderTanJunAn"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");","lastModifiedDate":"2021-03-22"},{"lineNumber":133,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":134,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return formatter.format(date);","lastModifiedDate":"2021-03-22"},{"lineNumber":135,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":136,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":138,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Returns a command object to be executed.","lastModifiedDate":"2021-04-10"},{"lineNumber":139,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":140,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param input raw user input","lastModifiedDate":"2021-04-10"},{"lineNumber":141,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param ui Program outputs","lastModifiedDate":"2021-04-10"},{"lineNumber":142,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return Command object","lastModifiedDate":"2021-04-10"},{"lineNumber":143,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NoInputException If any inputs are empty","lastModifiedDate":"2021-04-10"},{"lineNumber":144,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InsufficientInputException If too little inputs are included","lastModifiedDate":"2021-04-10"},{"lineNumber":145,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws ExcessInputException If too many inputs are included","lastModifiedDate":"2021-04-10"},{"lineNumber":146,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws IllegalCharacterException If illegal characters are in inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":147,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidDateException If date is incorrect","lastModifiedDate":"2021-04-10"},{"lineNumber":148,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":149,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public Command nurseParse(String input, NurseScheduleUI ui) throws NoInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":150,"author":{"gitId":"AlexanderTanJunAn"},"content":"            InsufficientInputException, ExcessInputException,","lastModifiedDate":"2021-04-10"},{"lineNumber":151,"author":{"gitId":"AlexanderTanJunAn"},"content":"            IllegalCharacterException, InvalidDateException {","lastModifiedDate":"2021-04-10"},{"lineNumber":152,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assert input !\u003d null : \"user input should not be null\";","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assert !(input.isEmpty()) : \"user input should not be empty\";","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO,\"Parsing command...\");","lastModifiedDate":"2021-04-08"},{"lineNumber":156,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseSchedulesParser parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String line \u003d input.toUpperCase();","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String command \u003d smartCommandRecognition(COMMANDS, parser.getFirstWord(line));","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO, \"Command recognised as \" + command);","lastModifiedDate":"2021-04-08"},{"lineNumber":162,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"AlexanderTanJunAn"},"content":"        switch (command) {","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"ADD\":","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"AlexanderTanJunAn"},"content":"            try {","lastModifiedDate":"2021-03-28"},{"lineNumber":166,"author":{"gitId":"AlexanderTanJunAn"},"content":"                String[] details \u003d parser.getDetails(line, command);","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"AlexanderTanJunAn"},"content":"                c \u003d new NurseScheduleAddCommand(details);","lastModifiedDate":"2021-04-09"},{"lineNumber":168,"author":{"gitId":"AlexanderTanJunAn"},"content":"            } catch (ArrayIndexOutOfBoundsException | WrongInputsException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.formatHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.addHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"AlexanderTanJunAn"},"content":"                logger.log(Level.WARNING, \"Parameter error in add command!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":173,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":174,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"LIST\":","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"AlexanderTanJunAn"},"content":"            try {","lastModifiedDate":"2021-03-28"},{"lineNumber":176,"author":{"gitId":"AlexanderTanJunAn"},"content":"                String[] details \u003d parser.getDetails(line, command);","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"AlexanderTanJunAn"},"content":"                c \u003d new NurseScheduleListCommand(details);","lastModifiedDate":"2021-04-09"},{"lineNumber":178,"author":{"gitId":"AlexanderTanJunAn"},"content":"            } catch (ArrayIndexOutOfBoundsException | WrongInputsException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.formatHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.listHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"AlexanderTanJunAn"},"content":"                logger.log(Level.WARNING, \"Parameter error in list command!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":183,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":184,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"DELETE\":","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"AlexanderTanJunAn"},"content":"            try {","lastModifiedDate":"2021-03-28"},{"lineNumber":186,"author":{"gitId":"AlexanderTanJunAn"},"content":"                String[] details \u003d parser.getDetails(line, command);","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"AlexanderTanJunAn"},"content":"                c \u003d new NurseScheduleDeleteCommand(details);","lastModifiedDate":"2021-04-09"},{"lineNumber":188,"author":{"gitId":"AlexanderTanJunAn"},"content":"            } catch (ArrayIndexOutOfBoundsException | WrongInputsException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.formatHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"AlexanderTanJunAn"},"content":"                ui.deleteHelpMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":191,"author":{"gitId":"AlexanderTanJunAn"},"content":"                logger.log(Level.WARNING, \"Parameter error in delete command!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":193,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"HELP\":","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"AlexanderTanJunAn"},"content":"            c \u003d new NurseScheduleHelpCommand();","lastModifiedDate":"2021-04-09"},{"lineNumber":196,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"AlexanderTanJunAn"},"content":"        case \"RETURN\":","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"AlexanderTanJunAn"},"content":"            c \u003d new NurseScheduleReturnCommand();","lastModifiedDate":"2021-04-09"},{"lineNumber":199,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":200,"author":{"gitId":"AlexanderTanJunAn"},"content":"        default:","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING, \"Command not successfully parsed!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ui.invalidInputsMessage();","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"AlexanderTanJunAn"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO,\"command object returning to instance\");","lastModifiedDate":"2021-04-08"},{"lineNumber":206,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return c;","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"AlexanderTanJunAn":203,"blank-bank":5}},{"path":"src/main/java/seedu/logic/parser/PatientParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.UnrecognizedCommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientAddCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientDeleteCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientFindCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientHelpCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientListCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.patient.PatientReturnCommand;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.MainChecker;","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.errorchecker.PatientChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":" * Parses the user inputs for patient related features into a format usable by the program.","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientParser {","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    protected static final String[] COMMANDS \u003d {\"add\", \"delete\", \"list\", \"find\", \"return\", \"help\"};","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    private PatientChecker checker;","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"     * Converts the user input into usable and non-volatile data.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"     * @param fullCommand the string inputted by the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"     * @param patients the current list of patients in the database.","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"     * @return the command that the user is trying to utilize.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws ArrayIndexOutOfBoundsException when there is more or less than the required number of tokens.","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException collection of exceptions from previous checks.","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws NumberFormatException when the value inputted by the user is not an integer.","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    public Command patientParse(String fullCommand, PatientList patients) throws ArrayIndexOutOfBoundsException,","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"            HealthVaultException, NumberFormatException {","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        String[] stringTokens \u003d fullCommand.trim().split(\"/\");","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        int numberOfTokens \u003d stringTokens.length;","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"        //check for number of inputs.","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        MainChecker.checkNumInput(fullCommand,7,1);","lastModifiedDate":"2021-04-02"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"        //trim the inputs and alters greedy white spaces.","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"        for (int i \u003d 0; i \u003c numberOfTokens; i++) {","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"            stringTokens[i] \u003d stringTokens[i].trim().replaceAll(\"\\\\s{2,}\", \" \");","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"        String command \u003d smartCommandRecognition(COMMANDS, stringTokens[0]);","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"        //checker class will sanitize the user\u0027s input.","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"        checker \u003d new PatientChecker(patients, stringTokens, command, numberOfTokens);","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"        switch (command) {","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"        case \"list\":","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient list command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientListCommand();","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"        case \"add\":","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient add command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkAdd();","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"            String[] addFormat \u003d parseToAddFormat(stringTokens);","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientAddCommand(addFormat);","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"        case \"delete\":","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient delete command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkId();","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientDeleteCommand(stringTokens[1]);","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"        case \"find\":","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient find command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkFind();","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientFindCommand(stringTokens[1]);","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"        case \"help\":","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient help command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientHelpCommand();","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"Chiamjiaen"},"content":"        case \"return\":","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient return command accessed\");","lastModifiedDate":"2021-04-10"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkLength();","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"            c \u003d new PatientReturnCommand();","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"        default:","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Patient command Unrecognized!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"            throw new UnrecognizedCommandException();","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"        return c;","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Chiamjiaen"},"content":"    private String[] parseToAddFormat(String[] input) {","lastModifiedDate":"2021-04-01"},{"lineNumber":96,"author":{"gitId":"Chiamjiaen"},"content":"        String[] addFormat;","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Chiamjiaen"},"content":"        addFormat \u003d new String[] {input[1], input[2], input[3],","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"                input[4], input[5], input[6]};","lastModifiedDate":"2021-04-01"},{"lineNumber":99,"author":{"gitId":"Chiamjiaen"},"content":"        return addFormat;","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":95,"blank-bank":7}},{"path":"src/main/java/seedu/logic/parser/StaffParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffAddCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffDeleteCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffListCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffReturnCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffFindCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.StaffHelpCommand;","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.MainChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.StaffChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"public class StaffParser {","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    static final String[] COMMANDS \u003d {\"add\", \"delete\", \"list\", \"find\", \"return\", \"help\"};","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    private StaffChecker staffChecker \u003d new StaffChecker();","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     * Returns a Command Object which dictates the actions to be carried out on the Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"     * @param line  Entire input command.","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     * @param staffList StaffList object that contains all Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     * @return Command object.","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any invalid input given.","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"     * @throws NumberFormatException  If any invalid input given to a field expecting numeral input.","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"    public Command commandHandler(String line, StaffList staffList) throws HealthVaultException, NumberFormatException {","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"        if (line.equals(\" \")) {","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"            UI.noCommandErrorMessage();","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"            return new StaffReturnCommand();","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"        String[] array;","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"        staffChecker.checkNumInput(line, 5,1);","lastModifiedDate":"2021-04-02"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        switch (smartCommandRecognition(COMMANDS, line.split(\"/\")[0])) {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"        case (\"add\"):","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Add Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"            array \u003d staffChecker.checkValidDataForAdd(line, staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffHiredOutput(array[0], array[1]);","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"            c \u003d new StaffAddCommand(array);","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff Add Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"            break;","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"        case (\"list\"):","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"List Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"            array \u003d staffChecker.checkListCommand(line);","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"            c \u003d new StaffListCommand(array);","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff List Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"        case (\"delete\"):","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Delete Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"            String input \u003d staffChecker.checkDeleteCommand(line);","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"            c \u003d new StaffDeleteCommand(input);","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff Delete Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"            break;","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"        case (\"help\"):","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Help Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"            c \u003d new StaffHelpCommand();","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff Help Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"            break;","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"        case (\"find\"):","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Find Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"            MainChecker.checkNumInput(line,2,2);","lastModifiedDate":"2021-04-06"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"            c \u003d new StaffFindCommand(line);","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff Find Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"            break;","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"        case (\"return\"):","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Return Command recognised\");","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"Staff Return Command executed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"            return new StaffReturnCommand();","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"        default:","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"            UI.invalidCommandErrorMessage();","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"        return c;","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"blank-bank":93}},{"path":"src/main/java/seedu/logic/parser/StartMenuParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.logic.parser;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.UnrecognizedCommandException;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.ToDoctorAppointmentInstance;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.ToNurseScheduleInstance;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.ToPatientInstance;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.ToStaffInstance;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.ToInventoryInstance;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.MainExit;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.command.startmenu.MainHelp;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.Locale;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.cleanseInput;","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.smartCommandRecognition;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":" * Parses the commands in the start menu into a format usable by the program.","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"public class StartMenuParser {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    static final String[] COMMANDS \u003d {\"staff\", \"patient\", \"appointments\", \"schedules\", \"inventory\", \"help\", \"exit\"};","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"     * Converts the user\u0027s input into a format that is usable and non-volatile.","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"     * @param userInput string that the user has inputted.","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"     * @return command specific to the request of the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    public Command startMenuParse(String userInput) {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"        assert userInput !\u003d null : \"user input should not be null\";","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        assert !(userInput.isEmpty()) : \"user input should not be empty\";","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"        Command c \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"            String formattedMessage \u003d userInput.toLowerCase(Locale.ROOT).trim();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"            switch (smartCommandRecognition(COMMANDS, cleanseInput(formattedMessage))) {","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"            case Constants.TO_STAFF_INSTANCE:","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new ToStaffInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"            case Constants.TO_PATIENT_INSTANCE:","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new ToPatientInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"            case Constants.TO_SCHEDULES_INSTANCE:","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new ToNurseScheduleInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"            case Constants.TO_APPOINTMENTS_INSTANCE:","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new ToDoctorAppointmentInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"            case Constants.TO_INVENTORY_INSTANCE:","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new ToInventoryInstance();","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"            case Constants.HELP_COMMAND:","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new MainHelp();","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"            case Constants.EXIT_COMMAND:","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"                c \u003d new MainExit();","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"            default:","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"                throw new UnrecognizedCommandException();","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (UnrecognizedCommandException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"        return c;","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"MingShun98":15,"Chiamjiaen":49,"blank-bank":4}},{"path":"src/main/java/seedu/model/doctorappointment/AppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.doctorappointment;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.EmptyListException;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.storage.DoctorAppointmentStorage;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"public class AppointmentList {","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    public static ArrayList\u003cDoctorAppointment\u003e appointmentList;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"    public static ArrayList\u003cDoctorAppointment\u003e extraList;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"    private static ArrayList\u003cString\u003e doctorFound \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"     * Constructor to initialise appointmentList with the loaded Appointments.","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"     * @param loadAppointments the DoctorAppointments objects loaded from the storage file.","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    public AppointmentList(ArrayList\u003cDoctorAppointment\u003e loadAppointments) {","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"        appointmentList \u003d loadAppointments;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     * Add an appointment into the array list.","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     * @param inputArray the user input data to be added.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     * @throws IOException if writing to storage throws an error.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"    public static void addAppointment(String[] inputArray) throws IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"        String doctorID \u003d inputArray[1];","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"        String appointmentID \u003d inputArray[2];","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"        String patientName \u003d inputArray[3];","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        String gender \u003d inputArray[4];","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"        String date \u003d inputArray[5];","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"        DoctorAppointment newAppointment \u003d new DoctorAppointment(doctorID, appointmentID, patientName, gender, date);","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"        DoctorAppointmentUI.printAddedAppointment();","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"        appointmentList.add(newAppointment);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"        DoctorAppointmentStorage.writeToFile(appointmentList);","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"     * Lists the appointments in the array list.","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"     * @param input the key word use to distinguish the type of list.","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException if there are any errors.","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"     * @throws ParseException       if thee data parsed is incorrect.","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"    public static void listAppointment(String input) throws HealthVaultException, EmptyListException, ParseException {","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"        String indicator \u003d \"A\";","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"        String doctorID;","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"        String[] inputArray \u003d input.split(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"        String id \u003d inputArray[0];","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"        if (appointmentList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"        } else {","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"            if (input.equals(\"all\")) {","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"                doctorFound.clear();","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"                indicator \u003d \"all\";","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.appointmentPrintList(indicator);","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"                UI.showLine();","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"                for (int i \u003d 0; i \u003c appointmentList.size(); i++) {","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"                    DoctorAppointmentUI.printList(appointmentList.get(i), indicator);","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"                    /*extraList.clear();","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"                    doctorID \u003d appointmentList.get(i).getDoctorId();","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"                    if (!isDoctorDone(appointmentList, i)) {","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"                        getDoctorAppointmentByID(appointmentList, doctorID);","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"                        printSchedules(extraList);","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"                    }*/","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"            } else if (id.equals(\"A\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.appointmentPrintList(indicator);","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"                UI.showLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"MingShun98"},"content":"                for (DoctorAppointment doc : appointmentList) {","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"MingShun98"},"content":"                    if (doc.getAppointmentId().equals(input)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"MingShun98"},"content":"                        DoctorAppointmentUI.printList(doc, indicator);","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"MingShun98"},"content":"                    }","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"MingShun98"},"content":"            } else if (id.equals(\"D\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":91,"author":{"gitId":"MingShun98"},"content":"                indicator \u003d \"D\";","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.appointmentPrintList(indicator);","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"MingShun98"},"content":"                UI.showLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentUI.printEmptyCell(input);","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"                int counter \u003d 0;","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"                for (int i \u003d 0; i \u003c appointmentList.size(); i++) {","lastModifiedDate":"2021-04-01"},{"lineNumber":97,"author":{"gitId":"MingShun98"},"content":"                    if (appointmentList.get(i).getDoctorId().equals(input)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"MingShun98"},"content":"                        if (counter !\u003d 0) {","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"MingShun98"},"content":"                            DoctorAppointmentUI.printEmptyCell(\"\");","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"MingShun98"},"content":"                        }","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"MingShun98"},"content":"                        DoctorAppointmentUI.printList(appointmentList.get(i), indicator);","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"MingShun98"},"content":"                        counter++;","lastModifiedDate":"2021-04-09"},{"lineNumber":103,"author":{"gitId":"MingShun98"},"content":"                    }","lastModifiedDate":"2021-04-09"},{"lineNumber":104,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"MingShun98"},"content":"     * Deletes an appointment from the array list.","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"MingShun98"},"content":"     * @param inputID the Id to be deleted from the array list.","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"MingShun98"},"content":"     * @throws IOException if writing to storage throws an error.","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"MingShun98"},"content":"    public static void deleteAppointment(String inputID) throws IOException {","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"MingShun98"},"content":"        String[] id \u003d inputID.split(\"\");","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"MingShun98"},"content":"        if (id[0].equals(\"A\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":120,"author":{"gitId":"MingShun98"},"content":"            for (int i \u003d 0; i \u003c appointmentList.size(); i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"MingShun98"},"content":"                if (appointmentList.get(i).getAppointmentId().equals(inputID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"MingShun98"},"content":"                    DoctorAppointmentUI.deletedAptID(appointmentList.get(i).getAppointmentId());","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"MingShun98"},"content":"                    appointmentList.remove(i);","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"MingShun98"},"content":"                    DoctorAppointmentStorage.writeToFile(appointmentList);","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"MingShun98"},"content":"        } else if (id[0].equals(\"D\")) {","lastModifiedDate":"2021-04-10"},{"lineNumber":128,"author":{"gitId":"MingShun98"},"content":"            for (int i \u003d appointmentList.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"MingShun98"},"content":"                if (appointmentList.get(i).getDoctorId().equals(inputID)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"MingShun98"},"content":"                    DoctorAppointmentUI.deletedDocID(appointmentList.get(i).getDoctorId(),","lastModifiedDate":"2021-04-10"},{"lineNumber":131,"author":{"gitId":"MingShun98"},"content":"                            appointmentList.get(i).getAppointmentId());","lastModifiedDate":"2021-04-10"},{"lineNumber":132,"author":{"gitId":"MingShun98"},"content":"                    appointmentList.remove(i);","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"MingShun98"},"content":"                    DoctorAppointmentStorage.writeToFile(appointmentList);","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"MingShun98"},"content":"                }","lastModifiedDate":"2021-03-11"},{"lineNumber":135,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":136,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":138,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":139,"author":{"gitId":"MingShun98"},"content":"    public static void helpAppointment() {","lastModifiedDate":"2021-03-18"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"        DoctorAppointmentUI.doctorAppointmentHelp();","lastModifiedDate":"2021-03-22"},{"lineNumber":141,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":142,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"MingShun98":135,"blank-bank":7}},{"path":"src/main/java/seedu/model/doctorappointment/DoctorAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.doctorappointment;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.model.nurseschedule.NurseSchedule;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"import seedu.ui.DoctorAppointmentUI;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import javax.print.Doc;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"import java.util.Collections;","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import java.util.Date;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import java.util.List;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"import static seedu.ui.UI.prettyPrint;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":" * DoctorAppointment class contains the information of all the Appointments made with the Hospital.","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointment {","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"    protected String doctorId;","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"    protected String appointmentID;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"    protected String patientsName;","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"    protected String gender;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    protected String date;","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointment object.","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"     * @param doctorId      doctor Id.","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"     * @param appointmentID appointment Id,","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     * @param name          name.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     * @param gender        gender.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     * @param date          date.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointment(String doctorId, String appointmentID, String name, String gender, String date) {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"        this.doctorId \u003d doctorId;","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"        this.appointmentID \u003d appointmentID;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"        this.patientsName \u003d name;","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"    public String getAppointmentId() {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"        return this.appointmentID;","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"    public String getDoctorId() {","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"        return this.doctorId;","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"    public String getPatientsName() {","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"        return this.patientsName;","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"    public String getGender() {","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"        return this.gender;","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"    public String getDate() {","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"        return this.date;","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"    /*","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"        Date format \u003d YYYY-MM-DD","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"    */","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"    public String getDateFormat(String inputDate) throws ParseException {","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"        SimpleDateFormat parser \u003d new SimpleDateFormat(\"ddMMyyyy\");","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"        Date date \u003d parser.parse(inputDate);","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy\");","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"        return formatter.format(date);","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"    public String saveTask() {","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"        return doctorId + \" | \" + appointmentID + \" | \" + patientsName + \" | \" + gender + \" | \" + date;","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"MingShun98":77,"blank-bank":1}},{"path":"src/main/java/seedu/model/inventory/Inventory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import java.text.DecimalFormat;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"public class Inventory {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"    protected String name;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"    protected Double price;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"    protected int quantity;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"    public Inventory(String name, Double price, int quantity) {","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"        this.price \u003d price;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"        this.quantity \u003d quantity;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"    public void addQuantity(int input) {","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"        this.quantity +\u003d input;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"    public void removeQuantity(int input) {","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"        this.quantity -\u003d input;","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"    public String getDrugName() {","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"        return this.name;","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"    public Double getDoublePrice() {","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"        return this.price;","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"    public String getStringPrice() {","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"        DecimalFormat df \u003d new DecimalFormat(\"0.00\");","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"        return df.format(price);","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"    public int getQuantity() {","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"NoorSarrah"},"content":"        return this.quantity;","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"        return name + \"|\" + price","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"                + \"|\" + quantity;","lastModifiedDate":"2021-04-11"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":45,"blank-bank":1}},{"path":"src/main/java/seedu/model/inventory/InventoryList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import seedu.exceptions.inventory.InvalidQuantityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"import static seedu.ui.UI.prettyPrint;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"public class InventoryList {","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    private InventoryUI ui;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"    public static ArrayList\u003cInventory\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"    public InventoryList() {","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public InventoryList(ArrayList\u003cInventory\u003e load) {","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"        this.list \u003d load;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"    public void addDrugs(String[] argArr) {","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"            Inventory inventoryTemp \u003d list.get(i);","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"            String tempName \u003d inventoryTemp.getDrugName();","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"            Double tempPrice \u003d inventoryTemp.getDoublePrice();","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"            if (tempName.equals(argArr[0]) \u0026\u0026 tempPrice.equals(Double.parseDouble(argArr[1]))) {","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"                inventoryTemp.addQuantity(Integer.parseInt(argArr[2]));","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"                return;","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"        Inventory newInventory \u003d new Inventory(argArr[0], Double.parseDouble(argArr[1]), Integer.parseInt(argArr[2]));","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"        list.add(newInventory);","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"    public void deleteDrugs(String[] argArr) throws InvalidQuantityException {","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"            String name \u003d argArr[1];","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"            String quantityDelete \u003d argArr[2];","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"            Inventory inventoryTemp \u003d list.get(i);","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"            String tempName \u003d inventoryTemp.getDrugName();","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"NoorSarrah"},"content":"            int tempQuantity \u003d inventoryTemp.getQuantity();","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"            if (tempName.equals(name) \u0026\u0026 tempQuantity \u003e\u003d Integer.parseInt(quantityDelete)) {","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"                inventoryTemp.removeQuantity(Integer.parseInt(quantityDelete));","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"                return;","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"            } else if (tempName.equals(name) \u0026\u0026 tempQuantity \u003c Integer.parseInt(quantityDelete)) {","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"                //inventoryTemp.removeQuantity(tempQuantity);","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"                throw new InvalidQuantityException();","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"    public void listDrugs() {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"        int numberOfDrugs \u003d list.size();","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"        if (numberOfDrugs !\u003d 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"NoorSarrah"},"content":"            System.out.print(System.lineSeparator());","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"NoorSarrah"},"content":"            ui.inventoryListHeader();","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"            for (int i \u003d 0; i \u003c 60; i++) {","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"                System.out.print(\"-\");","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"            System.out.println(\"\\n\");","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"NoorSarrah"},"content":"            for (Inventory inventory : list) {","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"NoorSarrah"},"content":"                display(inventory);","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"NoorSarrah"},"content":"            ui.emptyInventoryListMessage();","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"NoorSarrah"},"content":"    public boolean isDrugStored(String inputString) {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"NoorSarrah"},"content":"        for (Inventory inventory : list) {","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"NoorSarrah"},"content":"            String drugName \u003d inventory.getDrugName();","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"NoorSarrah"},"content":"            if (drugName.equals(inputString)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"NoorSarrah"},"content":"                return true;","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"NoorSarrah"},"content":"        return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"NoorSarrah"},"content":"    public static void display(Inventory inventory) {","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"NoorSarrah"},"content":"                prettyPrint(inventory.getDrugName(), 15) + \" | \"","lastModifiedDate":"2021-04-03"},{"lineNumber":81,"author":{"gitId":"NoorSarrah"},"content":"                        + prettyPrint(inventory.getStringPrice(), 10) + \" | \"","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"NoorSarrah"},"content":"                        + prettyPrint(Integer.toString(inventory.getQuantity()), 5));","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"NoorSarrah"},"content":"    public int getSize() {","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"NoorSarrah"},"content":"        return list.size();","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"NoorSarrah"},"content":"    public String toSaveFile(int i) {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"NoorSarrah"},"content":"        return list.get(i).toSaveFormat();","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":89,"Chiamjiaen":4,"blank-bank":4}},{"path":"src/main/java/seedu/model/nurseschedule/NurseSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.nurseschedule;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.Date;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.ui.UI.prettyPrint;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseSchedule implements Comparable\u003cNurseSchedule\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"    protected String nurseID;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"    protected String patientID;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"    protected String date;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseSchedule(String nurseID, String patientID, String date) {","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"        this.nurseID \u003d nurseID;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"        this.patientID \u003d patientID;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Compares as Date object.","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public int compareTo(NurseSchedule o) {","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (getDate() \u003d\u003d null || o.getDate() \u003d\u003d null) {","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return 0;","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"        SimpleDateFormat parser \u003d new SimpleDateFormat(\"ddMMyyyy\");","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Date date \u003d null;","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Date odate \u003d null;","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"            date \u003d parser.parse(getDate());","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"            odate \u003d parser.parse(o.getDate());","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"            e.getMessage();","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return 1;","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return date.compareTo(odate);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Formats String date into dd/MM/YYYY.","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String formatDate(String input) throws ParseException {","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"        SimpleDateFormat parser \u003d new SimpleDateFormat(\"ddMMyyyy\");","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Date date \u003d parser.parse(input);","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy\");","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return formatter.format(date);","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns Nurse ID.","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return nurseID","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getNurseID() {","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseID;","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns patient ID.","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return patientID","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getPatientID() {","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return patientID;","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns date of schedule.","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return date","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getDate() {","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return date;","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns formatted date.","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return date","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String getFormattedDate() {","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String date \u003d null;","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"            date \u003d formatDate(this.date);","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"            e.getMessage();","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return date;","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns format of data to be written into nurseschedule.txt.","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return string of data","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String toSave() {","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return getNurseID() + \"|\" + getPatientID() + \"|\" + getDate();","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns format of data to be displayed when listing.","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":105,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return string of data","lastModifiedDate":"2021-04-10"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":107,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String toFind() {","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"AlexanderTanJunAn"},"content":"        //return getFormattedDate() + \" \" + patientID;","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return prettyPrint(patientID, 10) + \" | \" + prettyPrint(getFormattedDate(), 10);","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns string of data.","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return string of data","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String toString() {","lastModifiedDate":"2021-03-18"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseID + \" \" + patientID + \" \" + getFormattedDate();","lastModifiedDate":"2021-04-09"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"AlexanderTanJunAn":119,"blank-bank":1}},{"path":"src/main/java/seedu/model/nurseschedule/NurseScheduleList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.nurseschedule;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.DuplicateScheduleException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.EmptyListException;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidScheduleException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.errorchecker.NurseScheduleChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.prettyPrint;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"public class NurseScheduleList {","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static ArrayList\u003cNurseSchedule\u003e findSchedules \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static ArrayList\u003cString\u003e nursesFound \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private String nurseID \u003d null;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static ArrayList\u003cNurseSchedule\u003e nurseSchedules \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Constructor of NurseScheduleList.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param load populated array list from storage","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"    public NurseScheduleList(ArrayList\u003cNurseSchedule\u003e load) {","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"        nurseSchedules \u003d load;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO,\"Creating a NurseSchedule list\");","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public NurseScheduleList() {","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Empties arraylist.","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void clearSchedules() {","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"        nurseSchedules.clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * adds schedule to arraylist.","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param details array of relevant information","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if nurseID does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if ID is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseCrossValidationError if Staff.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientIdNotFound if patientID does not exit","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientCrossValidationError if Patients.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws DuplicateScheduleException if schedules are duplicated","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void addSchedule(String[] details) throws NurseIdNotFound, InvalidiDTypeException,","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseCrossValidationError, PatientIdNotFound, PatientCrossValidationError, DuplicateScheduleException {","lastModifiedDate":"2021-04-04"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkValidNurseID(details[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkDuplicatePatientID(details[1], details[2], nurseSchedules);","lastModifiedDate":"2021-04-04"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkNurseiDExist(details[0]);","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkValidPatientID(details[1]);","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkPatientiDExist(details[1]);","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nurseSchedules.add(new NurseSchedule(details[0], details[1], details[2]));","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleUI.printAddedSchedule(details[1], details[2]);","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.info(\"Schedule successfully added\");","lastModifiedDate":"2021-04-02"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING, \"Failed to add schedule\");","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Handler when list command is issued.","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param details Contains either NurseID or \u0027all\u0027","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void listSchedules(String[] details)","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throws EmptyListException, NurseIdNotFound {","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (details[0].equals(\"ALL\")) {","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"            listAllSchedules();","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else if (isValidNurseID(nurseSchedules, details[0])) {","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"            findSchedules.clear();","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleUI.nurseListHeader();","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"            UI.showLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"            getNurseSchedulesByID(nurseSchedules, details[0]);","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"            printSchedules(findSchedules);","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Handler for \u0027list all\u0027 schedules.","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws EmptyListException when nurse schedule list is empty","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void listAllSchedules() throws EmptyListException {","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"AlexanderTanJunAn"},"content":"        nursesFound.clear();","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (nurseSchedules.size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-18"},{"lineNumber":109,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleUI.nurseListHeader();","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"AlexanderTanJunAn"},"content":"            UI.showLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"AlexanderTanJunAn"},"content":"            for (int i \u003d 0; i \u003c nurseSchedules.size(); i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"AlexanderTanJunAn"},"content":"                findSchedules.clear();","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"                nurseID \u003d nurseSchedules.get(i).getNurseID();","lastModifiedDate":"2021-04-01"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (!isNurseDone(nurseSchedules, i)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    getNurseSchedulesByID(nurseSchedules, nurseID);","lastModifiedDate":"2021-03-22"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    printSchedules(findSchedules);","lastModifiedDate":"2021-03-22"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":124,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Deletes schedule with given nurseID and datetime.","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param details nurseID to delete","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void deleteSchedule(String[] details) throws NurseIdNotFound, InvalidScheduleException {","lastModifiedDate":"2021-04-04"},{"lineNumber":130,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-03-11"},{"lineNumber":131,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c nurseSchedules.size()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":132,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (!isValidNurseID(nurseSchedules, details[0])","lastModifiedDate":"2021-04-10"},{"lineNumber":133,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    | !isValidSchedule(nurseSchedules, details[0], details[1])) {","lastModifiedDate":"2021-04-10"},{"lineNumber":134,"author":{"gitId":"AlexanderTanJunAn"},"content":"                break;","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if ((nurseSchedules.get(i).getNurseID()).equals(details[0])","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    \u0026\u0026 nurseSchedules.get(i).getDate().equals(details[1])) {","lastModifiedDate":"2021-04-09"},{"lineNumber":138,"author":{"gitId":"AlexanderTanJunAn"},"content":"                NurseScheduleUI.printDeletedSchedule(nurseSchedules.get(i).getPatientID(),","lastModifiedDate":"2021-03-22"},{"lineNumber":139,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        nurseSchedules.get(i).getFormattedDate());","lastModifiedDate":"2021-04-09"},{"lineNumber":140,"author":{"gitId":"AlexanderTanJunAn"},"content":"                nurseSchedules.remove(i);","lastModifiedDate":"2021-03-11"},{"lineNumber":141,"author":{"gitId":"AlexanderTanJunAn"},"content":"                logger.info(\"Schedule successfully removed\");","lastModifiedDate":"2021-04-02"},{"lineNumber":142,"author":{"gitId":"AlexanderTanJunAn"},"content":"                break;","lastModifiedDate":"2021-03-11"},{"lineNumber":143,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":144,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-03-11"},{"lineNumber":145,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":148,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":149,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * finds and stores all schedules of specified nurse id.","lastModifiedDate":"2021-04-10"},{"lineNumber":150,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":151,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of nurseschedules","lastModifiedDate":"2021-04-10"},{"lineNumber":152,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param id specified nurse id to be found","lastModifiedDate":"2021-04-10"},{"lineNumber":153,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":154,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private void getNurseSchedulesByID(List\u003cNurseSchedule\u003e nurseSchedules, String id) {","lastModifiedDate":"2021-03-22"},{"lineNumber":155,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c nurseSchedules.size()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (nurseSchedules.get(i).getNurseID().equals(id)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":158,"author":{"gitId":"AlexanderTanJunAn"},"content":"                findSchedules.add(nurseSchedules.get(i));","lastModifiedDate":"2021-03-22"},{"lineNumber":159,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-03-22"},{"lineNumber":161,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":163,"author":{"gitId":"AlexanderTanJunAn"},"content":"            Collections.sort(findSchedules);","lastModifiedDate":"2021-03-22"},{"lineNumber":164,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(prettyPrint(id, 10) + \" | \" + findSchedules.get(0).toFind());","lastModifiedDate":"2021-04-01"},{"lineNumber":165,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-10"},{"lineNumber":166,"author":{"gitId":"AlexanderTanJunAn"},"content":"            //exception ignored","lastModifiedDate":"2021-04-10"},{"lineNumber":167,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-10"},{"lineNumber":168,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":169,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":170,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":171,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Prints schedules.","lastModifiedDate":"2021-03-22"},{"lineNumber":172,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":173,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param list List of schedules to be printed","lastModifiedDate":"2021-03-22"},{"lineNumber":174,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":175,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private void printSchedules(List\u003cNurseSchedule\u003e list) {","lastModifiedDate":"2021-03-22"},{"lineNumber":176,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c list.size()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":178,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleUI.printEmptyCell();","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"AlexanderTanJunAn"},"content":"            System.out.println(list.get(i).toFind());","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-03-22"},{"lineNumber":181,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":182,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":183,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":184,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":185,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if nurse has been found.","lastModifiedDate":"2021-04-10"},{"lineNumber":186,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":187,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of nurse schedules","lastModifiedDate":"2021-04-10"},{"lineNumber":188,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param i index","lastModifiedDate":"2021-04-10"},{"lineNumber":189,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return boolean for found or not","lastModifiedDate":"2021-04-10"},{"lineNumber":190,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":191,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private boolean isNurseDone(List\u003cNurseSchedule\u003e nurseSchedules, int i) {","lastModifiedDate":"2021-03-22"},{"lineNumber":192,"author":{"gitId":"AlexanderTanJunAn"},"content":"        if (nursesFound.contains(nurseSchedules.get(i).getNurseID())) {","lastModifiedDate":"2021-03-22"},{"lineNumber":193,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":194,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":195,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nursesFound.add(nurseSchedules.get(i).getNurseID());","lastModifiedDate":"2021-03-22"},{"lineNumber":196,"author":{"gitId":"AlexanderTanJunAn"},"content":"            return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":197,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":198,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":199,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":200,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":201,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Checks if nurseID exists within schedules.","lastModifiedDate":"2021-03-22"},{"lineNumber":202,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":203,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules List of all schedules","lastModifiedDate":"2021-03-22"},{"lineNumber":204,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param id NurseID to check","lastModifiedDate":"2021-03-22"},{"lineNumber":205,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return boolean","lastModifiedDate":"2021-03-22"},{"lineNumber":206,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if id does not exist","lastModifiedDate":"2021-03-22"},{"lineNumber":207,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":208,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private boolean isValidNurseID(List\u003cNurseSchedule\u003e nurseSchedules, String id) throws NurseIdNotFound {","lastModifiedDate":"2021-03-22"},{"lineNumber":209,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":210,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c nurseSchedules.size()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":211,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (nurseSchedules.get(i).getNurseID().equals(id)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":212,"author":{"gitId":"AlexanderTanJunAn"},"content":"                return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":213,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":214,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-03-22"},{"lineNumber":215,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":216,"author":{"gitId":"AlexanderTanJunAn"},"content":"        throw new NurseIdNotFound();","lastModifiedDate":"2021-03-22"},{"lineNumber":217,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":218,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":219,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":220,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * checks if schedule is valid to be deleted.","lastModifiedDate":"2021-04-10"},{"lineNumber":221,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":222,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of nurse schedules","lastModifiedDate":"2021-04-10"},{"lineNumber":223,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param id specified id","lastModifiedDate":"2021-04-10"},{"lineNumber":224,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param date specified date","lastModifiedDate":"2021-04-10"},{"lineNumber":225,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return boolean if its valid","lastModifiedDate":"2021-04-10"},{"lineNumber":226,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidScheduleException if schedule does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":227,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":228,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private boolean isValidSchedule(List\u003cNurseSchedule\u003e nurseSchedules, String id, String date)","lastModifiedDate":"2021-04-10"},{"lineNumber":229,"author":{"gitId":"AlexanderTanJunAn"},"content":"            throws InvalidScheduleException {","lastModifiedDate":"2021-04-10"},{"lineNumber":230,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-04-04"},{"lineNumber":231,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (i \u003c nurseSchedules.size()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":232,"author":{"gitId":"AlexanderTanJunAn"},"content":"            if (nurseSchedules.get(i).getNurseID().equals(id)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":233,"author":{"gitId":"AlexanderTanJunAn"},"content":"                if (nurseSchedules.get(i).getDate().equals(date)) {","lastModifiedDate":"2021-04-09"},{"lineNumber":234,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    return true;","lastModifiedDate":"2021-04-04"},{"lineNumber":235,"author":{"gitId":"AlexanderTanJunAn"},"content":"                }","lastModifiedDate":"2021-04-04"},{"lineNumber":236,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":237,"author":{"gitId":"AlexanderTanJunAn"},"content":"            i++;","lastModifiedDate":"2021-04-04"},{"lineNumber":238,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":239,"author":{"gitId":"AlexanderTanJunAn"},"content":"        throw new InvalidScheduleException();","lastModifiedDate":"2021-04-04"},{"lineNumber":240,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":241,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":242,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":243,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns size of array list.","lastModifiedDate":"2021-04-10"},{"lineNumber":244,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":245,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return size","lastModifiedDate":"2021-04-10"},{"lineNumber":246,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":247,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public int getSize() {","lastModifiedDate":"2021-03-29"},{"lineNumber":248,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseSchedules.size();","lastModifiedDate":"2021-03-29"},{"lineNumber":249,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":250,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":251,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":252,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * returns format of data to be saved.","lastModifiedDate":"2021-04-10"},{"lineNumber":253,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":254,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param i index in arraylist","lastModifiedDate":"2021-04-10"},{"lineNumber":255,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return string of data","lastModifiedDate":"2021-04-10"},{"lineNumber":256,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":257,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public String toSaveFile(int i) {","lastModifiedDate":"2021-03-29"},{"lineNumber":258,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseSchedules.get(i).toSave();","lastModifiedDate":"2021-03-29"},{"lineNumber":259,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":260,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"AlexanderTanJunAn":254,"blank-bank":6}},{"path":"src/main/java/seedu/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":" * Represents a Patient within the hospital\u0027s database.","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"public class Patient {","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"    protected String patientID;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"    protected String name;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"    protected int age;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"    protected String gender;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    protected String illness;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    protected String medicationNeeded;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"    protected String[] patientDetails;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    public Patient(String patientID, String name, int age, String gender, String illness, String drugsNeeded) {","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"        this.patientID \u003d patientID;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"        this.illness \u003d illness;","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"        this.medicationNeeded \u003d drugsNeeded;","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"        this.patientDetails \u003d new String[] {patientID, name, String.valueOf(age), gender, illness, medicationNeeded};","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    public String[] getPatientDetailsArray() {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"        return (patientDetails);","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    public String getPatientDetailsString() {","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"        return (patientID","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"                + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"                + name","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"                + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"                + age","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"                + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"                + gender","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"                + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"                + illness","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"                + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"                + medicationNeeded);","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"    public String getPatientID() {","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        return this.patientID;","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"    public String getPatientName() {","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"        return this.name;","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"        return (patientID","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"                + \"|\"","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"                + name","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"                + \"|\"","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"                + age","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"                + \"|\"","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"                + gender","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"                + \"|\"","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"                + illness","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"                + \"|\"","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"                + medicationNeeded);","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":63,"blank-bank":1}},{"path":"src/main/java/seedu/model/patient/PatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":" * Represents the list of all patients in the hospital.","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"public class PatientList {","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"    private static ArrayList\u003cPatient\u003e patients \u003d new ArrayList\u003cPatient\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    public PatientList() {","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    public PatientList(ArrayList\u003cPatient\u003e load) {","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"        this.patients \u003d load;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"     * Adds a patient to the list of patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"     * @param patientDetailsArr the details of the patient to be added.","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    public void addPatient(String[] patientDetailsArr) {","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"        Patient newPatient \u003d new Patient(patientDetailsArr[0], patientDetailsArr[1],","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"                Integer.parseInt(patientDetailsArr[2]), patientDetailsArr[3], patientDetailsArr[4],","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"                patientDetailsArr[5]);","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"        patients.add(newPatient);","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"     * Finds a patient with details macthing the keyword inputted by the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"     * @param inputString the specific keyword that the user is searching for.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"    public void findPatient(String inputString) {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"        int numberOfPatients \u003d patients.size();","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"        boolean isFound \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"        boolean isHeaderPrinted \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        for (int i \u003d 0; i \u003c numberOfPatients; i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"            String patientDetails \u003d patients.get(i).getPatientDetailsString().toLowerCase();","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"            String[] patientDetailsArr \u003d patients.get(i).getPatientDetailsArray();","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"            if (patientDetails.contains(inputString.toLowerCase())) {","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"                isFound \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"                if (!isHeaderPrinted) {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"                    PatientUI.patientListHeader();","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"                    isHeaderPrinted \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"                PatientUI.printPatientList(patientDetailsArr);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"        if (!isFound) {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"            PatientUI.patientNotFoundMessage();","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks through the list of patients for a matching ID.","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"     * @param inputString the ID that the method is trying to find.","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"     * @return true if there is a matching ID found, false if there is not.","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"    public boolean isIdTaken(String inputString) {","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"        for (Patient patient : patients) {","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"            String patientID \u003d patient.getPatientID();","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"            if (patientID.equals(inputString)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"                return true;","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"        return false;","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"     * Lists all patients currently in the list.","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"    public void listPatients() {","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Chiamjiaen"},"content":"        int numberOfPatients \u003d patients.size();","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"        if (numberOfPatients \u003d\u003d 0) {","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"            PatientUI.emptyPatientListMessage();","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"Chiamjiaen"},"content":"        } else {","lastModifiedDate":"2021-03-11"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"            PatientUI.notEmptyPatientListMessage();","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Chiamjiaen"},"content":"            PatientUI.patientListHeader();","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"            for (int i \u003d 0; i \u003c numberOfPatients; i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"                PatientUI.printPatientList(patients.get(i).getPatientDetailsArray());","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"     * Deletes a patient from the list of current patients.","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"Chiamjiaen"},"content":"     * @param inputID the ID of the patients who is supposed to be removed.","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"Chiamjiaen"},"content":"    public void deletePatient(String inputID) {","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Chiamjiaen"},"content":"        int patientIndex \u003d 0;","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"        String patientName \u003d null;","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"Chiamjiaen"},"content":"        for (int i \u003d 0; i \u003c patients.size(); i++) {","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"            Patient patientTemp \u003d patients.get(i);","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"Chiamjiaen"},"content":"            String tempID \u003d patientTemp.getPatientID();","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"            String tempName \u003d patientTemp.getPatientName();","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"Chiamjiaen"},"content":"            if (tempID.equals(inputID)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"Chiamjiaen"},"content":"                patientIndex \u003d i;","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"Chiamjiaen"},"content":"                patientName \u003d tempName;","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"Chiamjiaen"},"content":"                break;","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"Chiamjiaen"},"content":"        patients.remove(patientIndex);","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"        PatientUI.deletePatientMessage(patientName, patients.size());","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"Chiamjiaen"},"content":"    public int getSize() {","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"        return patients.size();","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"Chiamjiaen"},"content":"    public String toSaveFile(int i) {","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"Chiamjiaen"},"content":"        return patients.get(i).toSaveFormat();","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":111,"blank-bank":9}},{"path":"src/main/java/seedu/model/staff/Staff.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.model.staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":" * Staff class contains the information of a Staff working in a hospital.","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"public class Staff {","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"    protected String staffID;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"    protected String name;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"    protected int age;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"    protected String specialisation;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"     * Constructor for Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"     * @param array Array of inputs for Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    public Staff(String[] array) {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"        this.staffID \u003d array[0];","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"        this.name \u003d array[1];","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"        this.age \u003d Integer.parseInt(array[2]);","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"        this.specialisation \u003d array[3];","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     * Returns name of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     * @return name of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    public String getName() {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"        if (this.name \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"            return \"-\";","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"        return this.name;","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"     * Returns age of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"     * @return age of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    public int getAge() {","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"        return this.age;","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"     * Returns specialisation of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"     * @return specialisation of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    public String getSpecialisation() {","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"        if (this.specialisation \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"            return \"-\";","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"        return this.specialisation;","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"     * Returns Staff ID of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"     * @return Staff ID of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"    public String getId() {","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"        if (this.staffID \u003d\u003d null) {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"            return \"-\";","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"        return this.staffID;","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"     * Returns Staff type (\"N\"/\"D\") of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"     * @return Staff type of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"    public String getType() {","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"        return this.staffID.substring(0, 1);","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"     * Returns a String with all Staff object fields to store data in text files.","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"     * @return String with all Staff object fields.","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"    public String formWriteData() {","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        return (this.staffID + \"|\" + this.name + \"|\"","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"                + this.age + \"|\" + this.specialisation + \"\\n\");","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":1,"AlexanderTanJunAn":4,"blank-bank":84}},{"path":"src/main/java/seedu/model/staff/StaffList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.model.staff;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.StaffChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.StaffUI;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.ui.UI;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import static seedu.ui.UI.prettyPrint;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"public class StaffList {","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    private static final String DOCTOR_TYPE \u003d \"D\";","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    private static final String NURSE_TYPE \u003d \"N\";","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    private ArrayList\u003cStaff\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    protected static int numStaff \u003d 0;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    protected static int numDoctor \u003d 0;","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    protected static int numNurse \u003d 0;","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"    private StaffChecker staffChecker \u003d new StaffChecker();","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"     * Resets the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"    public void resetList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"        this.list.clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"        numStaff \u003d 0;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"        numDoctor \u003d 0;","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"        numNurse \u003d 0;","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     * Adds a Staff object to the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"     * @param staff Staff object to be added.","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"    public void addStaff(Staff staff) {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        list.add(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        if (staff.getType().equals(NURSE_TYPE)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"            numNurse++;","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        } else if (staff.getType().equals(DOCTOR_TYPE)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"            numDoctor++;","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"        numStaff++;","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"     * Adds a Staff object to StaffList with using an array of input fields.","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"     * @param array  array of fields to form Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    public void add(String[] array) {","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"        if (isValidID(array[0])) {","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"            Staff staff \u003d new Staff(array);","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"            addStaff(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"     * Returns a boolean indicating whether ID is found within the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"     * @param id  String of Staff ID","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"     * @return boolean for whether ID is found in the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    public boolean isValidID(String id) {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"        for (Staff staff : list) {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"            if (staff.getId().equals(id)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"                return false;","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"        return true;","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"     * Returns an ArrayList that holds all Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"     * @return ArrayList of Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"    public ArrayList\u003cStaff\u003e getList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"        return this.list;","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"     * Displays information of all relevant Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"     * @param array  Array of inputs to determine what Staff objects to be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"    public void list(String[] array) {","lastModifiedDate":"2021-04-06"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"        if (getNumStaff() \u003d\u003d 0) {","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"            StaffUI.emptyListErrorMessage();","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"            return;","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"        if (array.length \u003d\u003d 1) {","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffListHeader();","lastModifiedDate":"2021-04-06"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"            UI.showLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"            for (Staff staff : list) {","lastModifiedDate":"2021-04-06"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"                display(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"        } else if (array[1].equals(\"nurses\") \u0026\u0026 getNumNurse() !\u003d 0) {","lastModifiedDate":"2021-04-06"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffListHeader();","lastModifiedDate":"2021-04-06"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"            UI.showLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"            for (Staff staff : list) {","lastModifiedDate":"2021-04-06"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"                if (staff.getType().equals(NURSE_TYPE)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"                    display(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"        } else if (array[1].equals(\"doctors\") \u0026\u0026 getNumDoctor() !\u003d 0) {","lastModifiedDate":"2021-04-06"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffListHeader();","lastModifiedDate":"2021-04-06"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"            UI.showLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"            for (Staff staff : list) {","lastModifiedDate":"2021-04-06"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"                if (staff.getType().equals(DOCTOR_TYPE)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"                    display(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"        } else {","lastModifiedDate":"2021-04-06"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"            StaffUI.emptyListErrorMessage();","lastModifiedDate":"2021-04-06"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"     * Displays all Staff object information if keyword matches the Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"     * @param keyword String to locate relevant Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"    public void find(String keyword) {","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"        boolean isFirstItemFound \u003d false;","lastModifiedDate":"2021-04-06"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"        for (Staff staff : list) {","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"            if (search(keyword, staff)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"blank-bank"},"content":"                if (!isFirstItemFound) {","lastModifiedDate":"2021-04-06"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"                    UI.printEmptyLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"                    StaffUI.staffListHeader();","lastModifiedDate":"2021-04-06"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"                    UI.showLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"                    isFirstItemFound \u003d true;","lastModifiedDate":"2021-04-06"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-04-06"},{"lineNumber":135,"author":{"gitId":"blank-bank"},"content":"                display(staff);","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"blank-bank"},"content":"        if (!isFirstItemFound) {","lastModifiedDate":"2021-04-06"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffNotFoundErrorMessage();","lastModifiedDate":"2021-04-06"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":144,"author":{"gitId":"blank-bank"},"content":"     * Checks if a Staff object matches a given keyword.","lastModifiedDate":"2021-04-09"},{"lineNumber":145,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":146,"author":{"gitId":"blank-bank"},"content":"     * @param keyword  String to locate relevant Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"     * @param staff Staff object to check against.","lastModifiedDate":"2021-04-09"},{"lineNumber":148,"author":{"gitId":"blank-bank"},"content":"     * @return boolean for whether the keyword can be found in the Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":150,"author":{"gitId":"blank-bank"},"content":"    public boolean search(String keyword, Staff staff) {","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"blank-bank"},"content":"        return staffChecker.isSameInt(staff.getAge(), keyword) || staff.getName().contains(keyword)","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"blank-bank"},"content":"                    || staff.getId().contains(keyword) || staff.getSpecialisation().contains(keyword);","lastModifiedDate":"2021-03-17"},{"lineNumber":153,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":154,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"     * Deletes a Staff object from StaffList based on the Staff ID input.","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"     * @param input  Staff ID to be removed from the StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"blank-bank"},"content":"    public void delete(String input) {","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"blank-bank"},"content":"        boolean isExistingID \u003d false;","lastModifiedDate":"2021-03-18"},{"lineNumber":164,"author":{"gitId":"blank-bank"},"content":"        for (Iterator\u003cStaff\u003e iterator \u003d list.iterator(); iterator.hasNext(); ) {","lastModifiedDate":"2021-03-17"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"            Staff staff \u003d iterator.next();","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"            if (staff.getId().equals(input)) {","lastModifiedDate":"2021-04-07"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"                iterator.remove();","lastModifiedDate":"2021-03-17"},{"lineNumber":168,"author":{"gitId":"blank-bank"},"content":"                numStaff--;","lastModifiedDate":"2021-03-18"},{"lineNumber":169,"author":{"gitId":"blank-bank"},"content":"                if (staff.getType() \u003d\u003d NURSE_TYPE) {","lastModifiedDate":"2021-04-06"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"                    numNurse--;","lastModifiedDate":"2021-04-06"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":"                } else {","lastModifiedDate":"2021-04-06"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"                    numDoctor--;","lastModifiedDate":"2021-04-06"},{"lineNumber":173,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-04-06"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"                isExistingID \u003d true;","lastModifiedDate":"2021-03-18"},{"lineNumber":175,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":176,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":177,"author":{"gitId":"blank-bank"},"content":"        if (isExistingID) {","lastModifiedDate":"2021-03-18"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffFiredOutput(input);","lastModifiedDate":"2021-04-07"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"            StaffUI.staffDoesNotExistErrorMessage(input);","lastModifiedDate":"2021-04-07"},{"lineNumber":181,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":182,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":183,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":184,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":185,"author":{"gitId":"blank-bank"},"content":"     * Displays the information of Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":186,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":187,"author":{"gitId":"blank-bank"},"content":"     * @param staff Staff object to be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":188,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":189,"author":{"gitId":"blank-bank"},"content":"    public static void display(Staff staff) {","lastModifiedDate":"2021-03-17"},{"lineNumber":190,"author":{"gitId":"blank-bank"},"content":"        System.out.println(","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"blank-bank"},"content":"                prettyPrint(staff.getId(), 10) + \" | \"","lastModifiedDate":"2021-04-11"},{"lineNumber":192,"author":{"gitId":"blank-bank"},"content":"                + prettyPrint(staff.getName(), 10) + \" | \"","lastModifiedDate":"2021-04-11"},{"lineNumber":193,"author":{"gitId":"blank-bank"},"content":"                + prettyPrint(Integer.toString(staff.getAge()), 5) + \" | \"","lastModifiedDate":"2021-04-11"},{"lineNumber":194,"author":{"gitId":"blank-bank"},"content":"                + prettyPrint(staff.getSpecialisation(), 20));","lastModifiedDate":"2021-04-11"},{"lineNumber":195,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":196,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":197,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":198,"author":{"gitId":"blank-bank"},"content":"     * Returns number of Staff in StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":199,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":200,"author":{"gitId":"blank-bank"},"content":"     * @return Number of Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":201,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":202,"author":{"gitId":"blank-bank"},"content":"    public static int getNumStaff() {","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"blank-bank"},"content":"        return numStaff;","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":206,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":207,"author":{"gitId":"blank-bank"},"content":"     * Returns number of Nurse Staff objects in StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":208,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":209,"author":{"gitId":"blank-bank"},"content":"     * @return Number of Nurse Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":210,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":211,"author":{"gitId":"blank-bank"},"content":"    public static int getNumNurse() {","lastModifiedDate":"2021-04-06"},{"lineNumber":212,"author":{"gitId":"blank-bank"},"content":"        return numNurse;","lastModifiedDate":"2021-04-06"},{"lineNumber":213,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":214,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":215,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":216,"author":{"gitId":"blank-bank"},"content":"     * Returns number of Doctor Staff objects in StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":217,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":218,"author":{"gitId":"blank-bank"},"content":"     * @return Number of Doctor Staff objects.","lastModifiedDate":"2021-04-09"},{"lineNumber":219,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":220,"author":{"gitId":"blank-bank"},"content":"    public static int getNumDoctor() {","lastModifiedDate":"2021-04-06"},{"lineNumber":221,"author":{"gitId":"blank-bank"},"content":"        return numDoctor;","lastModifiedDate":"2021-04-06"},{"lineNumber":222,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":223,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"AlexanderTanJunAn":2,"blank-bank":221}},{"path":"src/main/java/seedu/storage/DoctorAppointmentStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.storage;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.CorruptedFileException;","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.errorchecker.DoctorAppointmentChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.DoctorAppointment;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import seedu.model.staff.Staff;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import java.io.File;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentStorage {","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"    private static final String staticFilePath \u003d Constants.APPOINTMENT_FILE_PATH;","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"    private final String filePath;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"    private final File file;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    private static final String STAFF_FILE_PATH \u003d Constants.STAFF_FILE_PATH;","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"    public static Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"     * Constructor for DoctorAppointment Storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"     * @param filePath filePath for DoctorAppointment text file.","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"    public DoctorAppointmentStorage(String filePath) {","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"     * Create a new file.","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"     * @throws IOException if the file cannot be created.","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"    public void createFile() throws IOException {","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"        Path pathToFile \u003d Paths.get(filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"        Files.createDirectories(pathToFile.getParent());","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"        file.createNewFile();","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Creating new file\");","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"     * Loads the data in the Doctor Appointment text file into an array list to be returned.","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"     * @return a new Appointment List object with an array list of appointments.","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"     * @throws FileNotFoundException if there is no such file that exists.","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"     * @throws HealthVaultException  if the data is invalid.","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"    public AppointmentList loadFile() throws FileNotFoundException, HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"        ArrayList\u003cDoctorAppointment\u003e loadAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"        ArrayList\u003cString\u003e checkStorage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"        File fileName \u003d new File(filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"        Scanner fileReader \u003d new Scanner(fileName);","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"        while (fileReader.hasNextLine()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"            try {","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"                String input \u003d fileReader.nextLine();","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"                if (input.equals(\"\")) {","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"                    logger.log(Level.WARNING, \"Corrupted File Detected during loadFile\");","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"                    throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-04-02"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-04-02"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"                String[] data \u003d input.split(\"\\\\s\\\\|\\\\s\", 5);","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"                DoctorAppointmentChecker.checkDataFromStorage(input, checkStorage);","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"                checkStorage.add(data[1]);","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"                loadAppointments.add(new DoctorAppointment(data[0], data[1], data[2], data[3], data[4]));","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"                logger.log(Level.WARNING, \"Corrupted File Detected during loadFile\");","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"                throw new CorruptedFileException(Constants.APPOINTMENT_FILE_PATH);","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"            }","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"MingShun98"},"content":"        fileReader.close();","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"File Successfully loaded into program\");","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"        return new AppointmentList(loadAppointments);","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":91,"author":{"gitId":"MingShun98"},"content":"     * Writing to file.","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"MingShun98"},"content":"     * @param taskList Array list of all current doctor appointments.","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"MingShun98"},"content":"     * @throws IOException if the file cannot be written.","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"MingShun98"},"content":"    public static void writeToFile(ArrayList\u003cDoctorAppointment\u003e taskList) throws IOException {","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"MingShun98"},"content":"        FileWriter fileWriter \u003d new FileWriter(staticFilePath, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"MingShun98"},"content":"        fileWriter.write(\"\");","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"MingShun98"},"content":"        for (DoctorAppointment task : taskList) {","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"MingShun98"},"content":"            fileWriter.write(task.saveTask() + \"\\n\");","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"MingShun98"},"content":"        fileWriter.close();","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Successfully written data to file \");","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"MingShun98"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"MingShun98"},"content":"     * Loading the doctor information from the staff database.","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"MingShun98"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"MingShun98"},"content":"     * @return the array list of existing doctors in the hospital.","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"MingShun98"},"content":"     * @throws FileNotFoundException if the file does not exists.","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"MingShun98"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"MingShun98"},"content":"    public static ArrayList\u003cStaff\u003e loadDoctorFile() throws FileNotFoundException {","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"MingShun98"},"content":"        ArrayList\u003cStaff\u003e loadDoctorList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"MingShun98"},"content":"        File fileName \u003d new File(STAFF_FILE_PATH);","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"MingShun98"},"content":"        Scanner fileReader \u003d new Scanner(fileName);","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"MingShun98"},"content":"        logger.log(Level.INFO, \"Loading Staff data into doctor appointment Menu for cross validation \");","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"MingShun98"},"content":"        while (fileReader.hasNextLine()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"MingShun98"},"content":"            String input \u003d fileReader.nextLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"MingShun98"},"content":"            String[] data \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"MingShun98"},"content":"            loadDoctorList.add(new Staff(data));","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"MingShun98"},"content":"        fileReader.close();","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"MingShun98"},"content":"        return loadDoctorList;","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"MingShun98":121,"Chiamjiaen":1,"blank-bank":8}},{"path":"src/main/java/seedu/storage/InventoryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.storage;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.InventoryList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"import seedu.logic.errorchecker.InventoryChecker;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.model.inventory.Inventory;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"import seedu.ui.InventoryUI;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"import java.io.File;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"public class InventoryStorage {","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"    protected File saveFile;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"    protected String filePath;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"    protected ArrayList\u003cInventory\u003e inventories \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"    protected InventoryUI ui;","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"    protected InventoryChecker checker;","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"    public InventoryStorage(String filePath) {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"        saveFile \u003d new File(filePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"    public void fileInit() {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"            //makes file directory if it doesnt exist in the system.","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"            if (!(saveFile.exists())) {","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"                saveFile.getParentFile().mkdirs();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"                saveFile.createNewFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"            System.out.println(\"OOPS! I can\u0027t create the directory or file!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    public ArrayList\u003cInventory\u003e loadInventory() throws HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"        fileInit();","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"        Scanner fileScanner \u003d null;","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"            // initializing file scanner to scan the file","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"            fileScanner \u003d new Scanner(saveFile);","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"NoorSarrah"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"                String currentScan \u003d fileScanner.nextLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"                //splits the string into sections for storing in the ArrayList","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"                String[] taskSave \u003d currentScan.trim().split(\"\\\\|\");","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"                int numberOfTokens \u003d taskSave.length;","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"NoorSarrah"},"content":"                if (taskSave.length !\u003d 3) {","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"                    throw new HealthVaultException(\"loadFile\");","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"NoorSarrah"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"                checker \u003d new InventoryChecker(inventories, taskSave, numberOfTokens);","lastModifiedDate":"2021-04-02"},{"lineNumber":57,"author":{"gitId":"NoorSarrah"},"content":"                checker.checkStorage();","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"NoorSarrah"},"content":"                Inventory tempInventory \u003d new Inventory(taskSave[0], Double.parseDouble(taskSave[1]),","lastModifiedDate":"2021-04-11"},{"lineNumber":59,"author":{"gitId":"NoorSarrah"},"content":"                        Integer.parseInt(taskSave[2]));","lastModifiedDate":"2021-04-11"},{"lineNumber":60,"author":{"gitId":"NoorSarrah"},"content":"                inventories.add(tempInventory);","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"NoorSarrah"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"NoorSarrah"},"content":"            throw new HealthVaultException(\"loadFile\");","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"NoorSarrah"},"content":"        fileScanner.close();","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"NoorSarrah"},"content":"        return inventories;","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"    public void storeInventory(InventoryList saveInput) {","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"NoorSarrah"},"content":"        fileInit();","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"NoorSarrah"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"NoorSarrah"},"content":"            //creates a new file writer to write to text file","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"NoorSarrah"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"NoorSarrah"},"content":"            for (int i \u003d 0; i \u003c saveInput.getSize(); i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"NoorSarrah"},"content":"                fileWriter.write(saveInput.toSaveFile(i) + \"\\n\");","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"NoorSarrah"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"NoorSarrah"},"content":"            fileWriter.close();","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"NoorSarrah"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"NoorSarrah"},"content":"            System.out.println(\"☹ OOPS!!! The file can\u0027t be saved :-(\");","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"NoorSarrah"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":77,"blank-bank":7}},{"path":"src/main/java/seedu/storage/NurseScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.storage;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InvalidDateException;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.NurseIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientCrossValidationError;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.PatientIdNotFound;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.errorchecker.NurseScheduleChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseSchedule;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.Patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.ui.NurseScheduleUI;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.File;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.PATIENT_FILE_PATH;","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_FILE_PATH;","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleStorage {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static final String FILE_PATH \u003d SCHEDULES_FILE_PATH;","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    static ArrayList\u003cNurseSchedule\u003e nurseSchedules \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Creates new file.","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private static void createFile() {","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"            file.createNewFile();","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (IOException | NullPointerException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Reads NurseSchedule.txt.","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return arraylist populated with valid data","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if nurseID does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if ID is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws FileNotFoundException if file does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseCrossValidationError if Staff.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientIdNotFound if patientID does not exit","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientCrossValidationError if Patients.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidDateException if date is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"    private ArrayList\u003cNurseSchedule\u003e readFile() throws NurseIdNotFound, InvalidiDTypeException,","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"            FileNotFoundException, NurseCrossValidationError, PatientIdNotFound,","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"            PatientCrossValidationError, InvalidDateException {","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"        FileInputStream file \u003d new FileInputStream(FILE_PATH);","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"            String[] details \u003d sc.nextLine().split(\"\\\\|\", 0);","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkNurseiDExist(details[0]);","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkPatientiDExist(details[1]);","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkValidNurseID(details[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.checkValidPatientID(details[1]);","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseScheduleChecker.isValidDate(details[2]);","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"            nurseSchedules.add(new NurseSchedule(details[0], details[1], details[2]));","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO,\"Nurse Schedule file loaded\");","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseSchedules;","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Writes objects in nurseSchedules to NurseSchedule.txt.","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @param nurseSchedules arraylist of objects","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"    public void writeToFile(NurseScheduleList nurseSchedules) {","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"            FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"            for (int i \u003d 0; i \u003c nurseSchedules.getSize(); i++) {","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"                writer.write(nurseSchedules.toSaveFile(i));","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"                writer.write(\"\\r\\n\");","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"            writer.close();","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"            logger.log(Level.WARNING,\"Error writing to NurseSchedule.txt\");","lastModifiedDate":"2021-04-08"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"        logger.log(Level.INFO, \"Nurse Schedule file saved\");","lastModifiedDate":"2021-04-08"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Function creates, read and loads NurseSchedule.txt.","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":102,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return populated arraylist","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseIdNotFound if nurseID does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidiDTypeException if ID is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":105,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws FileNotFoundException if file does not exist","lastModifiedDate":"2021-04-10"},{"lineNumber":106,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws NurseCrossValidationError if Staff.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":107,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientIdNotFound if patientID does not exit","lastModifiedDate":"2021-04-10"},{"lineNumber":108,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws PatientCrossValidationError if Patients.txt cannot be loaded","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws InvalidDateException if date is invalid","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public ArrayList\u003cNurseSchedule\u003e load() throws FileNotFoundException, InvalidiDTypeException,","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"AlexanderTanJunAn"},"content":"            NurseIdNotFound, NurseCrossValidationError, PatientIdNotFound,","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"AlexanderTanJunAn"},"content":"            PatientCrossValidationError, InvalidDateException {","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"AlexanderTanJunAn"},"content":"        createFile();","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"AlexanderTanJunAn"},"content":"        nurseSchedules \u003d readFile();","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return nurseSchedules;","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"AlexanderTanJunAn"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":120,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * Loads patientFile for cross-validation function.","lastModifiedDate":"2021-04-10"},{"lineNumber":121,"author":{"gitId":"AlexanderTanJunAn"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":122,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @return populated patientlist","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"AlexanderTanJunAn"},"content":"     * @throws FileNotFoundException if file not found","lastModifiedDate":"2021-04-10"},{"lineNumber":124,"author":{"gitId":"AlexanderTanJunAn"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":125,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static ArrayList\u003cPatient\u003e loadPatientFile() throws FileNotFoundException {","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"AlexanderTanJunAn"},"content":"        ArrayList\u003cPatient\u003e patientList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":127,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"AlexanderTanJunAn"},"content":"        File fileName \u003d new File(PATIENT_FILE_PATH);","lastModifiedDate":"2021-04-01"},{"lineNumber":129,"author":{"gitId":"AlexanderTanJunAn"},"content":"        Scanner fileReader \u003d new Scanner(fileName);","lastModifiedDate":"2021-04-01"},{"lineNumber":130,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":131,"author":{"gitId":"AlexanderTanJunAn"},"content":"        while (fileReader.hasNextLine()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":132,"author":{"gitId":"AlexanderTanJunAn"},"content":"            String input \u003d fileReader.nextLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":133,"author":{"gitId":"AlexanderTanJunAn"},"content":"            String[] data \u003d input.trim().split(\"\\\\|\");","lastModifiedDate":"2021-04-01"},{"lineNumber":134,"author":{"gitId":"AlexanderTanJunAn"},"content":"            int numberOfTokens \u003d data.length;","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"AlexanderTanJunAn"},"content":"            ArrayList\u003cString\u003e cleanString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"AlexanderTanJunAn"},"content":"            for (int i \u003d 0; i \u003c numberOfTokens; i++) {","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"AlexanderTanJunAn"},"content":"                cleanString.add(NurseScheduleUI.cleanseInput(data[i]).trim());","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"AlexanderTanJunAn"},"content":"            }","lastModifiedDate":"2021-04-01"},{"lineNumber":139,"author":{"gitId":"AlexanderTanJunAn"},"content":"            Patient tempPatient \u003d new Patient(data[0].trim(), data[1].trim(),","lastModifiedDate":"2021-04-01"},{"lineNumber":140,"author":{"gitId":"AlexanderTanJunAn"},"content":"                    Integer.parseInt(data[2].trim()), data[3], data[4], data[5]);","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"AlexanderTanJunAn"},"content":"            patientList.add(tempPatient);","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"AlexanderTanJunAn"},"content":"        fileReader.close();","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"AlexanderTanJunAn"},"content":"        return patientList;","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":146,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"AlexanderTanJunAn":141,"blank-bank":5}},{"path":"src/main/java/seedu/storage/PatientStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.storage;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.CorruptedFileException;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.logic.errorchecker.PatientChecker;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.Patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import seedu.ui.PatientUI;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.File;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":" * Accesses patient details from storage and stores patient details to storage.","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"public class PatientStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"    static File saveFile;","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"    static ArrayList\u003cPatient\u003e patients;","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"    static String filePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"    static PatientUI ui;","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    static PatientChecker checker;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"    public PatientStorage(String filepath) {","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        filePath \u003d filepath;","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"        saveFile \u003d new File(filepath);","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"        ui \u003d new PatientUI();","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"        patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"     * Checks if the file exists and initializes one if there is not.","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"    public void fileInit() {","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"            //makes file directory if it doesnt exist in the system.","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"            if (!(saveFile.exists())) {","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"Chiamjiaen"},"content":"                saveFile.getParentFile().mkdirs();","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"Chiamjiaen"},"content":"                saveFile.createNewFile();","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.INFO, \"New Patient file and directory created.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Unable to create file.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"            System.out.println(\"OOPS! I can\u0027t create the directory or file!\");","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"     * Loads the saved list of patients from save location.","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"     * @return Populated patients arraylist.","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"     * @throws HealthVaultException if there is an error in loading.","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"    public ArrayList\u003cPatient\u003e loadPatients() throws HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"        fileInit();","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"Chiamjiaen"},"content":"        logger.log(Level.INFO, \"loading patients from storage.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"        // initializing file scanner to scan the file","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"        Scanner fileScanner \u003d null;","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"Chiamjiaen"},"content":"            fileScanner \u003d new Scanner(saveFile);","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Unable to find file.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"            String currentScan \u003d fileScanner.nextLine();","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"            //splits the string into sections for storing in the ArrayList","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"            String[] taskSave \u003d currentScan.trim().split(\"\\\\|\");","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"            int numberOfTokens \u003d taskSave.length;","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"            if (numberOfTokens \u003d\u003d 0) {","lastModifiedDate":"2021-04-03"},{"lineNumber":79,"author":{"gitId":"Chiamjiaen"},"content":"                logger.log(Level.WARNING, \"patient file unable to open due to wrong number of tokens.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"                throw new CorruptedFileException(\"Patient\");","lastModifiedDate":"2021-04-03"},{"lineNumber":81,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-04-03"},{"lineNumber":82,"author":{"gitId":"Chiamjiaen"},"content":"            for (int i \u003d 0; i \u003c numberOfTokens; i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"Chiamjiaen"},"content":"                taskSave[i] \u003d taskSave[i].trim().replaceAll(\"\\\\s{2,}\", \" \");","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"            checker \u003d new PatientChecker(patients, taskSave, numberOfTokens);","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"            checker.checkStorage();","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"            Patient tempPatient \u003d new Patient(taskSave[0], taskSave[1], Integer.parseInt(taskSave[2]),","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"                    taskSave[3], taskSave[4], taskSave[5]);","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"            patients.add(tempPatient);","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"        fileScanner.close();","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"        logger.log(Level.INFO, \"returning patients from storage.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"        return patients;","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"Chiamjiaen"},"content":"     * Saves all patients to text file.","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"Chiamjiaen"},"content":"     * @param saveInput current patient details to be stored.","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"    public void storePatients(PatientList saveInput) {","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"        fileInit();","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"Chiamjiaen"},"content":"        logger.log(Level.INFO, \"storing patients to storage.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"Chiamjiaen"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"Chiamjiaen"},"content":"            //creates a new file writer to write to text file","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"Chiamjiaen"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"Chiamjiaen"},"content":"            for (int i \u003d 0; i \u003c saveInput.getSize(); i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"Chiamjiaen"},"content":"                fileWriter.write(saveInput.toSaveFile(i) + \"\\n\");","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"Chiamjiaen"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"Chiamjiaen"},"content":"            fileWriter.flush();","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"Chiamjiaen"},"content":"            fileWriter.close();","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.INFO, \"Patient file save successful\");","lastModifiedDate":"2021-04-08"},{"lineNumber":113,"author":{"gitId":"Chiamjiaen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"            logger.log(Level.WARNING, \"Unable to save file due to IOException.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"Chiamjiaen"},"content":"            System.out.println(\"☹ OOPS!!! The file can\u0027t be saved :-(\");","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Chiamjiaen":111,"blank-bank":7}},{"path":"src/main/java/seedu/storage/StaffStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.storage;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.logger.HealthVaultLogger;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.StaffChecker;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import java.io.File;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"/**","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":" * StaffStorage Class handles the necessary file I/O operations.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":" */","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"public class StaffStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    static File saveFile;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    static String filePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    private StaffChecker staffChecker \u003d new StaffChecker();","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    public Logger logger \u003d HealthVaultLogger.getLogger();","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"     * Constructor for StaffStorage.","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"     * @param filepath filepath to create and update the file.","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    public StaffStorage(String filepath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"        filePath \u003d filepath;","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"        saveFile \u003d new File(filepath);","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"     * Loads existing Staff data from a specified text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"     * Or creates a new text file if no existing text file exists.","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  StallList object to load Staff object data into.","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any corrupted file data detected.","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    public void fileHandling(StaffList staffList) throws HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"            loadFile(staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.WARNING, \"Unable to find file\");","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"            createFile();","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"     * Creates Staff object from data in text file and adds it to StaffList object.","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  StallList object to load Staff object data into.","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"     * @param line  String of data from text files.","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any corrupted file data detected.","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"    public void loadStaff(StaffList staffList, String line) throws HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"        staffChecker.checkValidDataFromStorage(line, staffList.getList());","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"        String[] arr \u003d staffChecker.invalidCharactersStaffCheckerForStorage(line);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"        staffList.add(arr);","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"     * Loads data from text file into StaffList.","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  StallList object to load Staff object data into.","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"     * @throws FileNotFoundException  If file does not exist.","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"     * @throws HealthVaultException  If any corrupted file data detected.","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"    public void loadFile(StaffList staffList) throws FileNotFoundException, HealthVaultException {","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"        File f \u003d new File(filePath);           // create a File for the given file path","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"        Scanner s \u003d new Scanner(f);            // create a Scanner using the File as the source","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"            loadStaff(staffList, s.nextLine());","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Staff data loaded into system.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"     * Loads data from StaffList into a specified text file.","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"     * @param staffList  StallList object where Staff object\u0027s data are retrieved.","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"     * @throws IOException  If unable to write to file.","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"    public void writeToFile(StaffList staffList) throws IOException {","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"        createFile();","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c StaffList.getNumStaff(); i++) {","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"            fw.write(staffList.getList().get(i).formWriteData());","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"        fw.close();","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"        logger.log(Level.INFO, \"Staff file save successful\");","lastModifiedDate":"2021-04-08"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"     * Creates a directory if it does not exist.","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"     * Creates a file if it does not exist.","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"     * @throws IOException  If unable to create file/directory.","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"    public void createFile() {","lastModifiedDate":"2021-04-08"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"            File myObj \u003d new File(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"            saveFile.getParentFile().mkdirs();","lastModifiedDate":"2021-04-02"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"            myObj.createNewFile();","lastModifiedDate":"2021-04-11"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.INFO, \"New Staff file and directory created\");","lastModifiedDate":"2021-04-08"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"            System.out.println(\"OOPS! I can\u0027t create the directory or file!\");","lastModifiedDate":"2021-04-08"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"            logger.log(Level.WARNING, \"Unable to create file\");","lastModifiedDate":"2021-04-08"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"blank-bank":114}},{"path":"src/main/java/seedu/ui/DoctorAppointmentUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.model.doctorappointment.DoctorAppointment;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.HELP_HEADER_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.HELP_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.HELP_HEADER_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.HELP_HEADER_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_ADD_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_DELETE_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_DELETE_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_ADD_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.MARK_BLANK;","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_HELP_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.ADD_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.LIST_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_LIST_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.APPOINTMENTS_LIST_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.DELETE_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.RETURN_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"import static seedu.duke.Constants.RETURN_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentUI extends UI {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"    public static void doctorAppointmentsWelcome() {","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Welcome to the Appointments\u0027 Menu!\");","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"    public static void doctorAppointmentHelp() {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"Here is a list of Doctor Appointments Commands: \");","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"        int[] lengthPara \u003d {10, 70, 50};","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"        UI.showLongLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{HELP_COMMAND, APPOINTMENTS_HELP_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{ADD_COMMAND, APPOINTMENTS_ADD_DESCRIPTION, APPOINTMENTS_ADD_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{LIST_COMMAND, APPOINTMENTS_LIST_DESCRIPTION, APPOINTMENTS_LIST_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{DELETE_COMMAND, APPOINTMENTS_DELETE_DESCRIPTION, APPOINTMENTS_DELETE_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        printer(new String[]{RETURN_COMMAND, RETURN_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"    public void printAppointmentMenuPrompt() {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"Type \u0027help\u0027 for appointment menu commands\\n\");","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"    public static void printAddedAppointment() {","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"Appointment Added\");","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"    public static void deletedDocID(String doctorId, String appointmentId) {","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"DoctorID / Appointment ID: \" + doctorId + \"/\" + appointmentId + \" has been deleted!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"    public static void deletedAptID(String appointmentId) {","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"Appointment ID: \" + appointmentId + \" has been deleted!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"    public static void printList(DoctorAppointment doc, String indicator) throws ParseException {","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"MingShun98"},"content":"        if (indicator.equals(\"all\")) {","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"MingShun98"},"content":"            printEmptyCell(doc.getDoctorId());","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"MingShun98"},"content":"        printEmptyCell(doc.getAppointmentId());","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"MingShun98"},"content":"        printEmptyCell(doc.getPatientsName());","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"MingShun98"},"content":"        printEmptyCell(doc.getGender());","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"MingShun98"},"content":"        System.out.print(doc.getDateFormat(doc.getDate()));","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"MingShun98"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"MingShun98"},"content":"    public static void appointmentPrintList(String indicator) {","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"MingShun98"},"content":"        if (indicator.equals(\"D\") || indicator.equals(\"all\")) {","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"MingShun98"},"content":"            System.out.println(","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"MingShun98"},"content":"                    UI.prettyPrint(\"Doctor ID\", 14) + \" | \" + UI.prettyPrint(\"Appointment ID\",","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"MingShun98"},"content":"                            14) + \" | \" + UI.prettyPrint(\"Name\", 14) + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"MingShun98"},"content":"                            + UI.prettyPrint(\"Gender\", 14) + \" | \" + UI.prettyPrint(\"Date\",","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"MingShun98"},"content":"                            14));","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"MingShun98"},"content":"        } else {","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"MingShun98"},"content":"            System.out.println(","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"MingShun98"},"content":"                    UI.prettyPrint(\"Appointment ID\", 14) + \" | \" + UI.prettyPrint(\"Name\",","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"MingShun98"},"content":"                            14) + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":85,"author":{"gitId":"MingShun98"},"content":"                            + UI.prettyPrint(\"Gender\", 14) + \" | \" + UI.prettyPrint(\"Date\",","lastModifiedDate":"2021-04-10"},{"lineNumber":86,"author":{"gitId":"MingShun98"},"content":"                            14));","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"MingShun98"},"content":"    public static void printEmptyCell(String s) {","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"MingShun98"},"content":"        System.out.print(UI.prettyPrint(s, 14) + \" | \");","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"MingShun98"},"content":"    public static void corruptedFileErrorMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"MingShun98"},"content":"        System.out.println(\"File (data/DoctorAppointment.txt) is corrupted. Please delete the file \"","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"MingShun98"},"content":"                + \"before running the Doctor Appointment Menu.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"MingShun98"},"content":"    public static void printNewLine() {","lastModifiedDate":"2021-04-01"},{"lineNumber":100,"author":{"gitId":"MingShun98"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2021-04-01"},{"lineNumber":101,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":103,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"MingShun98":94,"blank-bank":10}},{"path":"src/main/java/seedu/ui/InventoryUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NoorSarrah"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"NoorSarrah"},"content":"import static seedu.duke.Constants.*;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"NoorSarrah"},"content":"public class InventoryUI extends UI {","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"NoorSarrah"},"content":"    public static void drugAddedMessage(String addedDrugName, String addedDrugQuantity) {","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(addedDrugQuantity + \" \" + addedDrugName + \" is added into Inventory!\");","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"NoorSarrah"},"content":"    public static void emptyInventoryListMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"You do not have any Drugs in your inventory:(\");","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"NoorSarrah"},"content":"    public static void inventoryListHeader() {","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"NoorSarrah"},"content":"                UI.prettyPrint(\"DrugName\", 15) + \" | \"","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"NoorSarrah"},"content":"                        + UI.prettyPrint(\"Price\", 10) + \" | \"","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"NoorSarrah"},"content":"                        + UI.prettyPrint(\"Quantity\", 5));","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"NoorSarrah"},"content":"    public static void printInventoryHelpMessage() {","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"NoorSarrah"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"Here is a list of Inventory commands: \");","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"NoorSarrah"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"NoorSarrah"},"content":"        int[] lengthPara \u003d {10,60,50};","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"NoorSarrah"},"content":"        UI.showLongLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{HELP_COMMAND, INVENTORY_HELP_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{ADD_COMMAND, INVENTORY_ADD_DESCRIPTION, INVENTORY_ADD_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{LIST_COMMAND, INVENTORY_LIST_DESCRIPTION, INVENTORY_LIST_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{DELETE_COMMAND, INVENTORY_DELETE_DESCRIPTION, INVENTORY_DELETE_FORMAT}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"NoorSarrah"},"content":"        printer(new String[]{RETURN_COMMAND, RETURN_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"NoorSarrah"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"NoorSarrah"},"content":"    public static void deleteDrugMessage(String deletedDrug, String deletedDrugQuantity) {","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"Noted. I\u0027ve removed \" + deletedDrugQuantity + \" \" + deletedDrug);","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"NoorSarrah"},"content":"    public static void inventoryMenuHeader() {","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"NoorSarrah"},"content":"        System.out.print(\"Welcome to Inventory Menu!\\nType \\\"help\\\" for Inventory menu commands\\n\");","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"NoorSarrah"},"content":"    public void corruptedFileErrorMessage() {","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"NoorSarrah"},"content":"        System.out.println(\"The file (\" + INVENTORY_FILE_PATH + \") is corrupted!\\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":50,"author":{"gitId":"NoorSarrah"},"content":"                + \"Please exit the program and delete the corrupted file before trying to access Inventory Menu!\");","lastModifiedDate":"2021-04-11"},{"lineNumber":51,"author":{"gitId":"NoorSarrah"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"NoorSarrah"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"NoorSarrah":52}},{"path":"src/main/java/seedu/ui/NurseScheduleUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.NurseSchedulesParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.HELP_HEADER_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.HELP_HEADER_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.HELP_HEADER_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.HELP_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.ADD_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.LIST_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.DELETE_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.RETURN_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_HELP_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_ADD_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_LIST_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_DELETE_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.RETURN_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.MARK_BLANK;","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_ADD_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_LIST_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static seedu.duke.Constants.SCHEDULES_DELETE_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"public class NurseScheduleUI extends UI {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void printNurseScheduleWelcomeMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"        showLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Welcome to Nurse Schedules!\");","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Type \\\"help\\\" to for nurse schedules commands\");","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"        lineBreak();","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void printNurseScheduleHelpList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Here is a list of Nurse Schedule commands: \");","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"        int[] lengthPara \u003d {10,65,50};","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"        UI.showLongLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_COMMAND, SCHEDULES_HELP_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{ADD_COMMAND, SCHEDULES_ADD_DESCRIPTION, SCHEDULES_ADD_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{LIST_COMMAND, SCHEDULES_LIST_DESCRIPTION, SCHEDULES_LIST_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{DELETE_COMMAND, SCHEDULES_DELETE_DESCRIPTION, SCHEDULES_DELETE_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{RETURN_COMMAND, RETURN_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void printDeletedSchedule(String id, String datetime) {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Trip to \" + id","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + \" on \" + datetime + \" has been cancelled!\");","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void printAddedSchedule(String id, String datetime) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Trip to \" + id + \" on \" + NurseSchedulesParser.formatDate(datetime) + \" added!\");","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void invalidInputsMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"        showLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Invalid inputs!\");","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Type \\\"help\\\" to for nurse schedules commands\");","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void addHelpMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Please input with the following format: add/[NurseID]/[Patient ID]/[Date (DDMMYYYY)]\");","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void listHelpMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Please input with the following format: list/[NurseID/all]\");","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void deleteHelpMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Please input with the following format: delete/[NurseID]/[Date (DDMMYYYY)]\");","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void formatHelpMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"        lineBreak();","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"OOPS! Please check to see if your command is properly formatted!\");","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void nurseListHeader() {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"                UI.prettyPrint(\"Nurse ID\", 10) + \" | \" + UI.prettyPrint(\"Patient ID\", 10)","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"                        + UI.prettyPrint(\"Date\", 10));","lastModifiedDate":"2021-04-01"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void printEmptyCell() {","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.print(UI.prettyPrint(\" \", 10) + \" | \");","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void corruptedFileErrorMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"File (data/NurseSchedule.txt) is corrupted. \"","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"AlexanderTanJunAn"},"content":"                + \"Please delete the file before running the Staff Menu.\");","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public static void corruptedStaffFile() {","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.println(\"Staff file is not loaded, Nurse ID cannot be validated.\");","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"Chiamjiaen":6,"AlexanderTanJunAn":91,"blank-bank":2}},{"path":"src/main/java/seedu/ui/PatientUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.ADD_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.DELETE_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.FIND_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HELPLINEBREAK;","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HELP_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HELP_HEADER_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HELP_HEADER_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.HELP_HEADER_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.LISTLINEBREAK;","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.LIST_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.MARK_BLANK;","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_ADD_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_ADD_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_DELETE_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_DELETE_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_FILE_PATH;","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_FIND_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_FIND_FORMAT;","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_HELP_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.PATIENT_LIST_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.RETURN_COMMAND;","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"import static seedu.duke.Constants.RETURN_DESCRIPTION;","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"/**","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":" * UI specifically for patient related functions.","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":" */","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientUI extends UI {","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"    public static void printPatientHelpList() {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Here is a list of Patient commands: \");","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"Chiamjiaen"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"        int[] lengthPara \u003d {10,60,70};","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(HELPLINEBREAK);","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_COMMAND, PATIENT_HELP_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{ADD_COMMAND, PATIENT_ADD_DESCRIPTION, PATIENT_ADD_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{LIST_COMMAND, PATIENT_LIST_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{DELETE_COMMAND, PATIENT_DELETE_DESCRIPTION, PATIENT_DELETE_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{FIND_COMMAND, PATIENT_FIND_DESCRIPTION, PATIENT_FIND_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{RETURN_COMMAND, RETURN_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"Chiamjiaen"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"Chiamjiaen"},"content":"    public static void patientListHeader() {","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"Chiamjiaen"},"content":"                UI.prettyPrint(\"ID\", 8)","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(\"Name\", 20)","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(\"Age\", 6)","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(\"Gender\", 8)","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(\"Illness\", 20)","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(\"Medication Required\", 20));","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(LISTLINEBREAK);","lastModifiedDate":"2021-04-04"},{"lineNumber":62,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    public static void patientAddedMessage(String name) {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(name","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"Chiamjiaen"},"content":"                + \" is now a patient here!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"Chiamjiaen"},"content":"    public static void printPatientList(String[] patientDetails) {","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"Chiamjiaen"},"content":"                UI.prettyPrint(patientDetails[0], 8)","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(patientDetails[1], 20)","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(patientDetails[2], 6)","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(patientDetails[3], 8)","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(patientDetails[4], 20)","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"Chiamjiaen"},"content":"                        + \" | \"","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"Chiamjiaen"},"content":"                        + UI.prettyPrint(patientDetails[5], 20));","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"    public static void emptyPatientListMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"OOPS! It seems like you have no patients in the list now!\");","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"    public static void notEmptyPatientListMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Here are the patients currently in the list!\");","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"    public static void deletePatientMessage(String deletedPatient, int inputInt) {","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Noted. I\u0027ve removed this patient: \\n\" + deletedPatient);","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Now you have \"","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"Chiamjiaen"},"content":"                + inputInt","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"Chiamjiaen"},"content":"                + \" patients in the list\");","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"    public static void patientCommandWelcome() {","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"Chiamjiaen"},"content":"        showLine();","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Welcome to the Patient Menu!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":102,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Type \\\"help\\\" for patient menu commands\");","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.print((System.lineSeparator()));","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"Chiamjiaen"},"content":"    public void corruptedFileErrorMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"The file (\"","lastModifiedDate":"2021-04-10"},{"lineNumber":108,"author":{"gitId":"Chiamjiaen"},"content":"                + PATIENT_FILE_PATH","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"Chiamjiaen"},"content":"                + \") is corrupted!\\n\"","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"Chiamjiaen"},"content":"                + \"Please exit the program and delete the corrupted file before trying to access Patient Menu!\");","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"Chiamjiaen"},"content":"    public static void patientNotFoundMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"There is no patient in the list that matches your keywords!\");","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Chiamjiaen":91,"blank-bank":25}},{"path":"src/main/java/seedu/ui/StaffUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_ADD_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_HELP_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_LIST_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_DELETE_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_FIND_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.HELP_HEADER_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.MARK_BLANK;","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.ADD_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.LIST_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.HELP_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.HELP_HEADER_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.DELETE_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.FIND_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.RETURN_COMMAND;","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.RETURN_DESCRIPTION;","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_ADD_FORMAT;","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.HELP_HEADER_FORMAT;","lastModifiedDate":"2021-04-11"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_DELETE_FORMAT;","lastModifiedDate":"2021-04-11"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_LIST_FORMAT;","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.STAFF_FIND_FORMAT;","lastModifiedDate":"2021-04-11"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"public class StaffUI extends UI {","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"     * Displays an output after adding a Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"     *","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"     * @param id  Staff ID.","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"     * @param name Name of Staff.","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"    public static void staffHiredOutput(String id, String name) {","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"        if (id.charAt(0) \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"                System.out.println(\"Doctor \" + name + \" hired :)\");","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"                System.out.println(\"Unknown Doctor hired!\");","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"        } else if (id.charAt(0) \u003d\u003d \u0027N\u0027) {","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"                System.out.println(\"Nurse \" + name + \" hired :)\");","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"                System.out.println(\"Unknown Doctor hired!\");","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"     * Displays an output after deleting a Staff object.","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"    public static void staffFiredOutput(String input) {","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"        System.out.println(input + \" has been fired :(\");","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"     * Displays an output header for the list command.","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"    public static void staffListHeader() {","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"        System.out.println(","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"                UI.prettyPrint(\"ID\", 10) + \" | \" + UI.prettyPrint(\"Name\", 10) + \" | \"","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"                        + UI.prettyPrint(\"Age\", 5) + \" | \" + UI.prettyPrint(\"Specialisation\", 20));","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"     * Displays an output when accessing the Staff Menu.","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"    public static void staffMenuHeader() {","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"        UI.showLine();","lastModifiedDate":"2021-04-06"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"        System.out.print(\"Welcome to Staff Menu!\\nType \\\"help\\\" for staff menu commands\\n\");","lastModifiedDate":"2021-04-11"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"     * Displays an output for Help Message.","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"    public static void printStaffHelpMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Here is a list of Staff commands: \");","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Chiamjiaen"},"content":"        int[] lengthPara \u003d {10,60,50};","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"        UI.showLongLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{HELP_COMMAND, STAFF_HELP_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{ADD_COMMAND, STAFF_ADD_DESCRIPTION, STAFF_ADD_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{LIST_COMMAND, STAFF_LIST_DESCRIPTION, STAFF_LIST_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{DELETE_COMMAND, STAFF_DELETE_DESCRIPTION, STAFF_DELETE_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{FIND_COMMAND, STAFF_FIND_DESCRIPTION, STAFF_FIND_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"Chiamjiaen"},"content":"        printer(new String[]{RETURN_COMMAND, RETURN_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"     * Displays an error message when Staff is not found by the Find command.","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"    public static void staffNotFoundErrorMessage() {","lastModifiedDate":"2021-04-06"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"There is no staff in the list that matches your keywords!\");","lastModifiedDate":"2021-04-06"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"     * Displays an error message when file data is corrupted.","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"    public static void corruptedFileErrorMessage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"File (data/Staff.txt) is corrupted. Please delete the file before running the Staff Menu.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"     * Displays an error message invalid numeric input is given.","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"    public static void invalidNumericErrorMessage() {","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"The numeric input is invalid!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"     * Displays an error message when deleting a Staff that does not exist.","lastModifiedDate":"2021-04-09"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"    public static void staffDoesNotExistErrorMessage(String input) {","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Staff with ID: \" + input + \" does not exist\");","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"     * Displays an error message when no Staff to be displayed when using the list command.","lastModifiedDate":"2021-04-09"},{"lineNumber":129,"author":{"gitId":"blank-bank"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"    public static void emptyListErrorMessage() {","lastModifiedDate":"2021-04-06"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"OOPS! It seems like you have no staff in the list now!\");","lastModifiedDate":"2021-04-06"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Chiamjiaen":8,"blank-bank":125}},{"path":"src/main/java/seedu/ui/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.ui;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Chiamjiaen"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import static java.lang.Math.abs;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import static java.lang.Math.max;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import static seedu.duke.Constants.*;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"public class UI {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    static final int LARGE_NUMBER \u003d 100; // Just a large number","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    static final int ALLOWANCE \u003d 2;     // How strict smart command should be","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    static final String UNKNOWN_COMMAND \u003d \"unknown\";    // Returns this when input is not recognised","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"Chiamjiaen"},"content":"    static Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"Chiamjiaen"},"content":"    public static String scanInput() {","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"Chiamjiaen"},"content":"    /**","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"Chiamjiaen"},"content":"     * This function scans the user input and returns it to the calling function.","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"Chiamjiaen"},"content":"     *","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"     * @param requestMenu the Menu that accepts the input from the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"     * @return the user input that has been cleared of all greedy white spaces.","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"Chiamjiaen"},"content":"     */","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"Chiamjiaen"},"content":"    public String getInput(String requestMenu) {","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"        System.out.print(requestMenu + \" --\u003e \");","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Chiamjiaen"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Chiamjiaen"},"content":"        //clears empty inputs","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"Chiamjiaen"},"content":"        while (input.trim().isEmpty()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"            System.out.print(requestMenu + \" --\u003e \");","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Chiamjiaen"},"content":"            input \u003d scanner.nextLine();","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Chiamjiaen"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Chiamjiaen"},"content":"        //clears greedy white spaces","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"Chiamjiaen"},"content":"        return input.replaceAll(\"\\\\s+\", \" \").trim();","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    public static int findMax(String[] commands) {","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"        int max \u003d 0;","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c commands.length; i++) {","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"            if (commands[i].length() \u003e max) {","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"                max \u003d commands[i].length();","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"        return max;","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"    public static String smartCommandRecognition(String[] commands, String input) {","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"        // To store the most similar command difference score and the index","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"        int diff \u003d LARGE_NUMBER;","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"        int index \u003d -1;","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"        int maxLengthCommand \u003d findMax(commands);","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"        List\u003cString\u003e list \u003d Arrays.asList(commands);","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"        // If the input exactly matches any command in the list of commands","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"        if (list.contains(input)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"            return input;","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"        // If the input is too large/too small","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"        if (input.length() \u003e\u003d maxLengthCommand + ALLOWANCE || input.length() \u003c 1) {","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"            return UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"        int temp;","lastModifiedDate":"2021-04-06"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c commands.length; i++) {","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"            temp \u003d checkCommandDifference(commands[i], input);","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"            if (temp \u003c diff) {","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"                diff \u003d temp;","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"                index \u003d i;","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"        // When input is not remotely similar to any given command","lastModifiedDate":"2021-04-06"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"        if (diff \u003d\u003d 100) {","lastModifiedDate":"2021-04-06"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"            return UNKNOWN_COMMAND;","lastModifiedDate":"2021-04-06"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"        // Checks if user meant for the recognised command","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"        if (isTypo(commands[index])) {","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"            return commands[index];","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        return UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"    public static boolean contains(char[] array, char input) {","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"        for (char c : array) {","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"            if (input \u003d\u003d c) {","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"                return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"        return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"    public static int checkCommandDifference(String expected, String actual) {","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"        char[] first \u003d expected.toLowerCase().toCharArray();","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"        char[] second \u003d actual.toLowerCase().toCharArray();","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"        Arrays.sort(first);","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"        Arrays.sort(second);","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"        int numDiff \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"        int lengthDiff \u003d abs(first.length - second.length);","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"        if (lengthDiff \u003e 2) {","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"            return LARGE_NUMBER;","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"        if (second.length \u003e\u003d first.length) {","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"            while (i \u003c first.length) {","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"                if (!contains(first, second[i])) {","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"                    numDiff++;","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"                i++;","lastModifiedDate":"2021-03-22"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"            while (i \u003c second.length - 1) {","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"                if (first[i] !\u003d (second[i]) \u0026\u0026 lengthDiff \u003e 0) {","lastModifiedDate":"2021-03-22"},{"lineNumber":118,"author":{"gitId":"NoorSarrah"},"content":"                    i++;","lastModifiedDate":"2021-04-11"},{"lineNumber":119,"author":{"gitId":"NoorSarrah"},"content":"                    numDiff++;","lastModifiedDate":"2021-04-11"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"                    lengthDiff--;","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"                    continue;","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"                } else if (first[i] !\u003d second[i]) {","lastModifiedDate":"2021-03-22"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"                    numDiff++;","lastModifiedDate":"2021-03-22"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"                i++;","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"        return max(lengthDiff, numDiff);","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":130,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"    public static String cleanseInput(String input) {","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"        return  input.replaceAll(\"[^a-zA-Z0-9\\\\s]\", \"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"blank-bank"},"content":"    public static void invalidCommandErrorMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":136,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"OOPS! I cant recognize that command! \");","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":138,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"    public static void noCommandErrorMessage() {","lastModifiedDate":"2021-03-17"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"OOPS! There is no command entered! \");","lastModifiedDate":"2021-03-17"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"    public static void invalidFormatErrorMessage() {","lastModifiedDate":"2021-03-22"},{"lineNumber":144,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"OOPS! Please check to see if your command is properly formatted! \");","lastModifiedDate":"2021-03-11"},{"lineNumber":145,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"    public static void showLine() {","lastModifiedDate":"2021-03-17"},{"lineNumber":148,"author":{"gitId":"blank-bank"},"content":"        System.out.println(Constants.LINEBREAK);","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":151,"author":{"gitId":"blank-bank"},"content":"    public static void showLongLine() {","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(Constants.LISTLINEBREAK);","lastModifiedDate":"2021-04-04"},{"lineNumber":153,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":154,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"    public static void printEmptyLine() {","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":159,"author":{"gitId":"Chiamjiaen"},"content":"    public static void printWelcome() {","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Welcome to \\n\" + Constants.LOGO);","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"Chiamjiaen"},"content":"        showLine();","lastModifiedDate":"2021-03-18"},{"lineNumber":162,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"Chiamjiaen"},"content":"    public static void printStartMenu() {","lastModifiedDate":"2021-03-11"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":168,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"blank-bank"},"content":"        int[] lengthPara \u003d {15,40,10};","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{HELP_HEADER_COMMAND, HELP_HEADER_DESCRIPTION, HELP_HEADER_FORMAT}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":"        UI.showLongLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{TO_STAFF_INSTANCE, TO_STAFF_INSTANCE_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{TO_PATIENT_INSTANCE, TO_PATIENT_INSTANCE_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{TO_APPOINTMENTS_INSTANCE, TO_APPOINTMENTS_INSTANCE_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{TO_SCHEDULES_INSTANCE, TO_SCHEDULES_INSTANCE_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{TO_INVENTORY_INSTANCE, TO_INVENTORY_INSTANCE_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{HELP_COMMAND, HELP_COMMAND_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"        printer(new String[]{EXIT_COMMAND, EXIT_COMMAND_DESCRIPTION, MARK_BLANK}, lengthPara);","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"        UI.printEmptyLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":182,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":183,"author":{"gitId":"blank-bank"},"content":"    public static void printGoodbye() {","lastModifiedDate":"2021-03-17"},{"lineNumber":184,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Goodbye! Have a nice day!\");","lastModifiedDate":"2021-03-11"},{"lineNumber":185,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":186,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":187,"author":{"gitId":"Chiamjiaen"},"content":"    public static void returningToStartMenuMessage() {","lastModifiedDate":"2021-03-18"},{"lineNumber":188,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"Returning to start menu!\");","lastModifiedDate":"2021-03-18"},{"lineNumber":189,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":190,"author":{"gitId":"NoorSarrah"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":191,"author":{"gitId":"blank-bank"},"content":"    public static void unidentifiedErrorMessage() {","lastModifiedDate":"2021-04-02"},{"lineNumber":192,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Something went wrong!\\n\");","lastModifiedDate":"2021-04-02"},{"lineNumber":193,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":194,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":195,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":196,"author":{"gitId":"Chiamjiaen"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-03-11"},{"lineNumber":197,"author":{"gitId":"Chiamjiaen"},"content":"        System.out.println(\"OOPS! There was an error loading the file!\");","lastModifiedDate":"2021-03-11"},{"lineNumber":198,"author":{"gitId":"Chiamjiaen"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":199,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":200,"author":{"gitId":"blank-bank"},"content":"    public static String prettyPrint(String string, int length) {","lastModifiedDate":"2021-03-17"},{"lineNumber":201,"author":{"gitId":"blank-bank"},"content":"        return String.format(\"%1$-\" + length + \"s\", string);","lastModifiedDate":"2021-03-17"},{"lineNumber":202,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"blank-bank"},"content":"    public static void printer(String[] string, int[] length) {","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"blank-bank"},"content":"        for (int i \u003d 0; i \u003c length.length; i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"blank-bank"},"content":"            System.out.print(prettyPrint(string[i], length[i]));","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"blank-bank"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"blank-bank"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"blank-bank"},"content":"    public static boolean isTypo(String command) {","lastModifiedDate":"2021-03-22"},{"lineNumber":212,"author":{"gitId":"blank-bank"},"content":"        System.out.println(\"Do you mean \\\"\" + command + \"\\\" (y/n)\");","lastModifiedDate":"2021-03-22"},{"lineNumber":213,"author":{"gitId":"blank-bank"},"content":"        return scanInput().equals(\"y\");","lastModifiedDate":"2021-03-22"},{"lineNumber":214,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":215,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":216,"author":{"gitId":"AlexanderTanJunAn"},"content":"    public void lineBreak() {","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"AlexanderTanJunAn"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":219,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":220,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"NoorSarrah":4,"MingShun98":3,"Chiamjiaen":57,"AlexanderTanJunAn":6,"blank-bank":150}},{"path":"src/test/java/seedu/doctorappointments/DoctorAppointmentCheckerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"MingShun98"},"content":"package seedu.doctorappointments;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"MingShun98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"MingShun98"},"content":"import seedu.model.doctorappointment.AppointmentList;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"MingShun98"},"content":"import seedu.logic.errorchecker.DoctorAppointmentChecker;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"MingShun98"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"MingShun98"},"content":"public class DoctorAppointmentCheckerTest {","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"MingShun98"},"content":"    public void testValidAppointmentId() {","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"MingShun98"},"content":"        String Id \u003d \"A12345\";","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"MingShun98"},"content":"        assertDoesNotThrow(() -\u003e DoctorAppointmentChecker.checkAptID(Id));","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"MingShun98"},"content":"    public void testInvalidName() {","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"MingShun98"},"content":"        String name \u003d \"App.le\";","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"MingShun98"},"content":"        String path \u003d \"name\";","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"MingShun98"},"content":"        String message \u003d \"You have an illegal character in your: name\";","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentChecker.illegalCharacterChecker(name, path);","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"MingShun98"},"content":"            fail();","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"MingShun98"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"MingShun98"},"content":"            assertEquals(message, e.getMessage());","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"MingShun98"},"content":"    public void testValidId() {","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"MingShun98"},"content":"        String doctorId \u003d \"D12345\";","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"MingShun98"},"content":"        String appointmentId \u003d \"A12345\";","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"MingShun98"},"content":"        assertDoesNotThrow(() -\u003e DoctorAppointmentChecker.checkID(doctorId, appointmentId));","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"MingShun98"},"content":"    public void ValidGender() {","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"MingShun98"},"content":"        boolean output \u003d DoctorAppointmentChecker.isValidGender(\"M\");","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"MingShun98"},"content":"        assertTrue(output);","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"MingShun98"},"content":"    void testValidDate() {","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"MingShun98"},"content":"        String datetime \u003d \"30012020\";","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"MingShun98"},"content":"        assertDoesNotThrow(() -\u003e DoctorAppointmentChecker.checkValidDate(datetime));","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"MingShun98"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"MingShun98"},"content":"    void testInvalidDate() {","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"MingShun98"},"content":"        String datetime \u003d \"091283109823092830\";","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"MingShun98"},"content":"        String message \u003d \"The date format is invalid!\";","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"MingShun98"},"content":"        try {","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"MingShun98"},"content":"            DoctorAppointmentChecker.checkValidDate(datetime);","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"MingShun98"},"content":"            fail();","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"MingShun98"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"MingShun98"},"content":"            assertEquals(message, e.getMessage());","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"MingShun98"},"content":"        }","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"MingShun98"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"MingShun98"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"MingShun98"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"MingShun98":62}},{"path":"src/test/java/seedu/nurseschedules/NurseScheduleCheckerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.nurseschedules;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.logic.errorchecker.NurseScheduleChecker;","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-02"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"class NurseScheduleCheckerTest {","lastModifiedDate":"2021-04-02"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    NurseScheduleChecker checker \u003d new NurseScheduleChecker();","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testValidDate() {","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String datetime \u003d \"30012020\";","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertDoesNotThrow(() -\u003e checker.isValidDate(datetime));","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidDate() {","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String datetime \u003d \"091283109823092830\";","lastModifiedDate":"2021-04-02"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String message \u003d \"The date format is invalid!\";","lastModifiedDate":"2021-04-02"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"            checker.isValidDate(datetime);","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"            fail();","lastModifiedDate":"2021-04-02"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"            assertEquals(message, e.getMessage());","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testCheckNonEmptyInput() {","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String input \u003d \"add/test/input\";","lastModifiedDate":"2021-04-02"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertDoesNotThrow(() -\u003e NurseScheduleChecker.checkEmptyInput(input));","lastModifiedDate":"2021-04-02"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testCheckEmptyInput() {","lastModifiedDate":"2021-04-02"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-04-02"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(NoInputException.class,","lastModifiedDate":"2021-04-02"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003eNurseScheduleChecker.checkEmptyInput(input));","lastModifiedDate":"2021-04-02"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testValidNurseID() {","lastModifiedDate":"2021-04-02"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"N12345\";","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertDoesNotThrow(() -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidNurseID_WrongLength() {","lastModifiedDate":"2021-04-02"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"N123456789\";","lastModifiedDate":"2021-04-02"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidNurseID_WrongIdentifier() {","lastModifiedDate":"2021-04-02"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"A12345\";","lastModifiedDate":"2021-04-02"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":63,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":64,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":65,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":66,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidNurseID_WrongData() {","lastModifiedDate":"2021-04-02"},{"lineNumber":67,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"NABCDE\";","lastModifiedDate":"2021-04-02"},{"lineNumber":68,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":70,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":71,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":72,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":73,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidPatientID_WrongLength() {","lastModifiedDate":"2021-04-02"},{"lineNumber":74,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"P123456789\";","lastModifiedDate":"2021-04-02"},{"lineNumber":75,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":77,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":78,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":79,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidPatientID_WrongIdentifier() {","lastModifiedDate":"2021-04-02"},{"lineNumber":81,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"A12345\";","lastModifiedDate":"2021-04-02"},{"lineNumber":82,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":84,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":85,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":86,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":87,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testInvalidPatientID_WrongData() {","lastModifiedDate":"2021-04-02"},{"lineNumber":88,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String userID \u003d \"PABCDE\";","lastModifiedDate":"2021-04-02"},{"lineNumber":89,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e NurseScheduleChecker.checkValidNurseID(userID));","lastModifiedDate":"2021-04-02"},{"lineNumber":91,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":92,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"AlexanderTanJunAn":92}},{"path":"src/test/java/seedu/nurseschedules/NurseScheduleListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.nurseschedules;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.nurseschedules.InvalidiDTypeException;","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.model.nurseschedule.NurseScheduleList;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-02"},{"lineNumber":8,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":9,"author":{"gitId":"AlexanderTanJunAn"},"content":"class NurseScheduleListCommandTest {","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"    NurseScheduleList actions \u003d new NurseScheduleList();","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"    //ArrayList\u003cNurseSchedule\u003e nurseSchedules \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testAddInvalidInput() {","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] details \u003d {\"N123456\", \"P12345\", \"30012020\"};","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertThrows(InvalidiDTypeException.class,","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"                () -\u003e actions.addSchedule(details));","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"AlexanderTanJunAn":18,"blank-bank":2}},{"path":"src/test/java/seedu/nurseschedules/NurseSchedulesParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AlexanderTanJunAn"},"content":"package seedu.nurseschedules;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"AlexanderTanJunAn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.ExcessInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InsufficientInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.InvalidDateException;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"AlexanderTanJunAn"},"content":"import seedu.exceptions.NoInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.nurseschedules.WrongInputsException;","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.IllegalCharacterException;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.NurseSchedulesParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"AlexanderTanJunAn"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"AlexanderTanJunAn"},"content":"class NurseSchedulesParserTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testGetFirstWord() {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseSchedulesParser parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertEquals(\"test\", parser.getFirstWord(\"test/get/first/word\"));","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testGetDetails() throws WrongInputsException, NoInputException, InsufficientInputException, ExcessInputException, IllegalCharacterException, InvalidDateException {","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseSchedulesParser parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] details;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"AlexanderTanJunAn"},"content":"        details \u003d parser.getDetails(\"ADD/N12345/P12345/30012020\", \"add\");","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertNull(details[0]);","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testGetDetails_WrongInputs() {","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseSchedulesParser parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String[] details;","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"AlexanderTanJunAn"},"content":"            details \u003d parser.getDetails(\"wrong\", \"wrong\");","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"AlexanderTanJunAn"},"content":"            assertEquals(\"wrong\", details[0]);","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"AlexanderTanJunAn"},"content":"            fail();","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"AlexanderTanJunAn"},"content":"            assertEquals(\"OOPS! Please check to see if your command is properly formatted!\", e.getMessage());","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testFormatDate() throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"AlexanderTanJunAn"},"content":"        NurseSchedulesParser parser \u003d new NurseSchedulesParser();","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String input \u003d \"20032021\";","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"AlexanderTanJunAn"},"content":"        assertEquals(\"20/03/2021\", NurseSchedulesParser.formatDate(input));","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"AlexanderTanJunAn"},"content":"    void testFormatDate_WrongDate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String input \u003d \"20003020210\";","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"AlexanderTanJunAn"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"AlexanderTanJunAn"},"content":"            String datetime \u003d NurseSchedulesParser.formatDate(input);","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"AlexanderTanJunAn"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"AlexanderTanJunAn"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"AlexanderTanJunAn"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"AlexanderTanJunAn"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"AlexanderTanJunAn":58,"blank-bank":3}},{"path":"src/test/java/seedu/patient/PatientParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Chiamjiaen"},"content":"package seedu.patient;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"Chiamjiaen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.model.patient.PatientList;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.PatientParser;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"Chiamjiaen"},"content":"public class PatientParserTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"Chiamjiaen"},"content":"    private PatientParser parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"    private PatientList patients;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"    public void testReturnCommand() throws HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"        Command output \u003d parser.patientParse(\"return\", patients);","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"AlexanderTanJunAn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"AlexanderTanJunAn"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    public void testAddPatientNegative() throws HealthVaultException {","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String input \u003d \"add X12345 Johnny 30 M Covid19 Paracetamol\";","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"AlexanderTanJunAn"},"content":"        String expected \u003d \"OOPS! Looks like your ID type is incorrect! \\n\" +","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"AlexanderTanJunAn"},"content":"                \"Please ensure that the ID starts with \\\"P\\\"!\";","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"        Command output \u003d parser.patientParse(input, patients);","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"AlexanderTanJunAn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Chiamjiaen"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"Chiamjiaen"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"Chiamjiaen":10,"AlexanderTanJunAn":8,"blank-bank":9}},{"path":"src/test/java/seedu/staff/StaffCheckerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.staff;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.staff.WrongStaffIdException;","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.errorchecker.StaffChecker;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.Staff;","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"public class StaffCheckerTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    private final StaffChecker staffChecker;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"    public StaffCheckerTest() {","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"        this.staffChecker \u003d new StaffChecker();","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"    public void isSameInt_intOneAndStringOne_trueReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"        assertTrue(staffChecker.isSameInt(1,\"1\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"    public void isSameInt_intOneAndStringTwo_falseReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"        assertFalse(staffChecker.isSameInt(1,\"2\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    public void isSameInt_intOneAndStringCharacter_falseReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"        assertFalse(staffChecker.isSameInt(1,\"a\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    public void checkStaffID_negativeNumberSectionInID_WrongStaffIDExceptionReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"        WrongStaffIdException exception \u003d assertThrows(WrongStaffIdException.class, () -\u003e {","lastModifiedDate":"2021-04-11"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"            staffChecker.checkStaffID(\"D-1234\");","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        });","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"    public void checkStaffDataForStorage_insufficientStaffID_HealthVaultReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"        ArrayList\u003cStaff\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e {","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"            staffChecker.checkValidDataFromStorage(\"D1234|Owen|23|Surgeon\", list);","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"        });","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"    public void checkStaffDataForStorage_blankInput_HealthVaultReturned() {","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"        ArrayList\u003cStaff\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e {","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"            staffChecker.checkValidDataFromStorage(\"D1234| |23|Surgeon\", list);","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"        });","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"blank-bank":65}},{"path":"src/test/java/seedu/staff/StaffParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"blank-bank"},"content":"package seedu.staff;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"blank-bank"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"blank-bank"},"content":"import seedu.exceptions.HealthVaultException;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.Command;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.command.staff.*;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"blank-bank"},"content":"import seedu.logic.parser.StaffParser;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"blank-bank"},"content":"import seedu.model.staff.StaffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"blank-bank"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"blank-bank"},"content":"public class StaffParserTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"blank-bank"},"content":"    private StaffParser parser;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"blank-bank"},"content":"    private StaffList staffList;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"blank-bank"},"content":"    public StaffParserTest() {","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"blank-bank"},"content":"        this.parser \u003d new StaffParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"blank-bank"},"content":"        this.staffList \u003d new StaffList();","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_lowerBoundaryAgeForAddCommand_staffAddCommandReturned()","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"blank-bank"},"content":"            throws HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"add/D12345/Owen/18/Surgeon\", staffList);","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffAddCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_upperBoundaryAgeForAddCommand_staffAddCommandReturned()","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"blank-bank"},"content":"            throws HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"add/D12345/Owen/150/Surgeon\", staffList);","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffAddCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_excessLengthStaffID_wrongStaffIdExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D123456/Owen/20/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_insufficientLengthStaffID_wrongStaffIdExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D1234/Owen/20/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_whitespaceStaffID_wrongStaffIdExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/ /Owen/20/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_noStaffID_wrongStaffIdExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":59,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add//Owen/20/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_illegalCharactersInName_illegalCharacterExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D12345/Owen./20/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"You have an illegal character in your: name\");","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_illegalCharactersInSpecialisation_illegalCharacterExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D12345/Owen/20/Surgeon.\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"You have an illegal character in your: specialisation\");","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_excessInputFields_excessInputExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D12345/Owen/20/Sur/geon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"OOPS! There are too many inputs for this command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_ageLessThan18_invalidStaffAgeExceptionReturned() {","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"add/D12345/Owen/17/Surgeon\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":85,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Your age input is invalid! \\n\" +","lastModifiedDate":"2021-04-08"},{"lineNumber":86,"author":{"gitId":"blank-bank"},"content":"                \"Please ensure that the age is an integer between 18 and 150 inclusive!\");","lastModifiedDate":"2021-04-08"},{"lineNumber":87,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":88,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":91,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"blank-bank"},"content":"    public void commandHandler_validListCommand_staffListCommandReturned() throws HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":93,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"help\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffHelpCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":98,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":99,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":100,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":101,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"blank-bank"},"content":"    public void ValidListAllCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"list\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffListCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":109,"author":{"gitId":"blank-bank"},"content":"    public void invalidListCommand1() {","lastModifiedDate":"2021-04-08"},{"lineNumber":110,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":111,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"list/ /\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":112,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Invalid List command parameter\\n\" +","lastModifiedDate":"2021-04-08"},{"lineNumber":113,"author":{"gitId":"blank-bank"},"content":"                \"Please input with the either of the following format:\\n\\tlist\\n\\tlist/nurses\\n\\tlist/doctors\");","lastModifiedDate":"2021-04-08"},{"lineNumber":114,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":115,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":116,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":117,"author":{"gitId":"blank-bank"},"content":"    public void invalidListCommand2() {","lastModifiedDate":"2021-04-08"},{"lineNumber":118,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":119,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"list/invalid/\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":120,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Invalid List command parameter\\n\" +","lastModifiedDate":"2021-04-08"},{"lineNumber":121,"author":{"gitId":"blank-bank"},"content":"                \"Please input with the either of the following format:\\n\\tlist\\n\\tlist/nurses\\n\\tlist/doctors\");","lastModifiedDate":"2021-04-08"},{"lineNumber":122,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":123,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":125,"author":{"gitId":"blank-bank"},"content":"    public void invalidListCommand3() {","lastModifiedDate":"2021-04-08"},{"lineNumber":126,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":127,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"list/doctors/invalid/\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"OOPS! There are too many inputs for this command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":129,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":130,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":131,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":133,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":134,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":135,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"blank-bank"},"content":"    public void ValidListNurseCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":137,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"list/nurses\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":139,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffListCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":140,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"blank-bank"},"content":"    public void ValidListDoctorCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"list/doctors\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffListCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":146,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":149,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":150,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"blank-bank"},"content":"    public void ValidReturnCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"return\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffReturnCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":158,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":159,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":160,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"blank-bank"},"content":"    public void ValidDeleteCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":162,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"delete/D12345\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":164,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffDeleteCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":168,"author":{"gitId":"blank-bank"},"content":"    public void invalidDeleteCommand1() {","lastModifiedDate":"2021-04-08"},{"lineNumber":169,"author":{"gitId":"blank-bank"},"content":"        HealthVaultException exception \u003d assertThrows(HealthVaultException.class, () -\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":170,"author":{"gitId":"blank-bank"},"content":"                this.parser.commandHandler(\"delete/D1234/\", staffList));","lastModifiedDate":"2021-04-08"},{"lineNumber":171,"author":{"gitId":"blank-bank"},"content":"        assertEquals(exception.getMessage(), \"Error in Staff ID input\\nPlease input with the following format [D/N][5 digit ID number]\");","lastModifiedDate":"2021-04-08"},{"lineNumber":172,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":173,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":174,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":175,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":176,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":177,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":178,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"blank-bank"},"content":"    public void ValidFindCommand() throws HealthVaultException {","lastModifiedDate":"2021-04-07"},{"lineNumber":180,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"find/D12345\", staffList);","lastModifiedDate":"2021-04-07"},{"lineNumber":182,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffFindCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":183,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":185,"author":{"gitId":"blank-bank"},"content":"    public void ValidFindCommand2() throws HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":186,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-04-08"},{"lineNumber":187,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"find/19\", staffList);","lastModifiedDate":"2021-04-08"},{"lineNumber":188,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffFindCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":189,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":190,"author":{"gitId":"blank-bank"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":191,"author":{"gitId":"blank-bank"},"content":"    public void ValidFindCommand3() throws HealthVaultException {","lastModifiedDate":"2021-04-08"},{"lineNumber":192,"author":{"gitId":"blank-bank"},"content":"        Command c;","lastModifiedDate":"2021-04-08"},{"lineNumber":193,"author":{"gitId":"blank-bank"},"content":"        c \u003d this.parser.commandHandler(\"find/Owen\", staffList);","lastModifiedDate":"2021-04-08"},{"lineNumber":194,"author":{"gitId":"blank-bank"},"content":"        assertTrue(c instanceof StaffFindCommand);","lastModifiedDate":"2021-04-09"},{"lineNumber":195,"author":{"gitId":"blank-bank"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":196,"author":{"gitId":"blank-bank"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":197,"author":{"gitId":"blank-bank"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"blank-bank":197}}]
