[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version.","lastModifiedDate":"2020-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/main/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   \u003e Task :compileJava","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   \u003e Task :processResources NO-SOURCE","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   \u003e Task :classes","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   \u003e Task :Duke.main()","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   What is your name?","lastModifiedDate":"2020-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Type some word and press enter to let the execution proceed to the end.","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Build automation using Gradle","lastModifiedDate":"2020-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file).","lastModifiedDate":"2020-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Testing","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"### I/O redirection tests","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script.","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"### JUnit tests","lastModifiedDate":"2020-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"* A skeleton JUnit test (`src/test/java/seedu/main/DukeTest.java`) is provided with this project template. ","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Checkstyle","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* A sample CheckStyle rule configuration is provided in this project.","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html).","lastModifiedDate":"2020-06-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"## CI using GitHub Actions","lastModifiedDate":"2020-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR.","lastModifiedDate":"2020-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Documentation","lastModifiedDate":"2020-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"`/docs` folder contains a skeleton version of the project documentation.","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Steps for publishing documentation to the public: ","lastModifiedDate":"2020-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   If you are using this project template for a team project, go to the team fork on GitHub.","lastModifiedDate":"2020-05-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. Click on the `settings` tab.","lastModifiedDate":"2020-05-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"1. Scroll down to the `GitHub Pages` section.","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"1. Set the `source` as `master branch /docs folder`.","lastModifiedDate":"2020-05-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Optionally, use the `choose a theme` button to choose a theme for your documentation.","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"iamakilahamed":2,"-":62}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    implementation \u0027com.google.code.gson:gson:2.8.6\u0027","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"    mainClassName \u003d \"seedu.duke.Main\"","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"iamakilahamed":1,"sarzorwyn":15,"hussain1998":2,"-":45}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"![](images/Hussain.png) | H Mohamed Hussain | [Github](https://github.com/hussain1998) | [Portfolio](docs/team/hussain.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"![](images/Jon.png) | Jonathan K | [Github](https://github.com/JonathanKhooTY) | [Portfolio](docs/team/jonathankhooty.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"![](images/Wenfeng.png) | Wen Feng | [Github](https://github.com/limwenfeng/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"![](images/Ivan.png) | Ivan Tan | [Github](https://github.com/sarzorwyn) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"![](images/Akil.png) | Akil | [Github](https://github.com/iamakilahamed) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-04-11"}],"authorContributionMap":{"JonathanKhooTY":5,"-":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"# Control Your Crowd - Developer Guide","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"* [Setting up](DeveloperGuide.md#setting-up)","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"* [Design](DeveloperGuide.md#design)","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    * [Architecture](DeveloperGuide.md#architecture)","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"    * [UI component](DeveloperGuide.md#ui-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    * [Logic component](DeveloperGuide.md#logic-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"    * [Model component](DeveloperGuide.md#model-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"    * [Storage component](DeveloperGuide.md#storage-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    * [Common classes](DeveloperGuide.md#common-classes)","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"* [Implementation](DeveloperGuide.md#implementation)","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"* [Documentation](DeveloperGuide.md#documentation)","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"* [Testing](DeveloperGuide.md#testing)","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"* [Dev Ops](DeveloperGuide.md#dev-ops)","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"* [Appendix](DeveloperGuide.md#appendix)","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    * [Appendix A: Product Scope](DeveloperGuide.md#appendix-a-product-scope)","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"        * [Target user profile](DeveloperGuide.md#target-user-profile)","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        * [Value proposition](DeveloperGuide.md#value-proposition)","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    * [Appendix B: User Stories](DeveloperGuide.md#appendix-b-user-stories)","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    * [Appendix C: Non Functional Requirements](DeveloperGuide.md#appendix-d-non-functional-requirements)","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    * [Appendix D: Glossary](DeveloperGuide.md#appendix-e-glossary)","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    * [Appendix E: Instructions for Manual Testing](DeveloperGuide.md#appendix-f-instructions-for-manual-testing)","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"        * [Launching CYC](DeveloperGuide.md#launching-cyc)","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"        * [Check in a visitor](DeveloperGuide.md#check-in-a-visitor)","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"        * [Check out a visitor](DeveloperGuide.md#check-out-a-visitor)  ","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"        * [Clearing all visitors](DeveloperGuide.md#clearing-all-visitor)","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"        * [Editing maximum capacity](DeveloperGuide.md#editing-maximum-capacity)","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"        * [Finding a visitor](DeveloperGuide.md#finding-a-visitor)","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"        * [Help](DeveloperGuide.md#help)","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"        * [Listing checked in visitors](DeveloperGuide.md#listing-checked-in-visitors)","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"        * [Listing all visitors](DeveloperGuide.md#listing-all-visitors)","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"        * [Moving storage location](DeveloperGuide.md#moving-storage-location)","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"        * [Exiting CYC](DeveloperGuide.md#exiting-cyc)","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"## Setting up","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"The instructions for setting up can be [found here](SettingUp.md).","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"## Design","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"### Architecture","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"![Architecture](images/Architecture.png)","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"*Figure #. Architecture Diagram*","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"The ***Architecture Diagram*** shown above explains the high-level design of Control Your Crowd (CYC) application.","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"Below is a quick overview of each component.","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"`Main` is a class that is critical to starting the application proper, as well as exiting it:","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"* At app launch: Retrieves memory and saved log files (If available), initializes components in correct sequence,","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"  and connects them with each other.","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":"* At shut down: It saves the log file to storage, and shuts down all components.","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"`Common` consists of a class of messages used by multiple components.","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"* `Messages` consists of a list of messages that will be displayed to the users, for various reasons such as error handling","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"  and user notification.","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"The rest of Control-Your-Crowd (CYC) consist of four components.","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"* `UI`: The user interface of the application, and the entry point from the user.","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"* `Logic`: The command executor for CYC.","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"JonathanKhooTY"},"content":"* `Model` : Holds the in-App data, such as the details of the user, and their checked-in/checked-out status.","lastModifiedDate":"2021-04-03"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":67,"author":{"gitId":"JonathanKhooTY"},"content":"* `Storage`: Reads and writes data from the hard disk to CYC.","lastModifiedDate":"2021-04-03"},{"lineNumber":68,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":69,"author":{"gitId":"iamakilahamed"},"content":"#### How the architecture components interact with each other","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"iamakilahamed"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"iamakilahamed"},"content":"the command `clear`.","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"iamakilahamed"},"content":"![](images/ComponentsInteractionsDiagram.png?raw\u003dtrue \"Component interactions for clear command\")","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"iamakilahamed"},"content":"*Figure #. Component interactions for `clear` command*","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"### UI component","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"![](images/UIComponentStructure.png?raw\u003dtrue \"Logic component Sequence Diagram for clear\")","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"The UI consists of `TextUi` class. It acts as a middleware between users\u0027 input","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"and `Parser` class under **Logic Component**.","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"iamakilahamed"},"content":"The `UI` component,","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"* Reads user commands using `Scanner` class.","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"* Pass raw user commands into `Parser` class under **Logic Component**.","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":"* After the **Logic Component** has executed the function, it will then return `CommandOutput` object","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"  which contains the outcome of the execution, fail or succeed.","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"iamakilahamed"},"content":"### Logic component","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"iamakilahamed"},"content":"![](images/LogicComponentStructure.png?raw\u003dtrue \"Structure of Logic Component\")","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"iamakilahamed"},"content":"*Figure #. Structure of the Logic Component*","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"iamakilahamed"},"content":"**API** : [`seedu.duke.logic`](https://github.com/AY2021S2-CS2113T-T09-1/tp/tree/master/src/main/java/seedu/duke/logic) package","lastModifiedDate":"2021-04-08"},{"lineNumber":96,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"iamakilahamed"},"content":"The Logic component,","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"limwenfeng"},"content":"1. Uses the `Parser` class to parse the user input obtained by the `TextUi` class of `UI`.","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"iamakilahamed"},"content":"2. This results in a specific `Command` object to be returned from the `Parser` class.","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"iamakilahamed"},"content":"3. Depending on the type of the `Command` object, its corresponding command execution will be called by `Main` class.","lastModifiedDate":"2021-04-08"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"4. Some command execution affects the data in `Model` (e.g. clearing the list).","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"iamakilahamed"},"content":"5. The result of the command execution is encapsulated as a `CommandOutput` object which is passed back to the `TextUi`.","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"iamakilahamed"},"content":"6. In addition, the `CommandOutput` object can also instruct the `TextUi` to perform certain actions, such as displaying the list to the user.","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"iamakilahamed"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `parseCommand(\"clear)\"` API call.","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"iamakilahamed"},"content":"![](images/LogicComponentSequenceDiagram.png?raw\u003dtrue \"Logic component Sequence Diagram for clear\")","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"iamakilahamed"},"content":"*Figure #. Interactions Inside the Logic Component for the `clear` Command*","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"### Model component","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"hussain1998"},"content":"**API** : [`seedu.cyc.model`](https://github.com/AY2021S2-CS2113T-T09-1/tp/tree/master/src/main/java/seedu/cyc/model) package","lastModifiedDate":"2021-04-11"},{"lineNumber":113,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"iamakilahamed"},"content":"![](images/ModelComponentStructure.png?raw\u003dtrue \"Model Component Structure\")","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":"*Figure #. Structure of the Model Component*","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"hussain1998"},"content":"The Model component,","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"hussain1998"},"content":"* contains a `Person` class which represents a person who checks in/out.","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"hussain1998"},"content":"* contains a `TrackingList` class which uses an ArrayList to keep track of all the `Person` objects who have currently checked in/out.","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":"* contains a `PersonLog` class which uses a HashMap to permanently store all the `Person` objects who have checked in before.","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"A `Person` object contains:","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"hussain1998"},"content":"* an `Id` object","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"hussain1998"},"content":"* a `Name` object","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"hussain1998"},"content":"* a `Phone` object","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"sarzorwyn"},"content":"### Storage component","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"limwenfeng"},"content":"**API** : [`seedu.cyc.storage`](https://github.com/AY2021S2-CS2113T-T09-1/tp/tree/master/src/main/java/seedu/cyc/storage) package","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"sarzorwyn"},"content":"![](images/storage_module.png?raw\u003dtrue \"Storage Module diagram\")","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"sarzorwyn"},"content":"The `Storage` component,","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"sarzorwyn"},"content":"* saves and encodes `Person` objects in `Tracking List` into a `.txt` file.","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"sarzorwyn"},"content":"* reads a `.txt` file of valid encoding and populates a `TrackingList`","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"sarzorwyn"},"content":"* records a log of all historical states of `TrackingList`","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"sarzorwyn"},"content":"* keeps a list of user setting in a `Config.properties` file which is read on launch","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"sarzorwyn"},"content":"* defaults to `TrackingList.txt` but can be saved at a custom specified location","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"sarzorwyn"},"content":"* loads on program startup automatically saves after each command","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"sarzorwyn"},"content":"The storage module uses the `StorageFile` class to store the `TrackingList` class from Model.","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"sarzorwyn"},"content":"`StorageFile` achieves this by using two helper classes, `TrackingListEncoder` and `TrackingListDecoder`.","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"sarzorwyn"},"content":"`StorageFile` is called by the main class after the execution of any `Command`.","lastModifiedDate":"2021-04-08"},{"lineNumber":146,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"sarzorwyn"},"content":"`TrackingListEncoder` takes the currently stored `TrackingList` and converts it to a more storage friendly String.","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"sarzorwyn"},"content":"This String is then written to a file on the disk, known on the diagram as `StoredTrackingList`.","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"sarzorwyn"},"content":"As the name suggests, `TrackingListDecoder` achieves the reverse by taking the file on drive, `StoredTrackingList`,","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"sarzorwyn"},"content":"and interprets the file to be loaded into the memory as a `TrackingList`.","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"sarzorwyn"},"content":"![](images/storage_pathdir.png?raw\u003dtrue \"Storage Module file structure\")","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"sarzorwyn"},"content":"`StoredTrackingList` is the `.txt` file stored in the same directory as the program.","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"sarzorwyn"},"content":"The location is determined by the `ConfigFile` class.","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"sarzorwyn"},"content":"`LogFile` takes the `TrackingList` every time the storage is updated","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"sarzorwyn"},"content":"and packages it into `json` formatted string.","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"sarzorwyn"},"content":"`LogFile` communicates with the disk by calling the methods","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"sarzorwyn"},"content":"`loadLogFile` and `saveLogFile` in the `StorageFile` class.","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"sarzorwyn"},"content":"`History` stores a record every time the `Command` `CheckIn` and `CheckOut` are successfully executed.","lastModifiedDate":"2021-04-08"},{"lineNumber":163,"author":{"gitId":"sarzorwyn"},"content":"It includes information about the `Person` details, `Time` the person checked in, and movement","lastModifiedDate":"2021-04-08"},{"lineNumber":164,"author":{"gitId":"sarzorwyn"},"content":"(whether the person was checked in or checked out)","lastModifiedDate":"2021-04-08"},{"lineNumber":165,"author":{"gitId":"sarzorwyn"},"content":"The data is stored in a `csv` format in `History.txt`.","lastModifiedDate":"2021-04-08"},{"lineNumber":166,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"sarzorwyn"},"content":"The program settings for the user is manged by the `ConfigFile` class.","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"sarzorwyn"},"content":"Another file, `settingsFile` is read by `ConfigFile` when the program is started,","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"sarzorwyn"},"content":"to load the settings into the program memory.","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"sarzorwyn"},"content":"When a change is made by the user, `ConfigFile` will update the `settingsFile` through a save function.","lastModifiedDate":"2021-03-28"},{"lineNumber":171,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":172,"author":{"gitId":"limwenfeng"},"content":"### Common classes","lastModifiedDate":"2021-03-22"},{"lineNumber":173,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":174,"author":{"gitId":"limwenfeng"},"content":"Classes used by multiple components are in the `seedu.cyc.commons` package.","lastModifiedDate":"2021-04-07"},{"lineNumber":175,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":176,"author":{"gitId":"iamakilahamed"},"content":"## Implementation","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"hussain1998"},"content":"This section describes some significant details on how certain features are implemented.","lastModifiedDate":"2021-04-11"},{"lineNumber":178,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":179,"author":{"gitId":"hussain1998"},"content":"### Visitor Log feature","lastModifiedDate":"2021-04-11"},{"lineNumber":180,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":181,"author":{"gitId":"hussain1998"},"content":"The visitor log feature is implemented using two classes, `PersonLog` class and `LogFile` class. `PersonLog` provides","lastModifiedDate":"2021-04-11"},{"lineNumber":182,"author":{"gitId":"hussain1998"},"content":"a runtime storage while `LogFile` provides a long term storage. Only the `PersonLog` class provides the API for","lastModifiedDate":"2021-04-11"},{"lineNumber":183,"author":{"gitId":"hussain1998"},"content":"the Visitor Log feature. So, other classes should only access the `PersonLog`\u0027s methods.","lastModifiedDate":"2021-04-11"},{"lineNumber":184,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":185,"author":{"gitId":"hussain1998"},"content":"#### PersonLog","lastModifiedDate":"2021-04-11"},{"lineNumber":186,"author":{"gitId":"hussain1998"},"content":"`PersonLog` uses a Java HashMap to store the details of a `Person` object. It uses a visitor\u0027s identification number, ","lastModifiedDate":"2021-04-11"},{"lineNumber":187,"author":{"gitId":"hussain1998"},"content":"`Id` object, as a key to the HashMap.","lastModifiedDate":"2021-04-11"},{"lineNumber":188,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":189,"author":{"gitId":"hussain1998"},"content":"Additionally, it implements the following operations:","lastModifiedDate":"2021-04-11"},{"lineNumber":190,"author":{"gitId":"hussain1998"},"content":"* `addPerson(Person object)` - Adds a `Person` object into the HashMap.","lastModifiedDate":"2021-04-11"},{"lineNumber":191,"author":{"gitId":"hussain1998"},"content":"* `findPerson(Id obect)` - Returns a `Person` object if found.","lastModifiedDate":"2021-04-11"},{"lineNumber":192,"author":{"gitId":"hussain1998"},"content":"* `saveAllPersons()` - Saves all the visitor\u0027s information into the `LogFile`.","lastModifiedDate":"2021-04-11"},{"lineNumber":193,"author":{"gitId":"hussain1998"},"content":"* `loadAllPersons()` - Load all the visitor\u0027s information from the `LogFile`.","lastModifiedDate":"2021-04-11"},{"lineNumber":194,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":195,"author":{"gitId":"hussain1998"},"content":"#### LogFile","lastModifiedDate":"2021-04-11"},{"lineNumber":196,"author":{"gitId":"hussain1998"},"content":"`LogFile` uses Google\u0027s [`Gson`](https://github.com/google/gson) Java library to convert between a `Person` object and ","lastModifiedDate":"2021-04-11"},{"lineNumber":197,"author":{"gitId":"hussain1998"},"content":"its JSON representation. It then uses a `StorageFile` object to write or load the JSON representation from the disk. ","lastModifiedDate":"2021-04-11"},{"lineNumber":198,"author":{"gitId":"hussain1998"},"content":"All the visitor details are saved in `LogFile.txt`.","lastModifiedDate":"2021-04-11"},{"lineNumber":199,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":200,"author":{"gitId":"hussain1998"},"content":"Additionally, it implements the following operations to be used by `PersonLog`:","lastModifiedDate":"2021-04-11"},{"lineNumber":201,"author":{"gitId":"hussain1998"},"content":"* `saveAllPersons(ArrayList\u003cPerson\u003e object)` - Converts all the `Person` objects given into JSON representation and ","lastModifiedDate":"2021-04-11"},{"lineNumber":202,"author":{"gitId":"hussain1998"},"content":"  saves them into the disk, using a `StorageFile` object.","lastModifiedDate":"2021-04-11"},{"lineNumber":203,"author":{"gitId":"hussain1998"},"content":"* `loadAllPersons()` -  Loads the JSON representation of the `Person` objects in the disk, using a `StorageFile` object.","lastModifiedDate":"2021-04-11"},{"lineNumber":204,"author":{"gitId":"hussain1998"},"content":"  It then converts the JSON representation into `Person` objects.","lastModifiedDate":"2021-04-11"},{"lineNumber":205,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":206,"author":{"gitId":"hussain1998"},"content":"The following sequence diagram shows how the load all persons functionality works:","lastModifiedDate":"2021-04-11"},{"lineNumber":207,"author":{"gitId":"hussain1998"},"content":"![VisitorLogSequenceDiagram.png](images/VisitorLogSequenceDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":208,"author":{"gitId":"hussain1998"},"content":"  ","lastModifiedDate":"2021-04-11"},{"lineNumber":209,"author":{"gitId":"hussain1998"},"content":"#### Design Considerations","lastModifiedDate":"2021-04-11"},{"lineNumber":210,"author":{"gitId":"hussain1998"},"content":"* Alternative 1 (current choice): Save all the `Person` objects into the disk every time a new ","lastModifiedDate":"2021-04-11"},{"lineNumber":211,"author":{"gitId":"hussain1998"},"content":"  `Person` is added into the HashMap.","lastModifiedDate":"2021-04-11"},{"lineNumber":212,"author":{"gitId":"hussain1998"},"content":"  - Pros: Easy to implement.","lastModifiedDate":"2021-04-11"},{"lineNumber":213,"author":{"gitId":"hussain1998"},"content":"  - Cons: May have performance issues as it is inefficient to rewrite the entire file every time a new `Person` object ","lastModifiedDate":"2021-04-11"},{"lineNumber":214,"author":{"gitId":"hussain1998"},"content":"    is added.","lastModifiedDate":"2021-04-11"},{"lineNumber":215,"author":{"gitId":"hussain1998"},"content":"* Alternative 2: Save only the new `Person` object added into the HashMap, ","lastModifiedDate":"2021-04-11"},{"lineNumber":216,"author":{"gitId":"hussain1998"},"content":"  using append mode when writing into the file.","lastModifiedDate":"2021-04-11"},{"lineNumber":217,"author":{"gitId":"hussain1998"},"content":"  - Pros: Efficient performance","lastModifiedDate":"2021-04-11"},{"lineNumber":218,"author":{"gitId":"hussain1998"},"content":"  - Cons: Before writing a new `Peron` object into the file, need to check if the previous","lastModifiedDate":"2021-04-11"},{"lineNumber":219,"author":{"gitId":"hussain1998"},"content":"    records in the file were not tampered with.","lastModifiedDate":"2021-04-11"},{"lineNumber":220,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"iamakilahamed"},"content":"## Documentation","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"iamakilahamed"},"content":"## Testing","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"iamakilahamed"},"content":"## Dev Ops","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":227,"author":{"gitId":"iamakilahamed"},"content":"## Appendix","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"iamakilahamed"},"content":"### Appendix A: Product scope","lastModifiedDate":"2021-03-30"},{"lineNumber":230,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":231,"author":{"gitId":"iamakilahamed"},"content":"#### Target user profile","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"JonathanKhooTY"},"content":"* User that requires more control over crowd level management in a building.","lastModifiedDate":"2021-03-23"},{"lineNumber":233,"author":{"gitId":"JonathanKhooTY"},"content":"* Can type fast","lastModifiedDate":"2021-03-23"},{"lineNumber":234,"author":{"gitId":"JonathanKhooTY"},"content":"* Prefers a simple desktop application over the more complicated systems","lastModifiedDate":"2021-03-23"},{"lineNumber":235,"author":{"gitId":"JonathanKhooTY"},"content":"* Is reasonably comfortable with CLI apps","lastModifiedDate":"2021-03-23"},{"lineNumber":236,"author":{"gitId":"JonathanKhooTY"},"content":"* Requires real time monitoring and tracking capability of people in the building","lastModifiedDate":"2021-03-23"},{"lineNumber":237,"author":{"gitId":"JonathanKhooTY"},"content":"* Wants a cheaper alternative to crowd tracking systems","lastModifiedDate":"2021-03-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":239,"author":{"gitId":"iamakilahamed"},"content":"#### Value proposition","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":241,"author":{"gitId":"JonathanKhooTY"},"content":"A fast and versatile software solution that enables mall management to crowd control","lastModifiedDate":"2021-03-23"},{"lineNumber":242,"author":{"gitId":"JonathanKhooTY"},"content":"in the most efficient way possible.","lastModifiedDate":"2021-03-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":244,"author":{"gitId":"iamakilahamed"},"content":"### Appendix B: User Stories","lastModifiedDate":"2021-03-30"},{"lineNumber":245,"author":{"gitId":"iamakilahamed"},"content":"[WIP]","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":247,"author":{"gitId":"JonathanKhooTY"},"content":"|Priority| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-03-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":249,"author":{"gitId":"limwenfeng"},"content":"|*****|venue/event staff|be able to review the personal particulars of the customer|be aware of who he is|","lastModifiedDate":"2021-04-09"},{"lineNumber":250,"author":{"gitId":"JonathanKhooTY"},"content":"|*****|new user|be able to use the program without much training| use the program as soon as possible and easily implement it|","lastModifiedDate":"2021-03-23"},{"lineNumber":251,"author":{"gitId":"limwenfeng"},"content":"|****|venue/event staff|key in personal particulars easily into the application| check in visitors quickly without holding up a line of customers|","lastModifiedDate":"2021-04-09"},{"lineNumber":252,"author":{"gitId":"limwenfeng"},"content":"|****|venue/event staff|be able to easily key in a unique personal identifier| check in and find a visitor|","lastModifiedDate":"2021-04-09"},{"lineNumber":253,"author":{"gitId":"limwenfeng"},"content":"|****|visitors|be able to check in and check out within a few seconds|enter and leave the mall faster|","lastModifiedDate":"2021-04-09"},{"lineNumber":254,"author":{"gitId":"limwenfeng"},"content":"|****|venue/event management|be able to check who came and left|carry out contact tracing efficiently|","lastModifiedDate":"2021-04-09"},{"lineNumber":255,"author":{"gitId":"limwenfeng"},"content":"|***|user|be able to move the saved data around|continue using the program on another machine|","lastModifiedDate":"2021-04-09"},{"lineNumber":256,"author":{"gitId":"limwenfeng"},"content":"|***|user|be able to encrypt visitors\u0027 private details|privacy of the visitors will be not compromised|","lastModifiedDate":"2021-04-09"},{"lineNumber":257,"author":{"gitId":"JonathanKhooTY"},"content":"|*****|mall staff|be able to view the current capacity of people in the mall|know when to stop letting people in|","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"limwenfeng"},"content":"|****|mall staff|be able to easily key in a unique personal identifier| check in or find a visitor|","lastModifiedDate":"2021-04-09"},{"lineNumber":259,"author":{"gitId":"JonathanKhooTY"},"content":"|****|mall staff|be able to easily key in a unique personal identifier|check out a visitor|","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":262,"author":{"gitId":"iamakilahamed"},"content":"### Appendix D: Non-Functional Requirements","lastModifiedDate":"2021-03-30"},{"lineNumber":263,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":264,"author":{"gitId":"iamakilahamed"},"content":"[WIP]","lastModifiedDate":"2021-03-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":266,"author":{"gitId":"JonathanKhooTY"},"content":"1. The program works on all major modern operating systems (Windows, macOS, Linux)","lastModifiedDate":"2021-04-08"},{"lineNumber":267,"author":{"gitId":"JonathanKhooTY"},"content":"   without any effort by the user, as long as the system has Java 11 or above installed.","lastModifiedDate":"2021-04-08"},{"lineNumber":268,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":269,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":270,"author":{"gitId":"limwenfeng"},"content":"2. The program should boot up in less than 15 seconds. ","lastModifiedDate":"2021-04-08"},{"lineNumber":271,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":272,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":273,"author":{"gitId":"limwenfeng"},"content":"3. A user with above average typing speed for regular English text (not code or system admin commands) should be","lastModifiedDate":"2021-04-08"},{"lineNumber":274,"author":{"gitId":"limwenfeng"},"content":"able to accomplish most of the tasks faster with the use of commands using just the keyboard.","lastModifiedDate":"2021-04-09"},{"lineNumber":275,"author":{"gitId":"limwenfeng"},"content":"   ","lastModifiedDate":"2021-04-08"},{"lineNumber":276,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":277,"author":{"gitId":"limwenfeng"},"content":"4. Check in and check out for each visitor should take less than 5 seconds. ","lastModifiedDate":"2021-04-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":279,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":280,"author":{"gitId":"limwenfeng"},"content":"5. User or staff should be able to find details of visitors (if he has checked in with phone number before) within ","lastModifiedDate":"2021-04-09"},{"lineNumber":281,"author":{"gitId":"limwenfeng"},"content":"10 seconds.","lastModifiedDate":"2021-04-09"},{"lineNumber":282,"author":{"gitId":"limwenfeng"},"content":"   ","lastModifiedDate":"2021-04-09"},{"lineNumber":283,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":284,"author":{"gitId":"limwenfeng"},"content":"6. User should be able to move the stored data to another machine by following simple instructions from the user guide.","lastModifiedDate":"2021-04-09"},{"lineNumber":285,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":286,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":287,"author":{"gitId":"limwenfeng"},"content":"7. The format of data stored in history file should be easy to understand for the users. ","lastModifiedDate":"2021-04-09"},{"lineNumber":288,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":289,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":290,"author":{"gitId":"limwenfeng"},"content":"8. The error messages on the programme should be cleared enough so that users can troubleshoot himself/herself. ","lastModifiedDate":"2021-04-09"},{"lineNumber":291,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":292,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":293,"author":{"gitId":"limwenfeng"},"content":"9. The log files, especially those containing sensitive personal data, are stored locally","lastModifiedDate":"2021-04-09"},{"lineNumber":294,"author":{"gitId":"limwenfeng"},"content":"and no wireless transfer is allowed.","lastModifiedDate":"2021-04-09"},{"lineNumber":295,"author":{"gitId":"JonathanKhooTY"},"content":"   ","lastModifiedDate":"2021-04-08"},{"lineNumber":296,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":297,"author":{"gitId":"limwenfeng"},"content":"10. Maintenance to clear the log files should be smooth and fast with no delay.","lastModifiedDate":"2021-04-09"},{"lineNumber":298,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":300,"author":{"gitId":"iamakilahamed"},"content":"### Appendix E: Glossary","lastModifiedDate":"2021-03-30"},{"lineNumber":301,"author":{"gitId":"iamakilahamed"},"content":"[WIP]","lastModifiedDate":"2021-03-30"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":303,"author":{"gitId":"JonathanKhooTY"},"content":"###A:","lastModifiedDate":"2021-04-08"},{"lineNumber":304,"author":{"gitId":"JonathanKhooTY"},"content":"###B:","lastModifiedDate":"2021-04-08"},{"lineNumber":305,"author":{"gitId":"JonathanKhooTY"},"content":"**Bug**: *See defect*","lastModifiedDate":"2021-04-08"},{"lineNumber":306,"author":{"gitId":"JonathanKhooTY"},"content":"###C:","lastModifiedDate":"2021-04-08"},{"lineNumber":307,"author":{"gitId":"JonathanKhooTY"},"content":"**Change log**: An official document containing the list of all Change Requests submitted.","lastModifiedDate":"2021-04-08"},{"lineNumber":308,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":309,"author":{"gitId":"JonathanKhooTY"},"content":"**Class**: A  class  describes  a set  of  objects  that  share  the  same  specifications  of  features,  ","lastModifiedDate":"2021-04-08"},{"lineNumber":310,"author":{"gitId":"JonathanKhooTY"},"content":"constraints, and semantics. Class is a kind of classifier whose features are attributes and operations.","lastModifiedDate":"2021-04-08"},{"lineNumber":311,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":312,"author":{"gitId":"JonathanKhooTY"},"content":"**Class diagram**: A type of static structure diagram that describes the structure of a system by showing the  ","lastModifiedDate":"2021-04-08"},{"lineNumber":313,"author":{"gitId":"JonathanKhooTY"},"content":"system\u0027s  classes,  their  attributes,  operations  (or  methods),  and  the  relationships  among  the classes.","lastModifiedDate":"2021-04-08"},{"lineNumber":314,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":315,"author":{"gitId":"JonathanKhooTY"},"content":"**Customer**: Current  or  potential  buyer  or  user  of  the  products  or  service  of  an  individual  ","lastModifiedDate":"2021-04-08"},{"lineNumber":316,"author":{"gitId":"JonathanKhooTY"},"content":"or organization, called the supplier, seller, or vendor.","lastModifiedDate":"2021-04-08"},{"lineNumber":317,"author":{"gitId":"JonathanKhooTY"},"content":"###D:","lastModifiedDate":"2021-04-08"},{"lineNumber":318,"author":{"gitId":"JonathanKhooTY"},"content":"**Defect**: A flaw in a component or system that can cause the component or system to fail to","lastModifiedDate":"2021-04-08"},{"lineNumber":319,"author":{"gitId":"JonathanKhooTY"},"content":"perform its required function, e.g. an incorrect  statement or data definition.","lastModifiedDate":"2021-04-08"},{"lineNumber":320,"author":{"gitId":"JonathanKhooTY"},"content":"A defect,  if encountered during execution, may cause a failure of the component or system","lastModifiedDate":"2021-04-08"},{"lineNumber":321,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":322,"author":{"gitId":"JonathanKhooTY"},"content":"**Dependency**:  A  reliance  of  some  kind, of  one  set of components  on  ","lastModifiedDate":"2021-04-08"},{"lineNumber":323,"author":{"gitId":"JonathanKhooTY"},"content":"another  set  of components, or one set of requirements or other artifacts on another set","lastModifiedDate":"2021-04-08"},{"lineNumber":324,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":325,"author":{"gitId":"JonathanKhooTY"},"content":"**Deployment diagram**: In UML a diagram that shows the execution architecture of systems","lastModifiedDate":"2021-04-08"},{"lineNumber":326,"author":{"gitId":"JonathanKhooTY"},"content":"###E:","lastModifiedDate":"2021-04-08"},{"lineNumber":327,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":328,"author":{"gitId":"JonathanKhooTY"},"content":"**Efficiency**: The capability of the software product","lastModifiedDate":"2021-04-08"},{"lineNumber":329,"author":{"gitId":"JonathanKhooTY"},"content":"to provide appropriate performance,relative to the amount of resources used under stated conditions [ISO/IEC 25000].","lastModifiedDate":"2021-04-08"},{"lineNumber":330,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":331,"author":{"gitId":"JonathanKhooTY"},"content":"**Error**: A human action that produces an incorrect result [After IEEE 610].","lastModifiedDate":"2021-04-08"},{"lineNumber":332,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":333,"author":{"gitId":"JonathanKhooTY"},"content":"**Exception handling**: Behavior of a component or system in response to erroneous input,","lastModifiedDate":"2021-04-08"},{"lineNumber":334,"author":{"gitId":"JonathanKhooTY"},"content":"from either a human user or from another component or system, or to an internal failure.","lastModifiedDate":"2021-04-08"},{"lineNumber":335,"author":{"gitId":"JonathanKhooTY"},"content":"###F:","lastModifiedDate":"2021-04-08"},{"lineNumber":336,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":337,"author":{"gitId":"JonathanKhooTY"},"content":"**Function**: A description  of“what” a system does. A function has a corresponding implied purpose and  is  a  fundamental  part  of  a  system  description:  a  system  consists  of  function  attributes,","lastModifiedDate":"2021-04-08"},{"lineNumber":338,"author":{"gitId":"JonathanKhooTY"},"content":"performance  attributes,resource  (cost)  attributes  and  design  attributes.  All  attributes  exist  with respect to defined specified conditions. A function can often be decomposed into a hierarchical set of sub-functions [TGilb].","lastModifiedDate":"2021-04-08"},{"lineNumber":339,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":340,"author":{"gitId":"JonathanKhooTY"},"content":"**Functionality**: The  capability  of  the  software  product  to  provide  functions  which  meet  statedand implied needs when the software is used under specified conditions[ISO/IEC 25000].","lastModifiedDate":"2021-04-08"},{"lineNumber":341,"author":{"gitId":"JonathanKhooTY"},"content":"###G:","lastModifiedDate":"2021-04-08"},{"lineNumber":342,"author":{"gitId":"JonathanKhooTY"},"content":"**Goal**: A desired state or result of an undertaken. Goals should be measurable and defined in time so that the progress can be monitored.","lastModifiedDate":"2021-04-08"},{"lineNumber":343,"author":{"gitId":"JonathanKhooTY"},"content":"###H:","lastModifiedDate":"2021-04-08"},{"lineNumber":344,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":345,"author":{"gitId":"JonathanKhooTY"},"content":"**High-level**: A  position  in  a hierarchy of  defined  system  components, which  is  closer  to  the  top than the bottom, relative to the total defined set of those components [TGilb]","lastModifiedDate":"2021-04-08"},{"lineNumber":346,"author":{"gitId":"JonathanKhooTY"},"content":"###I:","lastModifiedDate":"2021-04-08"},{"lineNumber":347,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":348,"author":{"gitId":"JonathanKhooTY"},"content":"**Input**: A variable (whether stored within a component or outside) that is read by a component.","lastModifiedDate":"2021-04-08"},{"lineNumber":349,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":350,"author":{"gitId":"JonathanKhooTY"},"content":"**Input value**: An instance of an input. *See also input.*","lastModifiedDate":"2021-04-08"},{"lineNumber":351,"author":{"gitId":"JonathanKhooTY"},"content":"###J:","lastModifiedDate":"2021-04-08"},{"lineNumber":352,"author":{"gitId":"JonathanKhooTY"},"content":"###K:","lastModifiedDate":"2021-04-08"},{"lineNumber":353,"author":{"gitId":"JonathanKhooTY"},"content":"###L:","lastModifiedDate":"2021-04-08"},{"lineNumber":354,"author":{"gitId":"JonathanKhooTY"},"content":"###M:","lastModifiedDate":"2021-04-08"},{"lineNumber":355,"author":{"gitId":"JonathanKhooTY"},"content":"**Maintenance**: Modification  of  a  software  product  after  delivery  to  correct  defects,","lastModifiedDate":"2021-04-08"},{"lineNumber":356,"author":{"gitId":"JonathanKhooTY"},"content":"to  improve performance or other attributes, or to adapt the product to a modified environment [IEEE 1219].","lastModifiedDate":"2021-04-08"},{"lineNumber":357,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":358,"author":{"gitId":"JonathanKhooTY"},"content":"**Milestone**: A  point  in  time  in  a  project  at  which  defined  (intermediate)  deliverables  and  results should be ready.","lastModifiedDate":"2021-04-08"},{"lineNumber":359,"author":{"gitId":"JonathanKhooTY"},"content":"###N:","lastModifiedDate":"2021-04-08"},{"lineNumber":360,"author":{"gitId":"JonathanKhooTY"},"content":"###O:","lastModifiedDate":"2021-04-08"},{"lineNumber":361,"author":{"gitId":"JonathanKhooTY"},"content":"**Object**: In OOAD an instance of a class.","lastModifiedDate":"2021-04-08"},{"lineNumber":362,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":363,"author":{"gitId":"JonathanKhooTY"},"content":"**Object  diagram**: In  UML  a  diagramthat  depicts  objects  and  their","lastModifiedDate":"2021-04-08"},{"lineNumber":364,"author":{"gitId":"JonathanKhooTY"},"content":"relationships  at  a  point  in  time, typically a special case of either a class diagram or a communication diagram.","lastModifiedDate":"2021-04-08"},{"lineNumber":365,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":366,"author":{"gitId":"JonathanKhooTY"},"content":"**Object-oriented  analysis  and  design**: A  software  engineering  approach  that  models  a  system  as  a group  of  interacting  objects.","lastModifiedDate":"2021-04-08"},{"lineNumber":367,"author":{"gitId":"JonathanKhooTY"},"content":"Each  object  represents  some  entity  of  interest  in  the  system  being modeled,  and  is  characterized  by  its  class,","lastModifiedDate":"2021-04-08"},{"lineNumber":368,"author":{"gitId":"JonathanKhooTY"},"content":"its  state  (data  elements),  and  its  behavior.  OOAD encompasses Object-oriented analysis (OOA) and Object-oriented design (OOD).","lastModifiedDate":"2021-04-08"},{"lineNumber":369,"author":{"gitId":"JonathanKhooTY"},"content":"OOA applies object-modeling  techniques  to  analyze  the  functional  requirements  for  a  system.  OOD  elaborates  the analysis models to produce implementation specifications.","lastModifiedDate":"2021-04-08"},{"lineNumber":370,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":371,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":372,"author":{"gitId":"JonathanKhooTY"},"content":"**OOAD**: *see Object-oriented analysis and design.*","lastModifiedDate":"2021-04-08"},{"lineNumber":373,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":374,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":375,"author":{"gitId":"JonathanKhooTY"},"content":"**OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2021-04-08"},{"lineNumber":376,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":377,"author":{"gitId":"JonathanKhooTY"},"content":"**Output**: A variable (whether stored within a component or outside) that is written by a component.","lastModifiedDate":"2021-04-08"},{"lineNumber":378,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":379,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":380,"author":{"gitId":"JonathanKhooTY"},"content":"###P:","lastModifiedDate":"2021-04-08"},{"lineNumber":381,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":382,"author":{"gitId":"JonathanKhooTY"},"content":"**Performance**: The  degree  to  which  a  system  or  component  accomplishes  its  designated functions within","lastModifiedDate":"2021-04-08"},{"lineNumber":383,"author":{"gitId":"JonathanKhooTY"},"content":"given   constraints  regarding   processing   time   and   through put   rate   [IEEE 610].","lastModifiedDate":"2021-04-08"},{"lineNumber":384,"author":{"gitId":"JonathanKhooTY"},"content":"See also *efficiency.*","lastModifiedDate":"2021-04-08"},{"lineNumber":385,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":386,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":387,"author":{"gitId":"JonathanKhooTY"},"content":"**Personal data**: Private information pertaining to an individual\u0027s ID, and phone number,","lastModifiedDate":"2021-04-08"},{"lineNumber":388,"author":{"gitId":"JonathanKhooTY"},"content":"and is not meant to be publicly shared.","lastModifiedDate":"2021-04-08"},{"lineNumber":389,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":390,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":391,"author":{"gitId":"JonathanKhooTY"},"content":"**Portability**: The  ease  with  which  the  software  product  can  be  transferred  from  one  hardwareor software environment to another [ISO/IEC 25000]","lastModifiedDate":"2021-04-08"},{"lineNumber":392,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":393,"author":{"gitId":"JonathanKhooTY"},"content":"**Priority**: The level of (business) importance assigned to an item, e.g. defect.","lastModifiedDate":"2021-04-08"},{"lineNumber":394,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":395,"author":{"gitId":"JonathanKhooTY"},"content":"**Process**: A set of interrelated activities, which transform inputs into outputs [ISO 12207].","lastModifiedDate":"2021-04-08"},{"lineNumber":396,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":397,"author":{"gitId":"JonathanKhooTY"},"content":"**Product**: An output of a process.","lastModifiedDate":"2021-04-08"},{"lineNumber":398,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":399,"author":{"gitId":"JonathanKhooTY"},"content":"**Product requirement**: A requirement related to the product of the development process.","lastModifiedDate":"2021-04-08"},{"lineNumber":400,"author":{"gitId":"JonathanKhooTY"},"content":"They affect quality of the product.","lastModifiedDate":"2021-04-08"},{"lineNumber":401,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":402,"author":{"gitId":"JonathanKhooTY"},"content":"**Project**: A project is a unique  set of coordinated and controlled activities with start  and finish dates undertaken to achieve an objective conforming to specific requirements,","lastModifiedDate":"2021-04-08"},{"lineNumber":403,"author":{"gitId":"JonathanKhooTY"},"content":"including the constraints of time, cost and resources [ISO 9000]","lastModifiedDate":"2021-04-08"},{"lineNumber":404,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":405,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":406,"author":{"gitId":"JonathanKhooTY"},"content":"###Q:","lastModifiedDate":"2021-04-08"},{"lineNumber":407,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":408,"author":{"gitId":"JonathanKhooTY"},"content":"**Quality**: The degree to which a component, system or process meets specified requirements and/or user/customer","lastModifiedDate":"2021-04-08"},{"lineNumber":409,"author":{"gitId":"JonathanKhooTY"},"content":"needs and expectations [IEEE 610]","lastModifiedDate":"2021-04-08"},{"lineNumber":410,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":411,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":412,"author":{"gitId":"JonathanKhooTY"},"content":"###R:","lastModifiedDate":"2021-04-08"},{"lineNumber":413,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":414,"author":{"gitId":"JonathanKhooTY"},"content":"**Release**: A version of the solution released for installation and use by the customer/end users.","lastModifiedDate":"2021-04-08"},{"lineNumber":415,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":416,"author":{"gitId":"JonathanKhooTY"},"content":"**Requirement**:  (1) A  condition  or  capability  needed  by  a  user  to  solve  a  problem  or  achieve  an objective.","lastModifiedDate":"2021-04-08"},{"lineNumber":417,"author":{"gitId":"JonathanKhooTY"},"content":"(2)  A  condition  or  capability  that  must  be  met  or  possessed  by  a  system  or  system component to satisfy a contract, standard, specification, or other formally imposed documents.","lastModifiedDate":"2021-04-08"},{"lineNumber":418,"author":{"gitId":"JonathanKhooTY"},"content":"(3) A documented representation of a condition or capability as in (1) or (2) [IEEE 610].","lastModifiedDate":"2021-04-08"},{"lineNumber":419,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":420,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":421,"author":{"gitId":"JonathanKhooTY"},"content":"**Review**: An evaluation of a product or project status to ascertain discrepancies from planned results and to recommend improvements.","lastModifiedDate":"2021-04-08"},{"lineNumber":422,"author":{"gitId":"JonathanKhooTY"},"content":"Examples include management review, informal review, technical review, inspection, and walkthrough [IEEE 1028].","lastModifiedDate":"2021-04-08"},{"lineNumber":423,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":424,"author":{"gitId":"JonathanKhooTY"},"content":"**Reviewer**: The person involved in the review  that identifies and describes  anomalies  in the product or project under review. Reviewers can be chosen to represent different viewpoints and roles in the review process.","lastModifiedDate":"2021-04-08"},{"lineNumber":425,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":426,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":427,"author":{"gitId":"JonathanKhooTY"},"content":"###S:","lastModifiedDate":"2021-04-08"},{"lineNumber":428,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":429,"author":{"gitId":"JonathanKhooTY"},"content":"**Security**: Attributes  of  software  products  that  bear on  its  ability  to  prevent  unauthorized","lastModifiedDate":"2021-04-08"},{"lineNumber":430,"author":{"gitId":"JonathanKhooTY"},"content":"access, whether accidental or deliberate, to programs and data [ISO/IEC 25000].  See also *Functionality.*","lastModifiedDate":"2021-04-08"},{"lineNumber":431,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":432,"author":{"gitId":"JonathanKhooTY"},"content":"**Sequence  diagram**: In  UML  it  is  a  structured  representation  of  behavior  as  a  series  of  sequential steps  over  time.","lastModifiedDate":"2021-04-08"},{"lineNumber":433,"author":{"gitId":"JonathanKhooTY"},"content":"Sequence  diagram  is  a  kind  of  interaction  diagram  that  shows  how  processes operate with one another and in what order.","lastModifiedDate":"2021-04-08"},{"lineNumber":434,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":435,"author":{"gitId":"JonathanKhooTY"},"content":"**Software**: Computer   programs,   procedures, and   possibly   associated   documentation   and   data pertaining to the operation of a computer system [IEEE 610].","lastModifiedDate":"2021-04-08"},{"lineNumber":436,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":437,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":438,"author":{"gitId":"JonathanKhooTY"},"content":"**Stakeholder**: Any  person  who  has  an  interest  in  an  IT  project.  Project  stakeholders  are individuals and  organizations  that  are  actively  involved  in  the  project,  or whose  interests may  be  affected  as  a result  of  project  execution  or  project  completion.","lastModifiedDate":"2021-04-08"},{"lineNumber":439,"author":{"gitId":"JonathanKhooTY"},"content":"Stakeholders  can  exercise  control  over  both  the immediate   system   operational   characteristics, as well as   over   long-term   system   lifecycle considerations","lastModifiedDate":"2021-04-08"},{"lineNumber":440,"author":{"gitId":"JonathanKhooTY"},"content":"(such     as     portability,     lifecycle     costs,     environmental     considerations,     and decommissioning of the system) [TGilb].","lastModifiedDate":"2021-04-08"},{"lineNumber":441,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":442,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":443,"author":{"gitId":"JonathanKhooTY"},"content":"**Standard**: Formal,  possibly  mandatory,  set  of  requirements  developed  and  used  to  prescribe consistent  approaches  to","lastModifiedDate":"2021-04-08"},{"lineNumber":444,"author":{"gitId":"JonathanKhooTY"},"content":"the  way  of  working  or  to  provide  guidelines  (e.g.,  ISO/IEC  standards,  IEEE standards, and organizational standards) [CMMI].","lastModifiedDate":"2021-04-08"},{"lineNumber":445,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":446,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":447,"author":{"gitId":"JonathanKhooTY"},"content":"**State machine**: A behavior model composed of a finite number of states, transitions between those states, and actions, similar to a flow graph.","lastModifiedDate":"2021-04-08"},{"lineNumber":448,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":449,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":450,"author":{"gitId":"JonathanKhooTY"},"content":"**State machine diagram**: *see State machine*","lastModifiedDate":"2021-04-08"},{"lineNumber":451,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":452,"author":{"gitId":"JonathanKhooTY"},"content":"**State transition**: A transition between two states of a component or system.","lastModifiedDate":"2021-04-08"},{"lineNumber":453,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":454,"author":{"gitId":"JonathanKhooTY"},"content":"**Structure  diagram**: A  type   of  diagram  that  depicts  the  elements  of  a  specification  that","lastModifiedDate":"2021-04-08"},{"lineNumber":455,"author":{"gitId":"JonathanKhooTY"},"content":"are irrespective  of  time.This  includes  class,  composite  structure,  component,  deployment,  object,  and package diagrams.","lastModifiedDate":"2021-04-08"},{"lineNumber":456,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":457,"author":{"gitId":"JonathanKhooTY"},"content":"**System**: A  collection  of  components  organized  to  accomplish  a  specific  function  or  set  of  functions [IEEE 610].","lastModifiedDate":"2021-04-08"},{"lineNumber":458,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":459,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":460,"author":{"gitId":"JonathanKhooTY"},"content":"###T:","lastModifiedDate":"2021-04-08"},{"lineNumber":461,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":462,"author":{"gitId":"JonathanKhooTY"},"content":"**Testability**: The capability of the software product to enable modified software to be tested [ISO/IEC 25000].","lastModifiedDate":"2021-04-08"},{"lineNumber":463,"author":{"gitId":"JonathanKhooTY"},"content":"See also *Maintainability.*","lastModifiedDate":"2021-04-08"},{"lineNumber":464,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":465,"author":{"gitId":"JonathanKhooTY"},"content":"**Timing diagram**: In  UML  a  diagram  that  depicts  the  change  in  state  or  condition  of  a  classifier instance or role over time.","lastModifiedDate":"2021-04-08"},{"lineNumber":466,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":467,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":468,"author":{"gitId":"JonathanKhooTY"},"content":"###U:","lastModifiedDate":"2021-04-08"},{"lineNumber":469,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":470,"author":{"gitId":"JonathanKhooTY"},"content":"**UML**: see Unified Modeling Language.","lastModifiedDate":"2021-04-08"},{"lineNumber":471,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":472,"author":{"gitId":"JonathanKhooTY"},"content":"**Unified  Modeling  Language**: A  standardized  general-purpose  modeling  language  in  the  field  of software engineering.","lastModifiedDate":"2021-04-08"},{"lineNumber":473,"author":{"gitId":"JonathanKhooTY"},"content":"UML includes a set of graphic notation techniques to create visual models of software-intensive systems like use case diagrams, activity diagrams,","lastModifiedDate":"2021-04-08"},{"lineNumber":474,"author":{"gitId":"JonathanKhooTY"},"content":"class diagrams and many more.","lastModifiedDate":"2021-04-08"},{"lineNumber":475,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":476,"author":{"gitId":"JonathanKhooTY"},"content":"**User**: A person who uses a software product.","lastModifiedDate":"2021-04-08"},{"lineNumber":477,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":478,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":479,"author":{"gitId":"JonathanKhooTY"},"content":"###V:","lastModifiedDate":"2021-04-08"},{"lineNumber":480,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":481,"author":{"gitId":"JonathanKhooTY"},"content":"**Version**: A specific form or variation of something.","lastModifiedDate":"2021-04-08"},{"lineNumber":482,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":483,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":484,"author":{"gitId":"JonathanKhooTY"},"content":"###W:","lastModifiedDate":"2021-04-08"},{"lineNumber":485,"author":{"gitId":"JonathanKhooTY"},"content":"###X:","lastModifiedDate":"2021-04-08"},{"lineNumber":486,"author":{"gitId":"JonathanKhooTY"},"content":"###Y:","lastModifiedDate":"2021-04-08"},{"lineNumber":487,"author":{"gitId":"JonathanKhooTY"},"content":"###Z:","lastModifiedDate":"2021-04-08"},{"lineNumber":488,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":489,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":490,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":491,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":492,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":493,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":494,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":496,"author":{"gitId":"iamakilahamed"},"content":"### Appendix F: Instructions for manual testing","lastModifiedDate":"2021-03-30"},{"lineNumber":497,"author":{"gitId":"iamakilahamed"},"content":"Given below are instructions to test CYC manually.","lastModifiedDate":"2021-04-09"},{"lineNumber":498,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":499,"author":{"gitId":"iamakilahamed"},"content":"\u003e * These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2021-04-09"},{"lineNumber":500,"author":{"gitId":"iamakilahamed"},"content":"\u003e testers are expected to do more *exploratory* testing.","lastModifiedDate":"2021-04-09"},{"lineNumber":501,"author":{"gitId":"iamakilahamed"},"content":"\u003e * You can refer to the [User Guide](UserGuide.md) for further information regarding the command formats.","lastModifiedDate":"2021-04-09"},{"lineNumber":502,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":503,"author":{"gitId":"iamakilahamed"},"content":"#### Launching CYC","lastModifiedDate":"2021-04-09"},{"lineNumber":504,"author":{"gitId":"iamakilahamed"},"content":"1. Initial launch of CYC","lastModifiedDate":"2021-04-09"},{"lineNumber":505,"author":{"gitId":"iamakilahamed"},"content":"    1. Download the jar file [here](https://github.com/AY2021S2-CS2113T-T09-1/tp/releases) and copy into an empty folder.","lastModifiedDate":"2021-04-09"},{"lineNumber":506,"author":{"gitId":"iamakilahamed"},"content":"    2. Open up a command window to that folder with the jar file.","lastModifiedDate":"2021-04-09"},{"lineNumber":507,"author":{"gitId":"iamakilahamed"},"content":"    3. Run the command `java -jar CYC.jar X` (where X is a positive number that is less than 7 digits)  ","lastModifiedDate":"2021-04-09"},{"lineNumber":508,"author":{"gitId":"iamakilahamed"},"content":"        ","lastModifiedDate":"2021-04-09"},{"lineNumber":509,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** CYC will be loaded, and a welcome message will be shown. Ensure that the version number in the","lastModifiedDate":"2021-04-09"},{"lineNumber":510,"author":{"gitId":"iamakilahamed"},"content":"        welcome matches version of the jar file downloaded.","lastModifiedDate":"2021-04-09"},{"lineNumber":511,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":512,"author":{"gitId":"iamakilahamed"},"content":"#### Check in a visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":513,"author":{"gitId":"iamakilahamed"},"content":"1. Check in a visitor for the first time","lastModifiedDate":"2021-04-09"},{"lineNumber":514,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the visitor you are trying to check in is not in the `LogFile.txt` file","lastModifiedDate":"2021-04-09"},{"lineNumber":515,"author":{"gitId":"iamakilahamed"},"content":"       by checking the ID.","lastModifiedDate":"2021-04-09"},{"lineNumber":516,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkin i/123A n/John p/12345678` (where John with ID 123A is not found in the `LogFile.txt` file)","lastModifiedDate":"2021-04-09"},{"lineNumber":517,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":518,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** John will be successfully checked in. Details of the current capacity will also be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":519,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":520,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":521,"author":{"gitId":"iamakilahamed"},"content":"2. Check in a registered visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":522,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the visitor you are trying to check in is in the `LogFile.txt` file","lastModifiedDate":"2021-04-09"},{"lineNumber":523,"author":{"gitId":"iamakilahamed"},"content":"       by checking the ID.","lastModifiedDate":"2021-04-09"},{"lineNumber":524,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkin i/123B` (where a visitor with ID 123B is found in the `LogFile.txt` file)","lastModifiedDate":"2021-04-09"},{"lineNumber":525,"author":{"gitId":"iamakilahamed"},"content":"       ","lastModifiedDate":"2021-04-09"},{"lineNumber":526,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** The visitor corresponding to the given ID will be checked in successfully.","lastModifiedDate":"2021-04-09"},{"lineNumber":527,"author":{"gitId":"iamakilahamed"},"content":"        Details of the current capacity will also be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":528,"author":{"gitId":"iamakilahamed"},"content":"       ","lastModifiedDate":"2021-04-09"},{"lineNumber":529,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":530,"author":{"gitId":"iamakilahamed"},"content":"3. Check in a registered visitor who is already checked in","lastModifiedDate":"2021-04-09"},{"lineNumber":531,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** The checked in status of a particular visitor with known ID can be obtained using","lastModifiedDate":"2021-04-09"},{"lineNumber":532,"author":{"gitId":"iamakilahamed"},"content":"    `find i/123A` (where 123A is the ID of the visitor).","lastModifiedDate":"2021-04-09"},{"lineNumber":533,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkin i/123A` (where the visitor with ID 123A is already checked in)","lastModifiedDate":"2021-04-09"},{"lineNumber":534,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":535,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A message with the visitor corresponding to the given ID has already checked in will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":536,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":537,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":538,"author":{"gitId":"iamakilahamed"},"content":"4. Check in a visitor after the maximum capacity is reached","lastModifiedDate":"2021-04-09"},{"lineNumber":539,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisite:** Check if maximum capacity is reached. The number of people left to maximum capacity can be","lastModifiedDate":"2021-04-09"},{"lineNumber":540,"author":{"gitId":"iamakilahamed"},"content":"    obtained using `listcheckedin` command, or the current capacity can be obtained whenever a visitor is successfully","lastModifiedDate":"2021-04-09"},{"lineNumber":541,"author":{"gitId":"iamakilahamed"},"content":"    checked in or out. If needed, check in visitors until maximum capacity is reached.","lastModifiedDate":"2021-04-09"},{"lineNumber":542,"author":{"gitId":"iamakilahamed"},"content":"    2. Check in a visitor who has not checked in yet.","lastModifiedDate":"2021-04-09"},{"lineNumber":543,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":544,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** The visitor will not be checked in. An error message with maximum capacity reached will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":545,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":546,"author":{"gitId":"iamakilahamed"},"content":"#### Check out a visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":547,"author":{"gitId":"iamakilahamed"},"content":"1. Check out a visitor who is checked in","lastModifiedDate":"2021-04-09"},{"lineNumber":548,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure a particular visitor with known ID is checked in using","lastModifiedDate":"2021-04-09"},{"lineNumber":549,"author":{"gitId":"iamakilahamed"},"content":"    `find i/123A` (where 123A is the ID of the visitor).","lastModifiedDate":"2021-04-09"},{"lineNumber":550,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkout i/123A` (where the visitor with ID 123A is checked in)","lastModifiedDate":"2021-04-09"},{"lineNumber":551,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":552,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** Successfully checks out the visitor corresponding to the given ID.","lastModifiedDate":"2021-04-09"},{"lineNumber":553,"author":{"gitId":"iamakilahamed"},"content":"        Current capacity is also shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":554,"author":{"gitId":"iamakilahamed"},"content":"       ","lastModifiedDate":"2021-04-09"},{"lineNumber":555,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":556,"author":{"gitId":"iamakilahamed"},"content":"2. Check out a visitor who is already checked out","lastModifiedDate":"2021-04-09"},{"lineNumber":557,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure a particular visitor with known ID is already checked out using","lastModifiedDate":"2021-04-09"},{"lineNumber":558,"author":{"gitId":"iamakilahamed"},"content":"    `find i/123B` (where 123B is the ID of the visitor).","lastModifiedDate":"2021-04-09"},{"lineNumber":559,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkout i/123B` (where the visitor with ID 123B is already checked out)","lastModifiedDate":"2021-04-09"},{"lineNumber":560,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":561,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A message with the visitor corresponding to the given ID has already checked out will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":562,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":563,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":564,"author":{"gitId":"iamakilahamed"},"content":"3. Check out a visitor who is not registered","lastModifiedDate":"2021-04-09"},{"lineNumber":565,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the visitor you are trying to check out is not in the `LogFile.txt` file","lastModifiedDate":"2021-04-09"},{"lineNumber":566,"author":{"gitId":"iamakilahamed"},"content":"        by checking the ID.","lastModifiedDate":"2021-04-09"},{"lineNumber":567,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `checkout i/123C` (where a visitor with ID 123C is not found in the `LogFile.txt` file)","lastModifiedDate":"2021-04-09"},{"lineNumber":568,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":569,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** An error message with no such person found will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":570,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":571,"author":{"gitId":"iamakilahamed"},"content":"#### Clearing all visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":572,"author":{"gitId":"iamakilahamed"},"content":"\u003e Note: ","lastModifiedDate":"2021-04-09"},{"lineNumber":573,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Clear refers to removing all the visitors in the `TrackingList`.","lastModifiedDate":"2021-04-09"},{"lineNumber":574,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * The data in the `TrackingList.txt` file will also be cleared.","lastModifiedDate":"2021-04-09"},{"lineNumber":575,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * The data in the `History.txt` and `LogFile.txt` files will be **not** be cleared.","lastModifiedDate":"2021-04-09"},{"lineNumber":576,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":577,"author":{"gitId":"iamakilahamed"},"content":"1. Clearing all the visitors if any","lastModifiedDate":"2021-04-09"},{"lineNumber":578,"author":{"gitId":"iamakilahamed"},"content":"    1. **Test case:** `clear`","lastModifiedDate":"2021-04-09"},{"lineNumber":579,"author":{"gitId":"iamakilahamed"},"content":"        ","lastModifiedDate":"2021-04-09"},{"lineNumber":580,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A message indicating the number of visitors cleared will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":581,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":582,"author":{"gitId":"iamakilahamed"},"content":"#### Editing maximum capacity","lastModifiedDate":"2021-04-09"},{"lineNumber":583,"author":{"gitId":"iamakilahamed"},"content":"\u003e Note:","lastModifiedDate":"2021-04-09"},{"lineNumber":584,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Valid capacity value means that the capacity **must** be a positive number that is less than 7 digits.","lastModifiedDate":"2021-04-09"},{"lineNumber":585,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Invalid capacity value means that the capacity is either a negative number, or a positive number that is more than ","lastModifiedDate":"2021-04-09"},{"lineNumber":586,"author":{"gitId":"iamakilahamed"},"content":"\u003e 6 digits.","lastModifiedDate":"2021-04-09"},{"lineNumber":587,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":588,"author":{"gitId":"iamakilahamed"},"content":"1. Editing maximum capacity with a valid capacity value","lastModifiedDate":"2021-04-09"},{"lineNumber":589,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** The current capacity must be known first. The current capacity can be obtained whenever a","lastModifiedDate":"2021-04-09"},{"lineNumber":590,"author":{"gitId":"iamakilahamed"},"content":"    visitor is successfully checked in or out. The current capacity can also be calculated by using the number of visitors","lastModifiedDate":"2021-04-09"},{"lineNumber":591,"author":{"gitId":"iamakilahamed"},"content":"    left to reach maximum capacity with the `listcheckedin` command.","lastModifiedDate":"2021-04-09"},{"lineNumber":592,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `editmax X` (where X is more than or equal to the current capacity)","lastModifiedDate":"2021-04-09"},{"lineNumber":593,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":594,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A success message with the new maximum capacity of X will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":595,"author":{"gitId":"iamakilahamed"},"content":"    3. **Test case:** `editmax Y` (where Y is less than the current capacity)","lastModifiedDate":"2021-04-09"},{"lineNumber":596,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":597,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** Maximum capacity is not updated. A message with the error details and the current capacity","lastModifiedDate":"2021-04-09"},{"lineNumber":598,"author":{"gitId":"iamakilahamed"},"content":"        will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":599,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":600,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":601,"author":{"gitId":"iamakilahamed"},"content":"2. Editing maximum capacity with an invalid capacity value","lastModifiedDate":"2021-04-09"},{"lineNumber":602,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Similar to the previous prerequisites.","lastModifiedDate":"2021-04-09"},{"lineNumber":603,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `editmax N` (where N is a negative number)","lastModifiedDate":"2021-04-09"},{"lineNumber":604,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":605,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** Maximum capacity is not updated. Error details will be shown in the message.","lastModifiedDate":"2021-04-09"},{"lineNumber":606,"author":{"gitId":"iamakilahamed"},"content":"    3. **Test case:** `editmax P` (where P is a positive number that is more than 6 digits)","lastModifiedDate":"2021-04-09"},{"lineNumber":607,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":608,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** Similar to previous.","lastModifiedDate":"2021-04-09"},{"lineNumber":609,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":610,"author":{"gitId":"iamakilahamed"},"content":"#### Finding a visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":611,"author":{"gitId":"iamakilahamed"},"content":"\u003e Note:","lastModifiedDate":"2021-04-09"},{"lineNumber":612,"author":{"gitId":"iamakilahamed"},"content":"\u003e * A valid visitor means that the person can be found in the `TrackingList`.","lastModifiedDate":"2021-04-09"},{"lineNumber":613,"author":{"gitId":"iamakilahamed"},"content":"\u003e * An invalid visitor means that the person cannot be found in the `TrackingList`.","lastModifiedDate":"2021-04-09"},{"lineNumber":614,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * It could be because the person got removed when the `TrackingList` was cleared or","lastModifiedDate":"2021-04-09"},{"lineNumber":615,"author":{"gitId":"iamakilahamed"},"content":"\u003e   the person is not registered in the `PersonLog`.","lastModifiedDate":"2021-04-09"},{"lineNumber":616,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":617,"author":{"gitId":"iamakilahamed"},"content":"1. Finding a valid visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":618,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the person you are trying to find is in the `TrackingList`.","lastModifiedDate":"2021-04-09"},{"lineNumber":619,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `find i/123A` (where 123A is the ID of the valid visitor to be found)","lastModifiedDate":"2021-04-09"},{"lineNumber":620,"author":{"gitId":"iamakilahamed"},"content":"        ","lastModifiedDate":"2021-04-09"},{"lineNumber":621,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** The details of the visitor found including the checked in status.","lastModifiedDate":"2021-04-09"},{"lineNumber":622,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":623,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":624,"author":{"gitId":"iamakilahamed"},"content":"2. Finding an invalid visitor","lastModifiedDate":"2021-04-09"},{"lineNumber":625,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the person you are trying to find is not in the `TrackingList` or in the `PersonLog`.","lastModifiedDate":"2021-04-09"},{"lineNumber":626,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `find i/123B` (where 123B is the ID of a visitor not in the `TrackingList`)","lastModifiedDate":"2021-04-09"},{"lineNumber":627,"author":{"gitId":"iamakilahamed"},"content":"        ","lastModifiedDate":"2021-04-09"},{"lineNumber":628,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A person not found message will be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":629,"author":{"gitId":"iamakilahamed"},"content":"    3. **Test case:** `find i/123C` (where 123C is the ID of a visitor not in the `PersonLog`)","lastModifiedDate":"2021-04-09"},{"lineNumber":630,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":631,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** Similar to previous.","lastModifiedDate":"2021-04-09"},{"lineNumber":632,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":633,"author":{"gitId":"iamakilahamed"},"content":"#### Help","lastModifiedDate":"2021-04-09"},{"lineNumber":634,"author":{"gitId":"iamakilahamed"},"content":"1. Getting help from CYC","lastModifiedDate":"2021-04-09"},{"lineNumber":635,"author":{"gitId":"iamakilahamed"},"content":"    1. **Test case:** `help`","lastModifiedDate":"2021-04-09"},{"lineNumber":636,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":637,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A summary of the commands available to use for CYC will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":638,"author":{"gitId":"iamakilahamed"},"content":"        A link to the User Guide will also be shown.","lastModifiedDate":"2021-04-09"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":640,"author":{"gitId":"iamakilahamed"},"content":"#### Listing checked in visitors","lastModifiedDate":"2021-04-09"},{"lineNumber":641,"author":{"gitId":"iamakilahamed"},"content":"1. Listing visitors who are currently checked in","lastModifiedDate":"2021-04-09"},{"lineNumber":642,"author":{"gitId":"iamakilahamed"},"content":"    1. **Test case:** `listcheckedin`","lastModifiedDate":"2021-04-09"},{"lineNumber":643,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":644,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A table with the particulars of all the visitors currently checked in will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":645,"author":{"gitId":"iamakilahamed"},"content":"        Number of people left to reach maximum capacity will also be provided.","lastModifiedDate":"2021-04-09"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":647,"author":{"gitId":"iamakilahamed"},"content":"#### Listing all visitors","lastModifiedDate":"2021-04-09"},{"lineNumber":648,"author":{"gitId":"iamakilahamed"},"content":"\u003e Note:","lastModifiedDate":"2021-04-09"},{"lineNumber":649,"author":{"gitId":"iamakilahamed"},"content":"\u003e * `listall` command shows a list of all the visitors currently in the `TrackingList`.","lastModifiedDate":"2021-04-09"},{"lineNumber":650,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * It does not show you the list of all the visitors registered in the `PersonLog`.","lastModifiedDate":"2021-04-09"},{"lineNumber":651,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":652,"author":{"gitId":"iamakilahamed"},"content":"1. Listing all the visitors","lastModifiedDate":"2021-04-09"},{"lineNumber":653,"author":{"gitId":"iamakilahamed"},"content":"    1. **Test case:** `listall`","lastModifiedDate":"2021-04-09"},{"lineNumber":654,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":655,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A table with the particulars of all the visitors currently in the `TrackingList`","lastModifiedDate":"2021-04-09"},{"lineNumber":656,"author":{"gitId":"iamakilahamed"},"content":"        with their checked in status will be displayed.","lastModifiedDate":"2021-04-09"},{"lineNumber":657,"author":{"gitId":"iamakilahamed"},"content":"       ","lastModifiedDate":"2021-04-09"},{"lineNumber":658,"author":{"gitId":"iamakilahamed"},"content":"#### Moving storage location","lastModifiedDate":"2021-04-09"},{"lineNumber":659,"author":{"gitId":"iamakilahamed"},"content":"1. Changing to a new storage location for `TrackingList`","lastModifiedDate":"2021-04-09"},{"lineNumber":660,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that the new storage location is unused.","lastModifiedDate":"2021-04-09"},{"lineNumber":661,"author":{"gitId":"iamakilahamed"},"content":"    2. **Test case:** `movestorage X` (where X is a valid path to the new storage location)","lastModifiedDate":"2021-04-09"},{"lineNumber":662,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":663,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** A success message is shown with the new storage location path.","lastModifiedDate":"2021-04-09"},{"lineNumber":664,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":666,"author":{"gitId":"iamakilahamed"},"content":"2. Changing the storage location to the default location without CYC running","lastModifiedDate":"2021-04-09"},{"lineNumber":667,"author":{"gitId":"iamakilahamed"},"content":"    1. **Prerequisites:** Ensure that you have changed to a new storage location and have exited CYC.","lastModifiedDate":"2021-04-09"},{"lineNumber":668,"author":{"gitId":"iamakilahamed"},"content":"    2. Delete the `settings.properties` file found in the folder where `CYC.jar` is located.","lastModifiedDate":"2021-04-09"},{"lineNumber":669,"author":{"gitId":"iamakilahamed"},"content":"    3. Launch CYC and checkin a visitor successfully.","lastModifiedDate":"2021-04-09"},{"lineNumber":670,"author":{"gitId":"iamakilahamed"},"content":"    4. Exit CYC.","lastModifiedDate":"2021-04-09"},{"lineNumber":671,"author":{"gitId":"iamakilahamed"},"content":"    5. Open `TrackingList.txt` file that is located in the same folder as the `CYC.jar`.","lastModifiedDate":"2021-04-09"},{"lineNumber":672,"author":{"gitId":"iamakilahamed"},"content":"    ","lastModifiedDate":"2021-04-09"},{"lineNumber":673,"author":{"gitId":"iamakilahamed"},"content":"        **Expected:** The visitor that was checked in successfully can be found in the `TrackingList.txt` file.","lastModifiedDate":"2021-04-09"},{"lineNumber":674,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":675,"author":{"gitId":"iamakilahamed"},"content":"#### Exiting CYC","lastModifiedDate":"2021-04-09"},{"lineNumber":676,"author":{"gitId":"iamakilahamed"},"content":"1. Exit","lastModifiedDate":"2021-04-09"},{"lineNumber":677,"author":{"gitId":"iamakilahamed"},"content":"    1. **Test case:** `exit`","lastModifiedDate":"2021-04-09"},{"lineNumber":678,"author":{"gitId":"iamakilahamed"},"content":"        ","lastModifiedDate":"2021-04-09"},{"lineNumber":679,"author":{"gitId":"iamakilahamed"},"content":"        **Expected** A exit message will be shown.","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"iamakilahamed":260,"JonathanKhooTY":238,"limwenfeng":49,"sarzorwyn":40,"hussain1998":66,"-":26}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"![Banner](images/github_ug_photo.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"# Welcome to Control Your Crowd!","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any locations or events.","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"Users can interact with it using a Command Line Interface (CLI).","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"iamakilahamed":5,"-":6}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"# Control Your Crowd - Setting up","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"## Prerequisites","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"1. JDK `11` or above","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"   *  [Amazon Corretto JDK 11](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html)","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"2. [IntelliJ IDEA](https://www.jetbrains.com/idea/download/) IDE","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"## Setting up the project on your device","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"1. Fork the github repo at the following [link](https://github.com/AY2021S2-CS2113T-T09-1/tp)","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"2. Clone the fork onto your device","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"3. Open the project","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"4. Set up the correct JDK version for Gradle","lastModifiedDate":"2021-04-11"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"   * Click `File` \u003e `Project Structure`","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"   ![img.png](images/SettingUpDropdownMenu.png) ","lastModifiedDate":"2021-04-11"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"     ","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"   * Click `Edit` ","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"  ![img.png](images/ProjectStructureEdit.png) ","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"   * Click `+` \u003e `Add jdk`","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"     ","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"      ![img.png](images/img.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"      * JDK `11` is recommended for maximum compatibility with the project.","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"5. `Windows`: Open the console and run the command `gradlew processResources`","lastModifiedDate":"2021-04-11"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"   ","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"   `macOS/Linux`: Open the console and run the command `./gradlew processResources`","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"6. If the task returns `BUILD SUCCESSFUL`, the set up has been successful","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"## Configuring the coding style","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"The project follows the following [java coding standards](https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc).","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"1. Go to `File`\u003e`Settings...` (Windows/Linux), or `IntelliJ IDEA`\u003e`Preferences...` (macOS)","lastModifiedDate":"2021-04-11"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"2. Select `Editor` \u003e `Code Style` \u003e `Java`","lastModifiedDate":"2021-04-11"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"3. Click on the `Imports` tab","lastModifiedDate":"2021-04-11"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"    * For `Class count to use import with \u0027*\u0027` and `Names count to use static import \u0027*\u0027`:","lastModifiedDate":"2021-04-11"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    Set to `999` to prevent auto contracting of import statements to `*`","lastModifiedDate":"2021-04-11"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"s","lastModifiedDate":"2021-04-11"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"## Getting started with coding","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"Once you are done with the setup, you can return to the [Developer Guide](DeveloperGuide.md) ","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"to understand the overall design.","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"sarzorwyn":38}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"![Banner](images/github_ug_photo.png)","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"# User Guide for Control Your Crowd (CYC)","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"* [1. Introduction](UserGuide.md#1-introduction)","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"* [2. Quick Start](UserGuide.md#2-quick-start)","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"* [3. Features](UserGuide.md#3--features)","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"    * [3.1 Viewing help](UserGuide.md#31-viewing-help-help): `help`","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"    * [3.2 Check-in a person](UserGuide.md#32-check-in-a-person-checkin): `checkin`","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    * [3.3 Listing all persons](UserGuide.md#33-listing-all-persons-listall): `listall`","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    * [3.4 Listing checked-in persons only](UserGuide.md#34-listing-checked-in-persons-only-listcheckedin): `listcheckedin`","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    * [3.5 Finding a person by ID](UserGuide.md#35-finding-a-person-by-id-number-find): `find`","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    * [3.6 Checkout a person](UserGuide.md#36-check-out-a-person-checkout): `checkout`","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    * [3.7 Clearing all entries](UserGuide.md#37-clearing-all-entries-clear): `clear`","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    * [3.8 Edit venue capacity](UserGuide.md#38-edit-venue-capacity-editmax): `editmax`","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    * [3.9 Move Storage](UserGuide.md#39-change-storage-location-movestorage): `movestorage`","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    * [3.10 Exiting the program](UserGuide.md#310-exiting-cyc-exit): `exit`","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    * [3.11 Visitor Log](UserGuide.md#311-visitor-log)","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    * [3.12 Auto Save](UserGuide.md#312-auto-save)","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    * [3.13 Changing save location](UserGuide.md#313-changing-save-location)","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    * [3.14 History](UserGuide.md#314-history)","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"* [4. FAQ](UserGuide.md#4-faq)","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"* [5. Command summary](UserGuide.md#5-command-summary)","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"## 1. Introduction","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"Welcome to the User Guide of **Control Your Crowd**!","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"Our application, Control Your Crowd (CYC), will allow you to manage your crowds in real-time. It allows efficient ","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"tracking and accessing of visitors\u0027 profiles. You can also easily check-in and check out a visitor, get the current ","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"crowd level, limit the venue capacity, save the visitor log for future references, and much more! ","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"CYC is an all-in-one application to help event management team, event organizers for events such as Ultra Music","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"Festival manage crowd level with ease. It also works very well for small enterprises and mall management team that","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"needs to monitor influx of visitors. ","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"The application uses a Command Line Interface (CLI); this means that you operate the ","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"application by typing commands into a command window. With simple and easy-to-use commands, ","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"CYC provides you with efficient crowd management which is faster than traditional ","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"Graphical User Interface (GUI) applications can offer. GUI applications ","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"allow the user to interact with the application through graphical icons such as buttons and clickable.","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"Jump to [Quick Start](UserGuide.md#quick-start) to learn how to manage your crowd efficiently","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"with CYC.","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"## 2. Quick Start","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"\u003e Prerequisites:","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Ensure that you have **Java 11** or above installed in your Computer. If you do not have, you can get it from","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"\u003e   [here](https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html).","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"1. Download the latest version of `CYC.jar` from [here](https://github.com/AY2021S2-CS2113T-T09-1/tp/releases).","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":"2. Copy the file to the folder you want to use as the home folder for your CYC.","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"3. Open up a command window to the location where your `CYC.jar` is located.","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"4. Run the command `java -jar CYC.jar [VENUE_MAXIMUM_CAPACITY]`. For example, ","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"   `java -jar CYC.jar 500`.","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"iamakilahamed"},"content":"   * Ensure that the `VENUE_MAXIMUM_CAPACITY` entered is a positive integer that does not exceed 6 digits.","lastModifiedDate":"2021-04-02"},{"lineNumber":58,"author":{"gitId":"iamakilahamed"},"content":"     * You can enter input the `VENUE_MAXIMUM_CAPACITY` with or without quotations. ","lastModifiedDate":"2021-04-02"},{"lineNumber":59,"author":{"gitId":"iamakilahamed"},"content":"       For example, `500` and `\"500\"` will both work.","lastModifiedDate":"2021-04-02"},{"lineNumber":60,"author":{"gitId":"iamakilahamed"},"content":"   * When you are running the `CYC.jar` again, ensure that the `[venue maximum capacity]` is more than the current","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"iamakilahamed"},"content":"     number of visitors checked in. Failure to do so will lead to negative maximum venue capacity.     ","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"iamakilahamed"},"content":"5. If the setup is correct, you should see CYC being loaded as shown below (note: your version of CYC would be the ","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"iamakilahamed"},"content":"   latest version).","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"iamakilahamed"},"content":"   ","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"   ![QuickStart](images/welcomemessage.png)","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"iamakilahamed"},"content":"   ","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"iamakilahamed"},"content":"6. Input the command in the command window and press Enter to execute it. Refer to [Features](UserGuide.md#features)","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"iamakilahamed"},"content":"   for details of each command.","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"iamakilahamed"},"content":"\u003e Tips and Additional Notes: ","lastModifiedDate":"2021-04-02"},{"lineNumber":71,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Maximize the command line window to ensure that you get to make use of the visuals of CYC CLI.","lastModifiedDate":"2021-04-02"},{"lineNumber":72,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Do **NOT** edit the `LogFile.txt`, `TrackingList.txt` or `History.txt` files.","lastModifiedDate":"2021-04-02"},{"lineNumber":73,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * You are only allowed to copy the contents of the `History.txt` file.","lastModifiedDate":"2021-04-02"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"## 3.  Features ","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":77,"author":{"gitId":"iamakilahamed"},"content":"\u003e Notes about the command format:","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Commands are in `lower_case`.","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Items in square brackets `[ ]` are optional.","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Words in `UPPER_CASE` are the parameters to be supplied by user.","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"iamakilahamed"},"content":"\u003e    * E.g. in `checkin n/NAME i/LAST_4_CHARS_OF_ID`, `NAME` is a parameter that has to be supplied by user. So e.g. `checkin n/John i/123A`.","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"iamakilahamed"},"content":"\u003e * Additional parameters for commands that do not take in parameters (such as `help`, `list`, `exit`, `clear`) will be ignored.","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * e.g. if the user types `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"iamakilahamed"},"content":"\u003e * `i/LAST_4_CHARS_OF_ID` is unique. (i.e. no two persons will have the same ID)","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"### 3.1 Viewing help: `help`","lastModifiedDate":"2021-04-06"},{"lineNumber":87,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"This command will provide you a summary of the all the commands with its corresponding format.","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"This command will help you in situations when you forget the available commands, or their format while on duty.","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `help`","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"iamakilahamed"},"content":"#### Example Input: `help`","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"limwenfeng"},"content":"![help](images/help.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":99,"author":{"gitId":"limwenfeng"},"content":"### 3.2 Check-in a person: `checkin`","lastModifiedDate":"2021-04-06"},{"lineNumber":100,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"Supposed there is a visitor,","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"you can check in a person to CYC via `checkin` command. After a successful check-in, CYC will also notify you on the","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"current venue capacity.","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"iamakilahamed"},"content":"#### Format: ","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"limwenfeng"},"content":"`checkin i/LAST_4_CHARS_OF_ID n/NAME [p/PHONE_NUMBER]`","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"JonathanKhooTY"},"content":"* First 3 characters of `LAST_4_CHARS_OF_ID` should be integers.  Last character of `LAST_4_CHARS_OF_ID` must be in `CAPS`.","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"JonathanKhooTY"},"content":"* `NAME` is optional. If the user has checked in before, entering the `LAST_4_CHARS_OF_ID` is sufficient to retrieve the user\u0027s `NAME` and `PHONE_NUMBER` ","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"JonathanKhooTY"},"content":"  from previous check in. **If the user has not checked in before, `NAME` must be entered.**","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"* `NAME` must only contain english alphabet letters and empty spaces with a maximum character limit of 30. Any other characters will not be accepted.","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"JonathanKhooTY"},"content":"* `PHONE_NUMBER` is optional. `PHONE_NUMBER` must consist of 8 integers, as per local (Singapore) phone number format.","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"limwenfeng"},"content":"Supposedly John is a new visitor and he wants to check in. Since it is his first time visiting, you should check in John using his","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"iamakilahamed"},"content":"`i/LAST_4_CHARS_OF_ID`, `n/NAME` and `[p/PHONE_NUMBER]` as shown below.","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"limwenfeng"},"content":"#### Example Input:","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"iamakilahamed"},"content":"`checkin i/123A n/John p/91231112`","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"limwenfeng"},"content":"When John visits again in the future, you would only need to check in ","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"limwenfeng"},"content":"using his `i/LAST_4_CHARS_OF_ID` as shown below.","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"iamakilahamed"},"content":"`checkin i/123A`","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"iamakilahamed"},"content":"For both new visitor and returning visitor, you should observe the following output.","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"limwenfeng"},"content":"![checkin_success](images/checkin_success.png)","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"iamakilahamed"},"content":"However, you should expect the following output when the maximum capacity is reached.","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"limwenfeng"},"content":"![checkin_fail](images/checkinFail.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"iamakilahamed"},"content":"\u003e Additional Note:","lastModifiedDate":"2021-04-02"},{"lineNumber":134,"author":{"gitId":"iamakilahamed"},"content":"\u003e * If you attempt to check in a visitor who has already checked in, CYC will display the success message.","lastModifiedDate":"2021-04-02"},{"lineNumber":135,"author":{"gitId":"iamakilahamed"},"content":"\u003e   * If you want to find out if a particular visitor has been checked in, you can use `find i/LAST_4_CHARS_OF_ID`.","lastModifiedDate":"2021-04-02"},{"lineNumber":136,"author":{"gitId":"iamakilahamed"},"content":"\u003e     You can click [here](UserGuide.md#finding-a-person-by-id-number-find) to learn more about that command.","lastModifiedDate":"2021-04-02"},{"lineNumber":137,"author":{"gitId":"iamakilahamed"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":138,"author":{"gitId":"limwenfeng"},"content":"### 3.3 Listing all persons: listall","lastModifiedDate":"2021-04-06"},{"lineNumber":139,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":140,"author":{"gitId":"limwenfeng"},"content":"Supposed you want to find out all the visitors that had entered the venue,","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"limwenfeng"},"content":"it can be done with `listall`. This command shows a list of all persons","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"limwenfeng"},"content":"who have checked-in and checked out. The ID and phone numbers are also ","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"limwenfeng"},"content":"shown in case you need to contact any of these visitors. However,","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"limwenfeng"},"content":"if the visitor\u0027s phone number has not been registered with CYC, it will","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"limwenfeng"},"content":"be shown as `--`.","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":147,"author":{"gitId":"iamakilahamed"},"content":"Format: `listall`","lastModifiedDate":"2021-03-26"},{"lineNumber":148,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":149,"author":{"gitId":"iamakilahamed"},"content":"Example Input: `listall`","lastModifiedDate":"2021-03-26"},{"lineNumber":150,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":151,"author":{"gitId":"iamakilahamed"},"content":"Example Output:","lastModifiedDate":"2021-03-26"},{"lineNumber":152,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"limwenfeng"},"content":"![listall_success](images/listall_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":155,"author":{"gitId":"iamakilahamed"},"content":"### 3.4 Listing checked-in persons only: `listcheckedin`","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":157,"author":{"gitId":"iamakilahamed"},"content":"`listcheckedin` command is similar to `listall`, the only difference is that `listcheckedin` only","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"limwenfeng"},"content":"returns the list of visitors that are still in the venue or have not check out.","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"limwenfeng"},"content":"Shows a list of all persons with their details currently checked in. It also shows the number of people ","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"iamakilahamed"},"content":"remaining to reach the maximum capacity for that venue.","lastModifiedDate":"2021-03-26"},{"lineNumber":161,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":162,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `listcheckedin`","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":164,"author":{"gitId":"iamakilahamed"},"content":"#### Example Input: `listcheckedin`","lastModifiedDate":"2021-04-07"},{"lineNumber":165,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":166,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"limwenfeng"},"content":"![list_success](images/list_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":170,"author":{"gitId":"limwenfeng"},"content":"### 3.5 Finding a person by ID number: `find`","lastModifiedDate":"2021-04-06"},{"lineNumber":171,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":172,"author":{"gitId":"limwenfeng"},"content":"You can use `find` command if you need to check whether a particular visitor","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"limwenfeng"},"content":"is still in the venue or check for his/her particulars.","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"iamakilahamed"},"content":"Given the person\u0027s last 4 characters of ID, we can find the details of the person and status (Checked in, or checked out)","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `find i/LAST_4_CHARS_OF_ID`","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":178,"author":{"gitId":"JonathanKhooTY"},"content":"* First 3 characters of `LAST_4_CHARS_OF_ID` should be integers.  Last character of `LAST_4_CHARS_OF_ID` must be in `CAPS`.","lastModifiedDate":"2021-03-27"},{"lineNumber":179,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"iamakilahamed"},"content":"#### Example input: `find i/123A`","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":182,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"limwenfeng"},"content":"![find_success](images/find_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":186,"author":{"gitId":"limwenfeng"},"content":"### 3.6 Check out a person: `checkout`","lastModifiedDate":"2021-04-06"},{"lineNumber":187,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":188,"author":{"gitId":"limwenfeng"},"content":"You can check out a visitor from CYC, when he/she is leaving from the venue via","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"limwenfeng"},"content":"`checkout` command. By doing so, you will be removing the visitor from checked in","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"limwenfeng"},"content":"list in CYC. However, person\u0027s particulars will be retained for a faster ","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"limwenfeng"},"content":"check in the following visit.","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":193,"author":{"gitId":"JonathanKhooTY"},"content":"#### Format: `checkout i/LAST_4_CHARS_OF_ID`","lastModifiedDate":"2021-04-05"},{"lineNumber":194,"author":{"gitId":"JonathanKhooTY"},"content":"* First 3 characters of `LAST_4_CHARS_OF_ID` should be integers.  Last character of `LAST_4_CHARS_OF_ID` must be in `CAPS`.","lastModifiedDate":"2021-03-27"},{"lineNumber":195,"author":{"gitId":"JonathanKhooTY"},"content":"* `checkout` only accepts 1 `i/` flag, with the last 4 characters of ID. ","lastModifiedDate":"2021-04-05"},{"lineNumber":196,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":197,"author":{"gitId":"JonathanKhooTY"},"content":"#### Example input: `checkout i/123A`","lastModifiedDate":"2021-04-05"},{"lineNumber":198,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":199,"author":{"gitId":"iamakilahamed"},"content":"#### Example output:","lastModifiedDate":"2021-03-29"},{"lineNumber":200,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"limwenfeng"},"content":"![checkout_success](images/checkout_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"limwenfeng"},"content":"### 3.7 Clearing all entries: `clear`","lastModifiedDate":"2021-04-06"},{"lineNumber":204,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":205,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"limwenfeng"},"content":"`clear` command clears all entries stored by the program. It could be useful","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"limwenfeng"},"content":"to clear CYC data at the end of the day, or when required. However, this is ","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"limwenfeng"},"content":"not recommended as you will lose track of the visitors who have not check out.","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"limwenfeng"},"content":"Therefore, use `clear` command with caution.","lastModifiedDate":"2021-03-31"},{"lineNumber":210,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":211,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `clear`","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":213,"author":{"gitId":"iamakilahamed"},"content":"#### Example Input: `clear`","lastModifiedDate":"2021-03-29"},{"lineNumber":214,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":215,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"limwenfeng"},"content":"![clear_success](images/clear_4_entries.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":219,"author":{"gitId":"limwenfeng"},"content":"### 3.8 Edit venue capacity: `editmax`","lastModifiedDate":"2021-04-06"},{"lineNumber":220,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":221,"author":{"gitId":"limwenfeng"},"content":"In the event that requires the venue capacity to change, you ","lastModifiedDate":"2021-03-31"},{"lineNumber":222,"author":{"gitId":"limwenfeng"},"content":"can update the new venue capacity in CYC using `editmax` command.","lastModifiedDate":"2021-03-31"},{"lineNumber":223,"author":{"gitId":"JonathanKhooTY"},"content":"Edits the max capacity of the venue.","lastModifiedDate":"2021-03-26"},{"lineNumber":224,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":225,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":226,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":227,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `editmax NEW_CAPACITY`","lastModifiedDate":"2021-03-29"},{"lineNumber":228,"author":{"gitId":"iamakilahamed"},"content":"* `NEW_CAPACITY` must be a positive integer and not more than six digits.","lastModifiedDate":"2021-03-31"},{"lineNumber":229,"author":{"gitId":"iamakilahamed"},"content":"* The program crashes if you do not provide `NEW_CAPACITY`.","lastModifiedDate":"2021-04-02"},{"lineNumber":230,"author":{"gitId":"iamakilahamed"},"content":"    * This bug will be fixed in the next release.","lastModifiedDate":"2021-04-02"},{"lineNumber":231,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":232,"author":{"gitId":"limwenfeng"},"content":"#### Example Input: `editmax 150`","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":234,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":236,"author":{"gitId":"limwenfeng"},"content":"![editmax_success](images/editmax_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":238,"author":{"gitId":"limwenfeng"},"content":"### 3.9 Change storage location: `movestorage`","lastModifiedDate":"2021-04-06"},{"lineNumber":239,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":240,"author":{"gitId":"sarzorwyn"},"content":"This command allows you to move the location of the saved file, if you desire a different location ","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"sarzorwyn"},"content":"from the default setting. A suggested use would be to use it to backup files.","lastModifiedDate":"2021-04-04"},{"lineNumber":242,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":243,"author":{"gitId":"sarzorwyn"},"content":"\u003e Additional Notes:","lastModifiedDate":"2021-04-04"},{"lineNumber":244,"author":{"gitId":"sarzorwyn"},"content":"\u003e * The path specified has to be unused.","lastModifiedDate":"2021-04-04"},{"lineNumber":245,"author":{"gitId":"sarzorwyn"},"content":"\u003e * The path specified will have `.txt` to the end of it.","lastModifiedDate":"2021-04-04"},{"lineNumber":246,"author":{"gitId":"sarzorwyn"},"content":"\u003e * The previous location will be deleted by the program.","lastModifiedDate":"2021-04-04"},{"lineNumber":247,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":248,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `movestorage NEW_DESTINATION`","lastModifiedDate":"2021-03-29"},{"lineNumber":249,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":250,"author":{"gitId":"iamakilahamed"},"content":"#### Example Input: `movestorage /new/test`","lastModifiedDate":"2021-03-29"},{"lineNumber":251,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":252,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output:","lastModifiedDate":"2021-03-29"},{"lineNumber":253,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"limwenfeng"},"content":"![movestorage_success](images/moveStorage_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":255,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":256,"author":{"gitId":"limwenfeng"},"content":"### 3.10 Exiting CYC: `exit`","lastModifiedDate":"2021-04-06"},{"lineNumber":257,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":258,"author":{"gitId":"limwenfeng"},"content":"`exit` command will save the current state of CYC before exiting the programme. ","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":260,"author":{"gitId":"iamakilahamed"},"content":"#### Format: `exit`","lastModifiedDate":"2021-03-29"},{"lineNumber":261,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":262,"author":{"gitId":"iamakilahamed"},"content":"#### Example Input: `exit`","lastModifiedDate":"2021-03-29"},{"lineNumber":263,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":264,"author":{"gitId":"iamakilahamed"},"content":"#### Example Output: ","lastModifiedDate":"2021-03-29"},{"lineNumber":265,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":266,"author":{"gitId":"limwenfeng"},"content":"![exit](images/exit_success.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":268,"author":{"gitId":"limwenfeng"},"content":"### 3.11 Visitor Log","lastModifiedDate":"2021-04-06"},{"lineNumber":269,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":270,"author":{"gitId":"limwenfeng"},"content":"CYC automatically saves the details of previous persons therefore providing the users with a","lastModifiedDate":"2021-03-31"},{"lineNumber":271,"author":{"gitId":"limwenfeng"},"content":"convenient location to retrieve all particulars and details of visitors. ","lastModifiedDate":"2021-03-31"},{"lineNumber":272,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":273,"author":{"gitId":"limwenfeng"},"content":"With Visitor log,","lastModifiedDate":"2021-03-31"},{"lineNumber":274,"author":{"gitId":"limwenfeng"},"content":"a person who have checked in before, does not have to input all his details ","lastModifiedDate":"2021-03-31"},{"lineNumber":275,"author":{"gitId":"limwenfeng"},"content":"again when using the `checkin` command.","lastModifiedDate":"2021-03-31"},{"lineNumber":276,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":277,"author":{"gitId":"hussain1998"},"content":"The person details are stored in `/LogFile.txt` in the same folder as the program.","lastModifiedDate":"2021-03-27"},{"lineNumber":278,"author":{"gitId":"limwenfeng"},"content":"You can reset Visitor Log by exiting CYC and deleting it before reboot. ","lastModifiedDate":"2021-04-02"},{"lineNumber":279,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":280,"author":{"gitId":"limwenfeng"},"content":"### 3.12 Auto Save","lastModifiedDate":"2021-04-06"},{"lineNumber":281,"author":{"gitId":"sarzorwyn"},"content":"The program automatically saves data to a `.txt` file after each command you input.","lastModifiedDate":"2021-03-27"},{"lineNumber":282,"author":{"gitId":"sarzorwyn"},"content":"The program defaults to saving to `/TrackingList.txt` in the same folder as the program.","lastModifiedDate":"2021-03-27"},{"lineNumber":283,"author":{"gitId":"limwenfeng"},"content":"As such, you do not have to worry about saving the data or memory loss in case of","lastModifiedDate":"2021-03-31"},{"lineNumber":284,"author":{"gitId":"limwenfeng"},"content":"programme crash. ","lastModifiedDate":"2021-03-31"},{"lineNumber":285,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":286,"author":{"gitId":"limwenfeng"},"content":"### 3.13 Changing save location","lastModifiedDate":"2021-04-06"},{"lineNumber":287,"author":{"gitId":"limwenfeng"},"content":"To change the save location, you can use the command `movestorage`. The command format for move storage","lastModifiedDate":"2021-03-31"},{"lineNumber":288,"author":{"gitId":"limwenfeng"},"content":"is stated above. ","lastModifiedDate":"2021-03-31"},{"lineNumber":289,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":290,"author":{"gitId":"sarzorwyn"},"content":"If the user deletes the folder of the new path, the program may run into write errors.","lastModifiedDate":"2021-04-04"},{"lineNumber":291,"author":{"gitId":"sarzorwyn"},"content":"To resolve the issue, `settings.properties` should be deleted to reset the program state.","lastModifiedDate":"2021-04-04"},{"lineNumber":292,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":293,"author":{"gitId":"limwenfeng"},"content":"### 3.14 History","lastModifiedDate":"2021-04-06"},{"lineNumber":294,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":295,"author":{"gitId":"limwenfeng"},"content":"CYC automatically keeps a back up of the checkin and checkout history in `history.txt` file after","lastModifiedDate":"2021-03-31"},{"lineNumber":296,"author":{"gitId":"limwenfeng"},"content":"each check in and check out operation.","lastModifiedDate":"2021-03-31"},{"lineNumber":297,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":298,"author":{"gitId":"limwenfeng"},"content":"Users, such as event organiser or mall owners, could therefore study these data for future planning and necessary","lastModifiedDate":"2021-03-28"},{"lineNumber":299,"author":{"gitId":"limwenfeng"},"content":"upgrade of facilities. History data is also stored in CSV format, comma separated values such that it can be ","lastModifiedDate":"2021-03-31"},{"lineNumber":300,"author":{"gitId":"limwenfeng"},"content":"extracted and cleaned to use for automatic data analytics.","lastModifiedDate":"2021-03-31"},{"lineNumber":301,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":302,"author":{"gitId":"iamakilahamed"},"content":"### Saving history","lastModifiedDate":"2021-03-29"},{"lineNumber":303,"author":{"gitId":"limwenfeng"},"content":"The program automatically saves the history to \u0027history.txt\u0027 file after each checkin and checkout operation.","lastModifiedDate":"2021-03-28"},{"lineNumber":304,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":305,"author":{"gitId":"iamakilahamed"},"content":"### Clearing history","lastModifiedDate":"2021-03-29"},{"lineNumber":306,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":307,"author":{"gitId":"limwenfeng"},"content":"In the unlikely event that, your machine runs out of storage space or you want to reset","lastModifiedDate":"2021-04-05"},{"lineNumber":308,"author":{"gitId":"limwenfeng"},"content":"the history. You can follow these steps, to clear history.","lastModifiedDate":"2021-03-31"},{"lineNumber":309,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":310,"author":{"gitId":"limwenfeng"},"content":"To clear history, please follow the following steps:","lastModifiedDate":"2021-03-28"},{"lineNumber":311,"author":{"gitId":"limwenfeng"},"content":"1. Exit CYC.","lastModifiedDate":"2021-03-28"},{"lineNumber":312,"author":{"gitId":"limwenfeng"},"content":"2. Locate the directory of CYC on the computer.","lastModifiedDate":"2021-03-28"},{"lineNumber":313,"author":{"gitId":"limwenfeng"},"content":"3. Locate `/History.txt` and delete the file directly. ","lastModifiedDate":"2021-03-28"},{"lineNumber":314,"author":{"gitId":"limwenfeng"},"content":"   (CYC will create a new History file upon a restart.)","lastModifiedDate":"2021-03-31"},{"lineNumber":315,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":316,"author":{"gitId":"limwenfeng"},"content":"## 4. FAQ","lastModifiedDate":"2021-04-06"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? ","lastModifiedDate":"2020-05-24"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":320,"author":{"gitId":"hussain1998"},"content":"**A**: Please follow these steps:","lastModifiedDate":"2021-03-27"},{"lineNumber":321,"author":{"gitId":"hussain1998"},"content":"1. Follow the [Quick Start](UserGuide.md#quick-start) guide and install CYC on the computer","lastModifiedDate":"2021-03-27"},{"lineNumber":322,"author":{"gitId":"limwenfeng"},"content":"2. Transfer the `/History.txt`,`/LogFile.txt` and `/TrackingList.txt` to the target computer\u0027s main CYC folder.","lastModifiedDate":"2021-03-28"},{"lineNumber":323,"author":{"gitId":"hussain1998"},"content":"3. Start CYC and it will automatically load the data.","lastModifiedDate":"2021-03-27"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":325,"author":{"gitId":"limwenfeng"},"content":"**Q**: What does `Clear` command clears exactly?","lastModifiedDate":"2021-04-05"},{"lineNumber":326,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":327,"author":{"gitId":"limwenfeng"},"content":"**A**: `Clear` command only clears the visitors that are checked in. However, it does not clear the person log. Which","lastModifiedDate":"2021-04-05"},{"lineNumber":328,"author":{"gitId":"limwenfeng"},"content":"means if you had checked in a person with name: John, Id: 123A. After executing `clear` command, CYC will not allow you","lastModifiedDate":"2021-04-05"},{"lineNumber":329,"author":{"gitId":"limwenfeng"},"content":"to check in another person with name: James, Id: 123A as CYC will detect that the Id is a duplicate despite its two ","lastModifiedDate":"2021-04-05"},{"lineNumber":330,"author":{"gitId":"limwenfeng"},"content":"different people.","lastModifiedDate":"2021-04-05"},{"lineNumber":331,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":332,"author":{"gitId":"limwenfeng"},"content":"## 5. Command Summary","lastModifiedDate":"2021-04-06"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":335,"author":{"gitId":"iamakilahamed"},"content":"Action | Format | Examples","lastModifiedDate":"2021-03-26"},{"lineNumber":336,"author":{"gitId":"iamakilahamed"},"content":"--- | --- | ---","lastModifiedDate":"2021-03-26"},{"lineNumber":337,"author":{"gitId":"iamakilahamed"},"content":"Help | `help` | `help`","lastModifiedDate":"2021-03-26"},{"lineNumber":338,"author":{"gitId":"limwenfeng"},"content":"Check-in a person | `checkin i/LAST_4_CHARS_OF_ID n/NAME [p/PHONE_NUMBER]` | `checkin  i/123A n/John p/91231112`","lastModifiedDate":"2021-03-28"},{"lineNumber":339,"author":{"gitId":"iamakilahamed"},"content":"List all person | `listall` | `listall`","lastModifiedDate":"2021-03-26"},{"lineNumber":340,"author":{"gitId":"iamakilahamed"},"content":"List checked-in persons only | `listcheckedin` | `listcheckedin`","lastModifiedDate":"2021-04-06"},{"lineNumber":341,"author":{"gitId":"iamakilahamed"},"content":"Find person by ID | `find i/LAST_4_CHARS_OF_ID` | `find i/123A`","lastModifiedDate":"2021-03-26"},{"lineNumber":342,"author":{"gitId":"JonathanKhooTY"},"content":"Checkout a person | `checkout i/LAST_4_CHARS_OF_ID` | `checkout i/123A`","lastModifiedDate":"2021-04-07"},{"lineNumber":343,"author":{"gitId":"iamakilahamed"},"content":"Clear all entries | `clear` | `clear`","lastModifiedDate":"2021-03-26"},{"lineNumber":344,"author":{"gitId":"iamakilahamed"},"content":"Edit venue capacity | `editmax NEW_CAPACITY` | `editmax 100`","lastModifiedDate":"2021-03-26"},{"lineNumber":345,"author":{"gitId":"iamakilahamed"},"content":"Move storage | `movestorage PATH` | `movestorage data/storage`","lastModifiedDate":"2021-03-27"},{"lineNumber":346,"author":{"gitId":"iamakilahamed"},"content":"Exit | `exit` | `exit`","lastModifiedDate":"2021-03-26"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"JonathanKhooTY":43,"iamakilahamed":127,"limwenfeng":127,"sarzorwyn":17,"hussain1998":8,"-":26}},{"path":"docs/team/hussain1998.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"layout: page","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"title: Hussain\u0027s CYC Project Portfolio Page","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"### Project: Control Your Crowd","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any location or events. ","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"The user interacts with it using a Command Line Interface (CLI). It is written in Java using the ","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"Object-oriented programming (OOP) paradigm.","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"* **New Feature**: ","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"* **New Feature**: ","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dhussain1998\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-03-05\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dhussain1998\u0026tabRepo\u003dAY2021S2-CS2113T-T09-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"* **Project management**:","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    ","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"* **Documentation**:","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"* **Community**:","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"* **Tools**:","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    * Integrated a third party library ([Gson](https://github.com/google/gson)) to the project.","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"hussain1998":29}},{"path":"docs/team/iamakilahamed.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"# A Akil Ahamed - Project Portfolio","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"## PROJECT: Control Your Crowd","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"## Overview","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any location or events.","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"The user interacts with it using a Command Line Interface (CLI). It is written in Java using the","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"Object-oriented programming (OOP) paradigm.","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"## Summary of contributions","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"## Contributions to the User Guide","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"## Contributions to the Developer Guide","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"iamakilahamed":13}},{"path":"docs/team/jonathankhooty.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"# Jonathan Khoo - Project Portfolio Page","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"## Project: Control Your Crowd","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"## Overview","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any location or events.","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"The user interacts with it using a Command Line Interface (CLI). It is written in Java using the","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"Object-oriented programming (OOP) paradigm, and has about xxx LoC.","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"### Summary of Contributions","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for checkin functionality in CYC","lastModifiedDate":"2021-04-10"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to identify if user is entering","lastModifiedDate":"2021-04-10"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"    correct details, and to separate the information required by the checkin functionality ","lastModifiedDate":"2021-04-10"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"      from the unimportant information.","lastModifiedDate":"2021-04-10"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    * Highlights: This enhancement affects the ability of the checkin functionality to work. The implementation was challenging ","lastModifiedDate":"2021-04-10"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"    as it required a thorough consideration of all alternative user inputs which may be intepreted as errors, and the alternative ","lastModifiedDate":"2021-04-10"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"      user inputs which may be considered as valid. An important feature is it allows users who have ","lastModifiedDate":"2021-04-10"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"      previously checked in, to leave out either their phone number or their name. This dynamic input was ","lastModifiedDate":"2021-04-10"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"      challenging to implement as collaboration with the checkin functionality side had to be done consistently ","lastModifiedDate":"2021-04-10"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"      to ensure syncing.","lastModifiedDate":"2021-04-10"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"      ","lastModifiedDate":"2021-04-10"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for checkout functionality in CYC.","lastModifiedDate":"2021-04-10"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to identify if user is entering","lastModifiedDate":"2021-04-10"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"  correct details, and to separate the information required by the checkout functionality","lastModifiedDate":"2021-04-10"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"  from the unimportant information.","lastModifiedDate":"2021-04-10"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"    * Highlights: This enhancement affects the ability of the checkout functionality to work. The implementation was challenging","lastModifiedDate":"2021-04-10"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"      as it required a thorough consideration of all alternative user inputs which may be intepreted as errors, and the alternative","lastModifiedDate":"2021-04-10"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"      user inputs which may be considered as valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for listing functionality.","lastModifiedDate":"2021-04-10"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to identify if user is entering","lastModifiedDate":"2021-04-10"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"      correct details, and to separate the information required by the listing functionalities","lastModifiedDate":"2021-04-10"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"      from the unimportant information.","lastModifiedDate":"2021-04-10"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"    * Highlights: There are 2 listing functionalities in CYC, and the parser allows for identification","lastModifiedDate":"2021-04-10"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"      of either listing functionality: listing only checked in users, or listing all checked in and checked out ","lastModifiedDate":"2021-04-10"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"      users.","lastModifiedDate":"2021-04-10"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"      The implementation was challenging as it required a thorough consideration of all alternative user inputs which may be intepreted as errors, and the alternative","lastModifiedDate":"2021-04-10"},{"lineNumber":59,"author":{"gitId":"JonathanKhooTY"},"content":"      user inputs which may be considered as valid.","lastModifiedDate":"2021-04-10"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for search functionality.","lastModifiedDate":"2021-04-10"},{"lineNumber":62,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to identify if user is entering","lastModifiedDate":"2021-04-10"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"    correct details, and to separate the information required by the search functionality","lastModifiedDate":"2021-04-10"},{"lineNumber":65,"author":{"gitId":"JonathanKhooTY"},"content":"    from the unimportant information.","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":67,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":68,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"JonathanKhooTY"},"content":"    * Highlights: This search functionality allows for users to pull up the status of the user. Checks has to be","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"JonathanKhooTY"},"content":"    made, to ensure that the ID entered by the user is a valid ID.","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"JonathanKhooTY"},"content":"      ","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for clearing of log entries.","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to identify if user is entering","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"JonathanKhooTY"},"content":"      correct details.","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"JonathanKhooTY"},"content":"    that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"JonathanKhooTY"},"content":"    of usable information, and those that are not.   ","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for editing of maximum venue capacity.","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":85,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to set the maximum venue capacity determined by user.","lastModifiedDate":"2021-04-10"},{"lineNumber":86,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":89,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":90,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":91,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for help functionality.","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to display the help menu for user.","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":97,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for storage moving functionality.","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":102,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to set the local log storage address.","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":105,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":106,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":107,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":108,"author":{"gitId":"JonathanKhooTY"},"content":"* **New Feature**: Parsing for functionality to exit CYC.","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"JonathanKhooTY"},"content":"    * What it does: Processes and parses user input, to allow for shutdown and exit of CYC in a safe manner","lastModifiedDate":"2021-04-10"},{"lineNumber":111,"author":{"gitId":"JonathanKhooTY"},"content":"    that prevents data loss.","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"JonathanKhooTY"},"content":"    * Justification: This feature is crucial to the product since it is the first layer of filtering","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"JonathanKhooTY"},"content":"      that the user\u0027s input goes through. Invalid commands must be able to be filtered out, as well as separation","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"JonathanKhooTY"},"content":"      of usable information, and those that are not.","lastModifiedDate":"2021-04-10"},{"lineNumber":116,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":117,"author":{"gitId":"JonathanKhooTY"},"content":"* **Code contributed**:","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":119,"author":{"gitId":"JonathanKhooTY"},"content":"    [Reposense link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dJonathanKhooTY\u0026tabRepo\u003dAY2021S2-CS2113T-T09-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)","lastModifiedDate":"2021-04-10"},{"lineNumber":120,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":121,"author":{"gitId":"JonathanKhooTY"},"content":"* **Project management**:","lastModifiedDate":"2021-04-10"},{"lineNumber":122,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":123,"author":{"gitId":"JonathanKhooTY"},"content":"    * Collaborated with the team to manage releases of V1.0, V2.0, as well as the final V2.1.","lastModifiedDate":"2021-04-10"},{"lineNumber":124,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":125,"author":{"gitId":"JonathanKhooTY"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-04-10"},{"lineNumber":126,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":127,"author":{"gitId":"JonathanKhooTY"},"content":"* **Documentation**:","lastModifiedDate":"2021-04-10"},{"lineNumber":128,"author":{"gitId":"JonathanKhooTY"},"content":"    * User Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":129,"author":{"gitId":"JonathanKhooTY"},"content":"        1) ","lastModifiedDate":"2021-04-10"},{"lineNumber":130,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":131,"author":{"gitId":"JonathanKhooTY"},"content":"    * Developer Guide:","lastModifiedDate":"2021-04-10"},{"lineNumber":132,"author":{"gitId":"JonathanKhooTY"},"content":"        1) ","lastModifiedDate":"2021-04-10"},{"lineNumber":133,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":134,"author":{"gitId":"JonathanKhooTY"},"content":"* **Community**:","lastModifiedDate":"2021-04-10"},{"lineNumber":135,"author":{"gitId":"JonathanKhooTY"},"content":"    *","lastModifiedDate":"2021-04-10"},{"lineNumber":136,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-04-10"},{"lineNumber":137,"author":{"gitId":"JonathanKhooTY"},"content":"* **Tools**:","lastModifiedDate":"2021-04-10"},{"lineNumber":138,"author":{"gitId":"JonathanKhooTY"},"content":"    * ","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"JonathanKhooTY":138}},{"path":"docs/team/limwenfeng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"# Lim Wen Feng - Project Portfolio","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"## PROJECT: Control Your Crowd","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"## Overview","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any location or events.","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"The user interacts with it using a Command Line Interface (CLI). It is written in Java using the","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"Object-oriented programming (OOP) paradigm.","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"## Summary of contributions","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"### Code Contributions ","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"[RepoSense link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dlimwenfeng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-03-05\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"## Contributions to the User Guide","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"## Contributions to the Developer Guide","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"## Contributions to team-based tasks","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"## Review/mentoring contributions:","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"## Contributions beyond team project","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"limwenfeng":23}},{"path":"docs/team/sarzorwyn.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"# Ivan Tan Jia An - Project Portfolio","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"## PROJECT: Control Your Crowd","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"## Overview","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"Control Your Crowd (CYC) is a desktop application used for managing crowd levels at any location or events.","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"The user interacts with it using a Command Line Interface (CLI). It is written in Java using the","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"Object-oriented programming (OOP) paradigm and has about 4.5 kLoc.","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"## Summary of contributions","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"* New feature: Added the trackingList class.","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"* New feature: Added the ability to store the list.","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"    ","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"The code that has been contributed can be found [here](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-03-05\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dsarzorwyn\u0026tabRepo\u003dAY2021S2-CS2113T-T09-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"## Contributions to the User Guide","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"## Contributions to the Developer Guide","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"* Added the `storage` section diagrams and content","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"sarzorwyn":19}},{"path":"src/main/java/seedu/duke/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CommandOutput;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ExitCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckInException;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckoutException;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.HistoryStorageException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidArgumentSizeException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.storage.HistoryFile;","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.Location;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.parser.Parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.PersonLog;","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.storage.ConfigFile;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.storage.StorageFile;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.ui.TextUi;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"public class Main {","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"    private static final String VERSION_NO \u003d \"v2.0\";","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    private static final String EXIT_MESSAGE \u003d \"Exiting Control Your Crowd...\";","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    private TextUi ui;","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"    private Parser parser;","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"    private StorageFile storage;","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"    private TrackingList trackingList;","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"    private Location location;","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    private PersonLog personLog;","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"    private ConfigFile configFile;","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"    private HistoryFile historyFile;","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"    private static Main theOnlyMain \u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"    private Main() {","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"    public static Main getInstance() {","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"        if (theOnlyMain \u003d\u003d null) {","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"            theOnlyMain \u003d new Main();","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"        return theOnlyMain;","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"    public static void main(String[] args) throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"        getInstance().run(args);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"    /** Catches System.exit() and interrupts. Exits gracefully */","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    private void exitDuke() {","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"        ExitCommand command \u003d new ExitCommand();","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        CommandOutput commandOutput \u003d command.execute(trackingList);","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"        ui.printReaction(commandOutput);","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"    public void run(String[] args) throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"        Runtime.getRuntime().addShutdownHook(new Thread(this::exitDuke));","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"iamakilahamed"},"content":"        start(args);","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"        runUntilExit();","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"        exit();","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"    /** Prints Goodbye message then exists. */","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"    private void exit() throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"        historyFile.endHistory();","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"        System.exit(0);","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"iamakilahamed"},"content":"    /** Main entry-point for the java.duke.Main application. */","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"iamakilahamed"},"content":"    private void start(String[] args) {","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"        ui \u003d new TextUi();","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"        personLog \u003d PersonLog.getInstance();","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"            historyFile \u003d new HistoryFile();","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"            configFile \u003d new ConfigFile();","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":"            storage \u003d new StorageFile(configFile.getStorageFilePath());","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"            trackingList \u003d storage.load();","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"hussain1998"},"content":"            location \u003d new Location(args, trackingList.getCurrentCapacity());","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"            personLog.loadAllPersons();","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"            historyFile.startHistory();","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"iamakilahamed"},"content":"        } catch (StorageOperationException | HistoryStorageException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":"            // Shut the program down as it can not be recovered","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":"            // throw new RuntimeException();","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"            //PR testing for checks","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"hussain1998"},"content":"            ui.notifyErrorToUser(e);","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"iamakilahamed"},"content":"        } catch (InvalidMaxCapacityException | InvalidArgumentSizeException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"iamakilahamed"},"content":"            ui.notifyErrorToUser(e);","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"iamakilahamed"},"content":"            System.exit(0);","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"sarzorwyn"},"content":"        ui.showWelcomeMessage(VERSION_NO);","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"    /** Reads the user command and executes it, until the user issues the exit command. */","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"sarzorwyn"},"content":"    private void runUntilExit() {","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"hussain1998"},"content":"        Command command \u003d null;","lastModifiedDate":"2021-03-13"},{"lineNumber":106,"author":{"gitId":"hussain1998"},"content":"        String userInput;","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"hussain1998"},"content":"        do {","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"hussain1998"},"content":"            userInput \u003d ui.getUserInput();","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"hussain1998"},"content":"            try {","lastModifiedDate":"2021-03-13"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"                command \u003d parser.parseCommand(userInput);","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"iamakilahamed"},"content":"            } catch (InvalidCommandException | NoArgumentPassedException | WrongFlagException | InvalidIdException","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"iamakilahamed"},"content":"                    | InvalidNameFormatException | InvalidPhoneNumberException | StorageOperationException","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"iamakilahamed"},"content":"                    | InvalidIntegerException | PersonNotFoundException | InvalidMaxCapacityException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"limwenfeng"},"content":"                ui.notifyErrorToUser(e);","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"hussain1998"},"content":"                continue;","lastModifiedDate":"2021-03-13"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"hussain1998"},"content":"            CommandOutput commandOutput \u003d null;","lastModifiedDate":"2021-03-13"},{"lineNumber":119,"author":{"gitId":"hussain1998"},"content":"            try {","lastModifiedDate":"2021-03-13"},{"lineNumber":120,"author":{"gitId":"hussain1998"},"content":"                commandOutput \u003d command.execute(trackingList);","lastModifiedDate":"2021-03-13"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"                storage.save(trackingList);","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"hussain1998"},"content":"                personLog.saveAllPersons();","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":"                if (command instanceof ExitCommand) {","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":"                    break;","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"                }","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"sarzorwyn"},"content":"                ui.printReaction(commandOutput);","lastModifiedDate":"2021-03-20"},{"lineNumber":127,"author":{"gitId":"iamakilahamed"},"content":"            } catch (PersonNotFoundException | StorageOperationException | HistoryStorageException | CheckoutException","lastModifiedDate":"2021-04-06"},{"lineNumber":128,"author":{"gitId":"iamakilahamed"},"content":"                    | CheckInException | InvalidMaxCapacityException e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":129,"author":{"gitId":"hussain1998"},"content":"                //System.out.println(\"Person not found!\");","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"limwenfeng"},"content":"                ui.notifyErrorToUser(e);","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"JonathanKhooTY"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":133,"author":{"gitId":"hussain1998"},"content":"        } while (!(command instanceof ExitCommand));","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":135,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"iamakilahamed"},"content":"    public Location getLocation() {","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"iamakilahamed"},"content":"        return location;","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"sarzorwyn"},"content":"    public StorageFile getStorage() {","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"sarzorwyn"},"content":"        return storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"sarzorwyn"},"content":"    public void setStorage(StorageFile storage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":145,"author":{"gitId":"sarzorwyn"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"sarzorwyn"},"content":"    public ConfigFile getConfigFile() {","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"sarzorwyn"},"content":"        return configFile;","lastModifiedDate":"2021-03-27"},{"lineNumber":150,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":151,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"limwenfeng"},"content":"    public HistoryFile getHistoryFile() {","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"limwenfeng"},"content":"        return historyFile;","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"iamakilahamed":39,"JonathanKhooTY":2,"limwenfeng":27,"sarzorwyn":43,"hussain1998":40,"-":4}},{"path":"src/main/java/seedu/duke/common/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.common;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class Messages {","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    private static final String USER_GUIDE_LINK \u003d \"https://ay2021s2-cs2113t-t09-1.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"    public static final String GENERAL_INPUT_ERROR  \u003d \"If unsure, please use \u0027help\u0027 command to check the format.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"     * Messages for errors.","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    public static final String GENERAL_INVALID_INPUT \u003d \"If unsure, please use \u0027help\u0027 command to check the format.\";","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public static final String PERSON_NOT_FOUND \u003d \"Person not found!\";","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public static final String DIFF_NAME_SAME_ID \u003d \"Person with the same Id already exist!\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public static final String INVALID_COMMAND \u003d \"Invalid command detected, or you are missing parameters! Try again!\"","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"    public static final String NO_ARGUMENT \u003d \"No argument passed! Try again!\"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"    public static final String WRONG_FLAG \u003d \"Wrong flags used!\"","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    public static final String INVALID_MAX_CAPACITY_ARG \u003d \"Invalid argument for max capacity! Try again!\"","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + \"E.g. java -jar CYC.jar 1000\";","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    public static final String INVALID_ARGUMENT_SIZE \u003d \"There should be exactly 1 argument! Try again!\"","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + \"E.g. java -jar CYC.jar 1000\";","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    public static final String INVALID_MAX_CAPACITY \u003d \"Maximum capacity should be a positive integer that is less than\"","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"            + \" 7 digits.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    public static final String INVALID_MAX_CAPACITY_CHECKED_IN \u003d \"Maximum capacity should be more than the total\"","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"            + \" number of checked in people: \";","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"    public static final String ID_ERROR \u003d \"ID should be 3 digits followed by a uppercase letter.\"","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"    public static final String NAME_ERROR \u003d \"Name should consist of alphabets (or spaces) only. (30 characters limit)\"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"    public static final String PHONE_ERROR \u003d \"Phone number should consist of only 8 digits\"","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"            + System.lineSeparator() + GENERAL_INVALID_INPUT;","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    public static final String INVALID_INTEGER \u003d \"Argument should only consist of positive integers!\";","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"    public static final String ALREADY_CHECKEDOUT \u003d \"%s is already checked out.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    public static final String ALREADY_CHECKEDIN \u003d \"%s is already checked in.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"  ","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"     * Command summary for help command.","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKIN_HELP \u003d \"Check-in visitor: checkin n/NAME i/LAST_4_CHARS_OF_ID [p/PHONE_NUMBER]\";","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"    public static final String LIST_ALL_HELP \u003d \"List all visitors: listall\";","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"    public static final String LIST_CHECKED_IN_HELP \u003d \"List checked-in visitors only: listcheckedin\";","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"    public static final String FIND_BY_ID_HELP \u003d \"Find visitor by ID: find i/LAST_4_CHARS_OF_ID\";","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKOUT_HELP \u003d \"Checkout visitor: checkout i/LAST_4_CHARS_OF_ID\";","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CLEAR_HELP \u003d \"Clear all visitor entries: clear\";","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"    public static final String EDIT_CAPACITY_HELP \u003d \"Edit venue capacity: editmax NEW_CAPACITY\";","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"    public static final String MOVE_STORAGE_HELP \u003d \"Move location of storage file: movestorage PATH\";","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"    public static final String EXIT_HELP \u003d \"Exit Control Your Crowd: exit\";","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"    public static final String USER_GUIDE_LINK_HELP \u003d \"Refer to the user guide: \" + USER_GUIDE_LINK;","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"JonathanKhooTY":4,"iamakilahamed":25,"limwenfeng":19,"hussain1998":3}},{"path":"src/main/java/seedu/duke/datetime/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package seedu.duke.datetime;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"public class DateTime {","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"    DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    LocalDateTime dateAndTime \u003d LocalDateTime.now();","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    LocalDate dateOnly \u003d LocalDate.now();","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"    public String getDateAndTimeInString() {","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"        return dtf.format(dateAndTime);","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"    public String getDateInString() {","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"        return df.format(dateOnly);","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"limwenfeng":20}},{"path":"src/main/java/seedu/duke/exceptions/CheckInException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"public class CheckInException extends Exception {","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public CheckInException(String errorMessage) {","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"iamakilahamed":9}},{"path":"src/main/java/seedu/duke/exceptions/CheckoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"public class CheckoutException extends Exception {","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public CheckoutException(String errorMessage) {","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"iamakilahamed":9}},{"path":"src/main/java/seedu/duke/exceptions/HistoryStorageException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":" * Indicates that there has been an error when converting data or read/write between the application","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":" * and the history file.","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"public class HistoryStorageException extends Exception {","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"    public HistoryStorageException(String message) {","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"        super(message);","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"limwenfeng":13}},{"path":"src/main/java/seedu/duke/exceptions/InvalidArgumentSizeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"public class InvalidArgumentSizeException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public InvalidArgumentSizeException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"iamakilahamed":9}},{"path":"src/main/java/seedu/duke/exceptions/InvalidCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"JonathanKhooTY":4,"iamakilahamed":5}},{"path":"src/main/java/seedu/duke/exceptions/InvalidIdException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidIdException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"    public InvalidIdException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"JonathanKhooTY":7}},{"path":"src/main/java/seedu/duke/exceptions/InvalidIntegerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidIntegerException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"    public InvalidIntegerException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"JonathanKhooTY":7}},{"path":"src/main/java/seedu/duke/exceptions/InvalidMaxCapacityException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"public class InvalidMaxCapacityException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public InvalidMaxCapacityException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"iamakilahamed":9}},{"path":"src/main/java/seedu/duke/exceptions/InvalidNameFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidNameFormatException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"    public InvalidNameFormatException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"JonathanKhooTY":7}},{"path":"src/main/java/seedu/duke/exceptions/InvalidPhoneNumberException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidPhoneNumberException extends Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"    public InvalidPhoneNumberException(String errorMessage) {","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"JonathanKhooTY":7}},{"path":"src/main/java/seedu/duke/exceptions/NoArgumentPassedException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class NoArgumentPassedException extends Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public NoArgumentPassedException(String errorMessage) {","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"JonathanKhooTY":4,"iamakilahamed":5}},{"path":"src/main/java/seedu/duke/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class PersonNotFoundException extends Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public PersonNotFoundException(String errorMessage) {","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"JonathanKhooTY":4,"iamakilahamed":5}},{"path":"src/main/java/seedu/duke/exceptions/StorageOperationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":" * Indicates that there has been an error when converting data or read/write between the application","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":" * and the storage file.","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"public class StorageOperationException extends Exception {","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"    public StorageOperationException(String message) {","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"        super(message);","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"iamakilahamed":13}},{"path":"src/main/java/seedu/duke/exceptions/WrongFlagException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class WrongFlagException extends Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"    public WrongFlagException(String errorMessage) {","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"        super(errorMessage);","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"JonathanKhooTY":4,"iamakilahamed":5}},{"path":"src/main/java/seedu/duke/logic/commands/CheckInCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.Main;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckInException;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.HistoryStorageException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.storage.HistoryFile;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.Location;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.PersonLog;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Phone;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":" * Check in a visitor.","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":" * Adds a new visitor to the trackingList and personLog.","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckInCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"checkin\";","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"    private final Location location \u003d Main.getInstance().getLocation();","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    private static int CURRENT_CAPACITY;","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"    private static int MAXIMUM_CAPACITY;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKIN_SUCCESS_MESSAGE \u003d \"%s has been successfully checked-in!\"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"            + System.lineSeparator();","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"    public static final String CURRENT_AND_MAX_CAPACITY_MESSAGE \u003d \"Current capacity: %d out of %d.\";","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKIN_FAIL_MESSAGE \u003d \"Unable to check in! Maximum capacity of %d reached!\";","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    private final Person toCheckin;","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"    private final HistoryFile historyFile;","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    private final Id id;","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"    private static final Logger logger \u003d Logger.getLogger(CheckInCommand.class.getName());","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a CheckInCommand to checkin a visitor.","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"     * New visitor is added to the personLog.","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"     * @param idString ID of the visitor","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"     * @param nameString name of the visitor","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"     * @param phoneString phone number of the visitor","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"     * @throws StorageOperationException if there are errors reading the file","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if the visitor cannot be found in the personLog","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"    public CheckInCommand(String idString,","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"                          String nameString,","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"                          String phoneString) throws StorageOperationException, PersonNotFoundException {","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"        id \u003d new Id(idString);","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":"        historyFile \u003d Main.getInstance().getHistoryFile();","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"        PersonLog personLog \u003d PersonLog.getInstance();","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"        if (personLog.isFound(id)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"            toCheckin \u003d personLog.findPerson(id);","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"            checkSameName(nameString);","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"iamakilahamed"},"content":"        } else if (nameString \u003d\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"iamakilahamed"},"content":"            throw new PersonNotFoundException(Messages.PERSON_NOT_FOUND);","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"iamakilahamed"},"content":"        } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"iamakilahamed"},"content":"            toCheckin \u003d new Person(id, new Name(nameString), new Phone(phoneString));","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"iamakilahamed"},"content":"            personLog.addPerson(toCheckin);","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"iamakilahamed"},"content":"     * Checks if the visitor checking in has the same ID as someone else in the personLog.","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"iamakilahamed"},"content":"     * @param nameString name of the visitor","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if another person with the same ID is found in the personLog","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"    private void checkSameName(String nameString) throws PersonNotFoundException {","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"        if (nameString \u003d\u003d null) {","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":"            return;","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"iamakilahamed"},"content":"        if (!toCheckin.getName().toString().equalsIgnoreCase(nameString)) {","lastModifiedDate":"2021-04-11"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"            throw new PersonNotFoundException(Messages.DIFF_NAME_SAME_ID);","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"iamakilahamed"},"content":"     * Checks if the visitor to be checked in is already checked in.","lastModifiedDate":"2021-04-06"},{"lineNumber":83,"author":{"gitId":"iamakilahamed"},"content":"     * If not, check in the visitor.","lastModifiedDate":"2021-04-06"},{"lineNumber":84,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":85,"author":{"gitId":"iamakilahamed"},"content":"     * @param toCheckinId visitor id","lastModifiedDate":"2021-04-06"},{"lineNumber":86,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-04-06"},{"lineNumber":87,"author":{"gitId":"iamakilahamed"},"content":"     * @throws CheckInException if visitor is already checked in","lastModifiedDate":"2021-04-06"},{"lineNumber":88,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if visitor is not found in the tracking list","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":90,"author":{"gitId":"iamakilahamed"},"content":"    private void checkIfAlreadyCheckedIn(Id toCheckinId, TrackingList trackingList) throws CheckInException,","lastModifiedDate":"2021-04-06"},{"lineNumber":91,"author":{"gitId":"iamakilahamed"},"content":"            PersonNotFoundException {","lastModifiedDate":"2021-04-06"},{"lineNumber":92,"author":{"gitId":"iamakilahamed"},"content":"        Person visitor \u003d trackingList.findExactPerson(toCheckinId);","lastModifiedDate":"2021-04-06"},{"lineNumber":93,"author":{"gitId":"iamakilahamed"},"content":"        boolean isSamePerson \u003d toCheckin.getName().getNameString().equals(visitor.getName().getNameString());","lastModifiedDate":"2021-04-06"},{"lineNumber":94,"author":{"gitId":"iamakilahamed"},"content":"        if (!isSamePerson) {","lastModifiedDate":"2021-04-06"},{"lineNumber":95,"author":{"gitId":"iamakilahamed"},"content":"            logger.warning(\"ID entered does not match the name from the list.\");","lastModifiedDate":"2021-04-06"},{"lineNumber":96,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":97,"author":{"gitId":"iamakilahamed"},"content":"        assert isSamePerson : \"ID does not match name.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":98,"author":{"gitId":"iamakilahamed"},"content":"        if (visitor.getCheckedIn()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":99,"author":{"gitId":"iamakilahamed"},"content":"            throw new CheckInException(String.format(Messages.ALREADY_CHECKEDIN, visitor.getName().nameString));","lastModifiedDate":"2021-04-06"},{"lineNumber":100,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":101,"author":{"gitId":"iamakilahamed"},"content":"        visitor.setCheckedIn(true);","lastModifiedDate":"2021-04-06"},{"lineNumber":102,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":103,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":104,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the CheckinCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"iamakilahamed"},"content":"     * Restricts visitors from checking in if maximum capacity reached.","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"iamakilahamed"},"content":"     * @return check in success message or check in failure message depending on the current capacity","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"iamakilahamed"},"content":"     * @throws HistoryStorageException if there are problems saving into the file","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if visitor cannot be found in the trackingList with the ID","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":114,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) throws HistoryStorageException, PersonNotFoundException,","lastModifiedDate":"2021-04-06"},{"lineNumber":115,"author":{"gitId":"iamakilahamed"},"content":"            CheckInException {","lastModifiedDate":"2021-04-06"},{"lineNumber":116,"author":{"gitId":"iamakilahamed"},"content":"        MAXIMUM_CAPACITY \u003d location.getMaxCapacity();","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"iamakilahamed"},"content":"        if (trackingList.getCurrentCapacity() \u003e\u003d MAXIMUM_CAPACITY) {","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"iamakilahamed"},"content":"            return new CommandOutput(String.format(CHECKIN_FAIL_MESSAGE, MAXIMUM_CAPACITY), COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"iamakilahamed"},"content":"        if (!trackingList.contains(toCheckin)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"hussain1998"},"content":"            toCheckin.setCheckedIn(true);","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"iamakilahamed"},"content":"            trackingList.add(toCheckin);","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"iamakilahamed"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"iamakilahamed"},"content":"            checkIfAlreadyCheckedIn(id, trackingList);","lastModifiedDate":"2021-04-06"},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"iamakilahamed"},"content":"        historyFile.saveToHistory(toCheckin, \" checked in at \");","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"iamakilahamed"},"content":"        CURRENT_CAPACITY \u003d trackingList.getCurrentCapacity();","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(String.format(CHECKIN_SUCCESS_MESSAGE, toCheckin.getName())","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"limwenfeng"},"content":"                + String.format(CURRENT_AND_MAX_CAPACITY_MESSAGE, CURRENT_CAPACITY, MAXIMUM_CAPACITY), COMMAND);","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":131,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":132,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":109,"JonathanKhooTY":1,"limwenfeng":3,"hussain1998":19}},{"path":"src/main/java/seedu/duke/logic/commands/CheckoutCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.Main;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckoutException;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.HistoryStorageException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.Location;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.storage.HistoryFile;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":" * Check out a visitor.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"public class CheckoutCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"checkout\";","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    private final Location location \u003d Main.getInstance().getLocation();","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"    private static int CURRENT_CAPACITY;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    private static int MAXIMUM_CAPACITY;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    public static final String CURRENT_AND_MAXIMUM_MESSAGE \u003d \"Current capacity: %d out of %d\";","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKOUT_MESSAGE \u003d \"%s has been successfully checked-out!\" + System.lineSeparator();","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"    private final Id id;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"    private Person toCheckout;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"    private HistoryFile historyFile;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a CheckoutCommand to checkout a visitor.","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"     * @param idString ID of the visitor who wants to check out","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    public CheckoutCommand(String idString) {","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"        this.id \u003d new Id(idString);","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"        historyFile \u003d Main.getInstance().getHistoryFile();","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the CheckoutCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"     * @return checkout message with the information about the current capacity in the venue","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if the visitor cannot be found in the trackingList with the ID","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"     * @throws HistoryStorageException if there are problems saving into the file","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"     * @throws CheckoutException if person is already checked out","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) throws PersonNotFoundException, HistoryStorageException,","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"            CheckoutException {","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"        toCheckout \u003d trackingList.findExactPerson(id);","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"        Name toCheckoutName \u003d toCheckout.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"        if (!toCheckout.getCheckedIn()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"            throw new CheckoutException(String.format(Messages.ALREADY_CHECKEDOUT, toCheckoutName));","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"        if (toCheckout \u003d\u003d null) {","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"iamakilahamed"},"content":"            throw new PersonNotFoundException(Messages.PERSON_NOT_FOUND);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"iamakilahamed"},"content":"        toCheckout.setCheckedIn(false);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"        historyFile.saveToHistory(toCheckout, \" checked out at \");","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"iamakilahamed"},"content":"        MAXIMUM_CAPACITY \u003d location.getMaxCapacity();","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"iamakilahamed"},"content":"        CURRENT_CAPACITY \u003d trackingList.getCurrentCapacity();","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(String.format(CHECKOUT_MESSAGE, toCheckoutName)","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"                + String.format(CURRENT_AND_MAXIMUM_MESSAGE, CURRENT_CAPACITY, MAXIMUM_CAPACITY), COMMAND);","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"iamakilahamed":52,"JonathanKhooTY":5,"limwenfeng":5,"hussain1998":7}},{"path":"src/main/java/seedu/duke/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Clears all the entries in trackingList.","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"clear\";","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CLEAR_MESSAGE \u003d \"Cleared %d entries\";","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the ClearCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList the list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"     * @return a message to user indicating the number of entries cleared","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"        int entriesCleared \u003d trackingList.getSize();","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"        trackingList.clear();","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(String.format(CLEAR_MESSAGE, entriesCleared), COMMAND);","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"iamakilahamed":23,"hussain1998":3}},{"path":"src/main/java/seedu/duke/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckInException;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.CheckoutException;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.HistoryStorageException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":" * Represents an executable command.","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"public abstract class Command {","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    protected Command() {","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the command.","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    public abstract CommandOutput execute(TrackingList trackingList) throws","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"            PersonNotFoundException, StorageOperationException, HistoryStorageException, CheckoutException,","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"            CheckInException, InvalidMaxCapacityException;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":20,"JonathanKhooTY":1,"limwenfeng":1,"sarzorwyn":2,"hussain1998":2}},{"path":"src/main/java/seedu/duke/logic/commands/CommandOutput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":" * Represents the output of a command execution.","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"public class CommandOutput {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public final String messageToUser;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public final List\u003cPerson\u003e persons;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public final Person person;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public final String command;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a CommandOutput that returns a message to the user.","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"     * @param messageToUser message directly displayed to user","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"     * @param command command that the user had provided","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput(String messageToUser, String command) {","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"        this.messageToUser \u003d messageToUser;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"        persons \u003d null;","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        person \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a CommandOutput that returns a list of visitors.","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"     * The list will be formatted properly in the TextUi before displaying it to the user.","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"     * @param persons required list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"     * @param command command that the user had provided","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput(List\u003cPerson\u003e persons, String command) {","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"        messageToUser \u003d null;","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"        this.persons \u003d persons;","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        person \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a CommandOutput that returns a visitor.","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"     * The details of the visitor will be used by the TextUi before displaying it to the user.","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"     * @param person required visitor","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"     * @param command command that the user had provided","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput(Person person, String command) {","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"        this.messageToUser \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        persons \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"iamakilahamed":41,"hussain1998":17}},{"path":"src/main/java/seedu/duke/logic/commands/EditMaxCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.Main;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.Location;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":" * Set a new maximum capacity for the venue.","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"public class EditMaxCommand extends Command {","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"editmax\";","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    private static final String NEW_CAPACITY_REGEX \u003d \"^[0-9]{1,6}$\";","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    public static final String EDIT_MAX_MESSAGE \u003d \"New max capacity: %d\";","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    private final int newMaxCapacity;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    private final Location location;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a EditMax Command to edit the maximum capacity of the venue.","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"     * @param newMaxCapacity new capacity limit provided by user","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidMaxCapacityException if the new capacity provided does not match the requirements","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    public EditMaxCommand(String newMaxCapacity) throws InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"        checkCapacityValidity(newMaxCapacity);","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"        this.newMaxCapacity \u003d Integer.parseInt(newMaxCapacity);","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"        location \u003d Main.getInstance().getLocation();","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"     * Checks if the new maximum capacity matches the requirements.","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"     * @param newMaxCapacity new capacity limit provided by user","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidMaxCapacityException if the new capacity provided does not match the requirements","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"    private void checkCapacityValidity(String newMaxCapacity) throws InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"        if (!newMaxCapacity.matches(NEW_CAPACITY_REGEX) || Integer.parseInt(newMaxCapacity) \u003c 0) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"            throw new InvalidMaxCapacityException(Messages.INVALID_MAX_CAPACITY);","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the EditMaxCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"     * @return a success message to user","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) throws InvalidMaxCapacityException {","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"        location.setMaxCapacity(newMaxCapacity, trackingList.getCurrentCapacity());","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(String.format(EDIT_MAX_MESSAGE, newMaxCapacity), COMMAND);","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"iamakilahamed":53,"hussain1998":3}},{"path":"src/main/java/seedu/duke/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Terminates Control Your Crowd.","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"exit\";","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static final String EXIT_MESSAGE \u003d \"Exiting Control Your Crowd...\";","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the ExitCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"     * @return displays the exit message to the user","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(EXIT_MESSAGE, COMMAND);","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"iamakilahamed":20,"hussain1998":4}},{"path":"src/main/java/seedu/duke/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":" * Finds the person in tracking list using id.","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"find\";","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    private final Id idKeyword;","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a FindCommand that finds the visitor using ID as the keyword.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"     * @param idKeyword ID of the visitor to be found","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    public FindCommand(String idKeyword) {","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"        this.idKeyword \u003d new Id(idKeyword);","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the FindCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"     * @return the visitor as an Object","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"     * @throws PersonNotFoundException if a visitor of the ID provided cannot be found","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) throws PersonNotFoundException {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"        Person person \u003d trackingList.findExactPerson(idKeyword);","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(person, COMMAND);","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":33,"sarzorwyn":1,"hussain1998":4}},{"path":"src/main/java/seedu/duke/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.CHECKIN_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.CHECKOUT_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.CLEAR_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.EDIT_CAPACITY_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.EXIT_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.FIND_BY_ID_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.LIST_ALL_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.LIST_CHECKED_IN_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.MOVE_STORAGE_HELP;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.common.Messages.USER_GUIDE_LINK_HELP;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"help\";","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    public static final String HELP_MESSAGE \u003d \"COMMAND SUMMARY:\\n\" + CHECKIN_HELP + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"            + LIST_ALL_HELP + System.lineSeparator() + LIST_CHECKED_IN_HELP + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"            + FIND_BY_ID_HELP + System.lineSeparator() + CHECKOUT_HELP + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"            + CLEAR_HELP + System.lineSeparator() + EDIT_CAPACITY_HELP + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"            + MOVE_STORAGE_HELP + System.lineSeparator() + EXIT_HELP + System.lineSeparator() + USER_GUIDE_LINK_HELP;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the HelpCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"     * @return the command summary of all the commands","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) {","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(HELP_MESSAGE, COMMAND);","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"iamakilahamed":38,"hussain1998":1}},{"path":"src/main/java/seedu/duke/logic/commands/ListCheckedInCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Displays a list of visitors currently in the venue.","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"public class ListCheckedInCommand extends Command {","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"listcheckedin\";","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the ListCheckedInCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     * @return list of visitors who are currently in the venue","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"    public CommandOutput execute(TrackingList trackingList) {","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"        TrackingList checkedInList \u003d new TrackingList();","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"        for (int i \u003d 0; i \u003c trackingList.getSize(); i++) {","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"            if (trackingList.getPerson(i).getCheckedIn()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"                checkedInList.add(trackingList.getPerson(i));","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"        return new CommandOutput(checkedInList.listPerson(), COMMAND);","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"iamakilahamed":19,"JonathanKhooTY":9,"hussain1998":1}},{"path":"src/main/java/seedu/duke/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Lists all the person in the tracking list to the user.","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"    public static final String COMMAND \u003d \"listall\";","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the ListCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     * @return the list of visitors who have checked in and checked out","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(trackingList.listPerson(), COMMAND);","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"iamakilahamed":17,"JonathanKhooTY":2,"hussain1998":4}},{"path":"src/main/java/seedu/duke/logic/commands/MoveStorageCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.Main;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.storage.StorageFile;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":" * Moves the storage file to another location in the user\u0027s computer.","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"public class MoveStorageCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    public static final String COMMAND \u003d \"movestorage\";","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    public static final String TXT_FILE_FORMAT \u003d \".txt\";","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    private final String newPath;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    public static final String MOVE_MESSAGE \u003d \"Moved storage file to %s.txt\";","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a MoveStorageCommand to move the storage file to another location.","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"     * @param path new location to store the storage file","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    public MoveStorageCommand(String path) {","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"        this.newPath \u003d path;","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the MoveStorageCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"     * @param trackingList list of visitors","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"     * @return a success message to user","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"     * @throws StorageOperationException if there are problems saving into the file","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"    public CommandOutput execute(TrackingList trackingList) throws StorageOperationException {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"        checkNewPath();","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"        Main main \u003d Main.getInstance();","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"        StorageFile newStorage \u003d new StorageFile(newPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"        // Create the directory by using load","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"        newStorage.load();","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        newStorage.save(trackingList);","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"        main.setStorage(newStorage);","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"        if (main.getConfigFile() !\u003d null) {","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":"            moveConfigPath(main);","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"        return new CommandOutput(String.format(MOVE_MESSAGE, newPath), COMMAND);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"    private void checkNewPath() throws StorageOperationException {","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"            if (Files.exists(Paths.get(newPath + TXT_FILE_FORMAT))) {","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"                throw new StorageOperationException(\"Destination path already exists!\");","lastModifiedDate":"2021-04-04"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2021-04-04"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Invalid path: \" + newPath + TXT_FILE_FORMAT);","lastModifiedDate":"2021-04-04"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":68,"author":{"gitId":"iamakilahamed"},"content":"    private void moveConfigPath(Main main) throws StorageOperationException {","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"iamakilahamed"},"content":"        String storageFilePath \u003d main.getConfigFile().getStorageFilePath();","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"        // check not null because Paths.get() can\u0027t handle null","lastModifiedDate":"2021-04-04"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        if (storageFilePath !\u003d null) {","lastModifiedDate":"2021-04-04"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"            deleteOldFile(Paths.get(storageFilePath + TXT_FILE_FORMAT));","lastModifiedDate":"2021-04-04"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"iamakilahamed"},"content":"        main.getConfigFile().setStorageFilePath(newPath);","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"    private void deleteOldFile(Path storageFilePath) throws StorageOperationException {","lastModifiedDate":"2021-04-04"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-04-04"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"            Files.exists(Paths.get(storageFilePath + TXT_FILE_FORMAT));","lastModifiedDate":"2021-04-04"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"            Files.delete(storageFilePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-04-04"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Unable to delete old storage file!\");","lastModifiedDate":"2021-04-04"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2021-04-04"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Invalid path: \" + storageFilePath + TXT_FILE_FORMAT);","lastModifiedDate":"2021-04-04"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"iamakilahamed":25,"sarzorwyn":62,"hussain1998":1}},{"path":"src/main/java/seedu/duke/logic/parser/CheckInParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Phone;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":" * Checks in user, with compulsory ID, and name for first time check in.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":" *      Subsequent check in can be conducted with only ID, for user who has checked in previously.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckInParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and checks in user based on provided details.","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param argument Takes in compulsory user ID, and optional name, if user has already been checked in before","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"     *                 otherwise name is compulsory too. Phone number is optional.","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return returns CheckInCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws NoArgumentPassedException if no values are passed into parseCheckIn.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws WrongFlagException if ID flag is not the first flag to be used, and if phone flag is used,","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"     *                            while no name flag is provided.","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidIdException if ID does not consists of 3 integers followed by uppercase character.","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidNameFormatException if name does not consist of string of characters.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidPhoneNumberException if phone number does not consist of 8 integers.","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws StorageOperationException if there were errors reading the file","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws PersonNotFoundException if only the ID is entered, and person has not been found, since he has not been","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"     *                                 checked in before.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseCheckIn(String argument) throws","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"            NoArgumentPassedException, WrongFlagException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidNameFormatException, InvalidPhoneNumberException,","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"            StorageOperationException, PersonNotFoundException {","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"        if (argument.isBlank()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException(Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"        assert !argument.isBlank() : \"Argument cannot be blank.\";","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"        if (idFlagChecker(argument) \u003d\u003d -1 || !argument.startsWith(\"i/\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new WrongFlagException(Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"        String id;","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"        String name \u003d null;","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"        String phoneNumber \u003d null;","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] checkInDetails \u003d new String[0];","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"        boolean containsPhoneOnly \u003d false;","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"        boolean containsNameOnly \u003d false;","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"        if (nameFlagChecker(argument) \u003d\u003d -1 \u0026\u0026 phoneFlagChecker(argument) \u003d\u003d -1) {","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"JonathanKhooTY"},"content":"            checkInDetails \u003d argument.split(\"i/\",2);","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (nameFlagChecker(argument) !\u003d -1 \u0026\u0026 phoneFlagChecker(argument) !\u003d -1) {","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"JonathanKhooTY"},"content":"            checkInDetails \u003d argument.split(\"i/|n/|p/\",4);","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (nameFlagChecker(argument) !\u003d -1 \u0026\u0026 phoneFlagChecker(argument) \u003d\u003d -1) {","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"            checkInDetails \u003d argument.split(\"i/|n/\",3);","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"            containsNameOnly \u003d true;","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (nameFlagChecker(argument) \u003d\u003d -1 \u0026\u0026 phoneFlagChecker(argument) !\u003d -1) {","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"            checkInDetails \u003d argument.split(\"i/|p/\",3);","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"JonathanKhooTY"},"content":"            containsPhoneOnly \u003d true;","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"JonathanKhooTY"},"content":"        } ","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"JonathanKhooTY"},"content":"        if (checkInDetails[1].isBlank()) {     //checks if n/ and i/ is provided","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException(Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"JonathanKhooTY"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"JonathanKhooTY"},"content":"            id \u003d checkInDetails[1].trim().toUpperCase();","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"JonathanKhooTY"},"content":"        if (checkInDetails.length \u003d\u003d 4) {","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"JonathanKhooTY"},"content":"            name \u003d checkInDetails[2].trim();//.toUpperCase();","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"JonathanKhooTY"},"content":"            phoneNumber \u003d checkInDetails[3].trim();","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (checkInDetails.length \u003d\u003d 3 \u0026\u0026 containsNameOnly) {","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"JonathanKhooTY"},"content":"            name \u003d checkInDetails[2].trim();//.toUpperCase();","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (checkInDetails.length \u003d\u003d 3 \u0026\u0026 containsPhoneOnly) {","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"JonathanKhooTY"},"content":"            phoneNumber \u003d checkInDetails[2].trim();","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!Id.isValidId(id)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidIdException(Messages.ID_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidNameFormatException(Messages.NAME_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!Phone.isValidPhone(phoneNumber)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidPhoneNumberException(Messages.PHONE_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"JonathanKhooTY"},"content":"        return new CheckInCommand(id, name, phoneNumber);","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":93,"hussain1998":3}},{"path":"src/main/java/seedu/duke/logic/parser/CheckoutParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckoutCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":" * Checks out user based on ID input by user.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckoutParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and checks out the specified user.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param argument Takes in ID of user to be checked out.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return returns CheckoutCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws NoArgumentPassedException if no value is passed into parseCheckOut","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws WrongFlagException if ID flag is not used","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidIdException if ID does not consist of 3 integers followed by uppercase character.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    public static Command parseCheckOut(String argument) throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidIdException {","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"        String [] checkoutDetails;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"        String id;","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        if (argument.isBlank()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException(Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (idFlagChecker(argument) \u003d\u003d -1 || !argument.startsWith(\"i/\")) {","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new WrongFlagException(Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"        checkoutDetails \u003d argument.split(\"i/\",2);","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"        String name \u003d null;","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"        if (checkoutDetails[1].isBlank()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException(Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"            id \u003d checkoutDetails[1].trim();","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!Id.isValidId(id)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidIdException(Messages.ID_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"        return new CheckoutCommand(id);","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":47,"hussain1998":1}},{"path":"src/main/java/seedu/duke/logic/parser/ClearParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ClearCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"public class ClearParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and clears the list.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return returns ClearCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseClear() {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"        return new ClearCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":11}},{"path":"src/main/java/seedu/duke/logic/parser/EditMaxParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.EditMaxCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":" * Allows user to edit maximum capacity of venue.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"public class EditMaxParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"     * Allows user to edit maximum capacity of venue.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param argument Takes in new maximum capacity venue.","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return returns EditMaxCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidIntegerException if argument is not an integer","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidMaxCapacityException if argument is not a valid integer that can represent maximum capacity.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"     *      EG. Negative numbers.","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    public static Command parseEditMax(String argument) throws InvalidIntegerException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!isValidInteger(argument)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidIntegerException(Messages.INVALID_INTEGER);","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"        return new EditMaxCommand(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":5,"JonathanKhooTY":24}},{"path":"src/main/java/seedu/duke/logic/parser/ExitParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ExitCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"public class ExitParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and exits CYC.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Returns ExitCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseExit() {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"        return new ExitCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":12}},{"path":"src/main/java/seedu/duke/logic/parser/FindParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.FindCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":" * Finds a user and returns the user\u0027s details if user\u0027s ID is input.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"public class FindParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and finds user details.","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param argument ID of user.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Returns FindCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws WrongFlagException if ID flag is not utilised.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseFind(String argument) throws WrongFlagException, InvalidIdException {","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"        String id;","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"        if (argument.startsWith(\"i/\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            id \u003d argument.substring(2);","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new WrongFlagException(Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"        if (!Id.isValidId(id)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidIdException(Messages.ID_ERROR);","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        return new FindCommand(id);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":31,"hussain1998":1}},{"path":"src/main/java/seedu/duke/logic/parser/HelpParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.HelpCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"public class HelpParser {","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and returns a help menu.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Returns HelpCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseHelp() {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"        return new HelpCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":11}},{"path":"src/main/java/seedu/duke/logic/parser/ListAllParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"public class ListAllParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and calls ListCommand to list everyone","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * who is both checked in and checked out in the storage file.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Returns ListCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"        return new ListCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":12}},{"path":"src/main/java/seedu/duke/logic/parser/ListCheckedInParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCheckedInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"public class ListCheckedInParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and calls ListCheckedInCommand to list all the people who are currently checked in.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Returns ListCheckedInCommand.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseCheckedInList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"        return new ListCheckedInCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":11}},{"path":"src/main/java/seedu/duke/logic/parser/MoveStorageParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.MoveStorageCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"public class MoveStorageParser extends Parser {","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"     * Parses user input and calls the MoveStorageCommand to move the storage file to another location.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param argument new location to store the storage file.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return returns and executes the MoveStorage command.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static Command parseMoveStorage(String argument) {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"        return new MoveStorageCommand(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"JonathanKhooTY":12}},{"path":"src/main/java/seedu/duke/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckoutCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ClearCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.Command;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.EditMaxCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ExitCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.FindCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.HelpCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCheckedInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.MoveStorageCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":" * Parses user input arguments and returns a new Command object.","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"public class Parser {","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"    public static final String MAX_REGEX \u003d \"[0-9]+\";","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"     * Method that splits user input into 2 sections.","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"     * First section contains desired command","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"     * Second section contains the description of the task","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"     *","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param text This is the user input. It is a string","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return String[] This returns an array, containing 2 fields","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"    public String[] splitTextIntoTwoFields(String text) {","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        String[] textArray \u003d text.split(\" \", 2);","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"        textArray[0] \u003d textArray[0].toLowerCase();","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"        return textArray;","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"     * Methodthat parses the user command and returns a Command object, depending on user input.","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param userInput This is the user input.","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return Command. This returns a Command object, depending on the user input.","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidCommandException if the user enters a single word command that is not part of functionality","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws NoArgumentPassedException if no argument is entered by user.","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws WrongFlagException if user enters the wrong flag header","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidIdException if the ID does not consist of 3 integers followed by an uppercase letter","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidNameFormatException if the name does not consist of strings","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidPhoneNumberException if the phone number does not consist of 8 integers","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws StorageOperationException if there were errors reading the file","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidIntegerException if the argument does not consist of integers only","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws PersonNotFoundException if the person cannot be located in the storage","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"     * @throws InvalidMaxCapacityException if the argument is not a valid integer that represents maximum capacity","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"JonathanKhooTY"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"JonathanKhooTY"},"content":"    public Command parseCommand(String userInput) throws","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidCommandException, NoArgumentPassedException,","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidIdException,","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidNameFormatException, InvalidPhoneNumberException,","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        String[] inputArray;","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"        String argument \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"JonathanKhooTY"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"        userInput \u003d userInput.trim();","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"JonathanKhooTY"},"content":"        inputArray \u003d splitTextIntoTwoFields(userInput);   //inputArray may be of size 1 or size 2","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"JonathanKhooTY"},"content":"        String command;","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"        command \u003d inputArray[0];","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"JonathanKhooTY"},"content":"        if (inputArray.length !\u003d 1) {","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"JonathanKhooTY"},"content":"            argument \u003d inputArray[1].trim();","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"iamakilahamed"},"content":"        } else if (!command.equals(\"listcheckedin\")","lastModifiedDate":"2021-04-06"},{"lineNumber":79,"author":{"gitId":"iamakilahamed"},"content":"                \u0026\u0026 !command.equals(\"exit\")","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"iamakilahamed"},"content":"                \u0026\u0026 !command.equals(\"listall\")","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"JonathanKhooTY"},"content":"                \u0026\u0026 !command.equals(\"clear\")","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"JonathanKhooTY"},"content":"                \u0026\u0026 !command.equals(\"help\")","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"JonathanKhooTY"},"content":"                \u0026\u0026 !command.equals(\"editmax\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"iamakilahamed"},"content":"            throw new InvalidCommandException(Messages.INVALID_COMMAND);","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"JonathanKhooTY"},"content":"        switch (command) {","lastModifiedDate":"2021-03-07"},{"lineNumber":87,"author":{"gitId":"JonathanKhooTY"},"content":"        case CheckInCommand.COMMAND:","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"JonathanKhooTY"},"content":"            return CheckInParser.parseCheckIn(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"        case CheckoutCommand.COMMAND:","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"JonathanKhooTY"},"content":"            return CheckoutParser.parseCheckOut(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"hussain1998"},"content":"        case FindCommand.COMMAND:","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"JonathanKhooTY"},"content":"            return FindParser.parseFind(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":"        case ListCommand.COMMAND:","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"JonathanKhooTY"},"content":"            return ListAllParser.parseList();","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"JonathanKhooTY"},"content":"        case ListCheckedInCommand.COMMAND:","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"JonathanKhooTY"},"content":"            return ListCheckedInParser.parseCheckedInList();","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        case ExitCommand.COMMAND:","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"JonathanKhooTY"},"content":"            return ExitParser.parseExit();","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"iamakilahamed"},"content":"        case ClearCommand.COMMAND:","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"JonathanKhooTY"},"content":"            return ClearParser.parseClear();","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"JonathanKhooTY"},"content":"        case HelpCommand.COMMAND:","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"JonathanKhooTY"},"content":"            return HelpParser.parseHelp();","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"JonathanKhooTY"},"content":"        case EditMaxCommand.COMMAND:","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"JonathanKhooTY"},"content":"            return EditMaxParser.parseEditMax(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":105,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":"        case MoveStorageCommand.COMMAND:","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"JonathanKhooTY"},"content":"            return MoveStorageParser.parseMoveStorage(argument);","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"hussain1998"},"content":"        default:","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"iamakilahamed"},"content":"            throw new InvalidCommandException(Messages.INVALID_COMMAND);","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":113,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":114,"author":{"gitId":"JonathanKhooTY"},"content":"    static boolean isValidInteger(String argument) {","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"JonathanKhooTY"},"content":"        return (argument.matches(MAX_REGEX));","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"JonathanKhooTY"},"content":"    public static int idFlagChecker(String argument) {","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"JonathanKhooTY"},"content":"        return argument.indexOf(\"i/\");","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static int nameFlagChecker(String argument) {","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"JonathanKhooTY"},"content":"        return argument.indexOf(\"n/\");","lastModifiedDate":"2021-03-22"},{"lineNumber":124,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static int phoneFlagChecker(String argument) {","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"JonathanKhooTY"},"content":"        return argument.indexOf(\"p/\");","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":130,"author":{"gitId":"JonathanKhooTY"},"content":"    protected static int flagChecker(String argument) {","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"JonathanKhooTY"},"content":"        return argument.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":23,"JonathanKhooTY":97,"sarzorwyn":1,"hussain1998":13}},{"path":"src/main/java/seedu/duke/model/Location.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidArgumentSizeException;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.common.Messages.INVALID_MAX_CAPACITY_CHECKED_IN;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":" * Details of the venue for managing the crowd levels.","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"public class Location {","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    private int maxCapacity;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    private static final String MAX_CAPACITY_REGEX \u003d \"^[0-9]{1,6}$\";","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"     * Creates a Location using the arguments the user had provided when running the jar file.","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"     * @param args provided by the user when running the jar file. Contains the maximum capacity.","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidMaxCapacityException if the maximum capacity provided does not meet the requirements","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidArgumentSizeException if the user did not provide exactly 1 argument","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public Location(String[] args, int currentCapacity) throws InvalidMaxCapacityException,","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"            InvalidArgumentSizeException {","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"        checkArgumentValidity(args);","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        setMaxCapacity(Integer.parseInt(args[0]), currentCapacity);","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    public int getMaxCapacity() {","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"        return maxCapacity;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    public void setMaxCapacity(int maxCapacity, int currentCapacity) throws InvalidMaxCapacityException {","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        if (this.maxCapacity \u003c currentCapacity) { // If max capacity not initialised","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"            this.maxCapacity \u003d currentCapacity;","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        if (maxCapacity \u003c currentCapacity) {","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"            throw new InvalidMaxCapacityException(INVALID_MAX_CAPACITY_CHECKED_IN + currentCapacity);","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"        this.maxCapacity \u003d maxCapacity;","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"iamakilahamed"},"content":"     * Checks if the arguments entered by the user is valid and meets the requirements specified.","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"     * @param args provided by the user when running the jar file. Contains the maximum capacity.","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidArgumentSizeException if the user did not provide exactly 1 argument","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"     * @throws InvalidMaxCapacityException if the maximum capacity provided does not meet the requirements","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":"    private void checkArgumentValidity(String[] args) throws InvalidArgumentSizeException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"        if (args.length !\u003d 1) {","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"            throw new InvalidArgumentSizeException(Messages.INVALID_ARGUMENT_SIZE);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"iamakilahamed"},"content":"        if (!args[0].matches(MAX_CAPACITY_REGEX) || Integer.parseInt(args[0]) \u003c 0) {","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"iamakilahamed"},"content":"            throw new InvalidMaxCapacityException(Messages.INVALID_MAX_CAPACITY_ARG);","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"iamakilahamed":47,"hussain1998":15}},{"path":"src/main/java/seedu/duke/model/PersonLog.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.storage.LogFile;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"public class PersonLog {","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    private static PersonLog theOnlyPersonLog \u003d null;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    private HashMap\u003cId, Person\u003e personLog;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    private LogFile logFile;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"     * Using Singleton design pattern.","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    private PersonLog() {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        personLog \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        logFile \u003d new LogFile();","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public static PersonLog getInstance() {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        if (theOnlyPersonLog \u003d\u003d null) {","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"            theOnlyPersonLog \u003d new PersonLog();","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        return theOnlyPersonLog;","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    public void addPerson(Person person) throws StorageOperationException {","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"        if (isFound(person.getId())) {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"            return;","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        personLog.put(person.getId(), person);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        saveAllPersons();","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    public boolean isFound(Id id) {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        return personLog.containsKey(id);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    public Person findPerson(Id id) {","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"        return isFound(id) ? new Person(personLog.get(id)) : null;","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    public void modifyPerson(Person person) throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        personLog.replace(person.getId(), person);","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        saveAllPersons();","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    public void saveAllPersons() throws StorageOperationException {","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e(personLog.values());","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        logFile.saveAllPersons(persons);","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"    public void loadAllPersons() throws StorageOperationException {","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"        logFile.loadAllPersons();","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"    public void changePath(String path) {","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"        logFile.setPath(path);","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"    public void clearAllPersons() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"        ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e(personLog.values());","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"        logFile.saveAllPersons(persons);","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"hussain1998":69}},{"path":"src/main/java/seedu/duke/model/TrackingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Phone;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":" * A list of persons. Does not allow null elements or duplicates.","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingList {","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    private final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"     * Constructs a empty Person List.","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList() {","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"     * Constructs a person list with given persons in varargs.","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList(Person... persons) {","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e initialPersons \u003d Arrays.asList(persons);","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"        personList.addAll(initialPersons);","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"     * Constructs a person list with given persons in a collection.","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"     * @param persons a collection of persons","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        personList.addAll(persons);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"     * Checks if a list contains the person in given argument.","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"     * @param personToCheck Person to check if contained in personList","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"     * @return True if personList contains Person, False if personList does not contains Person","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"    public boolean contains(Person personToCheck) {","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {","lastModifiedDate":"2021-03-07"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"            if (p.equals(personToCheck)) {","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"                return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"            }","lastModifiedDate":"2021-03-07"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"    public void add(Person person) {","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"        personList.add(person);","lastModifiedDate":"2021-03-07"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"        assert personList.contains(person) : \"Person not added to list\";","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"    public void delete(Person person) {","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        personList.remove(person);","lastModifiedDate":"2021-03-07"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"        assert !personList.contains(person) : \"Person not removed from list\";","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"    public void delete(int index) {","lastModifiedDate":"2021-03-07"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"        personList.remove(index);","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"    public Person getPerson(int index) {","lastModifiedDate":"2021-03-07"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        return personList.get(index);","lastModifiedDate":"2021-03-07"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"    public int getSize() {","lastModifiedDate":"2021-03-07"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"        return personList.size();","lastModifiedDate":"2021-03-07"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e listPerson() {","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e returnedList \u003d new ArrayList\u003c\u003e(personList);","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"        assert returnedList.size() \u003d\u003d personList.size() : \"returnedList does not match listPerson size\";","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"        return returnedList;","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"    public void clear() {","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":"        personList.clear();","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"        assert personList.isEmpty() : \"List not empty after clear\";","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":91,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with exact match as id queried.","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":"     * @param id id being queried","lastModifiedDate":"2021-03-07"},{"lineNumber":93,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that exactly matches id","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":96,"author":{"gitId":"sarzorwyn"},"content":"    public Person findExactPerson(Id id) throws PersonNotFoundException {","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        Person matchingPerson \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {","lastModifiedDate":"2021-03-07"},{"lineNumber":99,"author":{"gitId":"iamakilahamed"},"content":"            if (p.getId().getIdString().equals(id.getIdString())) {","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"hussain1998"},"content":"                matchingPerson \u003d p;","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":"            }","lastModifiedDate":"2021-03-07"},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPerson \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"iamakilahamed"},"content":"            throw new PersonNotFoundException(Messages.PERSON_NOT_FOUND);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"sarzorwyn"},"content":"        assert matchingPerson.getId().equals(id) : \"Result id does not match return id\";","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"hussain1998"},"content":"        return matchingPerson;","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":110,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":111,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":112,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with partial match as phone queried.","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"sarzorwyn"},"content":"     * @param phone Phone being queried","lastModifiedDate":"2021-03-07"},{"lineNumber":114,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that partially matches phone","lastModifiedDate":"2021-03-07"},{"lineNumber":115,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":117,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e findPerson(Phone phone) throws PersonNotFoundException {","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e matchingPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-07"},{"lineNumber":119,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {","lastModifiedDate":"2021-03-07"},{"lineNumber":120,"author":{"gitId":"sarzorwyn"},"content":"            if (p.getPhone().getPhoneNo().contains(phone.getPhoneNo())) {","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"                matchingPersons.add(p);","lastModifiedDate":"2021-03-07"},{"lineNumber":122,"author":{"gitId":"sarzorwyn"},"content":"            }","lastModifiedDate":"2021-03-07"},{"lineNumber":123,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":124,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPersons.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"iamakilahamed"},"content":"            throw new PersonNotFoundException(Messages.PERSON_NOT_FOUND);","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"sarzorwyn"},"content":"        return matchingPersons;","lastModifiedDate":"2021-03-07"},{"lineNumber":129,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":130,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":131,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":132,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with partial match as name queried.","lastModifiedDate":"2021-03-11"},{"lineNumber":133,"author":{"gitId":"sarzorwyn"},"content":"     * @param name Name being queried","lastModifiedDate":"2021-03-07"},{"lineNumber":134,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that partially matches name","lastModifiedDate":"2021-03-07"},{"lineNumber":135,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":137,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e findPerson(Name name) throws PersonNotFoundException {","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e matchingPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-07"},{"lineNumber":139,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {","lastModifiedDate":"2021-03-07"},{"lineNumber":140,"author":{"gitId":"sarzorwyn"},"content":"            if (p.getName().getNameString().contains(name.getNameString())) {","lastModifiedDate":"2021-03-09"},{"lineNumber":141,"author":{"gitId":"sarzorwyn"},"content":"                matchingPersons.add(p);","lastModifiedDate":"2021-03-07"},{"lineNumber":142,"author":{"gitId":"sarzorwyn"},"content":"            }","lastModifiedDate":"2021-03-07"},{"lineNumber":143,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":144,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPersons.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"iamakilahamed"},"content":"            throw new PersonNotFoundException(Messages.PERSON_NOT_FOUND);","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"sarzorwyn"},"content":"        return matchingPersons;","lastModifiedDate":"2021-03-07"},{"lineNumber":149,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":150,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"iamakilahamed"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"iamakilahamed"},"content":"     * Finds the current capacity at the venue.","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"iamakilahamed"},"content":"     * @return current capacity","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"iamakilahamed"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"iamakilahamed"},"content":"    public int getCurrentCapacity() {","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"iamakilahamed"},"content":"        int currentCapacity \u003d 0;","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"iamakilahamed"},"content":"        for (Person p: personList) {","lastModifiedDate":"2021-03-28"},{"lineNumber":158,"author":{"gitId":"iamakilahamed"},"content":"            if (p.getCheckedIn()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":159,"author":{"gitId":"iamakilahamed"},"content":"                currentCapacity++;","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"iamakilahamed"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":162,"author":{"gitId":"iamakilahamed"},"content":"        return currentCapacity;","lastModifiedDate":"2021-03-28"},{"lineNumber":163,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":164,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":23,"sarzorwyn":133,"hussain1998":8}},{"path":"src/main/java/seedu/duke/model/person/Id.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.common.Messages.ID_ERROR;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"public class Id {","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    private static final long serialVersionUID \u003d 2L;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    public final String idString;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    public static final String ID_REGEX \u003d \"\\\\d{3}[A-Z]\";","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    public Id(String idString) {","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"        assert isValidId(idString) : ID_ERROR;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        this.idString \u003d idString.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    public String getIdString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        return idString;","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public String toString() {","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        return idString;","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidId(String idString) {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        return idString.matches(ID_REGEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        } else if (other instanceof Id) {","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"            return idString.equals(((Id) other).getIdString());","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"        return Objects.hash(idString);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"iamakilahamed":6,"hussain1998":38}},{"path":"src/main/java/seedu/duke/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.common.Messages.NAME_ERROR;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"public class Name {","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"    private static final long serialVersionUID \u003d 3L;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"    public final String nameString;","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    public static final String NAME_REGEX \u003d \"[a-zA-Z][a-zA-Z( )*]{0,29}\";","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    public Name(String nameString) {","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"        assert isValidName(nameString) : NAME_ERROR;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"        this.nameString \u003d nameString.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidName(String nameString) {","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        if (nameString \u003d\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"            return true;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        return nameString.matches(NAME_REGEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public String getNameString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        return nameString;","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    public String toString() {","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        return nameString;","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"hussain1998":30}},{"path":"src/main/java/seedu/duke/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Represents a Person.","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" * Assumption: values are validated and not null.","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"public class Person {","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    private static final long serialVersionUID \u003d 1L;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    private Id id;","lastModifiedDate":"2021-03-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    private Name name;","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    private Phone phone;","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    private Boolean isCheckedIn;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public Person(Id id, Name name, Phone phone) {","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        assert id !\u003d null : \"ID cannot be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        assert phone !\u003d null : \"Phone cannot be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        assert name !\u003d null : \"Name cannot be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public Person(Person another) {","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d another.getId();","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d  another.getName();","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d another.getPhone();","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        this.isCheckedIn \u003d another.getCheckedIn();","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        } else if (other instanceof Person) {","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"            return id.equals(((Person) other).id);","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    public Id getId() {","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        return id;","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    public Name getName() {","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"        return name;","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"    public Phone getPhone() {","lastModifiedDate":"2021-03-07"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        return phone;","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"    public Boolean getCheckedIn() {","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        return isCheckedIn;","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"    public void setCheckedIn(Boolean checkedIn) {","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"        isCheckedIn \u003d checkedIn;","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"hussain1998":60}},{"path":"src/main/java/seedu/duke/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.common.Messages.PHONE_ERROR;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":" * Represents the phone number of a person.","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":" * If a person does not have a phone, isAvailable will be false.","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"public class Phone {","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    private static final long serialVersionUID \u003d 4L;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    public String phoneNo;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    public boolean isAvailable;","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public static final String PHONE_REGEX \u003d \"\\\\d{8}\";","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"     * Constructs a phone object.","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     * @param phoneNo Phone number string. Null if Person has no phone.","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    public Phone(String phoneNo) {","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        assert phoneNo \u003d\u003d null || isValidPhone(phoneNo) : PHONE_ERROR;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"        this.isAvailable \u003d phoneNo !\u003d null;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        this.phoneNo \u003d phoneNo;","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidPhone(String phoneNo) {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        if (phoneNo \u003d\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"            return true;","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        return phoneNo.matches(PHONE_REGEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"    public String getPhoneNo() {","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        return phoneNo;","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    public void setPhoneNo(String phoneNo) {","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        assert phoneNo \u003d\u003d null || isValidPhone(phoneNo) : PHONE_ERROR;","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"        this.isAvailable \u003d phoneNo !\u003d null;","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        this.phoneNo \u003d phoneNo;","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    public boolean isAvailable() {","lastModifiedDate":"2021-03-07"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"        return isAvailable;","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"    public String toString() {","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        return phoneNo;","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"hussain1998":51}},{"path":"src/main/java/seedu/duke/storage/ConfigFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import java.io.File;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.util.Properties;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"public class ConfigFile {","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"    private static final String DEFAULT_FILE \u003d \"settings.properties\";","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"    private final Properties prop;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"    private String configPath;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"    private String storageFilePath;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    public ConfigFile() {","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"        this(DEFAULT_FILE);","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    /** Runs load when initialized. */","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public ConfigFile(String path) {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"        prop \u003d new Properties();","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"        configPath \u003d path;","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"        this.load();","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"     * Loads the config file using the properties class.","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"    public void load() {","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"            File file \u003d new File(configPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"            FileInputStream inputStream \u003d new FileInputStream(file);","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"            prop.load(inputStream);","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"            storageFilePath \u003d prop.getProperty(\"StorageFilePath\");","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"            inputStream.close();","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"            // If the file does not exist, return a null Storage file path","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"            storageFilePath \u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"    private void save() throws StorageOperationException {","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"        File file \u003d new File(configPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"            file.createNewFile();","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"            FileWriter fileWriter \u003d new FileWriter(configPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"            prop.store(fileWriter, \"Config file\");","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"            fileWriter.close();","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException soe) {","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Error writing to file: \" + configPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"    public String getStorageFilePath() {","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"        return storageFilePath;","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"     * Sets the storage file path and saves it into the config file.","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"     * @param storageFilePath The new path which the storage file will be saved at","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException If there is an error writing to config file","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"    public void setStorageFilePath(String storageFilePath) throws StorageOperationException {","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"        this.storageFilePath \u003d storageFilePath;","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"        prop.setProperty(\"StorageFilePath\", storageFilePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"        this.save();","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"sarzorwyn":73}},{"path":"src/main/java/seedu/duke/storage/HistoryFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.datetime.DateTime;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.HistoryStorageException;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import java.io.File;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"public class HistoryFile {","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"    public static final String DEFAULT_HISTORY_FILEPATH \u003d \"History\";","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"    public static final String FILE_FORMAT \u003d \".txt\";","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"    public static final String DIRECTORY_HOME \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"    public Path path;","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"    public HistoryFile() throws InvalidPathException {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"        this(DEFAULT_HISTORY_FILEPATH);","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"    public HistoryFile(String path) throws InvalidPathException {","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"        if (path \u003d\u003d null) {","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"            path \u003d DEFAULT_HISTORY_FILEPATH;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"        this.path \u003d Paths.get(DIRECTORY_HOME,path + FILE_FORMAT);","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"     * saves to History file once the check in or check out is passed from command. Save the person name and","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"     * Id with movement in CSV format. Instead of rewriting the content in the file, saveToHistoru append a new","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"     * line under exisiting history.","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"     * @param person person or visitor object that is checking in or checking out","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"     * @param movement either check in or check out","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"     * @throws HistoryStorageException exception thrown if there is any error with file operation","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"    public void saveToHistory(Person person, String movement) throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"        String name \u003d person.getName().getNameString();","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"        String id \u003d person.getId().getIdString();","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"            DateTime datetime \u003d new DateTime();","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"            File file \u003d new File(DEFAULT_HISTORY_FILEPATH + FILE_FORMAT);","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"            FileWriter fr \u003d new FileWriter(file, true);","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"            BufferedWriter br \u003d new BufferedWriter(fr);","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"            br.newLine();","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"            br.write(name + \" , \" + id + \" , \" + movement + \", \" + datetime.getDateAndTimeInString() + \" ,\");","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"            br.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"            fr.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"            throw new HistoryStorageException(\"Error writing to history file: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"     * Upon starting CYC, it will access the history file and start a time stamp to indicate start of the","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"     * session. The timestamp will be appended under existing content instead of rewriting the content.","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"     * @throws HistoryStorageException exception thrown if there is any error with file operation.","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"    public void startHistory() throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":"            DateTime datetime \u003d new DateTime();","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":"            File file \u003d new File(DEFAULT_HISTORY_FILEPATH + FILE_FORMAT);","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"            FileWriter fr \u003d new FileWriter(file, true);","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"            BufferedWriter br \u003d new BufferedWriter(fr);","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"            br.newLine();","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"            br.write(\",\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + datetime.getDateInString() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d,\");","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"            br.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"            fr.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"            throw new HistoryStorageException(\"Error writing to  history file: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"     * Upon exiting CYC, it will access the history file and add a time stamp to indicate end of the","lastModifiedDate":"2021-04-06"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"     * session. The timestamp will be appended under existing content instead of rewriting the content.","lastModifiedDate":"2021-04-06"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":"     * @throws HistoryStorageException exception thrown if there is any error with file operation.","lastModifiedDate":"2021-04-06"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"    public void endHistory() throws HistoryStorageException {","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"limwenfeng"},"content":"            DateTime datetime \u003d new DateTime();","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"            File file \u003d new File(DEFAULT_HISTORY_FILEPATH + FILE_FORMAT);","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"limwenfeng"},"content":"            FileWriter fr \u003d new FileWriter(file, true);","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"            BufferedWriter br \u003d new BufferedWriter(fr);","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"limwenfeng"},"content":"            br.newLine();","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"limwenfeng"},"content":"            br.write(\",\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + datetime.getDateInString() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d,\");","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"limwenfeng"},"content":"            br.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"limwenfeng"},"content":"            fr.close();","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"limwenfeng"},"content":"            throw new HistoryStorageException(\"Error writing to  history file: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":1,"limwenfeng":102,"hussain1998":1}},{"path":"src/main/java/seedu/duke/storage/LogFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import com.google.gson.Gson;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.PersonLog;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"public class LogFile {","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"LogFile\";","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    private String path;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     * Creates LogFile file with default path.","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    public LogFile() {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        this(DEFAULT_STORAGE_FILEPATH);","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"     * Creates LogFile file with given file path.","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"     * @param path The path that will be used for storage","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"    public LogFile(String path) {","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        this.path \u003d path;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    public void savePerson(Person person) throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        Gson gson \u003d new Gson();","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        gson.toJson(person);","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        StorageFile storage \u003d new StorageFile(path);","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        storage.saveLogFile(Collections.singletonList(gson.toJson(person)));","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"     * saves the current list of visitors in the trackingList into Logfile.","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"     * @param persons tracking list containing the current list of visitors","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"     * @throws StorageOperationException Exception thrown if there is error with storage","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"     *     operation such as accessing file or creating file","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    public void saveAllPersons(ArrayList\u003cPerson\u003e persons) throws StorageOperationException {","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        Gson gson \u003d new Gson();","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        final List\u003cString\u003e gsonPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        persons.forEach(person -\u003e gsonPersons.add(gson.toJson(person)));","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"        StorageFile storage \u003d new StorageFile(path);","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        storage.saveLogFile(gsonPersons);","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"     * loads the list of visitors stored in the log file into temp tracking list.","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"     * via get instance","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"     * @throws StorageOperationException Exception throw if there is any error with","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"     *     storage operation such as accessing file or creating file","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"    public void loadAllPersons() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"        StorageFile storage \u003d new StorageFile(path);","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"        List\u003cString\u003e jsonLogs \u003d storage.loadLogFile();","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"        if (jsonLogs \u003d\u003d null) {","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"            return;","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"        Person person;","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"        Gson gson \u003d new Gson();","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"        for (String eachLog : jsonLogs) {","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":"            person \u003d gson.fromJson(eachLog, Person.class);","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"            PersonLog.getInstance().addPerson(person);","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"    public void setPath(String path) {","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"        this.path \u003d path;","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"limwenfeng":14,"hussain1998":68}},{"path":"src/main/java/seedu/duke/storage/StorageFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":" * Manages the storing of tracking list data into a file.","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"public class StorageFile {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"TrackingList\";","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    public static final String TXT_FILE_FORMAT \u003d \".txt\";","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    public static final String DIRECTORY_HOME \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public static final String ID_DELIMITER \u003d \"i/\";","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    public static final String PHONE_ENCODED_MARKER \u003d \"p/\";","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    public static final String CHECKED_IN_ENCODED_MARKER \u003d \"c/\";","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    public static final Pattern PERSON_ENCODED_FORMAT \u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"            Pattern.compile(\"(?\u003cname\u003e[^/]+)\"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"                    + ID_DELIMITER + \"(?\u003cid\u003e[^/]+)\"","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"                    + PHONE_ENCODED_MARKER + \"(?\u003cphone\u003e[^/]+)\"","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"                    + CHECKED_IN_ENCODED_MARKER + \"(?\u003ccheckedIn\u003e[^/])\");","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    public Path path;","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"     * Creates Storage file with default path.","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"    public StorageFile() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        this(DEFAULT_STORAGE_FILEPATH);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"     * Creates Storage file with given file path.","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"     * @param path The path that will be used for storage","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"     * @throws InvalidPathException If the path specified is invalid","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"    public StorageFile(String path) throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        if (path \u003d\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"            path \u003d DEFAULT_STORAGE_FILEPATH;","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"            this.path \u003d Paths.get(DIRECTORY_HOME, path + TXT_FILE_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Invalid path: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"     * Creates the save file directory if it does not exist.","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"    private void createDataDirectory() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"            Files.createDirectories(path.getParent());","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Error writing into file: \" + path);","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"     * Loads {@code TrackingList} data from this storage file and returns it.","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException If there were errors reading the file","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList load() throws StorageOperationException {","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"        createDataDirectory();","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"        // If the file does not exist, return a empty Tracking List","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"        if (!Files.exists(path) || !Files.isRegularFile(path)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"            return new TrackingList();","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"            return TrackingListDecoder.decodeTrackingList(Files.readAllLines(path));","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"        } catch (FileNotFoundException fnfe) {","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"            throw new AssertionError(\"A file non found scenario should have been handled before this\");","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"hussain1998"},"content":"            throw new StorageOperationException(\"Error loading from file: \" + path);","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":"     * Loads {@code TrackingList} data to this storage file.","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"sarzorwyn"},"content":"     * @param trackingList The tracking list being saved to storage","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException If there is errors storing into file.","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"sarzorwyn"},"content":"    public void save(TrackingList trackingList) throws StorageOperationException {","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"sarzorwyn"},"content":"            List\u003cString\u003e encodedTrackingList \u003d TrackingListEncoder.encodeTrackingList(trackingList);","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"sarzorwyn"},"content":"            Files.write(path, encodedTrackingList);","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"sarzorwyn"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Error writing to file: \" + path);","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":105,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":"     * Writes the log details into the log file.","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"sarzorwyn"},"content":"     * @param jsonLog json formatted log strings to be written","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException If there is error writing to the log file","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"    public void saveLogFile(List\u003cString\u003e jsonLog) throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"hussain1998"},"content":"            Files.write(path, jsonLog);","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"hussain1998"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":114,"author":{"gitId":"hussain1998"},"content":"            throw new StorageOperationException(\"Error writing to file: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"sarzorwyn"},"content":"     * Reads from the log file, creates it if it does not exist.","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"sarzorwyn"},"content":"     * @return A list of strings read from the log file","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException If there is error reading from the log file","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":"    public List\u003cString\u003e loadLogFile() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":"        createDataDirectory();","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"hussain1998"},"content":"        // If the file does not exist, return null","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"hussain1998"},"content":"        if (!Files.exists(path) || !Files.isRegularFile(path)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"hussain1998"},"content":"            return null;","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"hussain1998"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"hussain1998"},"content":"            return Files.readAllLines(path);","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"hussain1998"},"content":"        } catch (FileNotFoundException fnfe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"hussain1998"},"content":"            throw new AssertionError(\"A file non found scenario should have been handled before this\");","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"hussain1998"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"hussain1998"},"content":"            throw new StorageOperationException(\"Error loading from file: \" + path);","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":139,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"iamakilahamed":1,"sarzorwyn":111,"hussain1998":28}},{"path":"src/main/java/seedu/duke/storage/TrackingListDecoder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Phone;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.storage.StorageFile.PERSON_ENCODED_FORMAT;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":" * Decodes the storage data file into a {@code TrackingList} object.","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingListDecoder {","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"     * Decodes {@code encodedTrackingList} into a {@code trackingList} containing the decoded persons.","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException if the {@code encodedTrackingList} is in an invalid format.","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    public static TrackingList decodeTrackingList(List\u003cString\u003e encodedTrackingList) throws StorageOperationException {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e decodedPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"        for (String encodedPerson : encodedTrackingList) {","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"            decodedPersons.add(decodePerson(encodedPerson));","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"        return new TrackingList(decodedPersons);","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"     * Decodes {@code encodedPerson} to a {@code Person}.","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"     * @throws StorageOperationException if the {@code encodedPerson} is in an invalid format.","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"    private static Person decodePerson(String encodedPerson) throws StorageOperationException {","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"        final Matcher matcher \u003d PERSON_ENCODED_FORMAT.matcher(encodedPerson);","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Failed to decode encoded file!\");","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"        // Check if Phone is stored as string null","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"        Phone phone;","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"        if (matcher.group(\"phone\").equals(\"null\")) {","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"            phone \u003d new Phone(null);","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"        } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"            phone \u003d new Phone(matcher.group(\"phone\"));","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"        Person decodedPerson \u003d new Person(","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"                new Id(matcher.group(\"id\")),","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"                new Name(matcher.group(\"name\")),","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"                phone","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"        );","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"        // Parse the check in status of the file which is stored as int","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"            decodedPerson.setCheckedIn(Integer.parseInt(matcher.group(\"checkedIn\")) \u003d\u003d 1);","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"            throw new StorageOperationException(\"Failed to parse check in status in file!\");","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"        return decodedPerson;","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"iamakilahamed":1,"sarzorwyn":60,"hussain1998":5}},{"path":"src/main/java/seedu/duke/storage/TrackingListEncoder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.storage.StorageFile.CHECKED_IN_ENCODED_MARKER;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.storage.StorageFile.ID_DELIMITER;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.storage.StorageFile.PHONE_ENCODED_MARKER;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":" * Encodes the {@code TrackingList} object for storage.","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingListEncoder {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"     * Encodes all Person in given trackingList to a list of encoded string for storage.","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"     * @param trackingList List of Persons to be encoded","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"     * @return Encoded list of Persons","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    public static List\u003cString\u003e encodeTrackingList(TrackingList trackingList) {","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cString\u003e encodedPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.listPerson().forEach(person -\u003e encodedPersons.add(encodePersonToString(person)));","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"        return encodedPersons;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"     * Encodes Person into a storage string representation.","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"    private static String encodePersonToString(Person person) {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"        String encodedPerson \u003d person.getName()","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"                + ID_DELIMITER","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"                + person.getId()","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"                + PHONE_ENCODED_MARKER","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"                + person.getPhone()","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"                + CHECKED_IN_ENCODED_MARKER","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"                + (person.getCheckedIn() ? 1 : 0);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"        return encodedPerson;","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"sarzorwyn":41,"hussain1998":2}},{"path":"src/main/java/seedu/duke/ui/TextUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.Main;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CommandOutput;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"import java.util.concurrent.atomic.AtomicInteger;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"public class TextUi {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"    public static final String PRINT_LISTALL_FORMAT \u003d \"|%-3s||%-35s||%-8s||%-10s||%-10s|\";","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"    public static final String PRINT_LIST_FORMAT \u003d  \"|%-3s||%-36s||%-12s||%-17s|\";","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"    public static final String PHONE_NUMBER_FILLER \u003d \"--\";","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"    public static final int DIVIDER_LENGTH \u003d 76;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"    private final Scanner in;","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    private static final Logger logger \u003d Logger.getLogger(TextUi.class.getSimpleName());","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"    private static final String DIVIDER \u003d \"\u003d\".repeat(DIVIDER_LENGTH);","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"    private static final String SINGLE_DIVIDER \u003d \"-\".repeat(DIVIDER_LENGTH);","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    public TextUi() {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        this(System.in, System.out);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"    public TextUi(InputStream in, PrintStream out) {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"        this.out \u003d out;","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"     * Does not return any object.","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"     * Output text to UI based on the type of commandOutput object passed in.","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"     * listall command and list command prints out a list of persons object.","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"     * find command prints out a person object.","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"     * @param commandOutput command object containing data queried by user","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"     *                      and feedback to user.","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"    public void printReaction(CommandOutput commandOutput) {","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"        String command \u003d commandOutput.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"        switch (command) {","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"        case \"listall\":","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"            assert commandOutput.persons !\u003d null : \"Expect NoPersonFound Exception,\";","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"            printList(commandOutput.persons);","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"            break;","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"iamakilahamed"},"content":"        case \"listcheckedin\":","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"            assert commandOutput.persons !\u003d null : \"Expect NoPersonFound Exception.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"            printCheckedInList(commandOutput.persons);","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"            break;","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"        case \"find\":","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"            assert commandOutput.person !\u003d null : \"Expect NoPersonFound Exception.\";","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"            printFindList(commandOutput.person);","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"            break;","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"        default:","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"            printDivider();","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"            out.println(commandOutput.messageToUser);","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"            printDivider();","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"     * Prints out a list of person objects with respective attributes such as","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"     * Name, Id, Phone and Checked In status.","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"     * @param persons person object encapsulated in CommandOutput object.","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"    private void printList(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"        assert persons !\u003d null : \"Does not print null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"        out.printf((PRINT_LISTALL_FORMAT) + \"%n\", \" \", \"Name\", \"Id\", \"Phone\", \"Checked In\");","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"        printPersonsInListWithStatus(persons);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"     * Prints out a list of person objects with respective attributes such as","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":"     * Name, Id and Phone.","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"     * @param persons person object encapsulated in CommandOutput object.","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"JonathanKhooTY"},"content":"    private void printCheckedInList(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"        assert persons !\u003d null : \"Does not print null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"        out.printf((PRINT_LIST_FORMAT) + \"%n\", \" \", \"Name\", \"Id\", \"Phone\");","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"limwenfeng"},"content":"        printPersonsInListWithoutStatus(persons);","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"iamakilahamed"},"content":"        int currentCapacity \u003d getCurrentCapacity(persons);","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"iamakilahamed"},"content":"        int maximumCapacity \u003d getMaximumCapacity();","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"iamakilahamed"},"content":"        int amountLeftToMaxCapacity \u003d maximumCapacity - currentCapacity;","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"iamakilahamed"},"content":"        System.out.println(\"Number of people left for max capacity: \" + amountLeftToMaxCapacity);","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"limwenfeng"},"content":"    public int getMaximumCapacity() {","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"iamakilahamed"},"content":"        return Main.getInstance().getLocation().getMaxCapacity();","lastModifiedDate":"2021-04-08"},{"lineNumber":106,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":107,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"limwenfeng"},"content":"    public int getCurrentCapacity(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"limwenfeng"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"limwenfeng"},"content":"        int iterator \u003d 0;","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"limwenfeng"},"content":"        while (iterator \u003c persons.size()) {","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"limwenfeng"},"content":"            if (persons.get(iterator).getCheckedIn()) {","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"limwenfeng"},"content":"                count++;","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"iamakilahamed"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"limwenfeng"},"content":"            iterator++;","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"limwenfeng"},"content":"        return count;","lastModifiedDate":"2021-04-09"},{"lineNumber":118,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"limwenfeng"},"content":"    private void printPersonsInListWithoutStatus(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"JonathanKhooTY"},"content":"        for (int i \u003d 0; i \u003c persons.size(); ++i) {","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"limwenfeng"},"content":"            Person peronSelected \u003d persons.get(i);","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"limwenfeng"},"content":"            String name \u003d peronSelected.getName().getNameString();","lastModifiedDate":"2021-03-23"},{"lineNumber":124,"author":{"gitId":"limwenfeng"},"content":"            String truncatedName \u003d nameTruncator(name);","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"limwenfeng"},"content":"            String idString \u003d peronSelected.getId().getIdString();","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"limwenfeng"},"content":"            String phoneString \u003d (peronSelected.getPhone().isAvailable())","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"limwenfeng"},"content":"                    ? peronSelected.getPhone().getPhoneNo() : PHONE_NUMBER_FILLER;","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"limwenfeng"},"content":"            out.printf((PRINT_LIST_FORMAT) + \"%n\", i + 1, truncatedName, idString, phoneString);","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"limwenfeng"},"content":"            printSingleDivider();","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":133,"author":{"gitId":"limwenfeng"},"content":"    private void printFindList(Person person) {","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"limwenfeng"},"content":"        assert person !\u003d null : \"Only prints Person\";","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"limwenfeng"},"content":"        out.printf((PRINT_LISTALL_FORMAT) + \"%n\", \" \", \"Name\", \"Id\", \"Phone\", \"Checked In\");","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"limwenfeng"},"content":"        String name \u003d person.getName().getNameString();","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"limwenfeng"},"content":"        String truncatedName \u003d nameTruncator(name);","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"limwenfeng"},"content":"        String idString \u003d person.getId().getIdString();","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"limwenfeng"},"content":"        String phoneString \u003d (person.getPhone().isAvailable())","lastModifiedDate":"2021-03-26"},{"lineNumber":142,"author":{"gitId":"limwenfeng"},"content":"                ? person.getPhone().getPhoneNo() : PHONE_NUMBER_FILLER;","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"limwenfeng"},"content":"        String statusString \u003d (person.getCheckedIn()) ? \"Yes\" : \"No\";","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"limwenfeng"},"content":"        out.printf((PRINT_LISTALL_FORMAT) + \"%n\", 1, truncatedName, idString, phoneString, statusString);","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"limwenfeng"},"content":"    private void printPersonsInListWithStatus(List\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"limwenfeng"},"content":"        for (int i \u003d 0; i \u003c persons.size(); ++i) {","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"limwenfeng"},"content":"            Person personSelected \u003d persons.get(i);","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"limwenfeng"},"content":"            String name \u003d personSelected.getName().getNameString();","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"limwenfeng"},"content":"            String truncatedName \u003d nameTruncator(name);","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"limwenfeng"},"content":"            String idString \u003d personSelected.getId().getIdString();","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"limwenfeng"},"content":"            String phoneString \u003d (personSelected.getPhone().isAvailable())","lastModifiedDate":"2021-03-26"},{"lineNumber":156,"author":{"gitId":"limwenfeng"},"content":"                    ? personSelected.getPhone().getPhoneNo() : PHONE_NUMBER_FILLER;","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"limwenfeng"},"content":"            String statusString \u003d (personSelected.getCheckedIn()) ? \"Yes\" : \"No\";","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"limwenfeng"},"content":"            out.printf((PRINT_LISTALL_FORMAT) + \"%n\", i + 1, truncatedName, idString, phoneString, statusString);","lastModifiedDate":"2021-03-28"},{"lineNumber":159,"author":{"gitId":"limwenfeng"},"content":"            printSingleDivider();","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":162,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":163,"author":{"gitId":"hussain1998"},"content":"    public void showWelcomeMessage(String version) {","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-09"},{"lineNumber":165,"author":{"gitId":"limwenfeng"},"content":"        assert version instanceof String : \"Version has to be a string\";","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"limwenfeng"},"content":"        out.println(\"Welcome to Control Your Crowd - Version \" + version);","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"limwenfeng"},"content":"        // for next patch update - Storage class - dataStorageSuccessful()","lastModifiedDate":"2021-03-09"},{"lineNumber":168,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-03-09"},{"lineNumber":169,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"hussain1998"},"content":"    private void printDivider() {","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"limwenfeng"},"content":"        out.println(DIVIDER);","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":175,"author":{"gitId":"limwenfeng"},"content":"    private void printSingleDivider() {","lastModifiedDate":"2021-03-23"},{"lineNumber":176,"author":{"gitId":"limwenfeng"},"content":"        out.println(SINGLE_DIVIDER);","lastModifiedDate":"2021-03-23"},{"lineNumber":177,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":178,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":179,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":180,"author":{"gitId":"limwenfeng"},"content":"     * Takes in user input from Scanner Object.","lastModifiedDate":"2021-03-23"},{"lineNumber":181,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":182,"author":{"gitId":"limwenfeng"},"content":"     * @return String type of user input.","lastModifiedDate":"2021-03-23"},{"lineNumber":183,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":184,"author":{"gitId":"hussain1998"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-03-10"},{"lineNumber":185,"author":{"gitId":"hussain1998"},"content":"        String rawInput \u003d null;","lastModifiedDate":"2021-04-07"},{"lineNumber":186,"author":{"gitId":"hussain1998"},"content":"        try {","lastModifiedDate":"2021-04-07"},{"lineNumber":187,"author":{"gitId":"hussain1998"},"content":"            rawInput \u003d in.nextLine();","lastModifiedDate":"2021-04-07"},{"lineNumber":188,"author":{"gitId":"hussain1998"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":189,"author":{"gitId":"hussain1998"},"content":"            System.exit(0);","lastModifiedDate":"2021-04-07"},{"lineNumber":190,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":191,"author":{"gitId":"limwenfeng"},"content":"        return rawInput;","lastModifiedDate":"2021-03-11"},{"lineNumber":192,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":193,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":194,"author":{"gitId":"limwenfeng"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":195,"author":{"gitId":"limwenfeng"},"content":"     * Takes in exception and print error message on UI.","lastModifiedDate":"2021-03-23"},{"lineNumber":196,"author":{"gitId":"limwenfeng"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":197,"author":{"gitId":"limwenfeng"},"content":"     * @param error Exception thrown from respective command.","lastModifiedDate":"2021-03-23"},{"lineNumber":198,"author":{"gitId":"limwenfeng"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":199,"author":{"gitId":"limwenfeng"},"content":"    public void notifyErrorToUser(Exception error) {","lastModifiedDate":"2021-03-23"},{"lineNumber":200,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-04-05"},{"lineNumber":201,"author":{"gitId":"limwenfeng"},"content":"        out.println(error.getMessage());","lastModifiedDate":"2021-03-21"},{"lineNumber":202,"author":{"gitId":"limwenfeng"},"content":"        printDivider();","lastModifiedDate":"2021-04-05"},{"lineNumber":203,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":204,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":205,"author":{"gitId":"limwenfeng"},"content":"    private String nameTruncator(String longName) {","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"limwenfeng"},"content":"        if (longName.length() \u003e 30) {","lastModifiedDate":"2021-03-28"},{"lineNumber":207,"author":{"gitId":"limwenfeng"},"content":"            return longName.substring(0,30);","lastModifiedDate":"2021-03-28"},{"lineNumber":208,"author":{"gitId":"limwenfeng"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":209,"author":{"gitId":"limwenfeng"},"content":"        return longName;","lastModifiedDate":"2021-03-28"},{"lineNumber":210,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":211,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":212,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"iamakilahamed":14,"JonathanKhooTY":10,"limwenfeng":157,"hussain1998":31}},{"path":"src/test/java/seedu/duke/MainTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"class MainTest {","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"iamakilahamed":1,"-":11}},{"path":"src/test/java/seedu/duke/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ClearCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"public class ClearCommandTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    private final TrackingList trackingList \u003d new TrackingList(ALICE, JOHN, MARY);","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    public void testClear() {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        ClearCommand clear \u003d new ClearCommand();","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"        clear.execute(trackingList);","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(0, trackingList.getSize());","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"iamakilahamed":22,"hussain1998":1}},{"path":"src/test/java/seedu/duke/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ExitCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.logic.commands.ExitCommand.EXIT_MESSAGE;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"public class ExitCommandTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public void testExit() {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"        ExitCommand exit \u003d new ExitCommand();","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        String exitMessage \u003d exit.execute(SAMPLE_TRACKING_LIST).messageToUser;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(EXIT_MESSAGE, exitMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"iamakilahamed":20}},{"path":"src/test/java/seedu/duke/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.FindCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"public class FindCommandTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    public void testFindNotCheckedIn() throws PersonNotFoundException {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"        ALICE.setCheckedIn(false);","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"        FindCommand find \u003d new FindCommand(\"665B\");","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"        boolean foundPersonCheckedInStatus \u003d find.execute(SAMPLE_TRACKING_LIST).person.getCheckedIn();","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"        assertFalse(foundPersonCheckedInStatus);","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"    public void testFindCheckedIn() throws PersonNotFoundException {","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"        BOB.setCheckedIn(true);","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"        FindCommand find \u003d new FindCommand(\"126C\");","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"        boolean foundPersonCheckedInStatus \u003d find.execute(SAMPLE_TRACKING_LIST).person.getCheckedIn();","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"        assertTrue(foundPersonCheckedInStatus);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"    public void testFindPersonNotFound() {","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"        FindCommand find \u003d new FindCommand(\"230C\");","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"        Throwable exception \u003d assertThrows(PersonNotFoundException.class, () -\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"                find.execute(SAMPLE_TRACKING_LIST));","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(Messages.PERSON_NOT_FOUND, exception.getMessage());","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"iamakilahamed":42}},{"path":"src/test/java/seedu/duke/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.HelpCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.logic.commands.HelpCommand.HELP_MESSAGE;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"public class HelpCommandTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    public void testHelp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"        HelpCommand help \u003d new HelpCommand();","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"        String helpMessage  \u003d help.execute(SAMPLE_TRACKING_LIST).messageToUser;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(HELP_MESSAGE, helpMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"iamakilahamed":19}},{"path":"src/test/java/seedu/duke/logic/commands/ListCheckedInCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCheckedInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"public class ListCheckedInCommandTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    public void testListCheckedIn() {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        ListCheckedInCommand listCheckedIn \u003d new ListCheckedInCommand();","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"        List\u003cPerson\u003e checkedInList \u003d listCheckedIn.execute(SAMPLE_TRACKING_LIST).persons;","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        int checkedInCount \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"        for (Person person : SAMPLE_TRACKING_LIST.listPerson()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"            if (person.getCheckedIn()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"                checkedInCount++;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(checkedInCount, checkedInList.size());","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"iamakilahamed":26,"hussain1998":1}},{"path":"src/test/java/seedu/duke/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"public class ListCommandTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public void testList() {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"        ListCommand listCommand \u003d new ListCommand();","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        List\u003cPerson\u003e list \u003d listCommand.execute(SAMPLE_TRACKING_LIST).persons;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(SAMPLE_TRACKING_LIST.getSize(), list.size());","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"iamakilahamed":19,"hussain1998":1}},{"path":"src/test/java/seedu/duke/logic/commands/MoveStorageCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.commands;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.MoveStorageCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"public class MoveStorageCommandTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"    public static final String NEW_PATH \u003d \"test/newPath\";","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    public void testMoveStorage_invalidPath_StorageOperationException() {","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"        String invalidPath \u003d \":-?;\\0\";","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"        MoveStorageCommand moveStorage \u003d new MoveStorageCommand(invalidPath);","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(StorageOperationException.class, () -\u003e moveStorage.execute(SAMPLE_TRACKING_LIST));","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    public void testMoveStorage_validPath_success() throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"        MoveStorageCommand moveStorage \u003d new MoveStorageCommand(NEW_PATH);","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"        moveStorage.execute(SAMPLE_TRACKING_LIST);","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"    @AfterAll","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"    public static void cleanup() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"        Files.delete(Paths.get(NEW_PATH + MoveStorageCommand.TXT_FILE_FORMAT));","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":3,"sarzorwyn":32}},{"path":"src/test/java/seedu/duke/logic/parser/CheckInParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckInParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseCheckIn_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException,","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidIdException, InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        CheckInCommand checkInCommand \u003d (CheckInCommand) parser.parseCommand(","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"                \"checkin i/ 123A n/ John\");","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"checkin\", checkInCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"        checkInCommand \u003d (CheckInCommand) parser.parseCommand(","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"                \"checkin i/123A n/John p/12345678\");","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"checkin\", checkInCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"        checkInCommand \u003d (CheckInCommand) parser.parseCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"                \"checkin i/123A p/12345678\");","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"checkin\", checkInCommand.COMMAND);","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseCheckIn_Exceptions() {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(NoArgumentPassedException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(InvalidIdException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"i/JOHN 123\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.ID_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(NoArgumentPassedException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(WrongFlagException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"n/\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(NoArgumentPassedException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"i/\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(InvalidNameFormatException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"i/123A n/123\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NAME_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(InvalidPhoneNumberException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"i/123A n/John p/123456\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.PHONE_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(WrongFlagException.class, () -\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckInParser.parseCheckIn(\"m/123a\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.WRONG_FLAG);","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":82}},{"path":"src/test/java/seedu/duke/logic/parser/CheckOutParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.CheckoutCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckOutParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseCheckOut_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException,","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidIdException, InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        CheckoutCommand checkoutCommand \u003d (CheckoutCommand) parser.parseCommand(","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"                \"checkout i/123A\");","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"checkout\", checkoutCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseCheckOut_Exceptions() {","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(NoArgumentPassedException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckoutParser.parseCheckOut(\"\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(WrongFlagException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckoutParser.parseCheckOut(\"j/ 123A\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(InvalidIdException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckoutParser.parseCheckOut(\"i/a23A\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.ID_ERROR);","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(NoArgumentPassedException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"                CheckoutParser.parseCheckOut(\"i/\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.NO_ARGUMENT);","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":52}},{"path":"src/test/java/seedu/duke/logic/parser/ClearParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ClearCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class ClearParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseClear_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        ClearCommand clearCommand \u003d (ClearCommand) parser.parseCommand(\"clear\");","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"clear\", ClearCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":28}},{"path":"src/test/java/seedu/duke/logic/parser/EditMaxParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.EditMaxCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"public class EditMaxParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseEditMax_testCommand() throws StorageOperationException, InvalidIntegerException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidIdException, InvalidCommandException, InvalidPhoneNumberException,","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"            PersonNotFoundException, NoArgumentPassedException, WrongFlagException,","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"            InvalidNameFormatException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        EditMaxCommand editMaxCommand \u003d (EditMaxCommand) parser.parseCommand(\"editmax 1000\");","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"editmax\",editMaxCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(InvalidIntegerException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"                parser.parseCommand(\"editmax abc\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.INVALID_INTEGER);","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":32}},{"path":"src/test/java/seedu/duke/logic/parser/ExitParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ExitCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class ExitParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseExit_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"        ExitCommand exitCommand \u003d (ExitCommand) parser.parseCommand(\"exit\");","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"exit\", exitCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":27}},{"path":"src/test/java/seedu/duke/logic/parser/FindParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.FindCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"public class FindParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseFind_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        parser.parseCommand(\"checkin i/123A n/John\");","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"        FindCommand findCommand \u003d (FindCommand) parser.parseCommand(\"find i/123A\");","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"find\", findCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseFindException_checker() {","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(WrongFlagException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"                FindParser.parseFind(\"\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.WRONG_FLAG);","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"        exception \u003d assertThrows(InvalidIdException.class, () -\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"                FindParser.parseFind(\"i/abc\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.ID_ERROR);","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":42}},{"path":"src/test/java/seedu/duke/logic/parser/HelpParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.HelpCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class HelpParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseHelp_testCommand() throws StorageOperationException, InvalidIntegerException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidIdException, InvalidCommandException, InvalidPhoneNumberException, PersonNotFoundException,","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"            NoArgumentPassedException, WrongFlagException, InvalidNameFormatException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"        HelpCommand helpCommand \u003d (HelpCommand) parser.parseCommand(\"help\");","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"help\",helpCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":25}},{"path":"src/test/java/seedu/duke/logic/parser/ListAllParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class ListAllParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseList_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        ListCommand listCommand \u003d (ListCommand) parser.parseCommand(\"listall\");","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"listall\", listCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":4,"JonathanKhooTY":28}},{"path":"src/test/java/seedu/duke/logic/parser/ListCheckedInParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.ListCheckedInCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class ListCheckedInParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseListCheckedIn_testCommand() throws NoArgumentPassedException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"            WrongFlagException, InvalidCommandException, InvalidIdException,","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidPhoneNumberException, InvalidNameFormatException,","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"            StorageOperationException, InvalidIntegerException, PersonNotFoundException, InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        ListCheckedInCommand listCheckedInCommand \u003d (ListCheckedInCommand) parser.parseCommand(","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"                \"listcheckedin\");","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(\"listcheckedin\", listCheckedInCommand.COMMAND);","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":6,"JonathanKhooTY":27}},{"path":"src/test/java/seedu/duke/logic/parser/MoveStorageParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.logic.commands.MoveStorageCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIdException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidIntegerException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidNameFormatException;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidPhoneNumberException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"public class MoveStorageParserTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseMoveStorageCommand_testCommand() throws StorageOperationException, InvalidIntegerException,","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"            InvalidIdException, InvalidCommandException, InvalidPhoneNumberException,","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"            PersonNotFoundException, NoArgumentPassedException, WrongFlagException, InvalidNameFormatException,","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"            InvalidMaxCapacityException {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"        MoveStorageCommand moveStorageCommand \u003d (MoveStorageCommand) parser.parseCommand(\"movestorage abc\");","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(\"movestorage\",moveStorageCommand.COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"iamakilahamed":5,"JonathanKhooTY":25}},{"path":"src/test/java/seedu/duke/logic/parser/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.logic.parser;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"public class ParserTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"    public void checkInParser_parsedCorrectly() {","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"        String name \u003d JOHN.getName().getNameString().toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"        String id \u003d JOHN.getId().getIdString();","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] result \u003d {name,id};","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"        assertArrayEquals(parser.splitTextIntoTwoFields(\"John 123A\"), result);","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseCommand_checker() {","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(InvalidCommandException.class, () -\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"                parser.parseCommand(\"checkin\"));","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.INVALID_COMMAND);","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseWrongCommand_Exception() {","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(InvalidCommandException.class, () -\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"JonathanKhooTY"},"content":"                parser.parseCommand(\"\"));","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.INVALID_COMMAND);","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseInvalidCommand_Exception() {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"        Throwable exception \u003d assertThrows(InvalidCommandException.class, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"JonathanKhooTY"},"content":"                parser.parseCommand(\"abc abc\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"        assertEquals(exception.getMessage(), Messages.INVALID_COMMAND);","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"    public void parseInvalidInteger_Exception() {","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"        assertFalse(parser.isValidInteger(\"abc\"));","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"JonathanKhooTY"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"    ","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"iamakilahamed":1,"JonathanKhooTY":54}},{"path":"src/test/java/seedu/duke/model/LocationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.common.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidArgumentSizeException;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleLocations.BIG_MALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleLocations.EVENT;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SampleLocations.FOOD_COURT;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"public class LocationTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"    public static final int CURRENT_CAPACITY \u003d 20;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    public void testInvalidArgumentSize() {","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"        Throwable exception \u003d assertThrows(InvalidArgumentSizeException.class, () -\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"                new Location(new String[]{\"Location1\", \"123\"}, CURRENT_CAPACITY));","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(Messages.INVALID_ARGUMENT_SIZE, exception.getMessage());","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    public void testInvalidMaxCapacity() {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"        Throwable exception \u003d assertThrows(InvalidMaxCapacityException.class, () -\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"                new Location(new String[]{\"Location2\"}, CURRENT_CAPACITY));","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(Messages.INVALID_MAX_CAPACITY_ARG, exception.getMessage());","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"    public void testGetMaxCapacity() {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(250, EVENT.getMaxCapacity());","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"        assertNotEquals(1, BIG_MALL.getMaxCapacity());","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    public void testSetMaxCapacity() throws InvalidMaxCapacityException {","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"        int newMaxCapacity \u003d 30;","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"        FOOD_COURT.setMaxCapacity(newMaxCapacity, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"        assertEquals(newMaxCapacity, FOOD_COURT.getMaxCapacity());","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"iamakilahamed":39,"hussain1998":6}},{"path":"src/test/java/seedu/duke/model/PersonLogTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JACK_NO_PHONE;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.NON_EXISTENT_PERSON;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"class PersonLogTest {","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    PersonLog personLog \u003d PersonLog.getInstance();","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public void personLogTest() {","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        personLog.changePath(\"test/LogFile\");","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"            personLog.clearAllPersons();","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"            personLog.addPerson(ALICE);","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"            personLog.addPerson(BOB);","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"            personLog.addPerson(JOHN);","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"            personLog.addPerson(MARY);","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"            personLog.addPerson(JACK_NO_PHONE);","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"            personLog.saveAllPersons();","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"            personLog.loadAllPersons();","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        } catch (StorageOperationException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        testIsFound();","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        testFindPerson();","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        testModifyPerson();","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    void testIsFound() {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        assertTrue(personLog.isFound(ALICE.getId()));","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"        assertTrue(personLog.isFound(JACK_NO_PHONE.getId()));","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"        assertFalse(personLog.isFound(NON_EXISTENT_PERSON.getId()));","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    void testFindPerson() {","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        assertEquals(JOHN, personLog.findPerson(JOHN.getId()));","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        assertNull(personLog.findPerson(NON_EXISTENT_PERSON.getId()));","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    void testModifyPerson() {","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        String jackNewPhone \u003d \"12345678\";","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        JACK_NO_PHONE.getPhone().setPhoneNo(jackNewPhone);","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"            personLog.modifyPerson(JACK_NO_PHONE);","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"        } catch (StorageOperationException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        Person newJack \u003d personLog.findPerson(JACK_NO_PHONE.getId());","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"        assertEquals(jackNewPhone, newJack.getPhone().getPhoneNo());","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"hussain1998":65}},{"path":"src/test/java/seedu/duke/model/TrackingListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingListTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    private TrackingList trackingList;","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public void initTrackingList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"        trackingList \u003d new TrackingList();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    public void testConstructor() {","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList constructedList \u003d new TrackingList(JOHN, MARY, ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(JOHN));","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(MARY));","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(ALICE));","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(constructedList.contains(BOB));","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"    public void testContains() {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(ALICE));","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(JOHN));","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(BOB));","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"    public void testDelete() {","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.delete(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"        int expectedBobIndex \u003d 0;","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.delete(expectedBobIndex);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(ALICE));","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(BOB));","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(MARY));","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"    public void testGetPerson() {","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(JOHN);","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"        int expectedJohnIndex \u003d 0;","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(JOHN,trackingList.getPerson(expectedJohnIndex));","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"    public void testListPerson() {","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"        List\u003cPerson\u003e returnedList \u003d trackingList.listPerson();","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(ALICE));","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(BOB));","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(MARY));","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"    public void testGetSize() {","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"        int expectedSize \u003d 0;","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"sarzorwyn"},"content":"        expectedSize +\u003d 1;","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"sarzorwyn"},"content":"        expectedSize +\u003d 1;","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"sarzorwyn"},"content":"    public void testClear() {","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.clear();","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(ALICE));","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(BOB));","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(MARY));","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"sarzorwyn"},"content":"        int expectedSize \u003d 0;","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_idInTrackingList_success() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.findExactPerson(BOB.getId()), BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_idNotInTrackingList_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e trackingList.findExactPerson(MARY.getId()));","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":129,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_phoneInTrackingList_success() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-23"},{"lineNumber":131,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":133,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.findPerson(BOB.getPhone()).contains(BOB));","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"sarzorwyn"},"content":"    public void findPerson_phoneNotInTrackingList_exceptionThrown() {","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e trackingList.findPerson(MARY.getPhone()));","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_nameInTrackingList_success() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.findPerson(BOB.getName()).contains(BOB));","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":152,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":153,"author":{"gitId":"sarzorwyn"},"content":"    public void findPerson_nameNotInTrackingList_exceptionThrown() {","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);","lastModifiedDate":"2021-03-23"},{"lineNumber":155,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);","lastModifiedDate":"2021-03-23"},{"lineNumber":156,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":157,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e trackingList.findPerson(MARY.getName()));","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":159,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"sarzorwyn"},"content":"    @AfterEach","lastModifiedDate":"2021-03-16"},{"lineNumber":161,"author":{"gitId":"sarzorwyn"},"content":"    public void clearTrackingList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":162,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.clear();","lastModifiedDate":"2021-03-16"},{"lineNumber":163,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"sarzorwyn":162,"hussain1998":2}},{"path":"src/test/java/seedu/duke/model/person/IdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"class IdTest {","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    void testEquals() {","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"        Id id1 \u003d new Id(\"123A\");","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        Id id2 \u003d new Id(\"123A\");","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        Id id3 \u003d new Id(\"456B\");","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        assertTrue(id1.equals(id1));","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        assertTrue(id1.equals(id2));","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        assertFalse(id1.equals(id3));","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        assertFalse(id1.equals(\"test string\"));","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hussain1998":23}},{"path":"src/test/java/seedu/duke/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_DIFF_ID;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_NO_PHONE;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"public class PersonTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    void testEquals() {","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        assertTrue(JOHN.equals(JOHN));","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        assertTrue(JOHN.equals(JOHN_NO_PHONE));","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        assertFalse(JOHN.equals(JOHN_DIFF_ID));","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        assertFalse(JOHN.equals(\"test string\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"sarzorwyn":1,"hussain1998":19}},{"path":"src/test/java/seedu/duke/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.model.person;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.model.person.Phone.isValidPhone;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_DIFF_ID;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_NO_PHONE;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"class PhoneTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    static final String CORRECT_PHONE \u003d \"91234567\";","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    static final String WRONG_LEN_PHONE \u003d \"9123456\";","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    static final String NON_DIGITS_PHONE \u003d \"9123456a\";","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    static final Phone JOHN_PHONE \u003d JOHN.getPhone();","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    static final Phone JOHN_DIFF_ID_PHONE \u003d JOHN_DIFF_ID.getPhone();","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    static final Phone NO_PHONE_JOHN_PHONE \u003d JOHN_NO_PHONE.getPhone();","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"    void testValidPhone() {","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        assertTrue(isValidPhone(CORRECT_PHONE));","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        assertFalse(isValidPhone(WRONG_LEN_PHONE));","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        assertFalse(isValidPhone(NON_DIGITS_PHONE));","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    void getPhoneNo() {","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        assertEquals(JOHN_PHONE.getPhoneNo(), JOHN_DIFF_ID_PHONE.getPhoneNo());","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        assertNotEquals(JOHN_PHONE.getPhoneNo(), NO_PHONE_JOHN_PHONE.getPhoneNo());","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    void setPhoneNo() {","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"        NO_PHONE_JOHN_PHONE.setPhoneNo(CORRECT_PHONE);","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        assertEquals(NO_PHONE_JOHN_PHONE.getPhoneNo(), CORRECT_PHONE);","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        NO_PHONE_JOHN_PHONE.setPhoneNo(null);","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"        assertNull(NO_PHONE_JOHN_PHONE.getPhoneNo());","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    void isAvailable() {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        assertFalse(NO_PHONE_JOHN_PHONE.isAvailable());","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        assertTrue(JOHN_PHONE.isAvailable());","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"    void testToString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        assertEquals(JOHN_PHONE.getPhoneNo(), JOHN_PHONE.toString());","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"hussain1998":56}},{"path":"src/test/java/seedu/duke/storage/ConfigFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.StandardCopyOption;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"public class ConfigFileTest {","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"    private static ConfigFile configFile;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"    private static String testPath \u003d \"src/test/data/ConfigFileTest/settings.properties\";","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    private static String originalPath \u003d \"src/test/data/ConfigFileTest/revert.txt\";","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    @BeforeAll","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    public static void configFileTest() {","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"        configFile \u003d new ConfigFile(testPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    public void loadTest() {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"        String expectedPath \u003d \"src/test/data/StorageFileTest/ValidData\";","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"        configFile.load();","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(configFile.getStorageFilePath(), expectedPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"    public void setStorageFilePathTest() throws StorageOperationException {","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"        String newPath \u003d \"src/test/data/StorageFileTest/invalidData\";","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"        configFile.setStorageFilePath(newPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(configFile.getStorageFilePath(), newPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"    @AfterEach","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"    public void configFileCleanup() throws Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"        Path test \u003d Paths.get(testPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"        Path original \u003d Paths.get(originalPath);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"        Files.copy(original, test, StandardCopyOption.REPLACE_EXISTING);","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"sarzorwyn":45}},{"path":"src/test/java/seedu/duke/storage/HistoryFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-10"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-04-10"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-04-10"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"public class HistoryFileTest {","lastModifiedDate":"2021-04-10"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    @Test","lastModifiedDate":"2021-04-10"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    public void invalidFilePath_HistoryStorageExceptionThrown() {","lastModifiedDate":"2021-04-10"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"        String invalidPath \u003d \":-?;\\0\";","lastModifiedDate":"2021-04-10"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"        assertThrows(InvalidPathException.class, () -\u003e new HistoryFile(invalidPath));","lastModifiedDate":"2021-04-10"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-04-10"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-04-10"}],"authorContributionMap":{"limwenfeng":16}},{"path":"src/test/java/seedu/duke/storage/StorageFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.StorageOperationException;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.storage.StorageFile.TXT_FILE_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_STORAGE_TRACKING_LIST;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"public class StorageFileTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    private static final String TEST_DATA_PATH \u003d \"src/test/data/StorageFileTest/\";","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    private static final String VALID_DATA_FILE \u003d \"ValidData\";","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    private static final String INVALID_DATA_FILE \u003d \"InvalidData\";","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    private static final String NON_EXISTENT_FILE \u003d \"NotExistent\";","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    private static final String NEW_FILE \u003d \"NewFile\";","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    public void constructor_invalidFilePath_StorageOperationExceptionThrown() {","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"        String invalidPath \u003d \":-?;\\0\";","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(StorageOperationException.class, () -\u003e new StorageFile(invalidPath));","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"    public void constructor_defaultConstructor_success() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"            new StorageFile();","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"            fail();","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"    public void load_invalidFormat_StorageOperationExceptionThrown()","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"            throws StorageOperationException {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"        StorageFile storage \u003d new StorageFile(TEST_DATA_PATH + INVALID_DATA_FILE);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(StorageOperationException.class, storage::load);","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"    public void load_validFormat_success() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        StorageFile storage \u003d new StorageFile(TEST_DATA_PATH + VALID_DATA_FILE);","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList actualTrackingList \u003d storage.load();","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList expectedTrackingList \u003d SAMPLE_STORAGE_TRACKING_LIST;","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(actualTrackingList.listPerson(), expectedTrackingList.listPerson());","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"    public void load_nonExistentFile_returnsEmptyTrackingList() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"        StorageFile storage \u003d new StorageFile(TEST_DATA_PATH + NON_EXISTENT_FILE);","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList actualTrackingList \u003d storage.load();","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList expectedTrackingList \u003d new TrackingList();","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(actualTrackingList.listPerson(), expectedTrackingList.listPerson());","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"    public void testSave() throws Exception {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"        StorageFile storage \u003d new StorageFile(TEST_DATA_PATH + NEW_FILE);","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList savedTrackingList \u003d SAMPLE_STORAGE_TRACKING_LIST;","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"        storage.save(savedTrackingList);","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"        Path savedFilePath \u003d Paths.get(TEST_DATA_PATH + NEW_FILE + TXT_FILE_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        Path validFilePath \u003d Paths.get(TEST_DATA_PATH + VALID_DATA_FILE + TXT_FILE_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"        List\u003cString\u003e savedFile \u003d Files.readAllLines(savedFilePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"        List\u003cString\u003e validFile \u003d Files.readAllLines(validFilePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(savedFile, validFile);","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"        // Clean up","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"        Files.deleteIfExists(savedFilePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"sarzorwyn":80,"hussain1998":1}},{"path":"src/test/java/seedu/duke/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Id;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Name;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Phone;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"public class PersonBuilder {","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    private Id id;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    private Name name;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    private Phone phone;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    private Boolean isCheckedIn;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withId(String id) {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d new Id(id);","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withCheckedInStatus(boolean isCheckedIn) {","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        this.isCheckedIn \u003d isCheckedIn;","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    public Person build() {","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        Person person \u003d new Person(id,name,phone);","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        person.setCheckedIn(isCheckedIn);","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        return person;","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"hussain1998":39}},{"path":"src/test/java/seedu/duke/testutil/SampleLocations.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.testutil;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidArgumentSizeException;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.InvalidMaxCapacityException;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.Location;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"public class SampleLocations {","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"    public static Location SCHOOL;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static Location SMALL_SHOP;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static Location BIG_MALL;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public static Location FOOD_COURT;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    public static Location CINEMA;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public static Location EVENT;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public static final int CURRENT_CAPACITY \u003d 20;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    static {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"            SCHOOL \u003d new Location(new String[] {\"1000\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"            SMALL_SHOP \u003d new Location(new String[] {\"25\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"            BIG_MALL \u003d new Location(new String[] {\"1000\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"            FOOD_COURT \u003d new Location(new String[] {\"50\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"            CINEMA \u003d new Location(new String[] {\"100\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"            EVENT \u003d new Location(new String[] {\"250\"}, CURRENT_CAPACITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"        } catch (InvalidMaxCapacityException | InvalidArgumentSizeException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"iamakilahamed":21,"hussain1998":8}},{"path":"src/test/java/seedu/duke/testutil/SamplePersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"public class SamplePersons {","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withId(\"665B\")","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"            .withName(\"Alice\").withPhone(\"86862540\")","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person BOB \u003d new PersonBuilder().withId(\"126C\")","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"            .withName(\"Bob\").withPhone(\"90904040\")","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN \u003d new PersonBuilder().withId(\"123A\")","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(\"12345678\")","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN_NO_PHONE \u003d new PersonBuilder().withId(\"123A\")","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(null)","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    public static final Person JACK_NO_PHONE \u003d new PersonBuilder().withId(\"375F\")","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"            .withName(\"Jack\").withPhone(null)","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN_DIFF_ID \u003d new PersonBuilder().withId(\"456B\")","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(\"12345678\")","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person MARY \u003d new PersonBuilder().withId(\"230C\")","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"            .withName(\"Mary\").withPhone(\"95001501\")","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    public static final Person NON_EXISTENT_PERSON \u003d new PersonBuilder().withId(\"090S\")","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"            .withName(\"Must not exist\").withPhone(\"00000000\").build();","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"iamakilahamed":3,"sarzorwyn":8,"hussain1998":18}},{"path":"src/test/java/seedu/duke/testutil/SampleTrackingList.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.testutil;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_NO_PHONE;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"public class SampleTrackingList {","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static TrackingList SAMPLE_TRACKING_LIST \u003d new TrackingList(ALICE, BOB);","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"    public static TrackingList SAMPLE_STORAGE_TRACKING_LIST \u003d new TrackingList(MARY, JOHN_NO_PHONE);","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"iamakilahamed":8,"sarzorwyn":3,"hussain1998":1}},{"path":"src/test/java/seedu/duke/ui/TextUiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package seedu.duke.ui;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.model.TrackingList;","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import seedu.duke.model.person.Person;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"import java.util.List;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"import static seedu.duke.testutil.SampleTrackingList.SAMPLE_TRACKING_LIST;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"public class TextUiTest {","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"    TextUi textUi \u003d new TextUi();","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"    public void testEmptyList() {","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"        TrackingList trackingList \u003d new TrackingList();","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"        int actualCurrentCapacity \u003d textUi.getCurrentCapacity(trackingList.listPerson());","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"        assertEquals(0, actualCurrentCapacity);","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"limwenfeng":32}},{"path":"text-ui-test/runtest.bat","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@echo off","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"setlocal enableextensions","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"pushd %~dp0","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"call gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"cd build\\libs","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"for /f \"tokens\u003d*\" %%a in (","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u0027dir /b *.jar\u0027","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":") do (","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    set jarloc\u003d%%a","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"java -jar %jarloc% \"500\"\u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"cd ..\\..\\text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"iamakilahamed":1,"-":18}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \"500\"\u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"diff EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"Test passed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    echo \"Test failed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"iamakilahamed":1,"-":22}}]
