[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sarzorwyn":15,"hussain1998":1,"-":46}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | H Mohamed Hussain | [Github](https://github.com/hussain1998) | [Portfolio](docs/team/hussain.md)"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jonathan K | [Github](https://github.com/JonathanKhooTY) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wen Feng | [Github](https://github.com/limwenfeng/) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ivan Tan | [Github](https://github.com/sarzorwyn) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Akil | [Github](https://github.com/iamakilahamed) | [Portfolio](docs/team/johndoe.md)"}],"authorContributionMap":{"JonathanKhooTY":1,"iamakilahamed":1,"-":7}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.CommandOutput;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.parser.Parser;"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.ui.TextUi;"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import java.net.SocketTimeoutException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    private static final String VERSION_NO \u003d \"v1.0\";"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public static void runUntilExit() {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        TextUi ui \u003d new TextUi();"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        TrackingList trackingList \u003d new TrackingList();"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        Command command \u003d null;"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        String userInput;"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        ui.showWelcomeMessage(VERSION_NO);"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        do {"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"            userInput \u003d ui.getUserInput();"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"                command \u003d parser.parseCommand(userInput);"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"            } catch (InvalidCommandException e) {"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"                System.out.println(\"Invalid command detected. Try again!\");"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"                continue;"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"            } catch (NoArgumentPassedException e) {"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"                System.out.println(\"No argument passed! Try again!\");"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"                continue;"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"            } catch (WrongFlagException e) {"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"                System.out.println(\"Wrong flags used!\");"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"                continue;"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"            CommandOutput commandOutput \u003d null;"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"                commandOutput \u003d command.execute(trackingList);"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"                System.out.println(\"Person not found!\");"},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"                continue;"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"            ui.printReaction(commandOutput);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        } while (!(command instanceof ExitCommand));"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":57,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":60,"author":{"gitId":"JonathanKhooTY"},"content":"        runUntilExit();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":8,"iamakilahamed":1,"hussain1998":41,"-":12}},{"path":"src/main/java/seedu/duke/commands/CheckInCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.Id;"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.Name;"},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.Person;"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.Phone;"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":" * Check-in a person."},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckInCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"checkin\";"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKIN_MESSAGE \u003d \"%s has been successfully checked-in!\";"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    private final Person toCheckin;"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    // For v2.0"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    //    /**"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    //     * Checkin using raw values (first time)."},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    //     * If already checkin, update the location list."},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    //     */"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"    //    public CheckinCommand(String id,"},{"lineNumber":24,"author":{"gitId":"iamakilahamed"},"content":"    //                          String name,"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    //                          String phone,"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"    //                          Location location) {"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"    //        if (trackingList.findPerson(id)) {"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    //            toCheckin \u003d trackinglist.findPerson(id);"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":"    //            toCheckin.addLocation(location);"},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    //        }"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"    //        toCheckin \u003d new Person("},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    //                new Id(id),"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":"    //                new Name(name),"},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    //                new Phone(phone),"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"    //                new Locations(visitedPlaces));"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    //  }"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":"    public CheckInCommand(String id,"},{"lineNumber":39,"author":{"gitId":"iamakilahamed"},"content":"                          String name,"},{"lineNumber":40,"author":{"gitId":"iamakilahamed"},"content":"                          String phone) {"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"        toCheckin \u003d new Person("},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"                new Id(id),"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"                new Name(name),"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"                new Phone(phone));"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    public Person getToCheckIn() {"},{"lineNumber":48,"author":{"gitId":"iamakilahamed"},"content":"        return toCheckin;"},{"lineNumber":49,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":51,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        toCheckin.setCheckedIn(true);"},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"        trackingList.add(toCheckin);"},{"lineNumber":55,"author":{"gitId":"JonathanKhooTY"},"content":"        return new CommandOutput(String.format(CHECKIN_MESSAGE, toCheckin.getName()), COMMAND);"},{"lineNumber":56,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":58,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":51,"JonathanKhooTY":3,"hussain1998":4}},{"path":"src/main/java/seedu/duke/commands/CheckoutCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.person.Id;"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.person.Name;"},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.person.Person;"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":" * Check-out a person."},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"public class CheckoutCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"checkout\";"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CHECKOUT_MESSAGE \u003d \"%s has been successfully checked-out!\";"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"    private final Id id;"},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    private Person toCheckout;"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"    private static Logger logger \u003d Logger.getLogger(CheckoutCommand.class.getName());"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    public CheckoutCommand(String idString,String nameString) {"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"        id \u003d new Id(idString);"},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"        name \u003d new Name(nameString);"},{"lineNumber":28,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":30,"author":{"gitId":"iamakilahamed"},"content":"    public Person getToCheckout() {"},{"lineNumber":31,"author":{"gitId":"iamakilahamed"},"content":"        return toCheckout;"},{"lineNumber":32,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":34,"author":{"gitId":"iamakilahamed"},"content":"    public void setToCheckout(Person person) {"},{"lineNumber":35,"author":{"gitId":"iamakilahamed"},"content":"        toCheckout \u003d person;"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"JonathanKhooTY"},"content":"    public CommandOutput execute(TrackingList trackingList) throws PersonNotFoundException {"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"        toCheckout \u003d trackingList.findExactPerson(id);"},{"lineNumber":41,"author":{"gitId":"iamakilahamed"},"content":"        Name toCheckoutName \u003d toCheckout.getName();"},{"lineNumber":42,"author":{"gitId":"iamakilahamed"},"content":"        boolean isSamePerson \u003d toCheckoutName.getNameString().equals(name.getNameString());"},{"lineNumber":43,"author":{"gitId":"iamakilahamed"},"content":"        if (!isSamePerson) {"},{"lineNumber":44,"author":{"gitId":"iamakilahamed"},"content":"            logger.warning(\"ID entered does not match the name from the list.\");"},{"lineNumber":45,"author":{"gitId":"iamakilahamed"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"iamakilahamed"},"content":"        assert isSamePerson : \"ID does not match name.\";"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"        if (toCheckout \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":49,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"iamakilahamed"},"content":"        toCheckout.setCheckedIn(false);"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"        return new CommandOutput(String.format(CHECKOUT_MESSAGE, toCheckout.getName()), COMMAND);"},{"lineNumber":52,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":54,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":40,"JonathanKhooTY":12,"hussain1998":2}},{"path":"src/main/java/seedu/duke/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Clears all the entries in tracking list."},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class ClearCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"clear\";"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static final String CLEAR_MESSAGE \u003d \"Cleared %d entries\";"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(String.format(CLEAR_MESSAGE, trackingList.getSize()), COMMAND);"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":14,"hussain1998":4}},{"path":"src/main/java/seedu/duke/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" * Represents an executable command."},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    protected Command() {"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"     * Executes the command."},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"    public CommandOutput execute(TrackingList trackingList) throws PersonNotFoundException {"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        return null;"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":17,"JonathanKhooTY":2,"hussain1998":2}},{"path":"src/main/java/seedu/duke/commands/CommandOutput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Person;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":" * Represents the output of a command execution."},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"public class CommandOutput {"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public final String messageToUser;"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public final List\u003cPerson\u003e persons;"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public final Person person;"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public final String command;"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput(String messageToUser, String command) {"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        this.messageToUser \u003d messageToUser;"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"        persons \u003d null;"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        person \u003d null;"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput(List\u003cPerson\u003e persons, String command) {"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"        messageToUser \u003d null;"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":"        this.persons \u003d persons;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        person \u003d null;"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput(Person person, String messageToUser, String command) {"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"        this.messageToUser \u003d messageToUser;"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        persons \u003d null;"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        this.person \u003d person;"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        this.command \u003d command;"},{"lineNumber":36,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":38,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":19,"hussain1998":19}},{"path":"src/main/java/seedu/duke/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Deletes the latest checked-in person"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" * due to human error by the user."},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"delete\";"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public static final String DELETE_MESSAGE \u003d \"Deleted.\";"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        trackingList.delete(trackingList.getSize() - 1);"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(DELETE_MESSAGE, COMMAND);"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":16,"hussain1998":4}},{"path":"src/main/java/seedu/duke/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" * Terminates SET program."},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"exit\";"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    public static final String EXIT_MESSAGE \u003d \"Exiting Safest Entry Tracker...\";"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(EXIT_MESSAGE, COMMAND);"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":14,"hussain1998":5}},{"path":"src/main/java/seedu/duke/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Id;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Person;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":" * Finds the person in tracking list using id."},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public static final String FIND_MESSAGE \u003d \"%s found.\";"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    private final Id idKeyword;"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"    public FindCommand(String idKeyword) {"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        this.idKeyword \u003d new Id(idKeyword);"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"    public CommandOutput execute(TrackingList trackingList) throws PersonNotFoundException {"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"        Person person \u003d trackingList.findExactPerson(idKeyword);"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(person, String.format(FIND_MESSAGE,person.getName()), COMMAND);"},{"lineNumber":25,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":27,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":20,"sarzorwyn":1,"hussain1998":6}},{"path":"src/main/java/seedu/duke/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.TrackingList;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":" * Lists all the person in the tracking list to the user."},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":" */"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    public static final String COMMAND \u003d \"list\";"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":12,"author":{"gitId":"iamakilahamed"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public CommandOutput execute(TrackingList trackingList) {"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        return new CommandOutput(trackingList.listPerson(), COMMAND);"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":13,"hussain1998":4}},{"path":"src/main/java/seedu/duke/common/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class Messages {"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":4}},{"path":"src/main/java/seedu/duke/exceptions/InvalidCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class InvalidCommandException extends Exception{"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":4}},{"path":"src/main/java/seedu/duke/exceptions/NoArgumentPassedException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class NoArgumentPassedException extends Exception{"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":4}},{"path":"src/main/java/seedu/duke/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class PersonNotFoundException extends Exception{"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":4}},{"path":"src/main/java/seedu/duke/exceptions/WrongFlagException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"public class WrongFlagException extends Exception{"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":4}},{"path":"src/main/java/seedu/duke/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.commands.CheckInCommand;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.CheckoutCommand;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.Command;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.FindCommand;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.ListCommand;"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.InvalidCommandException;"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.NoArgumentPassedException;"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.exceptions.WrongFlagException;"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"public class Parser {"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"     * Method that splits user input into 2 sections."},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"     * First section contains desired command"},{"lineNumber":20,"author":{"gitId":"JonathanKhooTY"},"content":"     * Second section contains the description of the task"},{"lineNumber":21,"author":{"gitId":"JonathanKhooTY"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"JonathanKhooTY"},"content":"     * @param text This is the user input. It is a string"},{"lineNumber":23,"author":{"gitId":"JonathanKhooTY"},"content":"     * @return String[] This returns an array, containing 2 fields"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"    public static String[] splitTextIntoTwoFields(String text) {"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        String[] textArray \u003d text.split(\" \", 2);"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"        textArray[0] \u003d textArray[0].toLowerCase().trim();"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":"        if (textArray.length !\u003d 1) {"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"            textArray[1] \u003d textArray[1].trim();"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"        return textArray;"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    public Command parseCommand(String userInput) throws"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"            InvalidCommandException, NoArgumentPassedException, WrongFlagException {"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        String[] inputArray;"},{"lineNumber":38,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"        String argument \u003d null;"},{"lineNumber":40,"author":{"gitId":"JonathanKhooTY"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"        userInput \u003d userInput.trim();"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        inputArray \u003d splitTextIntoTwoFields(userInput);"},{"lineNumber":43,"author":{"gitId":"JonathanKhooTY"},"content":"        String command;"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"        command \u003d inputArray[0];"},{"lineNumber":45,"author":{"gitId":"JonathanKhooTY"},"content":"        if (inputArray.length !\u003d 1) {"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"            argument \u003d inputArray[1];"},{"lineNumber":47,"author":{"gitId":"JonathanKhooTY"},"content":"        } else if (!command.equals(\"list\") \u0026\u0026 !command.equals(\"exit\")) {"},{"lineNumber":48,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidCommandException();"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"JonathanKhooTY"},"content":"        switch (command) {"},{"lineNumber":51,"author":{"gitId":"JonathanKhooTY"},"content":"        case CheckInCommand.COMMAND:"},{"lineNumber":52,"author":{"gitId":"JonathanKhooTY"},"content":"            return parseCheckIn(argument);"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        case CheckoutCommand.COMMAND:"},{"lineNumber":54,"author":{"gitId":"JonathanKhooTY"},"content":"            return parseCheckOut(argument);"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        case FindCommand.COMMAND:"},{"lineNumber":56,"author":{"gitId":"JonathanKhooTY"},"content":"            return parseFind(argument);"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"        case ListCommand.COMMAND:"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"            return parseList();"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"        case DeleteCommand.COMMAND:"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"            return parseDelete();"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        case ExitCommand.COMMAND:"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"            return parseExit();"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new InvalidCommandException();"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"    private ExitCommand parseExit() {"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        return new ExitCommand();"},{"lineNumber":70,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"    private Command parseDelete() {"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"        return new DeleteCommand();"},{"lineNumber":74,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"    private Command parseList() {"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"        return new ListCommand();"},{"lineNumber":78,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":80,"author":{"gitId":"JonathanKhooTY"},"content":"    private Command parseFind(String argument) {"},{"lineNumber":81,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] findDetails \u003d argument.split(\"i/\",2);"},{"lineNumber":82,"author":{"gitId":"JonathanKhooTY"},"content":"        String id \u003d findDetails[1];"},{"lineNumber":83,"author":{"gitId":"JonathanKhooTY"},"content":"        String name \u003d findDetails[0].substring(2); //starts from index 1 due to inclusion of \"/n\" flag"},{"lineNumber":84,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"        return new FindCommand(id);"},{"lineNumber":86,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":88,"author":{"gitId":"JonathanKhooTY"},"content":"    private Command parseCheckOut(String argument) throws NoArgumentPassedException, WrongFlagException {"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"        if (argument.isBlank()) {"},{"lineNumber":90,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException();"},{"lineNumber":91,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] checkoutDetails \u003d argument.split(\"i/\",2);"},{"lineNumber":93,"author":{"gitId":"JonathanKhooTY"},"content":"        if (checkoutDetails.length !\u003d 2) {"},{"lineNumber":94,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new WrongFlagException();"},{"lineNumber":95,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"JonathanKhooTY"},"content":"        String id \u003d checkoutDetails[1];"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        String name \u003d checkoutDetails[0].substring(2); //starts from index 1 due to inclusion of \"/n\" flag"},{"lineNumber":98,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":99,"author":{"gitId":"JonathanKhooTY"},"content":"        return new CheckoutCommand(id,name);"},{"lineNumber":100,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":102,"author":{"gitId":"JonathanKhooTY"},"content":"    private Command parseCheckIn(String argument) throws NoArgumentPassedException, WrongFlagException {"},{"lineNumber":103,"author":{"gitId":"hussain1998"},"content":"        if (argument.isBlank()) {"},{"lineNumber":104,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new NoArgumentPassedException();"},{"lineNumber":105,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] checkInDetails \u003d argument.split(\"i/\",2);"},{"lineNumber":107,"author":{"gitId":"JonathanKhooTY"},"content":"        if (checkInDetails.length !\u003d 2) {"},{"lineNumber":108,"author":{"gitId":"JonathanKhooTY"},"content":"            throw new WrongFlagException();"},{"lineNumber":109,"author":{"gitId":"JonathanKhooTY"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"JonathanKhooTY"},"content":"        String id \u003d checkInDetails[1];"},{"lineNumber":111,"author":{"gitId":"JonathanKhooTY"},"content":"        String name \u003d checkInDetails[0].substring(2); //starts from index 1 due to inclusion of \"/n\" flag"},{"lineNumber":112,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":113,"author":{"gitId":"JonathanKhooTY"},"content":"        return new CheckInCommand(id, name, null);"},{"lineNumber":114,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":116,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":77,"hussain1998":39}},{"path":"src/main/java/seedu/duke/person/Id.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"public class Id {"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"    public final String idString;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"    public static final String ID_REGEX \u003d \"\\\\d{3}[A-Z]\";"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"    public static final String ID_ERROR \u003d \"ID should be 3 digits followed by a uppercase letter\";"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    public Id(String idString) {"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"        assert isValidId(idString) : ID_ERROR;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"        this.idString \u003d idString.trim();"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public String getIdString() {"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        return idString;"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        return idString;"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidId(String idString) {"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        return idString.matches(ID_REGEX);"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"            return true;"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        } else if (other instanceof Id) {"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"            return idString.equals(((Id) other).getIdString());"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        return false;"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":35}},{"path":"src/main/java/seedu/duke/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"public class Name {"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"    public final String nameString;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"    public static final String NAME_REGEX \u003d \"[a-zA-Z][a-zA-Z( )*]{0,99}\";"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"    public static final String NAME_ERROR \u003d \"Name should consist of alphabets (or spaces) only. (100 characters limit)\";"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    public Name(String nameString) {"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"        assert isValidName(nameString) : NAME_ERROR;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"        this.nameString \u003d nameString.trim();"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidName(String nameString) {"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        return nameString.matches(NAME_REGEX);"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    public String getNameString() {"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        return nameString;"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        return nameString;"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":25}},{"path":"src/main/java/seedu/duke/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Represents a Person."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" * Assumption: values are validated and not null."},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"public class Person {"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    private Id id;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    private Name name;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    private Phone phone;"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    private Boolean isCheckedIn;"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public Person(Id id, Name name, Phone phone) {"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        assert id !\u003d null : \"ID cannot be null\";"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        assert phone !\u003d null : \"Phone cannot be null\";"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        assert name !\u003d null : \"Name cannot be null\";"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d id;"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d name;"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d phone;"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"            return true;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"        } else if (other instanceof Person) {"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"            return id.equals(((Person) other).id);"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"    public Id getId() {"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        return id;"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    public void setId(Id id) {"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d id;"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    public Name getName() {"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        return name;"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    public void setName(Name name) {"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"    public Phone getPhone() {"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        return phone;"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"    public Boolean getCheckedIn() {"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"        return isCheckedIn;"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"    public void setCheckedIn(Boolean checkedIn) {"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"        isCheckedIn \u003d checkedIn;"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":64}},{"path":"src/main/java/seedu/duke/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Represents the phone number of a person."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" * If a person does not have a phone, isAvailable will be false."},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"public class Phone {"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    public String phoneNo;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    public boolean isAvailable;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    public static final String PHONE_REGEX \u003d \"\\\\d{8}\";"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    public static final String PHONE_ERROR \u003d \"Phone number should consist of only 8 digits\";"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"     * Constructs a phone object."},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"     * @param phoneNo Phone number string. Null if Person has no phone."},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    public Phone(String phoneNo) {"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        assert phoneNo \u003d\u003d null || isValidPhone(phoneNo) : PHONE_ERROR;"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        this.isAvailable \u003d phoneNo !\u003d null;"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        this.phoneNo \u003d phoneNo;"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public static boolean isValidPhone(String phoneNo) {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        return phoneNo.matches(PHONE_REGEX);"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"    public String getPhoneNo() {"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        return phoneNo;"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    public void setPhoneNo(String phoneNo) {"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        assert isValidPhone(phoneNo) : PHONE_ERROR;"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        this.phoneNo \u003d phoneNo;"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    public boolean isAvailable() {"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        return isAvailable;"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    public void setAvailable(boolean available) {"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        isAvailable \u003d available;"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"        return phoneNo;"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":49}},{"path":"src/main/java/seedu/duke/person/TrackingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":" * A list of persons. Does not allow null elements or duplicates."},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":" */"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingList {"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"    private final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"     * Constructs a empty Person List."},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList() {"},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"     * Constructs a person list with given persons in varargs."},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"    public TrackingList(Person... persons) {"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e initialPersons \u003d Arrays.asList(persons);"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":"        personList.addAll(initialPersons);"},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"     * Checks if a list contains the person in given argument."},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"     * @param personToCheck Person to check if contained in personList"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"     * @return True if personList contains Person, False if personList does not contains Person"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    public boolean contains(Person personToCheck) {"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {"},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"            if (p.equals(personToCheck)) {"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"                return true;"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        return false;"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"    public void add(Person person) {"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":"        personList.add(person);"},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"        assert personList.contains(person) : \"Person not added to list\";"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"    public void delete(Person person) {"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        personList.remove(person);"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":"        assert !personList.contains(person) : \"Person not removed from list\";"},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"    public void delete(int index) {"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":"        personList.remove(index);"},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"    public Person getPerson(int index) {"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"        return personList.get(index);"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"    public int getSize() {"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"        return personList.size();"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e listPerson() {"},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e returnedList \u003d new ArrayList\u003c\u003e(personList);"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"        assert returnedList.size() \u003d\u003d personList.size() : \"returnedList does not match listPerson size\";"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":"        return returnedList;"},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"    public void clear() {"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        personList.clear();"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"        assert personList.isEmpty() : \"List not empty after clear\";"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with exact match as id queried."},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"     * @param id id being queried"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that exactly matches id"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"    public Person findExactPerson(Id id) throws PersonNotFoundException {"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"        Person matchingPerson \u003d null;"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {"},{"lineNumber":85,"author":{"gitId":"iamakilahamed"},"content":"            if (p.getId().getIdString().equals(id.getIdString())) {"},{"lineNumber":86,"author":{"gitId":"hussain1998"},"content":"                matchingPerson \u003d p;"},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPerson \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"sarzorwyn"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":91,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":93,"author":{"gitId":"sarzorwyn"},"content":"        assert matchingPerson.getId().equals(id) : \"Result id does not match return id\";"},{"lineNumber":94,"author":{"gitId":"hussain1998"},"content":"        return matchingPerson;"},{"lineNumber":95,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":97,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with partial match as phone queried."},{"lineNumber":99,"author":{"gitId":"sarzorwyn"},"content":"     * @param phone Phone being queried"},{"lineNumber":100,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that partially matches phone"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id"},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e findPerson(Phone phone) throws PersonNotFoundException {"},{"lineNumber":104,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e matchingPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":105,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":"            if (p.getPhone().getPhoneNo().contains(phone.getPhoneNo())) {"},{"lineNumber":107,"author":{"gitId":"sarzorwyn"},"content":"                matchingPersons.add(p);"},{"lineNumber":108,"author":{"gitId":"sarzorwyn"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":111,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPersons.isEmpty()) {"},{"lineNumber":112,"author":{"gitId":"sarzorwyn"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":113,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"sarzorwyn"},"content":"        return matchingPersons;"},{"lineNumber":115,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":117,"author":{"gitId":"sarzorwyn"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"iamakilahamed"},"content":"     * Finds Person with partial match as name queried."},{"lineNumber":119,"author":{"gitId":"sarzorwyn"},"content":"     * @param name Name being queried"},{"lineNumber":120,"author":{"gitId":"sarzorwyn"},"content":"     * @return Person that partially matches name"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"     * @throws PersonNotFoundException if no person has queried id"},{"lineNumber":122,"author":{"gitId":"sarzorwyn"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"sarzorwyn"},"content":"    public List\u003cPerson\u003e findPerson(Name name) throws PersonNotFoundException {"},{"lineNumber":124,"author":{"gitId":"sarzorwyn"},"content":"        final List\u003cPerson\u003e matchingPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitId":"sarzorwyn"},"content":"        for (Person p : personList) {"},{"lineNumber":126,"author":{"gitId":"sarzorwyn"},"content":"            if (p.getName().getNameString().contains(name.getNameString())) {"},{"lineNumber":127,"author":{"gitId":"sarzorwyn"},"content":"                matchingPersons.add(p);"},{"lineNumber":128,"author":{"gitId":"sarzorwyn"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":131,"author":{"gitId":"sarzorwyn"},"content":"        if (matchingPersons.isEmpty()) {"},{"lineNumber":132,"author":{"gitId":"sarzorwyn"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":133,"author":{"gitId":"sarzorwyn"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"sarzorwyn"},"content":"        return matchingPersons;"},{"lineNumber":135,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"sarzorwyn"},"content":"}"}],"authorContributionMap":{"iamakilahamed":5,"sarzorwyn":128,"hussain1998":3}},{"path":"src/main/java/seedu/duke/ui/TextUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import seedu.duke.commands.CheckInCommand;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.commands.CommandOutput;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Person;"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"import java.io.PrintStream;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"public class TextUi {"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    private PrintStream out;"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"    private Scanner in;"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"    private static Logger logger \u003d Logger.getLogger(TextUi.class.getSimpleName());"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    public TextUi() {"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"        this(System.in, System.out);"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    public TextUi(InputStream in, PrintStream out) {"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"        this.out \u003d out;"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    public void printReaction(CommandOutput commandOutput) {"},{"lineNumber":31,"author":{"gitId":"JonathanKhooTY"},"content":"        String command \u003d commandOutput.command;"},{"lineNumber":32,"author":{"gitId":"JonathanKhooTY"},"content":"        switch (command) {"},{"lineNumber":33,"author":{"gitId":"JonathanKhooTY"},"content":"        case \"list\":"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"            printList(commandOutput.persons);"},{"lineNumber":35,"author":{"gitId":"JonathanKhooTY"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"JonathanKhooTY"},"content":"        default:"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"            printDivider();"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"            out.println(commandOutput.messageToUser);"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"            printDivider();"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    private void printList(List\u003cPerson\u003e persons) {"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"        assert persons instanceof List : \"Only can print list\";"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"        for (Person person : persons) {"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"            if (person.getCheckedIn()) {"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"                out.println(\"Name: \" + person.getName());"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    public void showWelcomeMessage(String version) {"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":"        printDivider();"},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"        assert version instanceof String : \"Version has to be a string\";"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        out.println(\"Welcome to Safest Entry Tracker - Version \" + version);"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"        // for next patch update - Storage class - dataStorageSuccessful()"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"        out.println(\"Data successfully loaded from storage file path.\");"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"        printDivider();"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"    public void showGoodbyeMessage() {"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"        printDivider();"},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"        out.println(\"Exiting Safest Entry Tracker...\");"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"        printDivider();"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"    private void printDivider() {"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"        out.println(DIVIDER);"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"    public String getUserInput() {"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"        String rawInput \u003d in.nextLine();"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"        echoInput(rawInput);"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":"        // logger.info(\"Processed user input in textui.\");"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"        return rawInput;"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"    public String echoInput(String rawInput) {"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"        out.println(\"Command Entered: \" + rawInput);"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"        return rawInput;"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"iamakilahamed":1,"JonathanKhooTY":5,"limwenfeng":47,"sarzorwyn":1,"hussain1998":29}},{"path":"src/test/java/seedu/duke/commands/CheckInCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_DIFF_ID;"},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_NO_PHONE;"},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":"public class CheckInCommandTest {"},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"    public void testCheckInCommand() {"},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"        CheckInCommand checkin1 \u003d new CheckInCommand(JOHN.getId().toString(), JOHN.getName().toString(),"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":"                JOHN.getPhone().toString());"},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        CheckInCommand checkin2 \u003d new CheckInCommand(JOHN_NO_PHONE.getId().toString(),"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":"                JOHN_NO_PHONE.getName().toString(), JOHN_NO_PHONE.getPhone().toString());"},{"lineNumber":18,"author":{"gitId":"iamakilahamed"},"content":"        CheckInCommand checkin3 \u003d new CheckInCommand(JOHN_DIFF_ID.getId().toString(),"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"                JOHN_DIFF_ID.getName().toString(), JOHN_DIFF_ID.getPhone().toString());"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"        checkin1.getToCheckIn().setCheckedIn(true);"},{"lineNumber":22,"author":{"gitId":"iamakilahamed"},"content":"        checkin2.getToCheckIn().setCheckedIn(true);"},{"lineNumber":23,"author":{"gitId":"iamakilahamed"},"content":"        checkin3.getToCheckIn().setCheckedIn(true);"},{"lineNumber":24,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":25,"author":{"gitId":"JonathanKhooTY"},"content":"        assertTrue(checkin1.getToCheckIn().getCheckedIn());"},{"lineNumber":26,"author":{"gitId":"JonathanKhooTY"},"content":"        assertTrue(checkin2.getToCheckIn().getCheckedIn());"},{"lineNumber":27,"author":{"gitId":"JonathanKhooTY"},"content":"        assertTrue(checkin3.getToCheckIn().getCheckedIn());"},{"lineNumber":28,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":30,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":17,"iamakilahamed":13}},{"path":"src/test/java/seedu/duke/commands/CheckoutCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"iamakilahamed"},"content":"package seedu.duke.commands;"},{"lineNumber":2,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":3,"author":{"gitId":"iamakilahamed"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":5,"author":{"gitId":"iamakilahamed"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"iamakilahamed"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;"},{"lineNumber":7,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":8,"author":{"gitId":"iamakilahamed"},"content":"public class CheckoutCommandTest {"},{"lineNumber":9,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":10,"author":{"gitId":"iamakilahamed"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"iamakilahamed"},"content":"    public void testCheckoutCommand() {"},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"        CheckoutCommand checkout1 \u003d new CheckoutCommand(\"123A\",\"JOHN\");"},{"lineNumber":13,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":14,"author":{"gitId":"iamakilahamed"},"content":"        checkout1.setToCheckout(JOHN);"},{"lineNumber":15,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":16,"author":{"gitId":"iamakilahamed"},"content":"        checkout1.getToCheckout().setCheckedIn(false);"},{"lineNumber":17,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"        assertFalse(checkout1.getToCheckout().getCheckedIn());"},{"lineNumber":19,"author":{"gitId":"iamakilahamed"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"iamakilahamed"},"content":""},{"lineNumber":21,"author":{"gitId":"iamakilahamed"},"content":"}"}],"authorContributionMap":{"iamakilahamed":19,"JonathanKhooTY":2}},{"path":"src/test/java/seedu/duke/parser/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JonathanKhooTY"},"content":"package seedu.duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":3,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"JonathanKhooTY"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JonathanKhooTY"},"content":"import seedu.duke.commands.CheckInCommand;"},{"lineNumber":6,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":7,"author":{"gitId":"JonathanKhooTY"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;"},{"lineNumber":8,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":9,"author":{"gitId":"JonathanKhooTY"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":11,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":12,"author":{"gitId":"JonathanKhooTY"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"JonathanKhooTY"},"content":"    public void checkInParser_parsedCorrectly() {"},{"lineNumber":14,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":15,"author":{"gitId":"JonathanKhooTY"},"content":"        String[] result \u003d {\"john\",\"1234A 12345678\"};"},{"lineNumber":16,"author":{"gitId":"JonathanKhooTY"},"content":"        assertArrayEquals(Parser.splitTextIntoTwoFields(\"John 1234A 12345678\"), result);"},{"lineNumber":17,"author":{"gitId":"JonathanKhooTY"},"content":""},{"lineNumber":18,"author":{"gitId":"JonathanKhooTY"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JonathanKhooTY"},"content":"}"}],"authorContributionMap":{"JonathanKhooTY":19}},{"path":"src/test/java/seedu/duke/person/IdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"class IdTest {"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    void testEquals() {"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"        Id id1 \u003d new Id(\"123A\");"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"        Id id2 \u003d new Id(\"123A\");"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        Id id3 \u003d new Id(\"456B\");"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        assertTrue(id1.equals(id1));"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        assertTrue(id1.equals(id2));"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        assertFalse(id1.equals(id3));"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        assertFalse(id1.equals(\"test string\"));"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":22}},{"path":"src/test/java/seedu/duke/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_DIFF_ID;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN_NO_PHONE;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"public class PersonTest {"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    void testEquals() {"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        assertTrue(JOHN.equals(JOHN));"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        assertTrue(JOHN.equals(JOHN_NO_PHONE));"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        assertFalse(JOHN.equals(JOHN_DIFF_ID));"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"        assertFalse(JOHN.equals(\"test string\"));"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"sarzorwyn":1,"hussain1998":19}},{"path":"src/test/java/seedu/duke/person/TrackingListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sarzorwyn"},"content":"package seedu.duke.person;"},{"lineNumber":2,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":3,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":4,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":5,"author":{"gitId":"sarzorwyn"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"import seedu.duke.exceptions.PersonNotFoundException;"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":12,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"sarzorwyn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":14,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.JOHN;"},{"lineNumber":15,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.ALICE;"},{"lineNumber":16,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.BOB;"},{"lineNumber":17,"author":{"gitId":"sarzorwyn"},"content":"import static seedu.duke.testutil.SamplePersons.MARY;"},{"lineNumber":18,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":19,"author":{"gitId":"sarzorwyn"},"content":"public class TrackingListTest {"},{"lineNumber":20,"author":{"gitId":"sarzorwyn"},"content":"    private TrackingList trackingList;"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":22,"author":{"gitId":"sarzorwyn"},"content":"    @BeforeEach"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"    public void initTrackingList() {"},{"lineNumber":24,"author":{"gitId":"sarzorwyn"},"content":"        trackingList \u003d new TrackingList();"},{"lineNumber":25,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":27,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"sarzorwyn"},"content":"    public void testConstructor() {"},{"lineNumber":29,"author":{"gitId":"sarzorwyn"},"content":"        TrackingList constructedList \u003d new TrackingList(JOHN, MARY, ALICE);"},{"lineNumber":30,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(JOHN));"},{"lineNumber":31,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(MARY));"},{"lineNumber":32,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(constructedList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(constructedList.contains(BOB));"},{"lineNumber":34,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":36,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"sarzorwyn"},"content":"    public void testContains() {"},{"lineNumber":38,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":40,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(ALICE));"},{"lineNumber":41,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(JOHN));"},{"lineNumber":42,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(BOB));"},{"lineNumber":43,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":45,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"sarzorwyn"},"content":"    public void testDelete() {"},{"lineNumber":47,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":48,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":49,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);"},{"lineNumber":50,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":51,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.delete(ALICE);"},{"lineNumber":52,"author":{"gitId":"sarzorwyn"},"content":"        int expectedBobIndex \u003d 0;"},{"lineNumber":53,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.delete(expectedBobIndex);"},{"lineNumber":54,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":55,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(ALICE));"},{"lineNumber":56,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(BOB));"},{"lineNumber":57,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(trackingList.contains(MARY));"},{"lineNumber":58,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":60,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"sarzorwyn"},"content":"    public void testGetPerson() {"},{"lineNumber":62,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(JOHN);"},{"lineNumber":63,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);"},{"lineNumber":64,"author":{"gitId":"sarzorwyn"},"content":"        int expectedJohnIndex \u003d 0;"},{"lineNumber":65,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":66,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(JOHN,trackingList.getPerson(expectedJohnIndex));"},{"lineNumber":67,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":69,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"sarzorwyn"},"content":"    public void testListPerson() {"},{"lineNumber":71,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":72,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":73,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);"},{"lineNumber":74,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":75,"author":{"gitId":"sarzorwyn"},"content":"        List\u003cPerson\u003e returnedList \u003d trackingList.listPerson();"},{"lineNumber":76,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":77,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(ALICE));"},{"lineNumber":78,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(BOB));"},{"lineNumber":79,"author":{"gitId":"sarzorwyn"},"content":"        assertTrue(returnedList.contains(MARY));"},{"lineNumber":80,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":82,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"sarzorwyn"},"content":"    public void testGetSize() {"},{"lineNumber":84,"author":{"gitId":"sarzorwyn"},"content":"        int expectedSize \u003d 0;"},{"lineNumber":85,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);"},{"lineNumber":86,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":87,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"sarzorwyn"},"content":"        expectedSize +\u003d 1;"},{"lineNumber":89,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);"},{"lineNumber":90,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":91,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":92,"author":{"gitId":"sarzorwyn"},"content":"        expectedSize +\u003d 1;"},{"lineNumber":93,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);"},{"lineNumber":94,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":96,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"sarzorwyn"},"content":"    public void testClear() {"},{"lineNumber":98,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":100,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(MARY);"},{"lineNumber":101,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":102,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.clear();"},{"lineNumber":103,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(ALICE));"},{"lineNumber":104,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(BOB));"},{"lineNumber":105,"author":{"gitId":"sarzorwyn"},"content":"        assertFalse(trackingList.contains(MARY));"},{"lineNumber":106,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":107,"author":{"gitId":"sarzorwyn"},"content":"        int expectedSize \u003d 0;"},{"lineNumber":108,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.getSize(), expectedSize);"},{"lineNumber":109,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":111,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_idInTrackingList_success() throws PersonNotFoundException {"},{"lineNumber":113,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":114,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":115,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":116,"author":{"gitId":"sarzorwyn"},"content":"        assertEquals(trackingList.findExactPerson(BOB.getId()), BOB);"},{"lineNumber":117,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":119,"author":{"gitId":"sarzorwyn"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"sarzorwyn"},"content":"    public void findExactPerson_idNotInTrackingList_exceptionThrown() {"},{"lineNumber":121,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(ALICE);"},{"lineNumber":122,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.add(BOB);"},{"lineNumber":123,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":124,"author":{"gitId":"sarzorwyn"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e trackingList.findExactPerson(MARY.getId()));"},{"lineNumber":125,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"sarzorwyn"},"content":""},{"lineNumber":127,"author":{"gitId":"sarzorwyn"},"content":"    @AfterEach"},{"lineNumber":128,"author":{"gitId":"sarzorwyn"},"content":"    public void clearTrackingList() {"},{"lineNumber":129,"author":{"gitId":"sarzorwyn"},"content":"        trackingList.clear();"},{"lineNumber":130,"author":{"gitId":"sarzorwyn"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"sarzorwyn"},"content":"}"}],"authorContributionMap":{"sarzorwyn":131}},{"path":"src/test/java/seedu/duke/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.testutil;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Id;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Name;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Person;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Phone;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"public class PersonBuilder {"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    private Id id;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    private Name name;"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"    private Phone phone;"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    private Boolean isCheckedIn;"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withId(String id) {"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"        this.id \u003d new Id(id);"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        return this;"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        return this;"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return this;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    public PersonBuilder withCheckedInStatus(boolean isCheckedIn) {"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        this.isCheckedIn \u003d isCheckedIn;"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        return this;"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    public Person build() {"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        Person person \u003d new Person(id,name,phone);"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        person.setCheckedIn(isCheckedIn);"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        return person;"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":39}},{"path":"src/test/java/seedu/duke/testutil/SamplePersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package seedu.duke.testutil;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import seedu.duke.person.Person;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"public class SamplePersons {"},{"lineNumber":6,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withId(\"665B\")"},{"lineNumber":7,"author":{"gitId":"sarzorwyn"},"content":"            .withName(\"Alice\").withPhone(\"86862540\")"},{"lineNumber":8,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":9,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person BOB \u003d new PersonBuilder().withId(\"126C\")"},{"lineNumber":10,"author":{"gitId":"sarzorwyn"},"content":"            .withName(\"Bob\").withPhone(\"90904040\")"},{"lineNumber":11,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN \u003d new PersonBuilder().withId(\"123A\")"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(\"12345678\")"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN_NO_PHONE \u003d new PersonBuilder().withId(\"123A\")"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(null)"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    public static final Person JOHN_DIFF_ID \u003d new PersonBuilder().withId(\"456B\")"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"            .withName(\"John\").withPhone(\"12345678\")"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":21,"author":{"gitId":"sarzorwyn"},"content":"    public static final Person MARY \u003d new PersonBuilder().withId(\"230C\")"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"            .withName(\"Mary\").withPhone(\"95001501\")"},{"lineNumber":23,"author":{"gitId":"sarzorwyn"},"content":"            .withCheckedInStatus(true).build();"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"sarzorwyn":8,"hussain1998":16}},{"path":"src/test/java/seedu/duke/ui/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"public class UiTest {"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    private TextUi ui;"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"    public void testEchoEqual() {"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"        this.ui \u003d new TextUi();"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"        String input \u003d \"checkin n/John i/123a\";"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"        assertTrue(input.equals(ui.echoInput(input)));"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":18}}]
