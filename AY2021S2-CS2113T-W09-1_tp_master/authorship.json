[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.11\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":1,"-":46}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.command.CommandHandler;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.command.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.exception.FileLoadingException;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.exception.InvalidFileInputException;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.parser.ParserHandler;"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"    private Ui ui;"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    private RecordList records;"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    private Storage storage;"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"    public Duke() {"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"        storage \u003d new Storage();"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"        records \u003d new RecordList();"},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"        new Duke().run();"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"     * Runner for the FINUX Application."},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"    private void run() {"},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":"        start();"},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"        commandLooper();"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"        end();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"    private void end() {"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"        ui.printGoodByeMessage();"},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":"        System.exit(0);"},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":"    // @@ author jonahtwl-reused"},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"    // No recovery should be expected from a corrupted file."},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":"    // Reused from: https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/Main.java"},{"lineNumber":51,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":"    private void start() {"},{"lineNumber":53,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            ui \u003d new Ui();"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"            storage \u003d new Storage();"},{"lineNumber":56,"author":{"gitId":"jonahtwl"},"content":"            records \u003d new RecordList(storage.loadFile());"},{"lineNumber":57,"author":{"gitId":"jonahtwl"},"content":"            ui.printWelcomeMessage();"},{"lineNumber":58,"author":{"gitId":"jonahtwl"},"content":"        } catch (FileLoadingException e) {"},{"lineNumber":59,"author":{"gitId":"jonahtwl"},"content":"            Ui.printInitError();"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":"            throw new RuntimeException(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":"    private void commandLooper() {"},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"        Command command;"},{"lineNumber":66,"author":{"gitId":"jonahtwl"},"content":"        String rawInput;"},{"lineNumber":67,"author":{"gitId":"jonahtwl"},"content":"        do {"},{"lineNumber":68,"author":{"gitId":"jonahtwl"},"content":"            rawInput \u003d ui.getUserInput();"},{"lineNumber":69,"author":{"gitId":"jonahtwl"},"content":"            ArrayList\u003cString\u003e parsedStringList \u003d ParserHandler.getParseInput(rawInput);"},{"lineNumber":70,"author":{"gitId":"jonahtwl"},"content":"            command \u003d CommandHandler.parseCommand(parsedStringList, records);"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"            if (command !\u003d null) {"},{"lineNumber":72,"author":{"gitId":"jonahtwl"},"content":"                command.execute(records, ui, storage);"},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"        } while (!ExitCommand.isExit(command));"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jonahtwl":63,"marklowsk":2,"gerardtwk":2,"-":10}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.common.RecordType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import seedu.duke.exception.CustomException;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"import static seedu.duke.command.Utils.getOptionValue;"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"import static seedu.duke.command.Utils.hasOption;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_AMOUNT;"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"import static seedu.duke.common.Constant.OPTION_DATE;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_EXPENSE;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_LOAN;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_SAVING;"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.common.Validators.validateAmount;"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"import java.time.DateTimeException;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"import java.util.ArrayList;"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the add command."},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"public class AddCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_ADD \u003d \"add\";"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS \u003d {"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING, OPTION_AMOUNT, OPTION_DATE"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private static final String[] CONFLICT_OPTIONS \u003d {OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING};"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"    private final BigDecimal amount;"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    private final LocalDate issueDate;"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"    private final String description;"},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":"    private RecordType recordType;"},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"    public AddCommand(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"        validateOptions(arguments, COMMAND_ADD, VALID_OPTIONS, CONFLICT_OPTIONS);"},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        description \u003d getDescription(arguments);"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"        amount \u003d getAmount(arguments);"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"        issueDate \u003d getDate(arguments);"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String getDescription(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"        return Utils.getOptionValue(arguments, COMMAND_ADD, checkRecordType(arguments));"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    private BigDecimal getAmount(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateAmount(getOptionValue(arguments, COMMAND_ADD, OPTION_AMOUNT));"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new CommandException(\"amount contains a non numeric value.\", COMMAND_ADD);"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (CustomException e) {"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new CommandException(e.getMessage(), COMMAND_ADD);"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"    private LocalDate getDate(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateDate(getOptionValue(arguments, COMMAND_ADD, OPTION_DATE));"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new CommandException(e.getMessage(), COMMAND_ADD);"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String checkRecordType(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":"        if (hasOption(arguments, OPTION_EXPENSE)) {"},{"lineNumber":76,"author":{"gitId":"jonahtwl"},"content":"            recordType \u003d RecordType.EXPENSE;"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"            return OPTION_EXPENSE;"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"        } else if (hasOption(arguments, OPTION_LOAN)) {"},{"lineNumber":79,"author":{"gitId":"jonahtwl"},"content":"            recordType \u003d RecordType.LOAN;"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"            return OPTION_LOAN;"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"        } else if (hasOption(arguments, OPTION_SAVING)) {"},{"lineNumber":82,"author":{"gitId":"jonahtwl"},"content":"            recordType \u003d RecordType.SAVING;"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"            return OPTION_SAVING;"},{"lineNumber":84,"author":{"gitId":"jonahtwl"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"jonahtwl"},"content":"            throw new CommandException(\"missing option: [-e | -l | -s]\", COMMAND_ADD);"},{"lineNumber":86,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":89,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"jonahtwl"},"content":"    public void execute(RecordList records, Ui ui, Storage storage) {"},{"lineNumber":91,"author":{"gitId":"jonahtwl"},"content":"        switch (recordType) {"},{"lineNumber":92,"author":{"gitId":"jonahtwl"},"content":"        case EXPENSE:"},{"lineNumber":93,"author":{"gitId":"gerardtwk"},"content":"            Expense expenseObj \u003d new Expense(amount, issueDate, description);"},{"lineNumber":94,"author":{"gitId":"gerardtwk"},"content":"            records.addRecord(expenseObj);"},{"lineNumber":95,"author":{"gitId":"gerardtwk"},"content":"            storage.saveRecordListData(records);"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"            ui.printSuccessfulAdd(expenseObj, records.getRecordCount());"},{"lineNumber":97,"author":{"gitId":"jonahtwl"},"content":"            break;"},{"lineNumber":98,"author":{"gitId":"jonahtwl"},"content":"        case LOAN:"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"            Loan loanObj \u003d new Loan(amount, issueDate, description);"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"            records.addRecord(loanObj);"},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"            storage.saveRecordListData(records);"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"            ui.printSuccessfulAdd(loanObj, records.getRecordCount());"},{"lineNumber":103,"author":{"gitId":"jonahtwl"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"jonahtwl"},"content":"        case SAVING:"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"            // Fallthrough"},{"lineNumber":106,"author":{"gitId":"jonahtwl"},"content":"        default:"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"            Saving savingObj \u003d new Saving(amount, issueDate, description);"},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"            records.addRecord(savingObj);"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"            storage.saveRecordListData(records);"},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"            ui.printSuccessfulAdd(savingObj, records.getRecordCount());"},{"lineNumber":111,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"tzexern":3,"jonahtwl":42,"marklowsk":20,"LeeHanYongAndy":45,"gerardtwk":3}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    public abstract void execute(RecordList records, Ui ui, Storage storage);"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":9}},{"path":"src/main/java/seedu/duke/command/CommandHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.ListCommand.COMMAND_LIST;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.AddCommand.COMMAND_ADD;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.ReturnCommand.COMMAND_RETURN;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.RemoveCommand.COMMAND_REMOVE;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.ViewCommand.COMMAND_VIEW;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.HelpCommand.COMMAND_HELP;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.ExitCommand.COMMAND_EXIT;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"public class CommandHandler {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"Invalid command: \";"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    private static final int INDEX_OF_COMMAND \u003d 0;"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public static Command createCommand(ArrayList\u003cString\u003e parsedArguments, RecordList records)"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"            throws CommandException {"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"        String commandWord \u003d parsedArguments.get(INDEX_OF_COMMAND);"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        switch (commandWord) {"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_LIST:"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"            return new ListCommand(parsedArguments);"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_ADD:"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"            return new AddCommand(parsedArguments);"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"        case COMMAND_RETURN:"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"            return new ReturnCommand(parsedArguments, records);"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_REMOVE:"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"            return new RemoveCommand(parsedArguments, records);"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_VIEW:"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            return new ViewCommand(parsedArguments);"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_HELP:"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            return new HelpCommand(parsedArguments);"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_EXIT:"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            return new ExitCommand(parsedArguments);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        case \"\":"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":"        default:"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_INVALID_COMMAND + commandWord);"},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":"    public static Command parseCommand(ArrayList\u003cString\u003e parsedString, RecordList records) {"},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":"            return CommandHandler.createCommand(parsedString, records);"},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"        } catch (CommandException e) {"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":51,"author":{"gitId":"jonahtwl"},"content":"            return null;"},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":3,"jonahtwl":20,"LeeHanYongAndy":4,"marklowsk":25,"gerardtwk":2}},{"path":"src/main/java/seedu/duke/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the exit command."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"public class ExitCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d { ArgumentType.COMMAND };"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_EXIT \u003d \"exit\";"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    private static final String MESSAGE_EXITING \u003d \"You are exiting FINUX now...\";"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    public ExitCommand(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_EXIT);"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"     * Executes the exit function."},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"     * @param records is the recordList"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"     * @param ui      is the Ui object that interacts with the user"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"     * @param storage is the Storage object that reads and writes to the save file"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"    public void execute(RecordList records, Ui ui, Storage storage) {"},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(MESSAGE_EXITING);"},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"    public static boolean isExit(Command command) {"},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":"        return command instanceof ExitCommand;"},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":25,"marklowsk":12,"LeeHanYongAndy":3}},{"path":"src/main/java/seedu/duke/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"import seedu.duke.ui.HelpPage;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the help command."},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"public class HelpCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d { ArgumentType.COMMAND };"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_HELP \u003d \"help\";"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    public HelpCommand(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_HELP);"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"    public void execute(RecordList records, Ui ui, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"        HelpPage.printHelp(COMMAND_HELP);"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"jonahtwl":2,"marklowsk":22,"LeeHanYongAndy":5}},{"path":"src/main/java/seedu/duke/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.RecordType;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.hasOption;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_EXPENSE;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_LOAN;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_SAVING;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the list command."},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"public class ListCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS \u003d {OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING};"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d {"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.COMMAND,"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.OPTION,"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.EMPTY_VALUE"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_LIST \u003d \"list\";"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    private RecordType recordType;"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"    public ListCommand(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"        validateOptions(arguments, COMMAND_LIST, VALID_OPTIONS, VALID_OPTIONS);"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"        checkRecordType(arguments);"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_LIST);"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    private void checkRecordType(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        if (hasOption(arguments, OPTION_EXPENSE)) {"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.EXPENSE;"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        } else if (hasOption(arguments, OPTION_LOAN)) {"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.LOAN;"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        } else if (hasOption(arguments, OPTION_SAVING)) {"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.SAVING;"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(\"missing option: [-e | -l | -s]\", COMMAND_LIST);"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"    public void execute(RecordList recordList, Ui ui, Storage storage) {"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        switch (recordType) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"        case EXPENSE:"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printExpenses(recordList);"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"        case LOAN:"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printLoans(recordList);"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        case SAVING:"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"            // Fallthrough"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printSavings(recordList);"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"jonahtwl":1,"marklowsk":54,"LeeHanYongAndy":10,"gerardtwk":1}},{"path":"src/main/java/seedu/duke/command/RemoveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.Record;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.checkInvalidOptions;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.checkOptionConflict;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.getOptionValue;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.hasOption;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_EXPENSE;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_INDEX;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_LOAN;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_SAVING;"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"import static seedu.duke.common.Validators.validateIndex;"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the remove command."},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"public class RemoveCommand extends Command {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS \u003d {OPTION_INDEX};"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d {"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.COMMAND,"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.OPTION,"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.VALUE"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_REMOVE \u003d \"remove\";"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"    private String recordNumberStr;"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"    private int recordNumberInt;"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"    public RemoveCommand(ArrayList\u003cString\u003e arguments, RecordList records) throws CommandException {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        validateOptions(arguments, COMMAND_REMOVE, VALID_OPTIONS, VALID_OPTIONS);"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"        recordNumberStr \u003d getIndexInString(arguments);"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"        recordNumberInt \u003d getIndexInInteger(arguments, records);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_REMOVE);"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String getIndexInString(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        if (hasOption(arguments, OPTION_INDEX)) {"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"            return getOptionValue(arguments, COMMAND_REMOVE, OPTION_INDEX);"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(\"missing option: -i\", COMMAND_REMOVE);"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"    private int getIndexInInteger(ArrayList\u003cString\u003e arguments, RecordList records) throws CommandException {"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateIndex(getOptionValue(arguments, COMMAND_REMOVE, OPTION_INDEX), records);"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"            throw new CommandException(\"Index \\\"\" + recordNumberStr + \"\\\" is not an integer!\", COMMAND_REMOVE);"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"            throw new CommandException(\"Index \\\"\" + recordNumberStr + \"\\\" is out of bounds!\", COMMAND_REMOVE);"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"     * Executes the delete function."},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"     * Prints a message containing the record that will be removed."},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"     * Removes the record at the specified index."},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"     * @param records is the recordList."},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     * @param ui      is the Ui object that interacts with the user."},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * @param storage is the Storage object that reads and writes to the save file."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"    public void execute(RecordList records, Ui ui, Storage storage) {"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"        Record currentRecord \u003d records.getRecordAt(recordNumberInt);"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"        ui.printMessage(\"This record will be removed: \" + currentRecord);"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        records.deleteRecordAt(recordNumberInt);"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"        storage.saveRecordListData(records);"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"tzexern":24,"jonahtwl":3,"marklowsk":42,"LeeHanYongAndy":11}},{"path":"src/main/java/seedu/duke/command/ReturnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Record;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.Utils.checkInvalidOptions;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.Utils.checkOptionConflict;"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.Utils.getOptionValue;"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.Utils.hasOption;"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.common.Constant.OPTION_INDEX;"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"import static seedu.duke.common.Validators.validateIndex;"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all operations related to the return command."},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"public class ReturnCommand extends Command {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS \u003d {OPTION_INDEX};"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d {"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"        ArgumentType.COMMAND,"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"        ArgumentType.OPTION,"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"        ArgumentType.VALUE"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    };"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    protected static final String COMMAND_RETURN \u003d \"return\";"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"    private String recordNumberStr;"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"    private int recordNumberInt;"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"    public ReturnCommand(ArrayList\u003cString\u003e arguments, RecordList records) throws CommandException {"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        validateOptions(arguments, COMMAND_RETURN, VALID_OPTIONS, VALID_OPTIONS);"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"        recordNumberStr \u003d getIndexInString(arguments);"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"        recordNumberInt \u003d getIndexInInteger(arguments, records);"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_RETURN);"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String getIndexInString(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"        if (hasOption(arguments, OPTION_INDEX)) {"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"            return getOptionValue(arguments, COMMAND_RETURN, OPTION_INDEX);"},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"            throw new CommandException(\"missing option: -i\", COMMAND_RETURN);"},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"    private int getIndexInInteger(ArrayList\u003cString\u003e arguments, RecordList records) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateIndex(getOptionValue(arguments, COMMAND_RETURN, OPTION_INDEX), records);"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"            throw new CommandException(\"Index \\\"\" + recordNumberStr + \"\\\" is not an integer!\", COMMAND_RETURN);"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"            throw new CommandException(\"Index \\\"\" + recordNumberStr + \"\\\" is out of bounds!\", COMMAND_RETURN);"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"     * Executes the return function."},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"     * Prints a message containing the loan that will be marked as returned."},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"     * @param records is the recordList."},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"     * @param ui      is the Ui object that interacts with the user."},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":"     * @param storage is the Storage object that reads and writes to the save file."},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"    public void execute(RecordList records, Ui ui, Storage storage) {"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"        Record currentRecord \u003d records.getRecordAt(recordNumberInt);"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":"        if (currentRecord instanceof Loan) {"},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":"            Loan currentLoan \u003d (Loan) currentRecord;"},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":"            currentLoan.markAsReturned();"},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"            ui.printMessage(\"Loan marked as returned: \" + currentLoan);"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"            storage.saveRecordListData(records);"},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":"            ui.printMessage(\"Specified record number is not a loan!\");"},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"tzexern":12,"jonahtwl":1,"marklowsk":5,"LeeHanYongAndy":11,"gerardtwk":54}},{"path":"src/main/java/seedu/duke/command/Utils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import org.apache.commons.lang3.ArrayUtils;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import java.util.regex.Pattern;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":" * Provides common validation and get methods/tools."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"public class Utils {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_MISSING_OPTION \u003d \"missing option: \";"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_OPTION \u003d \"invalid option: \";"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_MISSING_OPTION_VALUE \u003d \"value of option %s is missing.\";"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_MISSING_ARGUMENT_VALUE \u003d \"missing argument value.\";"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_DUPLICATE_OPTION \u003d \"duplicate option: \";"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_CONFLICT_OPTION \u003d \"conflict with options: \";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_TOO_MANY_ARGUMENTS \u003d \"too many arguments.\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_TOO_FEW_ARGUMENTS \u003d \"not enough arguments.\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_ORDER \u003d \"invalid command order, \";"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_INPUT \u003d \"invalid input: \";"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    private static final String REGEX_OPTION \u003d \"^-[a-zA-Z]$\";"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code value} to see if it is not {@code null} and not empty."},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"     * @param value the String to check."},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code value} is {@code null} or empty."},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    private static void validateNotEmpty(String value) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        if (value \u003d\u003d null || value.length() \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_MISSING_ARGUMENT_VALUE);"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code value} to see if it is not {@code null} and not empty,"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * and returns it if {@code true}."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * @param value the {@code String} to check."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     * @param option the name of the {@code option} pertaining to the {@code value}."},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"     * @return the {@code value} if not empty"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code value} is null or empty."},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"    private static String validateNotEmpty(String value, String command, String option)"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            throws CommandException {"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        if (value !\u003d null \u0026\u0026 value.length() \u003e 0) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            return value;"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        String errorMessage \u003d String.format(ERROR_MISSING_OPTION_VALUE, option);"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"        throw new CommandException(errorMessage, command);"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"     * Extracts the {@code option}\u0027s {@code value} from {@code arguments} {@code ArrayList}.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"     * e.g. {@code [\"return\", \"-i\", \"2\"], option \u003d \"-i\", value \u003d \"2\"}.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"     * @param arguments an {@code ArrayList} containing {@code Command} arguments."},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"     * @param option the name of the {@code option} pertaining to the {@code value}."},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"     * @return the {@code option}\u0027s {@code value}"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code option} does not exist, or {@code value} is missing or empty."},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"     * @see #validateNotEmpty(String, String, String)"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"    public static String getOptionValue(ArrayList\u003cString\u003e arguments, String command,"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"                                        String option) throws CommandException {"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"        if (!hasOption(arguments, option)) {"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_MISSING_OPTION + option, command);"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"        int index \u003d arguments.indexOf(option);"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"        if (index \u003c arguments.size() - 1) {"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"            String value \u003d arguments.get(index + 1);"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"            return validateNotEmpty(value, command, option);"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"        // Below return results in an ERROR_MISSING_OPTION_VALUE exception thrown."},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"        return validateNotEmpty(\"\", command, option);"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"    // This hasOption method is only meant to improve readability."},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"    public static boolean hasOption(ArrayList\u003cString\u003e arguments, String option) {"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"        return arguments.contains(option);"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code arguments} for invalid, duplicate and conflict options."},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"     * @param arguments an {@code ArrayList} containing {@code Command} arguments."},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"     * @param validOptions a {@code String} array containing valid options pertaining to {@code command}."},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"     * @param orOptions a {@code String} array containing conflict options pertaining to {@code command}."},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code arguments} contains invalid/duplicate options and conflict options."},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"     * @see #checkInvalidOptions(ArrayList, String, String...)"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"     * @see #checkOptionConflict(ArrayList, String, String...)"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"    public static void validateOptions(ArrayList\u003cString\u003e arguments, String command,"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"                                       String[] validOptions, String[] orOptions) throws CommandException {"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"        checkInvalidOptions(arguments, command, validOptions);"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"        checkOptionConflict(arguments, command, orOptions);"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code arguments} for invalid/duplicate options."},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"     * @param arguments an {@code ArrayList} containing {@code Command} arguments."},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"     * @param validOptions valid options pertaining to {@code command}."},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code arguments} contains an invalid or a duplicate option."},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"    public static void checkInvalidOptions(ArrayList\u003cString\u003e arguments, String command,"},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"                                           String... validOptions) throws CommandException {"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"        Set\u003cString\u003e nonDuplicates \u003d new HashSet\u003c\u003e();"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"        for (String arg : arguments) {"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"            if (!isOption(arg)) {"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"                continue;"},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"            if (!ArrayUtils.contains(validOptions, arg)) {"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"                throw new CommandException(ERROR_INVALID_OPTION + arg, command);"},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"            if (!nonDuplicates.add(arg)) {"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"                throw new CommandException(ERROR_DUPLICATE_OPTION + arg, command);"},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code arguments} for conflict options."},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"     * @param arguments an {@code ArrayList} containing {@code Command} arguments."},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"     * @param orOptions conflict options pertaining to {@code command}."},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code arguments} contains a conflict option."},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"    public static void checkOptionConflict(ArrayList\u003cString\u003e arguments, String command,"},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"                                           String... orOptions) throws CommandException {"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"        String option \u003d null;"},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"        for (String arg : arguments) {"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"            if (!isOption(arg)) {"},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"                continue;"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"            if (!ArrayUtils.contains(orOptions, arg)) {"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"                continue;"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"            if (option \u003d\u003d null) {"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"                option \u003d arg;"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"            } else {"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"                throw new CommandException(ERROR_CONFLICT_OPTION + option + \", \" + arg, command);"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"     * Checks the {@code Command}\u0027s {@code arguments} ordering based on the {@code argumentTypeOrder}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"     * Recommended for {@code Command}s with strict argument order.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"     * This method should be used only when:\u003cbr\u003e"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"     * \u003cul\u003e"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"     *     \u003cli\u003e{@link #validateOptions(ArrayList, String, String[], String[])} has been called, or\u003c/li\u003e"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"     *     \u003cli\u003e{@code Command} does not require option validation.\u003c/li\u003e"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"     * \u003c/ul\u003e"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"     * @param arguments an {@code ArrayList} containing {@code Command} arguments."},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"     * @param argumentTypeOrder an Enumeration array of type {@code ArgumentType} containing the argument"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"     *                          type order."},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if there is a violation to the argument type order."},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"     * @see ArgumentType"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"     * @see #validateArgument(String, ArgumentType, String)"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"    public static void validateArguments(ArrayList\u003cString\u003e arguments, ArgumentType[] argumentTypeOrder,"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"                                         String command) throws CommandException {"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"        if (arguments.size() \u003e argumentTypeOrder.length) {"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_TOO_MANY_ARGUMENTS, command);"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"        } else if (arguments.size() \u003c argumentTypeOrder.length) {"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_TOO_FEW_ARGUMENTS, command);"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"        for (int i \u003d 0; i \u003c arguments.size(); i++) {"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"            validateArgument(arguments.get(i), argumentTypeOrder[i], command);"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"     * Checks {@code argument}\u0027s type matches {@code argumentType}."},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"     * @param argument a portion of the {@code Command}\u0027s arguments."},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"     * @param argumentType an Enumeration of ArgumentType to match with."},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"     * @param command the name of the {@code Command} calling it."},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"     * @throws CommandException if {@code argument}\u0027s type does not match {@code argumentType}."},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"     * @see ArgumentType"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"    private static void validateArgument(String argument, ArgumentType argumentType, String command)"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"            throws CommandException {"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"        switch (argumentType) {"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"        case VALUE:"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":"            validateNotEmpty(argument);"},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"        case OPTION:"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"            if (isOption(argument)) {"},{"lineNumber":203,"author":{"gitId":"marklowsk"},"content":"                break;"},{"lineNumber":204,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_INVALID_ORDER + \"expected an option instead of \" + argument,"},{"lineNumber":206,"author":{"gitId":"marklowsk"},"content":"                    command);"},{"lineNumber":207,"author":{"gitId":"marklowsk"},"content":"        case COMMAND:"},{"lineNumber":208,"author":{"gitId":"marklowsk"},"content":"            if (argument.equals(command)) {"},{"lineNumber":209,"author":{"gitId":"marklowsk"},"content":"                break;"},{"lineNumber":210,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":211,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(ERROR_INVALID_ORDER + \"expected command word.\");"},{"lineNumber":212,"author":{"gitId":"marklowsk"},"content":"        case EMPTY_VALUE:"},{"lineNumber":213,"author":{"gitId":"marklowsk"},"content":"            // Fallthrough"},{"lineNumber":214,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":215,"author":{"gitId":"marklowsk"},"content":"            if (argument.length() \u003e 0) {"},{"lineNumber":216,"author":{"gitId":"marklowsk"},"content":"                throw new CommandException(ERROR_INVALID_INPUT + argument, command);"},{"lineNumber":217,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":221,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"marklowsk"},"content":"     * Checks if {@code argument} is an option.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitId":"marklowsk"},"content":"     * An option can be in the form {@code \"-L\"}, where {@code L} is a letter of any case."},{"lineNumber":224,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"marklowsk"},"content":"     * @param argument a {@code String} to be checked."},{"lineNumber":226,"author":{"gitId":"marklowsk"},"content":"     * @return {@code true} if {@code argument} matches the {@link #REGEX_OPTION} {@code Pattern}."},{"lineNumber":227,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"marklowsk"},"content":"    public static boolean isOption(String argument) {"},{"lineNumber":229,"author":{"gitId":"marklowsk"},"content":"        return Pattern.matches(REGEX_OPTION, argument);"},{"lineNumber":230,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":228,"LeeHanYongAndy":3}},{"path":"src/main/java/seedu/duke/command/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.RecordType;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.checkInvalidOptions;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.checkOptionConflict;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.hasOption;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_EXPENSE;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_LOAN;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_SAVING;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"public class ViewCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS \u003d {OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING};"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARGUMENT_TYPE_ORDER \u003d {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.COMMAND,"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.OPTION,"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.EMPTY_VALUE"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    protected static final String COMMAND_VIEW \u003d \"view\";"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    private RecordType recordType;"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public ViewCommand(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        validateOptions(arguments, COMMAND_VIEW, VALID_OPTIONS, VALID_OPTIONS);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        checkRecordType(arguments);"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"        validateArguments(arguments, ARGUMENT_TYPE_ORDER, COMMAND_VIEW);"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"    private void checkRecordType(ArrayList\u003cString\u003e arguments) throws CommandException {"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        if (hasOption(arguments, OPTION_EXPENSE)) {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.EXPENSE;"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"        } else if (hasOption(arguments, OPTION_LOAN)) {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.LOAN;"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"        } else if (hasOption(arguments, OPTION_SAVING)) {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"            recordType \u003d RecordType.SAVING;"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"            throw new CommandException(\"missing option: [-e | -l | -s]\", COMMAND_VIEW);"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void execute(RecordList recordList, Ui ui, Storage storage) {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        switch (recordType) {"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        case EXPENSE:"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printTotalAmountExpense(recordList);"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        case LOAN:"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printTotalAmountLoan(recordList);"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"        case SAVING:"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"            // Fallthrough"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"            ui.printTotalAmountSaving(recordList);"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"jonahtwl":1,"marklowsk":56,"LeeHanYongAndy":8}},{"path":"src/main/java/seedu/duke/common/ArgumentType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public enum ArgumentType {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    COMMAND, OPTION, VALUE, EMPTY_VALUE"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":5}},{"path":"src/main/java/seedu/duke/common/Constant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Constant {"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Please append constants used to line under your name"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Mark"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_EXPENSE \u003d \"-e\";"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_LOAN \u003d \"-l\";"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_SAVING \u003d \"-s\";"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_AMOUNT \u003d \"-a\";"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_DATE \u003d \"-d\";"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public static final String OPTION_INDEX \u003d \"-i\";"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Andy"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Jonah"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Gerard"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    public static final String SYMBOL_SAVING \u003d \"S\";"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    public static final String SYMBOL_EXPENSE \u003d \"E\";"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    public static final String SYMBOL_LOAN \u003d \"L\";"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"    // Jason"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":13,"marklowsk":6,"gerardtwk":4}},{"path":"src/main/java/seedu/duke/common/RecordType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public enum RecordType {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    EXPENSE, LOAN, SAVING"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":5}},{"path":"src/main/java/seedu/duke/common/Validators.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.time.DateTimeException;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"import seedu.duke.exception.CustomException;"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"public class Validators {"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // @@author marklowsk-reused"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // Reused from https://github.com/marklowsk/ip/blob/master/src/main/java/duke/common/Utils.java"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter[] POSSIBLE_DATE_FORMATS \u003d {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"ddMMyyyy\"),"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"d.M.yyyy\"),"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"d-M-yyyy\"),"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"d/M/yyyy\"),"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"yyyy.M.d\"),"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"yyyy-M-d\"),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        DateTimeFormatter.ofPattern(\"yyyy/M/d\")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // @@author marklowsk-reused"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Reused from https://github.com/marklowsk/ip/blob/master/src/main/java/duke/common/Utils.java"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static LocalDate parseDateString(DateTimeFormatter format, String dateInput) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return LocalDate.parse(dateInput, format);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // @@author marklowsk-reused"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Reused from https://github.com/marklowsk/ip/blob/master/src/main/java/duke/common/Utils.java"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // Utils.parseDate(String) with minor edits."},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses dateInput into a LocalDateTime object."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns null if dateInput cannot be parsed into a LocalDateTime object."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param dateInput a string containing the date supplied from the user."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return a LocalDateTime object or null if failed to parse dateInput."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @see #parseDateString(DateTimeFormatter, String)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static LocalDate validateDate(String dateInput) throws DateTimeException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (DateTimeFormatter dtf : POSSIBLE_DATE_FORMATS) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            LocalDate date \u003d parseDateString(dtf, dateInput);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            if (date !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                return date;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        throw new DateTimeException(\"input \\\"\" + dateInput + \"\\\" is not an acceptable Date Format.\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static int validateIndex(String inputToCheck, RecordList records) throws NumberFormatException,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            IndexOutOfBoundsException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        int recordNumberInList \u003d Integer.parseInt(inputToCheck) - 1;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        records.getRecordAt(recordNumberInList);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return recordNumberInList;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parse the stringAmount into a BigDecimal object."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param stringAmount contains a string representing the amount entered."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @return a BigDecimal object."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws NumberFormatException when the stringAmount contains non numeric."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @throws CustomException when the numeric amount is less than or equals to zero."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static BigDecimal validateAmount(String stringAmount) throws NumberFormatException,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            CustomException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        BigDecimal amount \u003d new BigDecimal(stringAmount);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(amount.compareTo(new BigDecimal(\"0\")) \u003d\u003d 1)) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CustomException(\"amount must be greater than 0.\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return amount;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tzexern":5,"LeeHanYongAndy":3,"marklowsk":4,"-":67}},{"path":"src/main/java/seedu/duke/exception/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class CommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public CommandException(String message) {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public CommandException(String message, String command) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        this(command + \" Command - \" + message);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":11}},{"path":"src/main/java/seedu/duke/exception/CustomException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class CustomException extends Exception {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public CustomException(String message) {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":3,"marklowsk":4}},{"path":"src/main/java/seedu/duke/exception/FileLoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class FileLoadingException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":4}},{"path":"src/main/java/seedu/duke/exception/InvalidFileInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class InvalidFileInputException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":4}},{"path":"src/main/java/seedu/duke/parser/ParserHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.parser;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import org.apache.commons.lang3.StringUtils;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":" * Parser class to handle parsing of userInput."},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"public class ParserHandler {"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check and parse if the input starts with option."},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput contains a single string to be parsed."},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a ArrayList of String containing trimmed options and arguments."},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static ArrayList\u003cString\u003e getParseInput(String userInput) {"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"        ArrayList\u003cString\u003e extracted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"        String trimmedInput \u003d userInput.stripLeading();"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (checkOptionStartWith(trimmedInput)) {"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(trimmedInput.substring(0,2));"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"            trimmedInput \u003d trimmedInput.substring(2);"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"        return extractAfterFirstCheck(extracted, trimmedInput);"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"     * parse the remaining trimmed input before checking for last block."},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param extracted ArrayList of String containing the initial parsed option or argument."},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param trimmedInput contains the remaining input that is needed to be parse."},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a ArrayList of String containing trimmed options and arguments."},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static ArrayList\u003cString\u003e extractAfterFirstCheck(ArrayList\u003cString\u003e extracted, String trimmedInput) {"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        int optionIndex \u003d getNextOptionIndex(trimmedInput);"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"        while (optionIndex !\u003d -1) {"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"            String argument \u003d trimmedInput.substring(0,optionIndex).trim();"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(argument);"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"            trimmedInput \u003d trimmedInput.substring(optionIndex).stripLeading();"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(trimmedInput.substring(0,2));"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"            trimmedInput \u003d trimmedInput.substring(2);"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"            optionIndex \u003d getNextOptionIndex(trimmedInput);"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"        return extractFinalPart(extracted, trimmedInput);"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check and parse if last block in ArrayList of String ends with option."},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Add a empty string after the last block if last block ends with option."},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param extracted ArrayList of String containing the pre-final parsed option or argument."},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param trimmedInput contains the final remaining input that is needed to be parse."},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the final parsed ArrayList of String containing the options and arguments."},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static ArrayList\u003cString\u003e extractFinalPart(ArrayList\u003cString\u003e extracted, String trimmedInput) {"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (checkOptionEndWith(trimmedInput)) {"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"            String argument \u003d trimmedInput.substring(0, (trimmedInput.length() - 2)).trim();"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(argument);"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(trimmedInput.substring(trimmedInput.length() - 2).trim());"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(\"\");"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"            extracted.add(trimmedInput.trim());"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"        return extracted;"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input starts with valid options."},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param input string that is needed to be checked against."},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return true if input starts with valid options, else otherwise."},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static boolean checkOptionStartWith(String input) {"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"        return StringUtils.startsWithAny(input, \"-e\", \"-l\", \"-s\", \"-d\", \"-a\", \"-i\");"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input ends with valid options."},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param input string that is needed to be checked against."},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return true if input ends with valid options, else otherwise."},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static boolean checkOptionEndWith(String input) {"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"        return  StringUtils.endsWithAny(input, \" -e\", \" -l\", \" -s\", \" -d\", \" -a\", \" -i\");"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check the next valid option index."},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param leftOverString containing the remaining input to be checked against."},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the first index if matches any valid options in input, else -1."},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int getNextOptionIndex(String leftOverString) {"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"        return StringUtils.indexOfAny(leftOverString, \" -e \", \" -l \", \" -s \", \" -d \", \" -a \", \" -i \");"},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":89}},{"path":"src/main/java/seedu/duke/record/Expense.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class Expense extends Record {"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"    private static final String TYPE_EXPENSE \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%s | %s | %f | %s\";"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Expense(BigDecimal amount, LocalDate issuedDate, String description) {"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"        super(amount, issuedDate, description);"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"    public String convertFileFormat() {"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, TYPE_EXPENSE, super.getDescription(),"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"                super.getAmount(), super.getIssueDate());"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"        String formattedRecordType \u003d \"[\" + TYPE_EXPENSE + \"]\";"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        return formattedRecordType + super.toString();"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":5,"jonahtwl":9,"LeeHanYongAndy":5,"marklowsk":2,"gerardtwk":4}},{"path":"src/main/java/seedu/duke/record/Loan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class Loan extends Record {"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"    private static final String TYPE_LOAN \u003d \"L\";"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%s | %s | %f | %s | %d\";"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"    private boolean isReturn;"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Loan(BigDecimal amount, LocalDate issuedDate, String description) {"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"        super(amount, issuedDate, description);"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"        isReturn \u003d false;"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"    public Loan(BigDecimal amount, LocalDate issuedDate, String description, boolean isReturn) {"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"        super(amount, issuedDate, description);"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"        this.isReturn \u003d isReturn;"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    public void markAsReturned() {"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"        isReturn \u003d true;"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"    public String convertFileFormat() {"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, TYPE_LOAN, super.getDescription(),"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"                super.getAmount(), super.getIssueDate(), this.isReturn ? 1 : 0);"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"        String formattedRecordType \u003d \"[\" + TYPE_LOAN + \"]\";"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"        String formattedLoanStatus \u003d \"[\" + (isReturn ? \"v\" : \" \") + \"]\";"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"        return formattedRecordType + super.toString() + formattedLoanStatus;"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":11,"jonahtwl":14,"LeeHanYongAndy":7,"marklowsk":2,"gerardtwk":4}},{"path":"src/main/java/seedu/duke/record/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"public abstract class Record {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    private BigDecimal amount;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    private LocalDate issueDate;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    private String description;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%s | %f | %s\";"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Record(BigDecimal amount, LocalDate issueDate, String description) {"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"        this.amount \u003d amount;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"        this.issueDate \u003d issueDate;"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    public String getDescription() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"    public BigDecimal getAmount() {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        return amount;"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    public LocalDate getIssueDate() {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        return issueDate;"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"    public String convertFileFormat() {"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, description, amount, issueDate);"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"        String formattedDate \u003d \"[\" + this.issueDate + \"]\";"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        String formattedDescription \u003d \" \" + this.description + \" \";"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        return formattedDate + formattedDescription;"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":3,"jonahtwl":12,"LeeHanYongAndy":7,"marklowsk":7,"gerardtwk":11}},{"path":"src/main/java/seedu/duke/record/RecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"public class RecordList {"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"    private ArrayList\u003cRecord\u003e recordList;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    public RecordList() {"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"        this(new ArrayList\u003cRecord\u003e());"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"    public RecordList(ArrayList\u003cRecord\u003e recordList) {"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"        this.recordList \u003d recordList;"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    public void addRecord(Record recordToAdd) {"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"        recordList.add(recordToAdd);"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"    public Record getRecordAt(int recordIndex) {"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"        return recordList.get(recordIndex);"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"    public Record deleteRecordAt(int recordIndex) {"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"        return recordList.remove(recordIndex);"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"    public void deleteAllRecords() {"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        recordList.clear();"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"    public boolean isEmpty() {"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"        return recordList.isEmpty();"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"    public int getRecordCount() {"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        return recordList.size();"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":29,"jonahtwl":5,"LeeHanYongAndy":3,"marklowsk":1,"gerardtwk":2}},{"path":"src/main/java/seedu/duke/record/Saving.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"public class Saving extends Record {"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"    private static final String TYPE_SAVING \u003d \"S\";"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%s | %s | %f | %s\";"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Saving(BigDecimal amount, LocalDate issueDate, String description) {"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"        super(amount, issueDate, description);"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"    public String convertFileFormat() {"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, TYPE_SAVING, super.getDescription(),"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"                super.getAmount(), super.getIssueDate());"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"        String formattedRecordType \u003d \"[\" + TYPE_SAVING + \"]\";"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        return formattedRecordType + super.toString();"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":2,"jonahtwl":9,"LeeHanYongAndy":5,"marklowsk":2,"gerardtwk":7}},{"path":"src/main/java/seedu/duke/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.storage;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.exception.FileLoadingException;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.exception.InvalidFileInputException;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Record;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"import java.io.FileWriter;"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"import java.math.BigDecimal;"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"import java.nio.file.Files;"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"import java.nio.file.Path;"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"import java.nio.file.Paths;"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"import java.time.LocalDate;"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"import java.util.Scanner;"},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"import java.util.regex.Pattern;"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Storage {"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"    private static final Path SAVED_FILE_PATH \u003d Paths.get(\"finux.txt\");"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"    private static final String REGEX_PATTERN_EXPENSE \u003d \"[E]\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\";"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"    private static final String REGEX_PATTERN_LOAN \u003d \"[L]\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[01]\";"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"    private static final String REGEX_PATTERN_SAVING \u003d \"[S]\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s[^|]+\";"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"    private static final int INDEX_OF_DESCRIPTION \u003d 1;"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"    private static final int INDEX_OF_AMOUNT \u003d 2;"},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"    private static final int INDEX_OF_DATE \u003d 3;"},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"    private static final int INDEX_OF_ISRETURN \u003d 4;"},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"    public Path dataFilePath;"},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"    public Storage() {"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"        this(SAVED_FILE_PATH);"},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"    public Storage(Path dataFilePath) {"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"        this.dataFilePath \u003d dataFilePath;"},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":"    private boolean saveFileExists() {"},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":"        return Files.exists(SAVED_FILE_PATH);"},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"    public void saveRecordListData(RecordList records) {"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"            writeToSaveFile(records);"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"            System.out.println(\"Error in writeToSaveFile()\");"},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"    private void writeToSaveFile(RecordList records) throws IOException {"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":"        FileWriter fw \u003d new FileWriter(dataFilePath.toString(), false);"},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c records.getRecordCount(); i++) {"},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"            Record currentRecord \u003d records.getRecordAt(i);"},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"            fw.write(currentRecord.convertFileFormat() + System.lineSeparator());"},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"        fw.close();"},{"lineNumber":66,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":68,"author":{"gitId":"jonahtwl"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jonahtwl"},"content":"     * Loads the RecordList from the file into FINUX."},{"lineNumber":70,"author":{"gitId":"jonahtwl"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"jonahtwl"},"content":"     * @return a RecordList from the loaded file."},{"lineNumber":72,"author":{"gitId":"jonahtwl"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"jonahtwl"},"content":"    public ArrayList\u003cRecord\u003e loadFile() throws FileLoadingException {"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"        ArrayList\u003cRecord\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"jonahtwl"},"content":"            if (!saveFileExists()) {"},{"lineNumber":77,"author":{"gitId":"jonahtwl"},"content":"                initSaveFile();"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"                return records;"},{"lineNumber":79,"author":{"gitId":"jonahtwl"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"jonahtwl"},"content":"            File loadFile \u003d dataFilePath.toFile();"},{"lineNumber":81,"author":{"gitId":"jonahtwl"},"content":"            Scanner sc \u003d new Scanner(loadFile);"},{"lineNumber":82,"author":{"gitId":"jonahtwl"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":83,"author":{"gitId":"jonahtwl"},"content":"                String rawData \u003d sc.nextLine();"},{"lineNumber":84,"author":{"gitId":"jonahtwl"},"content":"                Record record \u003d parseRecord(rawData);"},{"lineNumber":85,"author":{"gitId":"jonahtwl"},"content":"                if (record !\u003d null) {"},{"lineNumber":86,"author":{"gitId":"jonahtwl"},"content":"                    records.add(record);"},{"lineNumber":87,"author":{"gitId":"jonahtwl"},"content":"                }"},{"lineNumber":88,"author":{"gitId":"jonahtwl"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"jonahtwl"},"content":"        } catch (InvalidFileInputException | IOException e) {"},{"lineNumber":90,"author":{"gitId":"jonahtwl"},"content":"            throw new FileLoadingException();"},{"lineNumber":91,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":93,"author":{"gitId":"jonahtwl"},"content":"        return records;"},{"lineNumber":94,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":96,"author":{"gitId":"jonahtwl"},"content":"    private void initSaveFile() throws IOException {"},{"lineNumber":97,"author":{"gitId":"jonahtwl"},"content":"        File newSaveFile \u003d new File(String.valueOf(SAVED_FILE_PATH));"},{"lineNumber":98,"author":{"gitId":"jonahtwl"},"content":"        if (newSaveFile.createNewFile()) {"},{"lineNumber":99,"author":{"gitId":"jonahtwl"},"content":"            Ui.printSuccessfulFileCreation();"},{"lineNumber":100,"author":{"gitId":"jonahtwl"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"jonahtwl"},"content":"            throw new IOException(\"File creation unsuccessful!\");"},{"lineNumber":102,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":105,"author":{"gitId":"jonahtwl"},"content":"    private Record parseRecord(String rawData) throws InvalidFileInputException {"},{"lineNumber":106,"author":{"gitId":"jonahtwl"},"content":"        if (Pattern.matches(REGEX_PATTERN_EXPENSE, rawData)) {"},{"lineNumber":107,"author":{"gitId":"jonahtwl"},"content":"            return loadExpense(rawData);"},{"lineNumber":108,"author":{"gitId":"jonahtwl"},"content":"        } else if (Pattern.matches(REGEX_PATTERN_LOAN, rawData)) {"},{"lineNumber":109,"author":{"gitId":"jonahtwl"},"content":"            return loadLoan(rawData);"},{"lineNumber":110,"author":{"gitId":"jonahtwl"},"content":"        } else if (Pattern.matches(REGEX_PATTERN_SAVING, rawData)) {"},{"lineNumber":111,"author":{"gitId":"jonahtwl"},"content":"            return loadSaving(rawData);"},{"lineNumber":112,"author":{"gitId":"jonahtwl"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"jonahtwl"},"content":"            throw new InvalidFileInputException();"},{"lineNumber":114,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":117,"author":{"gitId":"jonahtwl"},"content":"    private String extractArg(String rawData, int index) throws InvalidFileInputException {"},{"lineNumber":118,"author":{"gitId":"jonahtwl"},"content":"        String[] args \u003d rawData.split(\"\\\\|\");"},{"lineNumber":119,"author":{"gitId":"jonahtwl"},"content":"        if (index \u003c 0 || index \u003e args.length) {"},{"lineNumber":120,"author":{"gitId":"jonahtwl"},"content":"            throw new InvalidFileInputException();"},{"lineNumber":121,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":123,"author":{"gitId":"jonahtwl"},"content":"        return args[index].strip();"},{"lineNumber":124,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":126,"author":{"gitId":"jonahtwl"},"content":"    private Record loadExpense(String rawData) throws InvalidFileInputException {"},{"lineNumber":127,"author":{"gitId":"jonahtwl"},"content":"        BigDecimal amount;"},{"lineNumber":128,"author":{"gitId":"jonahtwl"},"content":"        LocalDate issueDate;"},{"lineNumber":129,"author":{"gitId":"jonahtwl"},"content":"        String description \u003d extractArg(rawData, INDEX_OF_DESCRIPTION);"},{"lineNumber":130,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":131,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"jonahtwl"},"content":"            amount \u003d new BigDecimal(extractArg(rawData, INDEX_OF_AMOUNT));"},{"lineNumber":133,"author":{"gitId":"jonahtwl"},"content":"            issueDate \u003d LocalDate.parse(extractArg(rawData, INDEX_OF_DATE),"},{"lineNumber":134,"author":{"gitId":"jonahtwl"},"content":"                    DateTimeFormatter.ofPattern(\"yyyy-M-d\"));"},{"lineNumber":135,"author":{"gitId":"jonahtwl"},"content":"        } catch (NumberFormatException | DateTimeParseException e) {"},{"lineNumber":136,"author":{"gitId":"jonahtwl"},"content":"            throw new InvalidFileInputException();"},{"lineNumber":137,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":139,"author":{"gitId":"jonahtwl"},"content":"        return new Expense(amount, issueDate, description);"},{"lineNumber":140,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":142,"author":{"gitId":"jonahtwl"},"content":"    private Record loadLoan(String rawData) throws InvalidFileInputException {"},{"lineNumber":143,"author":{"gitId":"jonahtwl"},"content":"        BigDecimal amount;"},{"lineNumber":144,"author":{"gitId":"jonahtwl"},"content":"        boolean isReturn;"},{"lineNumber":145,"author":{"gitId":"jonahtwl"},"content":"        String description \u003d extractArg(rawData, INDEX_OF_DESCRIPTION);"},{"lineNumber":146,"author":{"gitId":"jonahtwl"},"content":"        LocalDate issueDate \u003d LocalDate.parse(extractArg(rawData, INDEX_OF_DATE),"},{"lineNumber":147,"author":{"gitId":"jonahtwl"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-M-d\"));"},{"lineNumber":148,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":149,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"jonahtwl"},"content":"            amount \u003d new BigDecimal(extractArg(rawData, INDEX_OF_AMOUNT));"},{"lineNumber":151,"author":{"gitId":"jonahtwl"},"content":"            isReturn \u003d Integer.parseInt(extractArg(rawData, INDEX_OF_ISRETURN)) \u003d\u003d 1;"},{"lineNumber":152,"author":{"gitId":"jonahtwl"},"content":"        } catch (NumberFormatException | DateTimeParseException e) {"},{"lineNumber":153,"author":{"gitId":"jonahtwl"},"content":"            throw new InvalidFileInputException();"},{"lineNumber":154,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":156,"author":{"gitId":"jonahtwl"},"content":"        return new Loan(amount, issueDate, description, isReturn);"},{"lineNumber":157,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":159,"author":{"gitId":"jonahtwl"},"content":"    private Record loadSaving(String rawData) throws InvalidFileInputException {"},{"lineNumber":160,"author":{"gitId":"jonahtwl"},"content":"        BigDecimal amount;"},{"lineNumber":161,"author":{"gitId":"jonahtwl"},"content":"        String description \u003d extractArg(rawData, INDEX_OF_DESCRIPTION);"},{"lineNumber":162,"author":{"gitId":"jonahtwl"},"content":"        LocalDate issueDate \u003d LocalDate.parse(extractArg(rawData, INDEX_OF_DATE),"},{"lineNumber":163,"author":{"gitId":"jonahtwl"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-M-d\"));"},{"lineNumber":164,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":165,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":166,"author":{"gitId":"jonahtwl"},"content":"            amount \u003d new BigDecimal(extractArg(rawData, INDEX_OF_AMOUNT));"},{"lineNumber":167,"author":{"gitId":"jonahtwl"},"content":"        } catch (NumberFormatException | DateTimeParseException e) {"},{"lineNumber":168,"author":{"gitId":"jonahtwl"},"content":"            throw new InvalidFileInputException();"},{"lineNumber":169,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":171,"author":{"gitId":"jonahtwl"},"content":"        return new Saving(amount, issueDate, description);"},{"lineNumber":172,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"jonahtwl":156,"LeeHanYongAndy":4,"gerardtwk":13}},{"path":"src/main/java/seedu/duke/ui/HelpPage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.ui.Ui.DIVIDER;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all printing of help related command messages to the console."},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"public class HelpPage {"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String TAB_1SPACE \u003d \"\\t\";"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String TAB_2SPACE \u003d \"\\t\\t\";"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_HEADER_ADD \u003d \"add - add a record to the program\";"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_SYNOPSIS_ADD \u003d \"add [OPTION] [ARGUMENT]\";"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_HEADER_LIST \u003d \"list - list all the records of chosen record type\";"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_SYNOPSIS_LIST \u003d \"list [OPTION]\";"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_HEADER_VIEW \u003d \"view - view the total amount of chosen record type\";"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_SYNOPSIS_VIEW \u003d \"view [OPTION]\";"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_HEADER_REMOVE \u003d \"remove - remove a record in the program\";"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_SYNOPSIS_REMOVE \u003d \"remove [OPTION] [ARGUMENT]\";"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_HEADER_RETURN \u003d \"return - record a loan as returned\";"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_SYNOPSIS_RETURN \u003d \"return [OPTION] [ARGUMENT]\";"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_HEADER_EXIT \u003d \"exit - terminate the program\";"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_SYNOPSIS_EXIT \u003d \"exit (no option/argument needed)\";"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_RECORD_TYPE \u003d \"-e, -l, -s\";"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_RECORD_TYPE_DESCRIPTION \u003d \"[ARGUMENT] used as record description\";"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_RECORD_TYPE_LISTING \u003d \"used to list the chosen record types\";"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_RECORD_TYPE_VIEWING \u003d \"used to view total amount of choose record type\";"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_AMOUNT \u003d \"-a\";"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_AMOUNT_DESCRIPTION \u003d \"[ARGUMENT] positive non zero numeric \""},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"            + \"amount associated with the record\";"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_DATE \u003d \"-d\";"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_OPTION_DATE_DESCRIPTION \u003d \"[ARGUMENT] date associated with the record\";"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MAN_NO_ARGUMENT \u003d \"arguments are not needed\";"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_OPTION_INDEX \u003d \"-i\";"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"    private static final String MAN_OPTION_INDEX_DESCRIPTION \u003d \"[ARGUMENT] positive non zero integer \""},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"            + \"used to reference to index in program\";"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the respective help messages based on the command given."},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param command contains the command that help is needed to be printed."},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printHelp(String command) {"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"        switch (command) {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"help\":"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageMaster();"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"add\":"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageAdd();"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"list\":"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageList();"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"view\":"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageView();"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"remove\":"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageRemove();"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"return\":"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageReturn();"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"exit\":"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"            // Fallthrough"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"            printManPageExit();"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page header format."},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param header contains the description of the command."},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManHeader(String header) {"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"NAME\");"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + header);"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println();"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page synopsis format."},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param synopsis contains the availability options and argument."},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManSynopsis(String synopsis) {"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"SYNOPSIS\");"},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + synopsis);"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println();"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the entire man page for all commands."},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageMaster() {"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageAdd();"},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageView();"},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageList();"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageRemove();"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageReturn();"},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManPageExit();"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for add command."},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageAdd() {"},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManHeader(MAN_HEADER_ADD);"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManSynopsis(MAN_SYNOPSIS_ADD);"},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManDescriptionAdd();"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the add command options and arguments description."},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManDescriptionAdd() {"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"DESCRIPTION\");"},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_RECORD_TYPE);"},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_2SPACE + MAN_OPTION_RECORD_TYPE_DESCRIPTION);"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_AMOUNT);"},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_2SPACE + MAN_OPTION_AMOUNT_DESCRIPTION);"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_DATE);"},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_2SPACE + MAN_OPTION_DATE_DESCRIPTION);"},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Ui.DIVIDER);"},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for list command."},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageList() {"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManHeader(MAN_HEADER_LIST);"},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManSynopsis(MAN_SYNOPSIS_LIST);"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManDescriptionList();"},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the list command options and arguments description."},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManDescriptionList() {"},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"DESCRIPTION\");"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_RECORD_TYPE);"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println((TAB_2SPACE + MAN_OPTION_RECORD_TYPE_LISTING));"},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Ui.DIVIDER);"},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for view command."},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageView() {"},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManHeader(MAN_HEADER_VIEW);"},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManSynopsis(MAN_SYNOPSIS_VIEW);"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManDescriptionView();"},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":151,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the view command options and arguments description."},{"lineNumber":153,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManDescriptionView() {"},{"lineNumber":155,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"DESCRIPTION\");"},{"lineNumber":156,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_RECORD_TYPE);"},{"lineNumber":157,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println((TAB_2SPACE + MAN_OPTION_RECORD_TYPE_VIEWING));"},{"lineNumber":158,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":159,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":161,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for remove command."},{"lineNumber":163,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageRemove() {"},{"lineNumber":165,"author":{"gitId":"tzexern"},"content":"        printManHeader(MAN_HEADER_REMOVE);"},{"lineNumber":166,"author":{"gitId":"tzexern"},"content":"        printManSynopsis(MAN_SYNOPSIS_REMOVE);"},{"lineNumber":167,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManDescriptionRemove();"},{"lineNumber":168,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":170,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the remove command options and arguments description."},{"lineNumber":172,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManDescriptionRemove() {"},{"lineNumber":174,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"DESCRIPTION\");"},{"lineNumber":175,"author":{"gitId":"tzexern"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_INDEX);"},{"lineNumber":176,"author":{"gitId":"tzexern"},"content":"        System.out.println((TAB_2SPACE + MAN_OPTION_INDEX_DESCRIPTION));"},{"lineNumber":177,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":178,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":180,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for return command."},{"lineNumber":182,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageReturn() {"},{"lineNumber":184,"author":{"gitId":"tzexern"},"content":"        printManHeader(MAN_HEADER_RETURN);"},{"lineNumber":185,"author":{"gitId":"tzexern"},"content":"        printManSynopsis(MAN_SYNOPSIS_RETURN);"},{"lineNumber":186,"author":{"gitId":"LeeHanYongAndy"},"content":"        printManDescriptionReturn();"},{"lineNumber":187,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":189,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the return command options and arguments description."},{"lineNumber":191,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManDescriptionReturn() {"},{"lineNumber":193,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"DESCRIPTION\");"},{"lineNumber":194,"author":{"gitId":"tzexern"},"content":"        System.out.println(TAB_1SPACE + MAN_OPTION_INDEX);"},{"lineNumber":195,"author":{"gitId":"tzexern"},"content":"        System.out.println((TAB_2SPACE + MAN_OPTION_INDEX_DESCRIPTION));"},{"lineNumber":196,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":197,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":199,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the man page for exit command."},{"lineNumber":201,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printManPageExit() {"},{"lineNumber":203,"author":{"gitId":"tzexern"},"content":"        printManHeader(MAN_HEADER_EXIT);"},{"lineNumber":204,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"SYNOPSIS\");"},{"lineNumber":205,"author":{"gitId":"tzexern"},"content":"        System.out.println(TAB_1SPACE + MAN_SYNOPSIS_EXIT);"},{"lineNumber":206,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":207,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":19,"LeeHanYongAndy":189}},{"path":"src/main/java/seedu/duke/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Record;"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.RoundingMode;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":" * Handles all user interactions and printing of text to the console."},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Ui {"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"    protected static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    private static final String logo \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\""},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"            + \"||    $$$$$$  $$$$$$  $$    $$  $$    $$   $$    $$    ||\\n\""},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"            + \"||    $$        $$    $$$   $$  $$    $$    $$  $$     ||\\n\""},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"            + \"||    $$$$$$    $$    $$ $$ $$  $$    $$      $$       ||\\n\""},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"            + \"||    $$        $$    $$   $$$  $$    $$    $$  $$     ||\\n\""},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"            + \"||    $$      $$$$$$  $$    $$   $$$$$$    $$    $$    ||\\n\""},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"    private static final String MESSAGE_GOODBYE \u003d"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\""},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"            + \"||   $$  $$  $$    $$   $$$$$   $$$$$$$$     $$$$$   $$  $$  $$    ||\\n\""},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"            + \"||   $$  $$  $$    $$  $$   $$     $$       $$   $$  $$  $$  $$    ||\\n\""},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"            + \"||   $$$$$$  $$    $$  $$$$$$$     $$       $$$$$$$  $$$$$$  $$    ||\\n\""},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"            + \"||   $$  $$  $$    $$  $$   $$     $$       $$   $$  $$  $$        ||\\n\""},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"            + \"||   $$  $$   $$$$$$   $$   $$     $$       $$   $$  $$  $$  $$    ||\\n\""},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":"    private static final String MESSAGE_LOADING \u003d \"Loading from save file... \";"},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"    private static final String MESSAGE_FILE_CREATION_SUCCESS \u003d \"New save file created!\";"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"    private static final String MESSAGE_EXPENSE_SUCCESSFULLY_ADDED \u003d \"Expense has been added...\";"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"    private static final String MESSAGE_LOAN_SUCCESSFULLY_ADDED \u003d \"Loan has been added...\";"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"    private static final String MESSAGE_SAVING_SUCCESSFULLY_ADDED \u003d \"Saving has been added...\";"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MESSAGE_TOTAL_EXPENSE \u003d \"The total amount for expense is \";"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MESSAGE_TOTAL_LOAN \u003d \"The total amount for loan is \";"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String MESSAGE_TOTAL_SAVING \u003d \"The total amount for saving is \";"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"    private static final String MESSAGE_FAILED_INIT \u003d \"File or contents corrupted! Bad Init!\";"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"     * Decorative prefix for the FINUX Interface."},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":"    private static final String FINUX_PREFIX \u003d \"$$\";"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":"    private final Scanner input;"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":54,"author":{"gitId":"jonahtwl"},"content":"    public Ui() {"},{"lineNumber":55,"author":{"gitId":"jonahtwl"},"content":"        this(System.in);"},{"lineNumber":56,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":58,"author":{"gitId":"jonahtwl"},"content":"    public Ui(InputStream in) {"},{"lineNumber":59,"author":{"gitId":"jonahtwl"},"content":"        this.input \u003d new Scanner(in);"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":62,"author":{"gitId":"jonahtwl"},"content":"    public static void printInitError() {"},{"lineNumber":63,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":"        System.out.println();"},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(MESSAGE_FAILED_INIT);"},{"lineNumber":66,"author":{"gitId":"jonahtwl"},"content":"        System.out.println();"},{"lineNumber":67,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":68,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":70,"author":{"gitId":"jonahtwl"},"content":"    public static void printSuccessfulFileCreation() {"},{"lineNumber":71,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":72,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(MESSAGE_FILE_CREATION_SUCCESS);"},{"lineNumber":73,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"    public void printSuccessfulAdd(Record recordAdded, int index) {"},{"lineNumber":77,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"        System.out.println();"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        if (recordAdded instanceof Expense) {"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"            System.out.println(MESSAGE_EXPENSE_SUCCESSFULLY_ADDED);"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"        } else if (recordAdded instanceof Loan) {"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"            System.out.println(MESSAGE_LOAN_SUCCESSFULLY_ADDED);"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"            System.out.println(MESSAGE_SAVING_SUCCESSFULLY_ADDED);"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"        int formattedIndex \u003d index - 1;"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"        System.out.println();"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"        printIndex(formattedIndex);"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"        System.out.println(recordAdded);"},{"lineNumber":90,"author":{"gitId":"jonahtwl"},"content":"        System.out.println();"},{"lineNumber":91,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":92,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":94,"author":{"gitId":"jonahtwl"},"content":"    public String getUserInput() {"},{"lineNumber":95,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(FINUX_PREFIX + \" \");"},{"lineNumber":96,"author":{"gitId":"jonahtwl"},"content":"        return input.nextLine().strip();"},{"lineNumber":97,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":99,"author":{"gitId":"jonahtwl"},"content":"    public void printWelcomeMessage() {"},{"lineNumber":100,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(logo);"},{"lineNumber":101,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":102,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(MESSAGE_LOADING);"},{"lineNumber":103,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":104,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":106,"author":{"gitId":"jonahtwl"},"content":"    public void printGoodByeMessage() {"},{"lineNumber":107,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(MESSAGE_GOODBYE);"},{"lineNumber":108,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"    public void printMessage(String message) {"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"        System.out.println(message);"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printExpenses(RecordList recordList) {"},{"lineNumber":117,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":118,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Here is your Expense list:\");"},{"lineNumber":119,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":120,"author":{"gitId":"gerardtwk"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":121,"author":{"gitId":"gerardtwk"},"content":"            if (currentRecord instanceof Expense) {"},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"                printIndex(i);"},{"lineNumber":123,"author":{"gitId":"gerardtwk"},"content":"                System.out.println(currentRecord);"},{"lineNumber":124,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":127,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printLoans(RecordList recordList) {"},{"lineNumber":130,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":131,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Here is your Loan list:\");"},{"lineNumber":132,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":133,"author":{"gitId":"gerardtwk"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":134,"author":{"gitId":"gerardtwk"},"content":"            if (currentRecord instanceof Loan) {"},{"lineNumber":135,"author":{"gitId":"tzexern"},"content":"                printIndex(i);"},{"lineNumber":136,"author":{"gitId":"gerardtwk"},"content":"                System.out.println(currentRecord);"},{"lineNumber":137,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":140,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printSavings(RecordList recordList) {"},{"lineNumber":143,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":144,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Here is your Saving list:\");"},{"lineNumber":145,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":146,"author":{"gitId":"gerardtwk"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":147,"author":{"gitId":"gerardtwk"},"content":"            if (currentRecord instanceof Saving) {"},{"lineNumber":148,"author":{"gitId":"tzexern"},"content":"                printIndex(i);"},{"lineNumber":149,"author":{"gitId":"gerardtwk"},"content":"                System.out.println(currentRecord);"},{"lineNumber":150,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":153,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":155,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the total expenses in 2 decimal place."},{"lineNumber":157,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param recordList contains the full list of records."},{"lineNumber":158,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printTotalAmountExpense(RecordList recordList) {"},{"lineNumber":160,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":161,"author":{"gitId":"LeeHanYongAndy"},"content":"        BigDecimal totalAmount \u003d new BigDecimal(\"0\");"},{"lineNumber":162,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":163,"author":{"gitId":"LeeHanYongAndy"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":164,"author":{"gitId":"LeeHanYongAndy"},"content":"            if (currentRecord instanceof Expense) {"},{"lineNumber":165,"author":{"gitId":"LeeHanYongAndy"},"content":"                totalAmount \u003d totalAmount.add(currentRecord.getAmount());"},{"lineNumber":166,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(MESSAGE_TOTAL_EXPENSE + totalAmount.setScale(2, RoundingMode.HALF_EVEN));"},{"lineNumber":169,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":170,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":172,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the total loan in 2 decimal place."},{"lineNumber":174,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param recordList contains the full list of records."},{"lineNumber":175,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printTotalAmountLoan(RecordList recordList) {"},{"lineNumber":177,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":178,"author":{"gitId":"LeeHanYongAndy"},"content":"        BigDecimal totalAmount \u003d new BigDecimal(\"0\");"},{"lineNumber":179,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":180,"author":{"gitId":"LeeHanYongAndy"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":181,"author":{"gitId":"LeeHanYongAndy"},"content":"            if (currentRecord instanceof Loan) {"},{"lineNumber":182,"author":{"gitId":"LeeHanYongAndy"},"content":"                totalAmount \u003d totalAmount.add(currentRecord.getAmount());"},{"lineNumber":183,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(MESSAGE_TOTAL_LOAN + totalAmount.setScale(2, RoundingMode.HALF_EVEN));"},{"lineNumber":186,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":187,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":189,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the total saving in 2 decimal place."},{"lineNumber":191,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param recordList contains the full list of records."},{"lineNumber":192,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void printTotalAmountSaving(RecordList recordList) {"},{"lineNumber":194,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":195,"author":{"gitId":"LeeHanYongAndy"},"content":"        BigDecimal totalAmount \u003d new BigDecimal(\"0\");"},{"lineNumber":196,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (int i \u003d 0; i \u003c recordList.getRecordCount(); i++) {"},{"lineNumber":197,"author":{"gitId":"LeeHanYongAndy"},"content":"            Record currentRecord \u003d recordList.getRecordAt(i);"},{"lineNumber":198,"author":{"gitId":"LeeHanYongAndy"},"content":"            if (currentRecord instanceof Saving) {"},{"lineNumber":199,"author":{"gitId":"LeeHanYongAndy"},"content":"                totalAmount \u003d totalAmount.add(currentRecord.getAmount());"},{"lineNumber":200,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(MESSAGE_TOTAL_SAVING + totalAmount.setScale(2, RoundingMode.HALF_EVEN));"},{"lineNumber":203,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":204,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":206,"author":{"gitId":"tzexern"},"content":"    public void printIndex(int index) {"},{"lineNumber":207,"author":{"gitId":"tzexern"},"content":"        int formattedIndex \u003d index + 1;"},{"lineNumber":208,"author":{"gitId":"tzexern"},"content":"        System.out.print(formattedIndex + \". \");"},{"lineNumber":209,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"tzexern":23,"jonahtwl":71,"LeeHanYongAndy":71,"marklowsk":6,"gerardtwk":39}},{"path":"src/test/java/seedu/duke/RecordListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.math.BigDecimal;"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"public class RecordListTest {"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    public void addRecord_expenseLoanSavingObjs_success() {"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d getPopulatedRecordList();"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(3, records.getRecordCount(),"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027addRecord_expenseLoanSavingObjs_success\u0027, expected a record count of 3 but \""},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"                        + \"RecordList::getRecordCount() returned \" + records.getRecordCount());"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(\"[E][2020-01-01] electric bills \", records.getRecordAt(0).toString(),"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027addRecord_expenseLoanSavingObjs_success\u0027, wrong record object at index 0 of \""},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"                        + \"record list\");"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(\"[L][2020-01-01] loan to bob [ ]\", records.getRecordAt(1).toString(),"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027addRecord_expenseLoanSavingObjs_success\u0027, wrong record object at index 1 of \""},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"                        + \"record list\");"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(\"[S][2020-01-01] red packet \", records.getRecordAt(2).toString(),"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027addRecord_expenseLoanSavingObjs_success\u0027, wrong record object at index 2 of \""},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"                        + \"record list\");"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    public void deleteRecordAt_indexOfAddedRecordToDelete_success() {"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d getPopulatedRecordList();"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"        records.deleteRecordAt(1);"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(2, records.getRecordCount(),"},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027deleteRecordAt_indexOfAddedRecordToDelete_success\u0027, expected a record count of 2 but \""},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"                        + \"RecordList::getRecordCount() returned \" + records.getRecordCount());"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(\"[E][2020-01-01] electric bills \", records.getRecordAt(0).toString(),"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027deleteRecordAt_indexOfAddedRecordToDelete_success\u0027, wrong record object at index 0 of \""},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"                        + \"record list\");"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(\"[S][2020-01-01] red packet \", records.getRecordAt(1).toString(),"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027deleteRecordAt_indexOfAddedRecordToDelete_success\u0027, wrong record object at index 1 of \""},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"                        + \"record list\");"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"    public void deleteAllRecords_noTestInputs_success() {"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d getPopulatedRecordList();"},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"        records.deleteAllRecords();"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"        assertTrue(records.isEmpty(), \"Failed test \u0027deleteAllRecords_noTestInputs_success\u0027, expected an empty \""},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"                + \"record list but RecordList::isEmpty() returned false\");"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":"        assertEquals(0, records.getRecordCount(),"},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"                \"Failed test \u0027deleteAllRecords_noTestInputs_success\u0027, expected a record count of 0 but \""},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":"                        + \"RecordList::getRecordCount() returned \" + records.getRecordCount());"},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"    private RecordList getPopulatedRecordList() {"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d new RecordList();"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"        records.addRecord(new Expense(new BigDecimal(\"220.50\"), validateDate(\"2020/01/01\"), \"electric bills\"));"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"        records.addRecord(new Loan(new BigDecimal(\"100\"), validateDate(\"2020/01/01\"), \"loan to bob\"));"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"        records.addRecord(new Saving(new BigDecimal(\"20\"), validateDate(\"2020/01/01\"), \"red packet\"));"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"        return records;"},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":6,"gerardtwk":60}},{"path":"src/test/java/seedu/duke/command/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.parser.ParserHandler;"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"import java.io.PrintStream;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"import java.math.BigDecimal;"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    public void executeListExpense_listExpenseCmd_success() {"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"                + \"Here is your Expense list:\" + System.lineSeparator()"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"                + \"1. [E][2020-01-01] electric bills \" + System.lineSeparator()"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"                + \"2. [E][2020-01-02] phone bills \" + System.lineSeparator()"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"        runListCmdTest(\"executeListExpense_listExpenseCmd_success\", \"expense\", \"list -e\", expectedOutput);"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    public void executeListLoan_listLoanCmd_success() {"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"                + \"Here is your Loan list:\" + System.lineSeparator()"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"                + \"2. [L][2020-01-01] loan to bob [ ]\" + System.lineSeparator()"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"                + \"3. [L][2020-01-02] loan to alice [ ]\" + System.lineSeparator()"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"        runListCmdTest(\"executeListLoan_listLoanCmd_success\", \"loan\", \"list -l\", expectedOutput);"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"    public void executeListSaving_listSavingCmd_success() {"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":"                + \"Here is your Saving list:\" + System.lineSeparator()"},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"                + \"3. [S][2020-01-01] red packet \" + System.lineSeparator()"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"                + \"4. [S][2020-01-02] pocket money \" + System.lineSeparator()"},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"        runListCmdTest(\"executeListSaving_listSavingCmd_success\", \"saving\", \"list -s\", expectedOutput);"},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"    private void runListCmdTest(String listCmdTestName, String listCmdTypeToTest,"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"                                String listCmdStr, String expectedOutput) {"},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d getPopulatedRecordList(listCmdTypeToTest);"},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"        Command command \u003d CommandHandler.parseCommand(ParserHandler.getParseInput(listCmdStr), records);"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":"        assertTrue(command instanceof ListCommand, String.format(\"Failed test \u0027%s\u0027, \""},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"                + \"command object returned by parseCommand() is not an instance of ListCommand.\", listCmdTestName));"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"        PrintStream originalOut \u003d System.out;"},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"        ByteArrayOutputStream listCmdBos \u003d new ByteArrayOutputStream();"},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"        System.setOut(new PrintStream(listCmdBos));"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"        command.execute(records, ui, storage);"},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"        System.setOut(originalOut);"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"        assertTrue(listCmdBos.toString().equals(expectedOutput), String.format(\"Failed test \u0027%s\u0027, wrong output.\","},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"                listCmdTestName));"},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":"    private RecordList getPopulatedRecordList(String listCmdTypeToTest) {"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"        RecordList records \u003d new RecordList();"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":"        records.addRecord(new Expense(new BigDecimal(\"220.50\"), validateDate(\"2020/01/01\"), \"electric bills\"));"},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"        if (listCmdTypeToTest.equals(\"expense\")) {"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":"            records.addRecord(new Expense(new BigDecimal(\"420.50\"), validateDate(\"2020/01/02\"), \"phone bills\"));"},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"        records.addRecord(new Loan(new BigDecimal(\"100\"), validateDate(\"2020/01/01\"), \"loan to bob\"));"},{"lineNumber":78,"author":{"gitId":"gerardtwk"},"content":"        if (listCmdTypeToTest.equals(\"loan\")) {"},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"            records.addRecord(new Loan(new BigDecimal(\"300\"), validateDate(\"2020/01/02\"), \"loan to alice\"));"},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":"        records.addRecord(new Saving(new BigDecimal(\"20\"), validateDate(\"2020/01/01\"), \"red packet\"));"},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"        if (listCmdTypeToTest.equals(\"saving\")) {"},{"lineNumber":84,"author":{"gitId":"gerardtwk"},"content":"            records.addRecord(new Saving(new BigDecimal(\"40\"), validateDate(\"2020/01/02\"), \"pocket money\"));"},{"lineNumber":85,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"gerardtwk"},"content":"        return records;"},{"lineNumber":87,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":88}},{"path":"src/test/java/seedu/duke/command/RemoveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import seedu.duke.parser.ParserHandler;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.Expense;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"import seedu.duke.record.Saving;"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"import java.io.PrintStream;"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"import java.math.BigDecimal;"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"class RemoveCommandTest {"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    void executeRemoveExpense_removeExpenseCmd_success() {"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        RecordList records \u003d new RecordList();"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"220.50\"), validateDate(\"2020/01/01\"), \"electric bills\"));"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"420.50\"), validateDate(\"2020/01/02\"), \"phone bills\"));"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Loan(new BigDecimal(\"100\"), validateDate(\"2020/01/01\"), \"loan to bob\"));"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Saving(new BigDecimal(\"20\"), validateDate(\"2020/01/01\"), \"red packet\"));"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        String removeExpenseCmd \u003d \"remove -i 1\";"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"        Command command \u003d CommandHandler.parseCommand(ParserHandler.getParseInput(removeExpenseCmd), records);"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"        assertTrue(command instanceof RemoveCommand, \"Failed test \u0027executeRemoveExpense_removeExpenseCmd_success\u0027, \""},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"                + \"command object returned by parseCommand() is not an instance of RemoveCommand\");"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"        ByteArrayOutputStream removeCmdBos \u003d new ByteArrayOutputStream();"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        System.setOut(new PrintStream(removeCmdBos));"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        PrintStream originalOut \u003d System.out;"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"                + \"This record will be removed: [E][2020-01-01] electric bills \" + System.lineSeparator()"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"        command.execute(records, ui, storage);"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"        assertTrue(removeCmdBos.toString().equals(expectedOutput), \"Failed test \""},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"                + \"\u0027executeRemoveExpense_removeExpenseCmd_success\u0027, wrong output.\");"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"        System.setOut(originalOut);"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"    void executeRemoveLoan_removeLoanCmd_success() {"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"        RecordList records \u003d new RecordList();"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"220.50\"), validateDate(\"2020/01/01\"), \"electric bills\"));"},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"420.50\"), validateDate(\"2020/01/02\"), \"phone bills\"));"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Loan(new BigDecimal(\"100\"), validateDate(\"2020/01/01\"), \"loan to bob\"));"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Saving(new BigDecimal(\"20\"), validateDate(\"2020/01/01\"), \"red packet\"));"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"        String removeLoanCmd \u003d \"remove -i 3\";"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        Command command \u003d CommandHandler.parseCommand(ParserHandler.getParseInput(removeLoanCmd), records);"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"        assertTrue(command instanceof RemoveCommand, \"Failed test \u0027executeRemoveLoan_removeLoanCmd_success\u0027, \""},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"                + \"command object returned by parseCommand() is not an instance of RemoveCommand\");"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"        ByteArrayOutputStream removeCmdBos \u003d new ByteArrayOutputStream();"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"        System.setOut(new PrintStream(removeCmdBos));"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"        PrintStream originalOut \u003d System.out;"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"                + \"This record will be removed: [L][2020-01-01] loan to bob [ ]\" + System.lineSeparator()"},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"        command.execute(records, ui, storage);"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"        assertTrue(removeCmdBos.toString().equals(expectedOutput), \"Failed test \""},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"                + \"\u0027executeRemoveLoan_removeLoanCmd_success\u0027, wrong output.\");"},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"        System.setOut(originalOut);"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"    void executeRemoveSaving_removeSavingCmd_success() {"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        RecordList records \u003d new RecordList();"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"220.50\"), validateDate(\"2020/01/01\"), \"electric bills\"));"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Expense(new BigDecimal(\"420.50\"), validateDate(\"2020/01/02\"), \"phone bills\"));"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Loan(new BigDecimal(\"100\"), validateDate(\"2020/01/01\"), \"loan to bob\"));"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"        records.addRecord(new Saving(new BigDecimal(\"20\"), validateDate(\"2020/01/01\"), \"red packet\"));"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"        String removeSavingCmd \u003d \"remove -i 4\";"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"        Command command \u003d CommandHandler.parseCommand(ParserHandler.getParseInput(removeSavingCmd), records);"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"        assertTrue(command instanceof RemoveCommand, \"Failed test \u0027executeRemoveSaving_removeSavingCmd_success\u0027, \""},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"                + \"command object returned by parseCommand() is not an instance of RemoveCommand\");"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"        ByteArrayOutputStream removeCmdBos \u003d new ByteArrayOutputStream();"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"        System.setOut(new PrintStream(removeCmdBos));"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"        PrintStream originalOut \u003d System.out;"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"                + \"This record will be removed: [S][2020-01-01] red packet \" + System.lineSeparator()"},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"        command.execute(records, ui, storage);"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"        assertTrue(removeCmdBos.toString().equals(expectedOutput), \"Failed test \""},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"                + \"\u0027executeRemoveSaving_removeSavingCmd_success\u0027, wrong output.\");"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"        System.setOut(originalOut);"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":101}},{"path":"src/test/java/seedu/duke/command/ReturnCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.parser.ParserHandler;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.record.Loan;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"import java.io.PrintStream;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"import java.math.BigDecimal;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"public class ReturnCommandTest {"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"    public void executeReturnCommand_returnCmd_success() {"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"        String testName \u003d \"executeReturnCommand_returnCmd_success\";"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"                + \"Loan marked as returned: [L][2021-03-15] Loan to Andy [v]\" + System.lineSeparator()"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"        String returnCmdInput \u003d \"return -i 1\";"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"        runReturnCmdTest(expectedOutput, returnCmdInput, testName);"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"    public void executeReturnCommand_returnCmdTwo_success() {"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"        String testName \u003d \"executeReturnCommand_returnCmdTwo_success\";"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"        String expectedOutput \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"                + \"Loan marked as returned: [L][2021-03-16] Loan to Jason [v]\" + System.lineSeparator()"},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator();"},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"        String returnCmdInput \u003d \"return -i 3\";"},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":"        runReturnCmdTest(expectedOutput, returnCmdInput, testName);"},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"    private void runReturnCmdTest(String expectedOutput, String returnCmdInput, String testName) {"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":"        RecordList loans \u003d getLoanList();"},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"        ByteArrayOutputStream returnCmdBos \u003d new ByteArrayOutputStream();"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"        System.setOut(new PrintStream(returnCmdBos));"},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":"        Command command \u003d CommandHandler.parseCommand(ParserHandler.getParseInput(returnCmdInput), loans);"},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":"        assertTrue(command instanceof ReturnCommand,"},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":"                String.format(\"Failed test \u0027%s\u0027 command object \""},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"                        + \"returned by parseCommand() is not an instance of ReturnCommand\", testName));"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":51,"author":{"gitId":"jonahtwl"},"content":"        command.execute(loans, ui, storage);"},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":"        System.setOut(System.out);"},{"lineNumber":53,"author":{"gitId":"jonahtwl"},"content":"        assertTrue(returnCmdBos.toString().equals(expectedOutput), String.format(\"Failed test \""},{"lineNumber":54,"author":{"gitId":"jonahtwl"},"content":"            + \"\u0027%s\u0027, wrong output.\", testName));"},{"lineNumber":55,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":56,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":58,"author":{"gitId":"jonahtwl"},"content":"    private RecordList getLoanList() {"},{"lineNumber":59,"author":{"gitId":"jonahtwl"},"content":"        RecordList loans \u003d new RecordList();"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":"        loans.addRecord(new Loan(new BigDecimal(\"43.28\"), validateDate(\"2021/03/15\"), \"Loan to Andy\"));"},{"lineNumber":61,"author":{"gitId":"jonahtwl"},"content":"        loans.addRecord(new Loan(new BigDecimal(\"89.23\"), validateDate(\"2021/03/17\"), \"Loan to Mark\"));"},{"lineNumber":62,"author":{"gitId":"jonahtwl"},"content":"        loans.addRecord(new Loan(new BigDecimal(\"5.67\"), validateDate(\"2021/03/16\"), \"Loan to Jason\"));"},{"lineNumber":63,"author":{"gitId":"jonahtwl"},"content":"        return loans;"},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":65}},{"path":"src/test/java/seedu/duke/command/UtilsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.common.ArgumentType;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.exception.CommandException;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import seedu.duke.parser.ParserHandler;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.AddCommand.COMMAND_ADD;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.HelpCommand.COMMAND_HELP;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.getOptionValue;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.isOption;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateArguments;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.Utils.validateOptions;"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.command.ViewCommand.COMMAND_VIEW;"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_AMOUNT;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_DATE;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_EXPENSE;"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_LOAN;"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Constant.OPTION_SAVING;"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"class UtilsTest {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARG_TYPE_ORDER_CMD_HELP \u003d { ArgumentType.COMMAND };"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    private static final ArgumentType[] ARG_TYPE_ORDER_CMD_VIEW \u003d {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.COMMAND,"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.OPTION,"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        ArgumentType.EMPTY_VALUE"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private static final String[] OR_OPTIONS \u003d {OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING};"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    private static final String[] VALID_OPTIONS_ADD \u003d {"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        OPTION_EXPENSE, OPTION_LOAN, OPTION_SAVING, OPTION_AMOUNT, OPTION_DATE"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[isOption] - Valid Options - success:\")"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"    public void isOption_optionMatch_success() {"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"        assertAll("},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-e\")),"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-l\")),"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-s\")),"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-d\")),"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-a\")),"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-i\")),"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-E\")),"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-L\")),"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-S\")),"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-D\")),"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-A\")),"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-I\")),"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertTrue(isOption(\"-p\"))"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"        );"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[isOption] - Invalid Options - failure:\")"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"    public void isOption_invalidOptions() {"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"        assertAll("},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"--\")),"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"-[\")),"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"- \")),"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"-1\")),"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"-9\")),"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"            () -\u003e assertFalse(isOption(\"-hello\"))"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"        );"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"    private void validateArguments_improperCommand_helper(ArrayList\u003cString\u003e arguments,"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"                                                          ArgumentType[] argumentTypeOrder,"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"                                                          String expected,"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"                                                          String command) {"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"        CommandException e \u003d assertThrows("},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"            CommandException.class,"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"            () -\u003e validateArguments(arguments, argumentTypeOrder, command)"},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"        );"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"        if (!e.getMessage().equals(expected)) {"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"            fail(arguments.toString() + \" - Error: \" + e.getMessage());"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateArguments] - help Command - success:\")"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"    public void validateArguments_properHelp_success() {"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command \u003d ParserHandler.getParseInput(\"help\");"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"            validateArguments(command, ARG_TYPE_ORDER_CMD_HELP, COMMAND_HELP);"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"        } catch (CommandException e) {"},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"            fail(e.getMessage());"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateArguments] - help Command - failure:\")"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"    public void validateArguments_improperHelp() {"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"        String expected1245 \u003d \"invalid command order, expected command word.\";"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"        String expected3 \u003d COMMAND_HELP + \" Command - too many arguments.\";"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"help gerard oi\");"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command1, ARG_TYPE_ORDER_CMD_HELP,"},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"                expected1245, COMMAND_HELP);"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"help -z oi\");"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command2, ARG_TYPE_ORDER_CMD_HELP,"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"                expected1245, COMMAND_HELP);"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command3 \u003d ParserHandler.getParseInput(\"help -a\");"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command3, ARG_TYPE_ORDER_CMD_HELP,"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"                expected3, COMMAND_HELP);"},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command4 \u003d ParserHandler.getParseInput(\"help me\");"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command4, ARG_TYPE_ORDER_CMD_HELP,"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"                expected1245, COMMAND_HELP);"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command5 \u003d ParserHandler.getParseInput(\"helpz\");"},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command5, ARG_TYPE_ORDER_CMD_HELP,"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"                expected1245, COMMAND_HELP);"},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateArguments] - view Command - success:\")"},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"    public void validateArguments_properView_success() {"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"        // By assumption that options are valid and order is correct."},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"view -e\");"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"view -l\");"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command3 \u003d ParserHandler.getParseInput(\"view -s\");"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"            validateArguments(command1, ARG_TYPE_ORDER_CMD_VIEW, COMMAND_VIEW);"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"            validateArguments(command2, ARG_TYPE_ORDER_CMD_VIEW, COMMAND_VIEW);"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"            validateArguments(command3, ARG_TYPE_ORDER_CMD_VIEW, COMMAND_VIEW);"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"        } catch (CommandException e) {"},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"            fail(e.getMessage());"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateArguments] - view Command - failure:\")"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"    public void validateArguments_improperView() {"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"        String expected1 \u003d \"view Command - invalid input: \";"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"        String expected25 \u003d \"view Command - not enough arguments.\";"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"        String expected34 \u003d \"view Command - too many arguments.\";"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"view -l abc\");"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command1, ARG_TYPE_ORDER_CMD_VIEW,"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"                expected1 + \"abc\", COMMAND_VIEW);"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"view -z -z\");"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command2, ARG_TYPE_ORDER_CMD_VIEW,"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"                expected25, COMMAND_VIEW);"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command3 \u003d ParserHandler.getParseInput(\"view -s -s\");"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command3, ARG_TYPE_ORDER_CMD_VIEW,"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"                expected34, COMMAND_VIEW);"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command4 \u003d ParserHandler.getParseInput(\"view -l -l\");"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command4, ARG_TYPE_ORDER_CMD_VIEW,"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"                expected34, COMMAND_VIEW);"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command5 \u003d ParserHandler.getParseInput(\"view\");"},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"        validateArguments_improperCommand_helper(command5, ARG_TYPE_ORDER_CMD_VIEW,"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"                expected25, COMMAND_VIEW);"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateOptions] - Valid options - success:\")"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"    public void validateOptions_validOptions_success() {"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"view -l\");"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"add -s savings -a 200.00 -d 20/1/2021\");"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command3 \u003d ParserHandler.getParseInput(\"add -a 200.00 -d 20/1/2021 -s savings\");"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"            validateOptions(command1, COMMAND_VIEW, OR_OPTIONS, OR_OPTIONS);"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"            validateOptions(command2, COMMAND_ADD, VALID_OPTIONS_ADD, OR_OPTIONS);"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"            validateOptions(command3, COMMAND_ADD, VALID_OPTIONS_ADD, OR_OPTIONS);"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"        } catch (CommandException e) {"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"            fail();"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[validateOptions] - Invalid options - failure:\")"},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"    public void validateOptions_invalidOptions() {"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"view -l -z\");"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"add -s -a 200.00 -d -d\");"},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command3 \u003d ParserHandler.getParseInput(\"add -a -s -s -d\");"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"                validateOptions(command1, COMMAND_VIEW, OR_OPTIONS, OR_OPTIONS));"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"                validateOptions(command2, COMMAND_ADD, VALID_OPTIONS_ADD, OR_OPTIONS));"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"                validateOptions(command3, COMMAND_ADD, VALID_OPTIONS_ADD, OR_OPTIONS));"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[getOptionValue] - Option exists - success:\")"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"    public void getOptionValue_optionExists_success() {"},{"lineNumber":203,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"add -s savings -a 200.00 -d 20/1/2021\");"},{"lineNumber":204,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"add -a 200.00 -d 20/1/2021 -s savings\");"},{"lineNumber":205,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":206,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"200.00\", getOptionValue(command1, COMMAND_ADD, \"-a\"));"},{"lineNumber":207,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"20/1/2021\", getOptionValue(command1, COMMAND_ADD, \"-d\"));"},{"lineNumber":208,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"savings\", getOptionValue(command1, COMMAND_ADD, \"-s\"));"},{"lineNumber":209,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"200.00\", getOptionValue(command2, COMMAND_ADD, \"-a\"));"},{"lineNumber":210,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"20/1/2021\", getOptionValue(command2, COMMAND_ADD, \"-d\"));"},{"lineNumber":211,"author":{"gitId":"marklowsk"},"content":"            assertEquals(\"savings\", getOptionValue(command2, COMMAND_ADD, \"-s\"));"},{"lineNumber":212,"author":{"gitId":"marklowsk"},"content":"        } catch (CommandException e) {"},{"lineNumber":213,"author":{"gitId":"marklowsk"},"content":"            fail();"},{"lineNumber":214,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":217,"author":{"gitId":"marklowsk"},"content":"    @DisplayName(\"[getOptionValue] - Option empty - failure:\")"},{"lineNumber":218,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"marklowsk"},"content":"    public void getOptionValue_optionEmpty() {"},{"lineNumber":220,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command1 \u003d ParserHandler.getParseInput(\"add -s -a -d\");"},{"lineNumber":221,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":222,"author":{"gitId":"marklowsk"},"content":"                getOptionValue(command1, COMMAND_ADD, \"-a\"));"},{"lineNumber":223,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":224,"author":{"gitId":"marklowsk"},"content":"                getOptionValue(command1, COMMAND_ADD, \"-d\"));"},{"lineNumber":225,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":226,"author":{"gitId":"marklowsk"},"content":"                getOptionValue(command1, COMMAND_ADD, \"-s\"));"},{"lineNumber":227,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":228,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cString\u003e command2 \u003d ParserHandler.getParseInput(\"add -a 200.00 -d -s savings\");"},{"lineNumber":229,"author":{"gitId":"marklowsk"},"content":"        assertThrows(CommandException.class, () -\u003e"},{"lineNumber":230,"author":{"gitId":"marklowsk"},"content":"                getOptionValue(command2, COMMAND_ADD, \"-d\"));"},{"lineNumber":231,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":232}},{"path":"src/test/java/seedu/duke/common/ValidatorsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import seedu.duke.exception.CustomException;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import java.time.DateTimeException;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.common.Validators.validateAmount;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static seedu.duke.common.Validators.validateDate;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"class ValidatorsTest {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    // Not a proper JUnit test format, please do not follow."},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    void validateDate_properDateFormat_success() {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        String[] dateStrings \u003d {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"            \"13122011\", \"13.1.2011\", \"13-1-2011\", \"13/1/2011\","},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"            \"2011.1.13\", \"2011-1-13\", \"2011/1/13\""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        };"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"            for (String d : dateStrings) {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"                validateDate(d);"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"            fail();"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    // Not a proper JUnit test format, please do not follow."},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    void validateDate_improperDateFormat() {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        final int finalCount \u003d 7;"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"        int counter \u003d 0;"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        String[] dateStrings \u003d {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            \"12345678\", \"13.13.2011\", \"13-13-2011\", \"13 13 2011\","},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            \"2011 1 13\", \"2011-1/13\", \"2011/1.13\""},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        };"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        for (String d : dateStrings) {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"                validateDate(d);"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"            } catch (DateTimeException e) {"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"                counter++;"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"        if (finalCount !\u003d counter) {"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"            fail();"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"    void validateAmount_properFormat_expectSuccess() {"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfAmount \u003d {\"0.1\", \"1.0\", \"1\", \"987654321\", \"0.987654321\"};"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"            for (String testAmount : arrayOfAmount) {"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"                validateAmount(testAmount);"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (NumberFormatException | CustomException e) {"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"            fail();"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"    void validateAmount_wrongFormat_expectFailure() {"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        int numFailCase \u003d 0;"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfAmount \u003d {\"0\", \"-1\", \"1num1word\", \"wordonly\"};"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testAmount : arrayOfAmount) {"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"            try {"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"                validateAmount(testAmount);"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"            } catch (NumberFormatException | CustomException e) {"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"                numFailCase++;"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (arrayOfAmount.length !\u003d numFailCase) {"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"            fail();"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":48,"LeeHanYongAndy":30}},{"path":"src/test/java/seedu/duke/parser/ParserHandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package seedu.duke.parser;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"import static seedu.duke.parser.ParserHandler.getParseInput;"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"class ParserHandlerTest {"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_emptyInput() {"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"        String input \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"\"};"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] actual \u003d getParseInput(input).toArray(new String[0]);"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"        assertArrayEquals(expected, actual);"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_oneWord() {"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"add\", \"add \", \" add\", \" add \"};"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"add\"};"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_oneOption_noArgument() {"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"-e\", \"-e \", \" -e\", \" -e \"};"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"-e\", \"\"};"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_TwoOption_noArgument() {"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"-e -s\", \"-e -s \", \" -e -s\", \" -e -s \", \" -e   -s \"};"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"-e\", \"\", \"-s\", \"\"};"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_gotOption_noArgument() {"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"add -e\", \"add -e \", \" add -e\", \" add -e \"};"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"add\", \"-e\", \"\"};"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_TwoOption_noArgument_inMiddle() {"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"add -e -s -a 10\", \"add -e -s -a 10 \","},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"            \" add -e -s -a 10\", \" add -e -s -a 10 \"};"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"add\", \"-e\", \"\", \"-s\", \"\", \"-a\", \"10\"};"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"    void parse_testCase_manyWhiteSpace() {"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] arrayOfTestCase \u003d {\"            add   -e   beer -a     10    -d   2020-01-01       \"};"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] expected \u003d {\"add\", \"-e\", \"beer\", \"-a\", \"10\", \"-d\", \"2020-01-01\"};"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (String testCase : arrayOfTestCase) {"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"            String[] actual \u003d getParseInput(testCase).toArray(new String[0]);"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"            assertArrayEquals(expected, actual);"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":78}}]
