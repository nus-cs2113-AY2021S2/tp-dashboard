[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    mainClassName \u003d \"seedu.duke.PatientManager\"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"fsgmhoward":1,"-":45,"brandonfoong":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"# Patient Manager Developer Guide","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"## Table of Contents","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"* [Setting up the project in your computer](#setting-up-the-project-in-your-computer)","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"* [Design \u0026 implementation](#design--implementation)","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"  * [Architecture](#architecture)","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    * [How the architecture components interact with each other](#how-the-architecture-components-interact-with-each-other)","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"  * [UI Component](#ui-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"  * [Parser Component](#parser-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"  * [Logic Component](#logic-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"  * [Model Component](#model-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"  * [Storage Component](#storage-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"  * [Exception Component](#exception-component)","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"  * [Commons](#commons)","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"* [Appendix A: Product scope](#appendix-a-product-scope)","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"  * [Target user profile](#target-user-profile)","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"  * [Value proposition](#value-proposition)","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"* [Appendix B: User Stories](#appendix-b-user-stories)","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"* [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"* [Appendix D: Glossary](#appendix-d-glossary)","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"* [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"  * [Launch, Help and Shutdown](#launch-help-and-shutdown)","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"  * [Adding and Loading Patients](#adding-loading-and-deleting-patients)","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"  * [Adding and Viewing a Patient\u0027s Visit Records](#adding-viewing-and-deleting-a-patients-visit-records)","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"  * [Saving Data](#saving-data)","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- ^ The above table of content is auto generated --\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\u003c!-- * [Instructions for manual testing](#instructions-for-manual-testing) --\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"## Introduction","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for **_general practitioners_** (GP)","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"who work in clinics to manage their patient list. This includes a recording/retrieval of","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below.","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- TODO: add a description on this DG --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"## Setting up the project in your computer","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"First, **fork** [this repo](https://github.com/AY2021S2-CS2113T-W09-4/tp), and **clone** the fork into your computer.","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"1. Configure the JDK: Follow the guide ","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"   [Intellij IDEA: Configuring the JDK @SE-EDU/guides](https://se-education.org/guides/tutorials/intellijJdk.html) \\","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"   IDEA: Configuring the JDK to ensure Intellij is configured ","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"   to use JDK 11.","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"1. Import the project as a Gradle project: Follow the guide ","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"   [Intellij IDEA: Importing a Gradle project @SE-EDU/guides](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) \\","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"   IDEA: Importing a Gradle project to import ","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"   the project into IDEA.","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"   \u003e ❗ Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"1. Verify the setup: Run `seedu.duke.PatientManager` and try a few commands.\\","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"   [Run the tests](#appendix-e-instructions-for-manual-testing) to ensure they all pass.","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"## Design \u0026 Implementation","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"### Architecture","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"\u003cimg src\u003d\"./images/architecture_diagram.png\" width\u003d\"600\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"The Architecture Diagram shown above gives a high-level explanation of Patient Manager.","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"Given below is a brief overview of each component.","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"`Main` contains the class `PatientManager`.","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"This class is responsible for:","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"- When the app is launched: Initializing the other components in the correct sequence and connecting them with each other","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"- When the app exits: Shuts down the components and invokes cleanup methods where necessary","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"`Commons` contains constants that are shared across the other classes.","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"`UI` is responsible for displaying the all messages generated by Patient Manager to the screen.","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"`Logic` parses and executes commands.","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"`Model` contains the data of Patient Manager in memory.","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"`Storage` reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"#### How the architecture components interact with each other","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command `add S1234567D`.","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"\u003cimg src\u003d\"./images/sequence_diagram_overview.png\" width\u003d\"750\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"The sections below give more details for each component.","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"### UI Component","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"The `UI` component implements methods for:","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"- displaying messages and exceptions in a standardized manner","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"### Logic Component","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"\u003cimg src\u003d\"./images/class_diagram_logic.png\" width\u003d\"750\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"API: `Parser.java` and `Command.java`","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"1. `Logic` uses the `Parser` class to tokenize and parse the user command","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"1. This creates a `Command` object which is then executed by the `PatientManager` class via the `execute()` method","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"1. The command execution can affect the `Model` (e.g. adding a patient)","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"1. Within the `execute()` method, the `Command` object can instruct the `Ui` to perform certain actions,","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"   such as displaying the command output to the screen","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component after Patient Manager recieves `add S1234567D`","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"as an input, and the `execute()` API call is made.\\","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"{TODO: Add sequence diagram here}","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"### Model Component","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"\u003cimg src\u003d\"./images/class_diagram_model.png\" width\u003d\"200\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"API: `Data.java`","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"`Data`","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"- stores a `SortedMap\u003cString, Patient\u003e`, which maps the patient\u0027s NRIC/FIN number to their corresponding `Patient` instance","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"- implements methods to add new patients and delete existing patients","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"- implements methods to load an existing patient\u0027s medical records","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"A `Patient` contains:","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"- the patient\u0027s NRIC/FIN number, which uniquely identifies the patient","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"- a `TreeMap\u003cLocalDate, Record\u003e` which maps the patient\u0027s consultation dates to the visit records for that date","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"A `Record` contains:","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"- all the symptoms recorded by a GP during the consultation","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"- all the diagnoses made by a GP during the consultation","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"- all the prescriptions made by a GP during the consultation","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"- the most recently added symptom/diagnosis/prescription, which corresponds to the most recently executed `record` command","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"### Storage Component","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"API: `Storage.java`","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"leowxx"},"content":"The storage component is in charge of printing all patients\u0027 data into a file, and loading from it when the application restarts. ","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"leowxx"},"content":"This would ensure that patient data is not lost after exiting the application.","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"leowxx"},"content":"To initialise this component, the `SortedMap\u003cString, Patient\u003e` from the Data class is passed during object creation.","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"leowxx"},"content":"This SortedMap\u003cString, Patient\u003e is the entire list of patients and their records.","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"leowxx"},"content":"Then, we can call the `save(SortedMap\u003cString, Patient\u003e patientData)` method to save the SortedMap into a file whenever changes are made.","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"leowxx"},"content":"The file is specified by the variable FILE_PATH in Constants class.","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"leowxx"},"content":"The reverse process would be the `load()` method. The file from the specified FILE_PATH is loaded into a String, which is ","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"leowxx"},"content":"converted to a SortedMap\u003cString, Patient\u003e afterwards.","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"leowxx"},"content":"`Storage.java`:","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"leowxx"},"content":"- facilitates the saving of application data into a text file","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"leowxx"},"content":"- facilitates the loading of application data from the aforementioned text file","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"leowxx"},"content":"- convert records to string","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"leowxx"},"content":"- converts string to records","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"fsgmhoward"},"content":"### Exception Component","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"brandonfoong"},"content":"API: `BaseException.java` and its subclasses","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"brandonfoong"},"content":"`BaseException.java`:","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"brandonfoong"},"content":"- handles all exceptions that occur during the execution of PatientManager","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"brandonfoong"},"content":"- can report an error message, prompting the user to provide a syntatically correct command","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"brandonfoong"},"content":"- may also report the cause of error for debugging purposes","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"brandonfoong"},"content":"### Commons","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"brandonfoong"},"content":"Constants used by multiple classes are stored in the `seedu.duke.Constants` class.","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":"## Implementation","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"brandonfoong"},"content":"This section describes some noteworthy details on how certain details are implemented.","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"brandonfoong"},"content":"### Tokenizing User Input","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"fsgmhoward"},"content":"The parser is one of the core components in charge of parsing all user input commands into program-understandable commands and","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"fsgmhoward"},"content":"arguments. For the ease of expansion of this program\u0027s functionality as well as for its testability, reflection is used to invoke","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"fsgmhoward"},"content":"commands.","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"fsgmhoward"},"content":"First is the initialization of this parser. A `Ui` instance and a `Data` instance is passed and stored. This is important as","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"fsgmhoward"},"content":"these two will be passed to logic components (command classes) later.","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"fsgmhoward"},"content":"Then, we can parse a user-input string by passing it to `parse()`. We use an example of this:","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"fsgmhoward"},"content":"record 01/05/2021 /s coughing, fever /p panadol Paracetamol 500mg*20","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":191,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"fsgmhoward"},"content":"This is broken into a few steps:","lastModifiedDate":"2021-03-29"},{"lineNumber":193,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"fsgmhoward"},"content":"1. Initialize an empty hashmap, called `arguments`.","lastModifiedDate":"2021-03-29"},{"lineNumber":195,"author":{"gitId":"fsgmhoward"},"content":"1. Tokenize using **any number of consecutive white spaces**.","lastModifiedDate":"2021-03-29"},{"lineNumber":196,"author":{"gitId":"fsgmhoward"},"content":"1. Taken out the first token as command, i.e. `record`. Push it into the hash map using **key** `command`.","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"fsgmhoward"},"content":"   Create a new empty **list** with default **key** `payload`.","lastModifiedDate":"2021-03-29"},{"lineNumber":198,"author":{"gitId":"fsgmhoward"},"content":"1. Check if next token starts with `/`. No, so we add it to the list: `list \u003d [\u0027payload\u0027]`.","lastModifiedDate":"2021-03-29"},{"lineNumber":199,"author":{"gitId":"fsgmhoward"},"content":"1. Check if next token starts with `/`. Yes, so we concatenate all tokens in the list to one string use delimiter ` `","lastModifiedDate":"2021-03-29"},{"lineNumber":200,"author":{"gitId":"fsgmhoward"},"content":"   (empty whitespace). Put it into the hash map using the key `payload`.","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"fsgmhoward"},"content":"   **Reset the list**, and set new key to `s` (the part after this `/`).","lastModifiedDate":"2021-03-29"},{"lineNumber":202,"author":{"gitId":"fsgmhoward"},"content":"1. Repeat same process, we have `list \u003d [\u0027coughing,\u0027]`","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"fsgmhoward"},"content":"1. Repeat same process, we have `list \u003d [\u0027coughing,\u0027, \u0027fever\u0027]`","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"fsgmhoward"},"content":"1. Same process, `coughing, fever` is pushed into arguments hash map with key `s`. Reset the list, and new key set to `p`.","lastModifiedDate":"2021-03-29"},{"lineNumber":205,"author":{"gitId":"fsgmhoward"},"content":"1. ... ","lastModifiedDate":"2021-03-29"},{"lineNumber":206,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"fsgmhoward"},"content":"At the end, we have an argument hashmap like this:","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"fsgmhoward"},"content":"| Key     | Value                         |","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"brandonfoong"},"content":"| ------- | ----------------------------- |","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"fsgmhoward"},"content":"| command | record                        |","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"fsgmhoward"},"content":"| payload | 01/05/2021                    |","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"fsgmhoward"},"content":"| s       | coughing, fever               |","lastModifiedDate":"2021-03-29"},{"lineNumber":214,"author":{"gitId":"brandonfoong"},"content":"| p       | panadol Paracetamol 500mg\\*20 |","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"fsgmhoward"},"content":"Next step is the initialization of a command class. Since we have command `record`, the program finds a class called","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"fsgmhoward"},"content":"`RecordCommand` under the module `seedu.duke.command` (first character being capitalized, then concatenated with \u0027Command\u0027).","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"fsgmhoward"},"content":"Since this is a valid command, this class exists. If the class does not exist, it means the command is not yet","lastModifiedDate":"2021-03-29"},{"lineNumber":219,"author":{"gitId":"fsgmhoward"},"content":"implemented by this program.","lastModifiedDate":"2021-03-29"},{"lineNumber":220,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":221,"author":{"gitId":"fsgmhoward"},"content":"After finding the command class, it is initialized with `(ui, data, arguments)`. `ui` and `data` are the two references","lastModifiedDate":"2021-03-29"},{"lineNumber":222,"author":{"gitId":"fsgmhoward"},"content":"passed in when initializing the parser, and the `arguments` is the hash map we just obtained by parsing the input. The result","lastModifiedDate":"2021-03-29"},{"lineNumber":223,"author":{"gitId":"fsgmhoward"},"content":"of the initialization (i.e. the instance of the command class) is returned.","lastModifiedDate":"2021-03-29"},{"lineNumber":224,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":225,"author":{"gitId":"fsgmhoward"},"content":"Since all command classes implements the abstract method `execute()`, the main loop just need to execute this method to call out","lastModifiedDate":"2021-03-29"},{"lineNumber":226,"author":{"gitId":"fsgmhoward"},"content":"the actual logic of this command.","lastModifiedDate":"2021-03-29"},{"lineNumber":227,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":228,"author":{"gitId":"fsgmhoward"},"content":"\u003e ❗ Note: Since we are tokenizing the user input with **any number of white spaces** and concatenate all tokens belong to the","lastModifiedDate":"2021-03-29"},{"lineNumber":229,"author":{"gitId":"fsgmhoward"},"content":"\u003e same key back using **single whitespace**, the number of white spaces input has no effect on the actual arguments being parsed.","lastModifiedDate":"2021-03-29"},{"lineNumber":230,"author":{"gitId":"fsgmhoward"},"content":"\u003e For example, the following two input has exactly the same result after being parsed.","lastModifiedDate":"2021-03-29"},{"lineNumber":231,"author":{"gitId":"fsgmhoward"},"content":"\u003e ```","lastModifiedDate":"2021-03-29"},{"lineNumber":232,"author":{"gitId":"fsgmhoward"},"content":"\u003e record 01/05/2021 /s coughing, fever","lastModifiedDate":"2021-03-29"},{"lineNumber":233,"author":{"gitId":"fsgmhoward"},"content":"\u003e record 01/05/2021 /s coughing,                 fever","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"fsgmhoward"},"content":"\u003e ```","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":236,"author":{"gitId":"brandonfoong"},"content":"### Exception Handling","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":238,"author":{"gitId":"fsgmhoward"},"content":"All unexpected behaviour encountered by Patient Manager is signalled and handled with exceptions. Since the generic","lastModifiedDate":"2021-03-29"},{"lineNumber":239,"author":{"gitId":"fsgmhoward"},"content":"`Exception` is too broad, we have created a few custom exception classes to relay exception information.","lastModifiedDate":"2021-03-29"},{"lineNumber":240,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":241,"author":{"gitId":"fsgmhoward"},"content":"`BaseException.java`:","lastModifiedDate":"2021-03-29"},{"lineNumber":242,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":243,"author":{"gitId":"fsgmhoward"},"content":"- inherits from the generic `Exception`","lastModifiedDate":"2021-03-29"},{"lineNumber":244,"author":{"gitId":"fsgmhoward"},"content":"- base class of all custom exceptions","lastModifiedDate":"2021-03-29"},{"lineNumber":245,"author":{"gitId":"fsgmhoward"},"content":"- overwrites the `toString()` method to make it output messages more meaningfully","lastModifiedDate":"2021-03-29"},{"lineNumber":246,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":247,"author":{"gitId":"fsgmhoward"},"content":"`InvalidInputException.java`","lastModifiedDate":"2021-03-29"},{"lineNumber":248,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":249,"author":{"gitId":"fsgmhoward"},"content":"- inherits from `BaseException`","lastModifiedDate":"2021-03-29"},{"lineNumber":250,"author":{"gitId":"fsgmhoward"},"content":"- is used to handle all unexpected user input, like invalid commands, wrong NRIC numbers, etc.","lastModifiedDate":"2021-03-29"},{"lineNumber":251,"author":{"gitId":"fsgmhoward"},"content":"- implies that user should re-enter correct command and arguments","lastModifiedDate":"2021-03-29"},{"lineNumber":252,"author":{"gitId":"fsgmhoward"},"content":"- has a member enumerate (`enum`) `Type` to give a fixed set of exception messages, which can be passed as the argument","lastModifiedDate":"2021-03-29"},{"lineNumber":253,"author":{"gitId":"fsgmhoward"},"content":"  for exception initialization (see example below)","lastModifiedDate":"2021-03-29"},{"lineNumber":254,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":255,"author":{"gitId":"fsgmhoward"},"content":"`StorageException.java`","lastModifiedDate":"2021-03-29"},{"lineNumber":256,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":257,"author":{"gitId":"fsgmhoward"},"content":"- inherits from `BaseException`","lastModifiedDate":"2021-03-29"},{"lineNumber":258,"author":{"gitId":"fsgmhoward"},"content":"- is used to handle expected events occur during loading and saving data from/onto the hard disk","lastModifiedDate":"2021-03-29"},{"lineNumber":259,"author":{"gitId":"fsgmhoward"},"content":"- shows that usual saving/loading action cannot be done, and there might be the case of a data loss after closing the program","lastModifiedDate":"2021-03-29"},{"lineNumber":260,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":261,"author":{"gitId":"fsgmhoward"},"content":"`UnknownException.java`","lastModifiedDate":"2021-03-29"},{"lineNumber":262,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":263,"author":{"gitId":"fsgmhoward"},"content":"- inherits from `BaseException`","lastModifiedDate":"2021-03-29"},{"lineNumber":264,"author":{"gitId":"fsgmhoward"},"content":"- is used to handle unusual events that should not be trigger by user","lastModifiedDate":"2021-03-29"},{"lineNumber":265,"author":{"gitId":"fsgmhoward"},"content":"- signals an internal error of the program and should be fixed during next iteration or through hotfixes","lastModifiedDate":"2021-03-29"},{"lineNumber":266,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":267,"author":{"gitId":"fsgmhoward"},"content":"During invocation of an exception, there are two ways to invoke:","lastModifiedDate":"2021-03-29"},{"lineNumber":268,"author":{"gitId":"fsgmhoward"},"content":"```java","lastModifiedDate":"2021-03-29"},{"lineNumber":269,"author":{"gitId":"fsgmhoward"},"content":"throw new InvalidInputException(InvalidInputException.Type.EMPTY_STRING);","lastModifiedDate":"2021-03-29"},{"lineNumber":270,"author":{"gitId":"fsgmhoward"},"content":"// e is a Throwable, e.g. a captured exception in a try-catch block","lastModifiedDate":"2021-03-29"},{"lineNumber":271,"author":{"gitId":"fsgmhoward"},"content":"// for this UNKNOWN_COMMAND, the e should be of type ClassNotFoundException","lastModifiedDate":"2021-03-29"},{"lineNumber":272,"author":{"gitId":"fsgmhoward"},"content":"throw new InvalidInputException(InvalidInputException.Type.UNKNOWN_COMMAND, e);","lastModifiedDate":"2021-03-29"},{"lineNumber":273,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":274,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":275,"author":{"gitId":"fsgmhoward"},"content":"If a second argument is passed, it is called the **cause** of the exception. For example, the user\u0027s wrong input","lastModifiedDate":"2021-03-29"},{"lineNumber":276,"author":{"gitId":"fsgmhoward"},"content":"triggers **ClassNotFoundException**, and then this exception is captured in `Parser` which then **causes**","lastModifiedDate":"2021-03-29"},{"lineNumber":277,"author":{"gitId":"fsgmhoward"},"content":"`InvalidInputException`. If a **cause** is passed in, it will be printed out for the user as well. See the difference:","lastModifiedDate":"2021-03-29"},{"lineNumber":278,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":279,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":280,"author":{"gitId":"fsgmhoward"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":281,"author":{"gitId":"fsgmhoward"},"content":"Input command and/or arguments are invalid:","lastModifiedDate":"2021-03-29"},{"lineNumber":282,"author":{"gitId":"fsgmhoward"},"content":"        Empty string is found when trying to parse command!","lastModifiedDate":"2021-03-29"},{"lineNumber":283,"author":{"gitId":"fsgmhoward"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":284,"author":{"gitId":"fsgmhoward"},"content":"wrongcommand","lastModifiedDate":"2021-03-29"},{"lineNumber":285,"author":{"gitId":"fsgmhoward"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":286,"author":{"gitId":"fsgmhoward"},"content":"Input command and/or arguments are invalid:","lastModifiedDate":"2021-03-29"},{"lineNumber":287,"author":{"gitId":"fsgmhoward"},"content":"        Invalid command is provided!","lastModifiedDate":"2021-03-29"},{"lineNumber":288,"author":{"gitId":"fsgmhoward"},"content":"... and is caused by ...","lastModifiedDate":"2021-03-29"},{"lineNumber":289,"author":{"gitId":"fsgmhoward"},"content":"        java.lang.ClassNotFoundException: seedu.duke.command.WrongcommandCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":290,"author":{"gitId":"fsgmhoward"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":291,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":292,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":293,"author":{"gitId":"brandonfoong"},"content":"## Appendix A: Product scope","lastModifiedDate":"2021-03-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":297,"author":{"gitId":"leowxx"},"content":"The target users for this application are _general practitioners_ (GP) who work in clinics.","lastModifiedDate":"2021-03-29"},{"lineNumber":298,"author":{"gitId":"leowxx"},"content":"They are keen to reduce the paperwork that is required of them during consultation sessions, so that they may focus more on the consultation itself.","lastModifiedDate":"2021-03-29"},{"lineNumber":299,"author":{"gitId":"leowxx"},"content":"Also, they would like to have a more efficient way to organize the records of their patients.","lastModifiedDate":"2021-03-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":301,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":303,"author":{"gitId":"hiongkaihan"},"content":"Through Patient Manager, general practitioners are able to manage patients faster than a typical mouse/GUI driven app.","lastModifiedDate":"2021-03-23"},{"lineNumber":304,"author":{"gitId":"leowxx"},"content":"The typical paperwork, such as recording of symptoms, diagnoses and prescriptions, are greatly reduced through digital input.","lastModifiedDate":"2021-03-29"},{"lineNumber":305,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":306,"author":{"gitId":"brandonfoong"},"content":"## Appendix B: User Stories","lastModifiedDate":"2021-03-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":308,"author":{"gitId":"-"},"content":"| Version | As a ...           | I want to ...                          | So that I can ...                                       |","lastModifiedDate":"2020-05-24"},{"lineNumber":309,"author":{"gitId":"fsgmhoward"},"content":"| ------- | ------------------ | -------------------------------------- | ------------------------------------------------------- |","lastModifiedDate":"2021-03-29"},{"lineNumber":310,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | GP in a polyclinic | add a new patient                      | record a patient                                        |","lastModifiedDate":"2021-03-23"},{"lineNumber":311,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | GP in a polyclinic | view the list of patients              | track the list of patients                              |","lastModifiedDate":"2021-03-23"},{"lineNumber":312,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | GP in a polyclinic | select a specific patient\u0027s records    | access the patient\u0027s records                            |","lastModifiedDate":"2021-03-23"},{"lineNumber":313,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | GP in a polyclinic | add new record for a patient           | refer to them during future consultations               |","lastModifiedDate":"2021-03-23"},{"lineNumber":314,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | GP in a polyclinic | retrieve the patient\u0027s past records    | refer to them during the current consultation           |","lastModifiedDate":"2021-03-23"},{"lineNumber":315,"author":{"gitId":"hiongkaihan"},"content":"| v1.0    | new User           | view list of available commands        | refer to them if I have any problems                    |","lastModifiedDate":"2021-03-23"},{"lineNumber":316,"author":{"gitId":"hiongkaihan"},"content":"| v2.0    | GP in a polyclinic | delete a patient                       | remove patients are no longer required to be tracked    |","lastModifiedDate":"2021-03-23"},{"lineNumber":317,"author":{"gitId":"hiongkaihan"},"content":"| v2.0    | GP in a polyclinic | delete a patient\u0027s records             | remove records that I no longer need                    |","lastModifiedDate":"2021-03-23"},{"lineNumber":318,"author":{"gitId":"hiongkaihan"},"content":"| v2.0    | GP in a polyclinic | know if I entered a invalid Patient ID | make sure no mistake is made recording the patient\u0027s ID |","lastModifiedDate":"2021-03-23"},{"lineNumber":319,"author":{"gitId":"hiongkaihan"},"content":"| v2.0    | GP in a polyclinic | load and save existing data            | work on the data on another device                      |","lastModifiedDate":"2021-03-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":321,"author":{"gitId":"brandonfoong"},"content":"## Appendix C: Non-Functional Requirements","lastModifiedDate":"2021-03-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":323,"author":{"gitId":"hiongkaihan"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed. ","lastModifiedDate":"2021-03-23"},{"lineNumber":324,"author":{"gitId":"brandonfoong"},"content":"1. Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-30"},{"lineNumber":325,"author":{"gitId":"brandonfoong"},"content":"1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should ","lastModifiedDate":"2021-03-30"},{"lineNumber":326,"author":{"gitId":"hiongkaihan"},"content":"   be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-03-23"},{"lineNumber":327,"author":{"gitId":"brandonfoong"},"content":"1. The data should be stored locally and should be in a human editable text file.","lastModifiedDate":"2021-03-30"},{"lineNumber":328,"author":{"gitId":"brandonfoong"},"content":"1. The application should work without requiring an installer.","lastModifiedDate":"2021-03-30"},{"lineNumber":329,"author":{"gitId":"brandonfoong"},"content":"1. The application should be at most 100 MB in size.","lastModifiedDate":"2021-03-30"},{"lineNumber":330,"author":{"gitId":"brandonfoong"},"content":"1. The application should not rely on any remote server, or database management system.","lastModifiedDate":"2021-03-30"},{"lineNumber":331,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":332,"author":{"gitId":"brandonfoong"},"content":"\u003c!-- NFRs taken from: https://nus-cs2113-ay2021s2.github.io/website/admin/tp-constraints.html --\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":333,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":334,"author":{"gitId":"brandonfoong"},"content":"## Appendix D: Glossary","lastModifiedDate":"2021-03-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":336,"author":{"gitId":"brandonfoong"},"content":"- *Mainstream OS* - Windows, Linux, and OS-X platforms.","lastModifiedDate":"2021-03-29"},{"lineNumber":337,"author":{"gitId":"brandonfoong"},"content":"- *General Practitioner* - A doctor based in the community who treats patients with minor or chronic illnesses and","lastModifiedDate":"2021-03-29"},{"lineNumber":338,"author":{"gitId":"brandonfoong"},"content":"  refers those with serious conditions to a hospital. Their duties are not confined to specific organs of the body,","lastModifiedDate":"2021-03-29"},{"lineNumber":339,"author":{"gitId":"brandonfoong"},"content":"  and they have particular skills in treating people with multiple health issues.","lastModifiedDate":"2021-03-29"},{"lineNumber":340,"author":{"gitId":"brandonfoong"},"content":"- *Visit Record* - Details taken down by the doctor during one\u0027s visit. In this case, Patient Manager can record","lastModifiedDate":"2021-03-29"},{"lineNumber":341,"author":{"gitId":"brandonfoong"},"content":"  the patient\u0027s symptoms, the diagnosis made by the doctor, and any prescriptions or referals given.","lastModifiedDate":"2021-03-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":343,"author":{"gitId":"brandonfoong"},"content":"## Appendix E: Instructions for Manual Testing","lastModifiedDate":"2021-03-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":345,"author":{"gitId":"brandonfoong"},"content":"### Launch, Help and Shutdown","lastModifiedDate":"2021-03-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":347,"author":{"gitId":"brandonfoong"},"content":"1. Initial launch","lastModifiedDate":"2021-03-29"},{"lineNumber":348,"author":{"gitId":"brandonfoong"},"content":"   1. Download `tp.jar` and copy into an empty folder.","lastModifiedDate":"2021-03-29"},{"lineNumber":349,"author":{"gitId":"brandonfoong"},"content":"   1. Open a terminal/command line (cmd)/powershell. A Windows 10 OS\u0027 screenshot is here:","lastModifiedDate":"2021-03-30"},{"lineNumber":350,"author":{"gitId":"brandonfoong"},"content":"      \u003cimg src\u003d\"./images/WindowsPowerShell.png\" width\u003d\"600\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":351,"author":{"gitId":"brandonfoong"},"content":"   1. Execute `java -jar tp.jar` to start the Patient Manager.\\","lastModifiedDate":"2021-03-30"},{"lineNumber":352,"author":{"gitId":"brandonfoong"},"content":"      Expected: Shows the welcome message as shown below","lastModifiedDate":"2021-03-29"},{"lineNumber":353,"author":{"gitId":"brandonfoong"},"content":"      \u003cimg src\u003d\"./images/start_program.png\" width\u003d\"600\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":354,"author":{"gitId":"brandonfoong"},"content":"1. View help","lastModifiedDate":"2021-03-30"},{"lineNumber":355,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `help`\\","lastModifiedDate":"2021-03-29"},{"lineNumber":356,"author":{"gitId":"brandonfoong"},"content":"       Expected: Application prints out a help message containing a list of valid commands","lastModifiedDate":"2021-03-29"},{"lineNumber":357,"author":{"gitId":"brandonfoong"},"content":"       and how to use them.","lastModifiedDate":"2021-03-29"},{"lineNumber":358,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `help add`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":359,"author":{"gitId":"brandonfoong"},"content":"       Expected: Application prints out a help message explaining only the `add` command.","lastModifiedDate":"2021-03-29"},{"lineNumber":360,"author":{"gitId":"brandonfoong"},"content":"1. Exiting","lastModifiedDate":"2021-03-30"},{"lineNumber":361,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `exit`\\","lastModifiedDate":"2021-03-29"},{"lineNumber":362,"author":{"gitId":"brandonfoong"},"content":"       Expected: Application prints goodbye message and exits. All data will be saved to","lastModifiedDate":"2021-03-29"},{"lineNumber":363,"author":{"gitId":"brandonfoong"},"content":"       `pm.save` in the same folder as `tp.jar`","lastModifiedDate":"2021-03-30"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":365,"author":{"gitId":"brandonfoong"},"content":"### Adding and Loading Patients","lastModifiedDate":"2021-03-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":367,"author":{"gitId":"brandonfoong"},"content":"1. Adding a new patient","lastModifiedDate":"2021-03-29"},{"lineNumber":368,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `add S1234567D`\\","lastModifiedDate":"2021-03-29"},{"lineNumber":369,"author":{"gitId":"hiongkaihan"},"content":"       Expected: Application adds patient to the list and shows:","lastModifiedDate":"2021-03-30"},{"lineNumber":370,"author":{"gitId":"brandonfoong"},"content":"       ```","lastModifiedDate":"2021-03-29"},{"lineNumber":371,"author":{"gitId":"brandonfoong"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":372,"author":{"gitId":"brandonfoong"},"content":"       Patient S1234567D has been added!","lastModifiedDate":"2021-03-29"},{"lineNumber":373,"author":{"gitId":"brandonfoong"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":374,"author":{"gitId":"fsgmhoward"},"content":"       ```","lastModifiedDate":"2021-03-26"},{"lineNumber":375,"author":{"gitId":"brandonfoong"},"content":"1. Loading a patient\u0027s records","lastModifiedDate":"2021-03-30"},{"lineNumber":376,"author":{"gitId":"brandonfoong"},"content":"    1. Prerequisite: Patients have already been added (in this case, S1234567D has already been added).","lastModifiedDate":"2021-03-29"},{"lineNumber":377,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `load S1234567D`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":378,"author":{"gitId":"brandonfoong"},"content":"       Expected: Application loads S1234567D\u0027s records and shows:","lastModifiedDate":"2021-03-29"},{"lineNumber":379,"author":{"gitId":"fsgmhoward"},"content":"       ```","lastModifiedDate":"2021-03-26"},{"lineNumber":380,"author":{"gitId":"brandonfoong"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":381,"author":{"gitId":"brandonfoong"},"content":"       Patient S1234567D\u0027s data has been found and loaded.","lastModifiedDate":"2021-03-29"},{"lineNumber":382,"author":{"gitId":"brandonfoong"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":383,"author":{"gitId":"brandonfoong"},"content":"       ```","lastModifiedDate":"2021-03-29"},{"lineNumber":384,"author":{"gitId":"hiongkaihan"},"content":"1. Deleting a patient","lastModifiedDate":"2021-03-30"},{"lineNumber":385,"author":{"gitId":"hiongkaihan"},"content":"    1. Prerequisite: Patients have already been added (in this case, S1234567D has already been added).","lastModifiedDate":"2021-03-30"},{"lineNumber":386,"author":{"gitId":"hiongkaihan"},"content":"    1. Test case: `delete /p S1234567D`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":387,"author":{"gitId":"hiongkaihan"},"content":"       Expected: Application deletes patient S1234567D and shows:","lastModifiedDate":"2021-03-30"},{"lineNumber":388,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":389,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":390,"author":{"gitId":"hiongkaihan"},"content":"       Patient S9841974H has been deleted!","lastModifiedDate":"2021-03-30"},{"lineNumber":391,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":392,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":394,"author":{"gitId":"hiongkaihan"},"content":"### Adding, Viewing and Deleting a Patient\u0027s Visit Records","lastModifiedDate":"2021-03-30"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":396,"author":{"gitId":"brandonfoong"},"content":"1. Adding visit records","lastModifiedDate":"2021-03-29"},{"lineNumber":397,"author":{"gitId":"brandonfoong"},"content":"    1. Prerequisite: Patient\u0027s records have already been loaded.","lastModifiedDate":"2021-03-29"},{"lineNumber":398,"author":{"gitId":"hiongkaihan"},"content":"    1. Test case: `record 30/03/2021 /s coughing, runny nose, fever /d flu /p panadol, cetirizine`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":399,"author":{"gitId":"hiongkaihan"},"content":"       Expected: Application adds details to patient\u0027s visit record and shows:","lastModifiedDate":"2021-03-30"},{"lineNumber":400,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":401,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":402,"author":{"gitId":"hiongkaihan"},"content":"       Added new record to patient S1234567D:","lastModifiedDate":"2021-03-30"},{"lineNumber":403,"author":{"gitId":"hiongkaihan"},"content":"       ","lastModifiedDate":"2021-03-30"},{"lineNumber":404,"author":{"gitId":"hiongkaihan"},"content":"       Symptom: coughing, runny, fever","lastModifiedDate":"2021-03-30"},{"lineNumber":405,"author":{"gitId":"hiongkaihan"},"content":"       Diagnosis: flu","lastModifiedDate":"2021-03-30"},{"lineNumber":406,"author":{"gitId":"hiongkaihan"},"content":"       Prescription: panadol, cetirizine","lastModifiedDate":"2021-03-30"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":408,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":409,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":410,"author":{"gitId":"brandonfoong"},"content":"1. Viewing visit records","lastModifiedDate":"2021-03-30"},{"lineNumber":411,"author":{"gitId":"brandonfoong"},"content":"    1. Prerequisite: Patient\u0027s records have already been loaded.","lastModifiedDate":"2021-03-29"},{"lineNumber":412,"author":{"gitId":"brandonfoong"},"content":"    1. Test case: `retrieve`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":413,"author":{"gitId":"hiongkaihan"},"content":"       Expected: Application shows details of all the patient\u0027s past visits:","lastModifiedDate":"2021-03-30"},{"lineNumber":414,"author":{"gitId":"hiongkaihan"},"content":"        ```","lastModifiedDate":"2021-03-30"},{"lineNumber":415,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":416,"author":{"gitId":"hiongkaihan"},"content":"       Here are S1234567D\u0027s records:","lastModifiedDate":"2021-03-30"},{"lineNumber":417,"author":{"gitId":"hiongkaihan"},"content":"       30/03/2021:","lastModifiedDate":"2021-03-30"},{"lineNumber":418,"author":{"gitId":"hiongkaihan"},"content":"       Symptoms:","lastModifiedDate":"2021-03-30"},{"lineNumber":419,"author":{"gitId":"hiongkaihan"},"content":"           coughing, runny, fever","lastModifiedDate":"2021-03-30"},{"lineNumber":420,"author":{"gitId":"hiongkaihan"},"content":"       Diagnoses:","lastModifiedDate":"2021-03-30"},{"lineNumber":421,"author":{"gitId":"hiongkaihan"},"content":"           flu","lastModifiedDate":"2021-03-30"},{"lineNumber":422,"author":{"gitId":"hiongkaihan"},"content":"       Prescriptions:","lastModifiedDate":"2021-03-30"},{"lineNumber":423,"author":{"gitId":"hiongkaihan"},"content":"           panadol, cetirizine","lastModifiedDate":"2021-03-30"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":425,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":426,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":427,"author":{"gitId":"hiongkaihan"},"content":"1. Deleting visit records","lastModifiedDate":"2021-03-30"},{"lineNumber":428,"author":{"gitId":"hiongkaihan"},"content":"    1. Prerequisite: Patient\u0027s records have already been loaded.","lastModifiedDate":"2021-03-30"},{"lineNumber":429,"author":{"gitId":"hiongkaihan"},"content":"    1. Test case: `delete /r 30/03/2021`\\","lastModifiedDate":"2021-03-30"},{"lineNumber":430,"author":{"gitId":"hiongkaihan"},"content":"       Expected: Application deletes record dates 30/03/2021 and shows:","lastModifiedDate":"2021-03-30"},{"lineNumber":431,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":432,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":433,"author":{"gitId":"hiongkaihan"},"content":"       Record for 2021-03-30 has been deleted!","lastModifiedDate":"2021-03-30"},{"lineNumber":434,"author":{"gitId":"hiongkaihan"},"content":"       ----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":435,"author":{"gitId":"hiongkaihan"},"content":"       ```","lastModifiedDate":"2021-03-30"},{"lineNumber":436,"author":{"gitId":"brandonfoong"},"content":"       ","lastModifiedDate":"2021-03-29"},{"lineNumber":437,"author":{"gitId":"brandonfoong"},"content":"### Saving Data","lastModifiedDate":"2021-03-29"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":439,"author":{"gitId":"brandonfoong"},"content":"1. Missing data files","lastModifiedDate":"2021-03-29"},{"lineNumber":440,"author":{"gitId":"brandonfoong"},"content":"    1. Delete the file `pm.save`, which should be in the same folder as `tp.jar`.","lastModifiedDate":"2021-03-30"},{"lineNumber":441,"author":{"gitId":"brandonfoong"},"content":"    1. Launch the app with `java -jar tp.jar`.","lastModifiedDate":"2021-03-30"},{"lineNumber":442,"author":{"gitId":"brandonfoong"},"content":"    1. Expected: Application should start up without any data.","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Emkay16":6,"fsgmhoward":146,"-":25,"brandonfoong":165,"hiongkaihan":76,"leowxx":24}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"# Patient Manager","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for _general practitioners_ (GP)","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"who work in clinics to manage their patient list. This includes a recording/retrieval of","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below.","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"Emkay16":6,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"# Patient Manager User Guide","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for **_general practitioners_** (GP)","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"who work in government polyclinics to manage their patient list. This includes a recording/retrieval of","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below.","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- TODO: Explain How to use this guide --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"## Table of Contents","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- TODO: Description --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"* [User Guide Information](#user-guide-information)","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"* [About Command Input](#about-command-input)","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"  * [Spacing](#spacing)","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"  * [Order of Arguments](#order-of-arguments)","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"* [Features](#features)","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"  * [Print a help message: `help`](#print-a-help-message-help)","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"  * [Adding a patient: `add`](#adding-a-patient-add)","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"  * [Deleting a patient or a patient\u0027s consultation details: `delete`](#deleting-a-patient-or-a-patients-consultation-details-delete)","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"  * [Listing all patients: `list`](#listing-all-patients-list)","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"  * [Loading a patient\u0027s medical records: `load`](#loading-a-patients-medical-records-load)","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"  * [Displaying the current loaded patient: `current`](#displaying-the-current-loaded-patient-current)","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"  * [Recording a patient\u0027s consultation details: `record`](#recording-a-patients-consultation-details-record)","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"  * [Retrieving a patient\u0027s consultation details: `retrieve`](#retrieving-a-patients-consultation-details-retrieve)","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"  * [Exiting the program: `exit`](#exiting-the-program-exit)","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"* [Frequently Asked Questions](#frequently-asked-questions)","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"## User Guide Information","lastModifiedDate":"2021-04-02"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"This user guide explains how our application works and acts as a guide on how to use our application. It","lastModifiedDate":"2021-04-02"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"also explains how inputs are registered and the correct ways of inputting information. Finally, the user guide also","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"includes a summary of all the commands and instructions on how to use each command.","lastModifiedDate":"2021-04-02"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"The user guide includes symbols such as:","lastModifiedDate":"2021-04-02"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"❗ The exclamation mark highlights important things to take note of.","lastModifiedDate":"2021-04-02"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"---","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"1. Ensure that you have Java 11 installed on your local computer. If you do not have the correct version","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"   of Java installed, `Java 11` can be downloaded from","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"   [here](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html). \\","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"Emkay16"},"content":"   You can check the version of Java installed on your local computer by entering `java -version` into","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"   your console of choice.","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"1. Obtain a copy of the latest version of the Patient Manager (tp.jar) from","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"   [here](https://github.com/AY2021S2-CS2113T-W09-4/tp/releases) and place it in an empty folder.","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"1. Open a terminal/command line (cmd)/powershell. A Windows 10 OS\u0027 screenshot is here:\\","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"   \\","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"   ![PowerShell](./images/WindowsPowerShell.png)","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"1. Execute `java -jar tp.jar` to start Patient Manager.","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"1. Once the welcome message appears, simply type in a command (e.g. [`help`](#print-a-help-message-help)) and hit ","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"Emkay16"},"content":"   `ENTER` at the end.","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"1. Refer to the [Features section](#features) below for more detailed explanations and usage of the available commands.","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"## About Command Input","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- TODO: Too Technical --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"### Spacing","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Emkay16"},"content":"Due to the design of our command parser, we are able to understand your input for any number of spaces between words ","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"Emkay16"},"content":"(even before the command itself). So all these commands are actually understandable and will be treated the same:","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"record 01/05/2021 /s coughing, fever","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"record   01/05/2021  /s       coughing, fever","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"record 01/05/2021  /s   coughing,       fever","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"      record 01/05/2021 /s coughing, fever","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"❗ This is important: treating all these four the same means any number of spaces in between words will only be","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Emkay16"},"content":"considered as **ONE**. Take a look at the third input. Despite there are multiple spaces between `coughing,` and ","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Emkay16"},"content":"`fever`, it will go into the database as `coughing, fever` - same as every other lines do.","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"### Order of Arguments","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Emkay16"},"content":"Words or characters starts with `/` mark the beginning of an argument. ","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Emkay16"},"content":"An argument block continues until the other one is found.","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"For example, `record 01/05/2021 /s coughing, fever /d flu` has two argument blocks - `/s coughing, fever` and `/d flu`.","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"The sequence of these two arguments blocks would not affect the result of the command. These two are equivalent:","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"record 01/05/2021 /s coughing, fever /d flu","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"record 01/05/2021 /d flu /s coughing, fever","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Emkay16"},"content":"However, we would still suggest you to input it using the sequence given in the following section. ","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"Emkay16"},"content":"This can prevent you from getting confused about the meaning of each argument.","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"\u003e ❗ Notes about the command format:","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"\u003e - Words in `UPPER_CASE` are parameters supplied by the user.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"e.g. in `add IC_NUMBER`, `IC_NUMBER` is a parameter that has to be specified.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"(sample command: `add S1234567D`)","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"\u003e ","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"\u003e ","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"\u003e - Parameters in square brackets are optional.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"e.g. for the `record [DATE] [/s SYMPTOM] [/d DIAGNOSIS] [/p PRESCRIPTION]` command,","lastModifiedDate":"2021-03-26"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"both `record 26/03/2021 /s coughing` and `record /s fever /p panadol` are valid commands.","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"\u003e - Parameters with `...` allow multiple parameters (including zero) to be specified.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"e.g. for `help [OPTIONAL_COMMAND]...` both `help` and `help add delete` are valid commands.","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"\u003e - Parameters can be given in any order.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"e.g. if a command specifies `/s SYMPTOMS /p PRESCTIPTION` as its parameters,","lastModifiedDate":"2021-03-26"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"`/p PRESCTIPTION /s SYMPTOMS` is also acceptable.","lastModifiedDate":"2021-03-26"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"\u003e - If a parameter is expected only once in the command, but you specify it multiple times, only the last occurrence of","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"the parameter will be taken.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":"e.g. if you specify `/s coughing /s fever`, only `/s fever` will be taken.","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"\u003e - Extraneous parameters for commands that do not take in parameters (such as `list` and `exit`) will be ignored.\\","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"e.g. if the command given is `list 123`, it will be interpreted as `list`.","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"\u003e - Dates must be specified in the format `dd/MM/yyyy`, for example, `05/03/2021`. All dates given must be valid,","lastModifiedDate":"2021-03-26"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"according to the rules of the [Gregorian Calendar](https://en.wikipedia.org/wiki/Gregorian_calendar).","lastModifiedDate":"2021-03-26"},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":136,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- TODO: Order | explain why help command is the 1st --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"Emkay16"},"content":"### Print a help message: `help`","lastModifiedDate":"2021-03-19"},{"lineNumber":138,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"Emkay16"},"content":"If you need help at any point in time, you may use the `help` command. \\","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"Emkay16"},"content":"This prints out the help message with a brief explanation of the available commands. If one or more","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"Emkay16"},"content":"commands are provided as arguments, the info messages for the indicated commands will be printed.","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"Usage: `help [OPTIONAL_COMMAND]...`","lastModifiedDate":"2021-03-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":145,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":146,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":147,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":148,"author":{"gitId":"Emkay16"},"content":"help list load exit","lastModifiedDate":"2021-03-19"},{"lineNumber":149,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":151,"author":{"gitId":"Emkay16"},"content":"Expected output:","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"Emkay16"},"content":"Show the list of all patients","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"Emkay16"},"content":"Usage: list","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"Emkay16"},"content":"Select a specified patient to add and retrieve records","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"Emkay16"},"content":"Command prefix: load","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"Emkay16"},"content":"Arguments(s): IC number","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"Emkay16"},"content":"Usage: load IC_NUMBER","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"Emkay16"},"content":"Example: load S1234567D","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"Emkay16"},"content":"Exit the program","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"Emkay16"},"content":"Usage: exit","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":169,"author":{"gitId":"Emkay16"},"content":"### Adding a patient: `add`","lastModifiedDate":"2021-03-19"},{"lineNumber":170,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":171,"author":{"gitId":"Emkay16"},"content":"Adds a patient to the list by entering their IC number so that consultation details for the patient can be recorded.","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"fsgmhoward"},"content":"\u003c!-- So that ..., This means that ... --\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":"Usage: `add IC_NUMBER`","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":177,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":178,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":179,"author":{"gitId":"fsgmhoward"},"content":"add S1234567D","lastModifiedDate":"2021-03-23"},{"lineNumber":180,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":182,"author":{"gitId":"Emkay16"},"content":"Expected output:","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"Emkay16"},"content":"Patient S1234567D has been added!","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"Emkay16"},"content":"### Deleting a patient or a patient\u0027s consultation details: `delete`","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"Emkay16"},"content":"Deletes a patient from the list or deletes a patient\u0027s consultation details for a specific date.","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"Emkay16"},"content":"The command to delete a record requires that a patient has been loaded with the","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"Emkay16"},"content":"[`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"Emkay16"},"content":"If no patient has been loaded, Patient Manager will print an error message.","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"Emkay16"},"content":"Usage: `delete [/p IC_NUMBER]`","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"Emkay16"},"content":"delete /p S1234567D","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"Emkay16"},"content":"Usage: `delete [/r DATE]`","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"Emkay16"},"content":"delete /r 26/03/2021","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"Emkay16"},"content":"### Listing all patients: `list`","lastModifiedDate":"2021-03-19"},{"lineNumber":213,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":214,"author":{"gitId":"Emkay16"},"content":"Shows a list of all patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":216,"author":{"gitId":"Emkay16"},"content":"Usage: `list`","lastModifiedDate":"2021-03-19"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":218,"author":{"gitId":"Emkay16"},"content":"Example output:","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"Emkay16"},"content":"List of patients (in alphanumeric order):","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"Emkay16"},"content":"1. S1234567D","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"Emkay16"},"content":"2. S7654321B","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"Emkay16"},"content":"### Loading a patient\u0027s medical records: `load`","lastModifiedDate":"2021-03-19"},{"lineNumber":229,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":230,"author":{"gitId":"Emkay16"},"content":"Finds the patient whose IC number matches the given search query and loads their medical records.","lastModifiedDate":"2021-03-19"},{"lineNumber":231,"author":{"gitId":"Emkay16"},"content":"If none of the patients\u0027 IC numbers match the search query, it will print an error message.","lastModifiedDate":"2021-03-19"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":233,"author":{"gitId":"brandonfoong"},"content":"Usage: `load IC_NUMBER`","lastModifiedDate":"2021-03-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":235,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":236,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":237,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":238,"author":{"gitId":"fsgmhoward"},"content":"load S1234567D","lastModifiedDate":"2021-03-23"},{"lineNumber":239,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":240,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":241,"author":{"gitId":"Emkay16"},"content":"Expected output:","lastModifiedDate":"2021-03-30"},{"lineNumber":242,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":243,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":244,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":245,"author":{"gitId":"Emkay16"},"content":"Patient S1234567D\u0027s data has been found and loaded.","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":247,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":248,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":249,"author":{"gitId":"Emkay16"},"content":"### Displaying the current loaded patient: `current`","lastModifiedDate":"2021-03-19"},{"lineNumber":250,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":251,"author":{"gitId":"Emkay16"},"content":"Displays the patient that has been loaded through the [`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-19"},{"lineNumber":252,"author":{"gitId":"Emkay16"},"content":"If no patient has been loaded, it will inform the user that there is no loaded patient.","lastModifiedDate":"2021-03-19"},{"lineNumber":253,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":254,"author":{"gitId":"Emkay16"},"content":"Usage: `current`","lastModifiedDate":"2021-03-19"},{"lineNumber":255,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":256,"author":{"gitId":"Emkay16"},"content":"Example output:","lastModifiedDate":"2021-03-30"},{"lineNumber":257,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":258,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":259,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":260,"author":{"gitId":"Emkay16"},"content":"The currently loaded patient\u0027s ID is S1234567D.","lastModifiedDate":"2021-03-30"},{"lineNumber":261,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":262,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":263,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":264,"author":{"gitId":"Emkay16"},"content":"### Recording a patient\u0027s consultation details: `record`","lastModifiedDate":"2021-03-19"},{"lineNumber":265,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":266,"author":{"gitId":"Emkay16"},"content":"Adds a patient\u0027s consultation details to the patient\u0027s records.","lastModifiedDate":"2021-03-19"},{"lineNumber":267,"author":{"gitId":"Emkay16"},"content":"This command requires that a patient has been loaded with the","lastModifiedDate":"2021-03-19"},{"lineNumber":268,"author":{"gitId":"Emkay16"},"content":"[`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-19"},{"lineNumber":269,"author":{"gitId":"brandonfoong"},"content":"If no patient has been loaded, Patient Manager will print an error message.","lastModifiedDate":"2021-03-26"},{"lineNumber":270,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":271,"author":{"gitId":"brandonfoong"},"content":"An optional `DATE` argument may be provided to modify previous visit records,","lastModifiedDate":"2021-03-26"},{"lineNumber":272,"author":{"gitId":"brandonfoong"},"content":"or to create a new record with the specified date. If the `DATE` parameter is","lastModifiedDate":"2021-03-26"},{"lineNumber":273,"author":{"gitId":"brandonfoong"},"content":"not specified, Patient Manager will execute the command with the current system date.","lastModifiedDate":"2021-03-26"},{"lineNumber":274,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":275,"author":{"gitId":"brandonfoong"},"content":"Usage: `record [DATE] [/s SYMPTOM] [/d DIAGNOSIS] [/p PRESCRIPTION]`","lastModifiedDate":"2021-03-26"},{"lineNumber":276,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":277,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":278,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":279,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":280,"author":{"gitId":"brandonfoong"},"content":"record 26/03/2021 /s fever and slight cough","lastModifiedDate":"2021-03-26"},{"lineNumber":281,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":282,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":283,"author":{"gitId":"Emkay16"},"content":"Expected output:","lastModifiedDate":"2021-03-30"},{"lineNumber":284,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":285,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":286,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":287,"author":{"gitId":"Emkay16"},"content":"Added new record to patient S1234567D:","lastModifiedDate":"2021-03-30"},{"lineNumber":288,"author":{"gitId":"Emkay16"},"content":"Symptom: fever and slight cough","lastModifiedDate":"2021-03-30"},{"lineNumber":289,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":290,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":291,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":292,"author":{"gitId":"Emkay16"},"content":"### Retrieving a patient\u0027s consultation details: `retrieve`","lastModifiedDate":"2021-03-19"},{"lineNumber":293,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":294,"author":{"gitId":"Emkay16"},"content":"Retrieves all consultation details of a patient.","lastModifiedDate":"2021-03-19"},{"lineNumber":295,"author":{"gitId":"Emkay16"},"content":"This command requires that a patient has been loaded with the","lastModifiedDate":"2021-03-19"},{"lineNumber":296,"author":{"gitId":"Emkay16"},"content":"[`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-19"},{"lineNumber":297,"author":{"gitId":"brandonfoong"},"content":"If no patient has been loaded, Patient Manager will print an","lastModifiedDate":"2021-03-26"},{"lineNumber":298,"author":{"gitId":"brandonfoong"},"content":"error message.","lastModifiedDate":"2021-03-26"},{"lineNumber":299,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":300,"author":{"gitId":"Emkay16"},"content":"Usage: `retrieve`","lastModifiedDate":"2021-03-19"},{"lineNumber":301,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":302,"author":{"gitId":"Emkay16"},"content":"Example output:","lastModifiedDate":"2021-03-30"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":304,"author":{"gitId":"hiongkaihan"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":305,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":306,"author":{"gitId":"Emkay16"},"content":"Here are S1234567D\u0027s records:","lastModifiedDate":"2021-03-30"},{"lineNumber":307,"author":{"gitId":"Emkay16"},"content":"30/03/2021:","lastModifiedDate":"2021-03-30"},{"lineNumber":308,"author":{"gitId":"Emkay16"},"content":"Symptoms:","lastModifiedDate":"2021-03-30"},{"lineNumber":309,"author":{"gitId":"Emkay16"},"content":"\thead pain, dizziness","lastModifiedDate":"2021-03-30"},{"lineNumber":310,"author":{"gitId":"Emkay16"},"content":"Diagnoses:","lastModifiedDate":"2021-03-30"},{"lineNumber":311,"author":{"gitId":"Emkay16"},"content":"\theat stroke","lastModifiedDate":"2021-03-30"},{"lineNumber":312,"author":{"gitId":"Emkay16"},"content":"Prescriptions:","lastModifiedDate":"2021-03-30"},{"lineNumber":313,"author":{"gitId":"Emkay16"},"content":"\tcooling packs, medicine","lastModifiedDate":"2021-03-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":315,"author":{"gitId":"Emkay16"},"content":"31/03/2021:","lastModifiedDate":"2021-03-30"},{"lineNumber":316,"author":{"gitId":"Emkay16"},"content":"Symptoms:","lastModifiedDate":"2021-03-30"},{"lineNumber":317,"author":{"gitId":"Emkay16"},"content":"\tfainting","lastModifiedDate":"2021-03-30"},{"lineNumber":318,"author":{"gitId":"Emkay16"},"content":"Diagnoses:","lastModifiedDate":"2021-03-30"},{"lineNumber":319,"author":{"gitId":"Emkay16"},"content":"\tsevere heat stroke","lastModifiedDate":"2021-03-30"},{"lineNumber":320,"author":{"gitId":"Emkay16"},"content":"Prescriptions:","lastModifiedDate":"2021-03-30"},{"lineNumber":321,"author":{"gitId":"Emkay16"},"content":"\treferral to hospital","lastModifiedDate":"2021-03-30"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":323,"author":{"gitId":"Emkay16"},"content":"----------------------------------------------------------------------","lastModifiedDate":"2021-03-30"},{"lineNumber":324,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-30"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":326,"author":{"gitId":"Emkay16"},"content":"### Exiting the program: `exit`","lastModifiedDate":"2021-03-19"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":328,"author":{"gitId":"Emkay16"},"content":"Exits the program","lastModifiedDate":"2021-03-19"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":330,"author":{"gitId":"Emkay16"},"content":"Usage: `exit`","lastModifiedDate":"2021-03-19"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":332,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":334,"author":{"gitId":"Emkay16"},"content":"## Frequently Asked Questions","lastModifiedDate":"2021-03-30"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":336,"author":{"gitId":"Emkay16"},"content":"**Q**: Can I transfer the data to a different device? \\","lastModifiedDate":"2021-03-30"},{"lineNumber":337,"author":{"gitId":"Emkay16"},"content":"**A**: Yes, simply copy the `pm` folder that is found in the same folder as `tp.jar` from the original device","lastModifiedDate":"2021-03-30"},{"lineNumber":338,"author":{"gitId":"Emkay16"},"content":"and place it in the folder `tp.jar` is found in on the new device.","lastModifiedDate":"2021-03-30"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":340,"author":{"gitId":"Emkay16"},"content":"**Q**: Will I have to manually save? \\","lastModifiedDate":"2021-03-30"},{"lineNumber":341,"author":{"gitId":"Emkay16"},"content":"**A**: No, the data is saved automatically after every command that modifies the data.","lastModifiedDate":"2021-03-30"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":343,"author":{"gitId":"Emkay16"},"content":"**Q**: Can I edit the data file? \\","lastModifiedDate":"2021-03-30"},{"lineNumber":344,"author":{"gitId":"Emkay16"},"content":"**A**: Patient Manager data is saved as a text file. While it is possible to edit the data file, it is not","lastModifiedDate":"2021-03-30"},{"lineNumber":345,"author":{"gitId":"Emkay16"},"content":"recommended to do so as invalid formats in the data file will result in errors.","lastModifiedDate":"2021-03-30"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":347,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-30"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":349,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":351,"author":{"gitId":"Emkay16"},"content":"Listed below are all currently implemented commands in alphabetical order.\\","lastModifiedDate":"2021-03-19"},{"lineNumber":352,"author":{"gitId":"Emkay16"},"content":"Click on the commands to navigate to specific feature details.","lastModifiedDate":"2021-03-19"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":354,"author":{"gitId":"Emkay16"},"content":"| Command                                                                 | Usage                              |","lastModifiedDate":"2021-03-19"},{"lineNumber":355,"author":{"gitId":"hiongkaihan"},"content":"|-------------------------------------------------------------------------|------------------------------------|","lastModifiedDate":"2021-03-30"},{"lineNumber":356,"author":{"gitId":"brandonfoong"},"content":"| [add](#adding-a-patient-add)                                            | `add IC_NUMBER`                    |","lastModifiedDate":"2021-03-26"},{"lineNumber":357,"author":{"gitId":"Emkay16"},"content":"| [current](#displaying-the-current-loaded-patient-current)               | `current`                          |","lastModifiedDate":"2021-03-19"},{"lineNumber":358,"author":{"gitId":"hiongkaihan"},"content":"| [delete](#deleting-a-patient-or-a-patients-consultation-details-delete) | `delete [/p IC_NUMBER]  [/r DATE]` |","lastModifiedDate":"2021-04-02"},{"lineNumber":359,"author":{"gitId":"Emkay16"},"content":"| [exit](#exiting-the-program-exit)                                       | `exit`                             |","lastModifiedDate":"2021-03-19"},{"lineNumber":360,"author":{"gitId":"brandonfoong"},"content":"| [help](#print-a-help-message-help)                                      | `help [OPTIONAL_ARGUMENTS]...`     |","lastModifiedDate":"2021-03-26"},{"lineNumber":361,"author":{"gitId":"Emkay16"},"content":"| [list](#listing-all-patients-list)                                      | `list`                             |","lastModifiedDate":"2021-03-19"},{"lineNumber":362,"author":{"gitId":"brandonfoong"},"content":"| [load](#loading-a-patients-medical-records-load)                        | `load IC_NUMBER`                   |","lastModifiedDate":"2021-03-26"},{"lineNumber":363,"author":{"gitId":"brandonfoong"},"content":"| [record](#recording-a-patients-consultation-details-record)             | `record [DATE] [/s SYMPTOM] [/d DIAGNOSIS] [/p PRESCRIPTION]`|","lastModifiedDate":"2021-03-26"},{"lineNumber":364,"author":{"gitId":"Emkay16"},"content":"| [retrieve](#retrieving-a-patients-consultation-details-retrieve)        | `retrieve`                         |","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Emkay16":216,"fsgmhoward":46,"-":38,"brandonfoong":50,"hiongkaihan":14}},{"path":"src/main/java/seedu/duke/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"public class Constants {","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"    public static final String ADD_INFO_MESSAGE \u003d \"Add a patient to the list\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: add\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"            + \"Argument(s): IC number\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"            + \"Usage: add IC_NUMBER\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"            + \"Example: add S1234567D\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"    public static final String DELETE_INFO_MESSAGE \u003d \"Delete a patient from the list or delete a patient\u0027s \"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"            + \"consultation details for a specific date\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: delete\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"            + \"Argument(s): IC number or date\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: delete [/p IC_NUMBER]\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"            + \"Example: delete /p S1234567D\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: delete [/r DATE]\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"            + \"Example: delete /r 26/03/2021\\n\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"    public static final String LIST_INFO_MESSAGE \u003d \"Show the list of all patients\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: list\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"    public static final String LOAD_INFO_MESSAGE \u003d \"Select a specified patient to add and retrieve records\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: load\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"            + \"Argument(s): IC number\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"            + \"Usage: load IC_NUMBER\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            + \"Example: load S1234567D\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"    public static final String RECORD_CONSULTATION_INFO_MESSAGE \u003d \"Add a consultation record to the selected patient\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: record\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"            + \"Arguments(s): consultation details, symptom, diagnosis, prescription\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"            + \"Usage: record [CONSULTATION_DATE] [/s SYMPTOM] [/d DIAGNOSIS] [/p PRESCRIPTION]\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"            + \"Example: record /s fever\\n\";","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"    public static final String RETRIEVE_INFO_MESSAGE \u003d \"Retrieve past consultation record from the selected patient\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: retrieve\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CURRENT_INFO_MESSAGE \u003d \"Print out the current patient being loaded.\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            + \"Usage: current\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"    public static final String HELP_INFO_MESSAGE \u003d \"Display information about all commands or selected commands only\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: help\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"            + \"Argument(s): commands\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"            + \"Usage: help [OPTIONAL_COMMANDS]\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"            + \"Example: help list add\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_INFO_MESSAGE \u003d \"Exit the program\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: exit\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"Invalid command: %s\";","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_MESSAGE \u003d \"Goodbye, we hope to see you again!\";","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"leowxx"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Welcome to the Patient Manager.\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"leowxx"},"content":"    public static final String INPUT_PROMPT \u003d \"Please input a command: \";","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    public static final String EMPTY_LIST_MESSAGE \u003d \"List is currently empty!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LONG_LINE \u003d \"----------------------------------------------------------------------\";","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    // Exception messages","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    public static final String EXCEPTION_INDENT \u003d \"\\t\";","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT \u003d \"Input command and/or arguments are invalid\";","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_EMPTY_STRING \u003d \"Please enter something for me to process!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_UNKNOWN_COMMAND \u003d \"Invalid command is provided!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_INVALID_NRIC \u003d \"Please key in a valid NRIC number!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_PATIENT_EXISTED \u003d \"Patient already exists!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_NO_PATIENT_LOADED \u003d \"No patient loaded!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"    public static final String INVALID_INPUT_EMPTY_DESCRIPTION \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            \"Please provide more details about the patient\u0027s visit!\"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"                    + System.lineSeparator() + EXCEPTION_INDENT","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"                    + \"(At least one symptom, diagnosis or prescription must be specified)\";","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INVALID_INPUT_INVALID_DATE \u003d \"Please provide a valid date (format: dd/MM/yyyy).\";","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"    public static final String INVALID_INPUT_UNKNOWN_DELETE_ARGUMENT \u003d \"Kindly use /p or /r to indicate patient or \"","lastModifiedDate":"2021-04-02"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"            + \"record, refer to help for more clarification!\";","lastModifiedDate":"2021-04-02"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"    public static final String INVALID_INPUT_PATIENT_NOT_FOUND \u003d \"Patient does not exist!\";","lastModifiedDate":"2021-04-02"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"    public static final String INVALID_INPUT_END_OF_FILE \u003d \"End of file reached, exiting application.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    public static final String STORAGE \u003d \"Something wrong happen when trying to save/load data\";","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"    public static final String STORAGE_FILE_CREATION_FAIL \u003d \"Failed to create a save file.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"    public static final String STORAGE_FILE_WRITE_FAIL \u003d \"Failed to write content to the save file.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"    public static final String STORAGE_FILE_NOT_FOUND \u003d \"Save file does not exist so we use an empty patient list!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"    public static final String UNKNOWN \u003d \"We have encountered an unknown error\";","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"hiongkaihan"},"content":"    // Number constants","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"hiongkaihan"},"content":"    public static final int ID_NUMBER_OF_CHARACTERS \u003d 9;","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"hiongkaihan"},"content":"    public static final int INDEX_OF_FIRST_CHARACTER \u003d 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"hiongkaihan"},"content":"    public static final int INDEX_OF_LAST_CHARACTER \u003d 8;","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"hiongkaihan"},"content":"    public static final int CHECKSUM_MOD \u003d 11;","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"hiongkaihan"},"content":"    public static final int CHECKSUM_DIGIT \u003d 4;","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"hiongkaihan"},"content":"    public static final int FIRST_DIGIT \u003d 1;","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"hiongkaihan"},"content":"    public static final int SECOND_DIGIT \u003d 2;","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"hiongkaihan"},"content":"    public static final int THIRD_DIGIT \u003d 3;","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"hiongkaihan"},"content":"    public static final int FOURTH_DIGIT \u003d 4;","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"hiongkaihan"},"content":"    public static final int FIFTH_DIGIT \u003d 5;","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"    public static final int SIXTH_DIGIT \u003d 6;","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"    public static final int LAST_DIGIT \u003d 7;","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"    // Keys for the argument HashMap","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"    public static final String PAYLOAD_KEY \u003d \"payload\";","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"hiongkaihan"},"content":"    public static final String PATIENT_KEY \u003d \"p\";","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hiongkaihan"},"content":"    public static final String RECORD_KEY \u003d \"r\";","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"    public static final String SYMPTOM_KEY \u003d \"s\";","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"    public static final String DIAGNOSIS_KEY \u003d \"d\";","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"    public static final String PRESCRIPTION_KEY \u003d \"p\";","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"    // Date format","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"    public static final String DATE_PATTERN \u003d \"dd/MM/yyyy\";","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"    // Class path for command classes","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    public static final String COMMAND_CLASS_PREFIX \u003d \"seedu.duke.command.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"leowxx"},"content":"    // Delimiters for storage class","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Emkay16"},"content":"    public static final String ID_DELIMITER \u003d \"~~\";","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"leowxx"},"content":"    public static final String DATE_DELIMITER \u003d \"``\";","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"Emkay16"},"content":"    public static final String SYMPTOM_DELIMITER \u003d \"%%\";","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"leowxx"},"content":"    public static final String DIAGNOSIS_DELIMITER \u003d \"##\";","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"leowxx"},"content":"    public static final String PRESCRIPTION_DELIMITER \u003d \"@@\";","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Emkay16"},"content":"    public static final String RECORDS_DELIMITER \u003d \"!R!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"Emkay16"},"content":"    public static final String DETAILS_DELIMITER \u003d \"!D!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"    public static final String STORAGE_DEFAULT_PATH \u003d \"./pm.save\";","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"Emkay16":35,"fsgmhoward":29,"brandonfoong":22,"hiongkaihan":20,"leowxx":9}},{"path":"src/main/java/seedu/duke/Data.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" * This class (instance) contains all data of the running application. This","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" * includes patient list and miscellaneous config.","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public class Data {","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    private Storage storage;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    private SortedMap\u003cString, Patient\u003e patients;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * This is the patient that is currently being selected. Command sub-classes can read/write","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * this attribute directly.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * Before modification, if not loaded, it needs to call loadCurrentPatient(id) to load the patient.","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * After modification, saveCurrentPatient() needs to be called to write back any changes on this attribute.","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public Patient currentPatient;","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes an empty data instance with no storage instance.","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * This can be used for testing purposes.","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    public Data() {","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        this(null);","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes an empty data instance with a storage instance.","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"     * @param storage an instance of the storage class","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    public Data(Storage storage) {","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        this(storage, new TreeMap\u003c\u003e());","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes a data instance with an existing patient list.","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     * Storage instance must be specified if want to use an existing list of patients. However it can be set","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"     * to null (i.e. new Data(null, existingPatients)) for testing purposes.","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * @param storage an instance of the storage class","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * @param patients the patient list","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    public Data(Storage storage, SortedMap\u003cString, Patient\u003e patients) {","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d null;","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves the full hashmap of patients.","lastModifiedDate":"2021-03-07"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient hashmap","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    public SortedMap\u003cString, Patient\u003e getPatients() {","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        return patients;","lastModifiedDate":"2021-03-07"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves a single patient bases on its unique identifier.","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be retrieved","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient instance associated with this ID if found, otherwise null is returned","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"    public Patient getPatient(String id) {","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"        return patients.get(id);","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"     * Add or update a new patient to the hashmap of this database.","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"     * @param patient the patient to be added/updated","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"    public void setPatient(Patient patient) {","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(patient.getID(), patient);","lastModifiedDate":"2021-03-07"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"     * This loads a patient to the currentPatient attribute.","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"     * Take note that currentPatient can still be null if there is no patients with this id in the hashmap.","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be loaded","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"    public void loadCurrentPatient(String id) {","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d getPatient(id);","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"     * This removes a patient from the hashmap of this database.","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"hiongkaihan"},"content":"     * @param id unique identifier of the patient to be loaded","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"hiongkaihan"},"content":"    public void deletePatient(String id) {","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"hiongkaihan"},"content":"        patients.remove(id);","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"     * This saves the patient in currentPatient attribute back to the hashmap.","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"    public void saveCurrentPatient() {","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"        setPatient(currentPatient);","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"     * This saves current patient list into the file using the storage instance.","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"    public void saveFile() throws StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"        // If storage is null, we just silently ignore it (for testing)","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"        if (storage !\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"            storage.save(patients);","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"fsgmhoward":104,"hiongkaihan":8}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.lang.reflect.Constructor;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.UnknownException;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/Parser.java */","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":" * This is the parser for parsing the line of command to tokens and construct the command class.","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"public class Parser {","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * This is the delimiter for string join.","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * default value is a single whitespace (for string split, it is any number of whitespaces)","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DELIMITER \u003d \" \";","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the Parser class.","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui   Ui instance which will be passed to the command instances","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Data instance which will be passed to the command instances","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Parser(Ui ui, Data data) {","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * Parse a line of command, put it into a hash map, then construct a command instance","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Segments are splitted by \u0027/\u0027","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * Example: commandX some_description /optY Y_description Y_description_1 /optZ Z_description","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * Output argument hashmap:","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     * |   key   |             value             |","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"     * |---------|-------------------------------|","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * | command | commandX                      |","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * | payload | some_description              |","lastModifiedDate":"2021-03-06"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * | optY    | Y_description Y_description_1 |","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * | optZ    | Z_description                 |","lastModifiedDate":"2021-03-06"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * Then, ui, tasks and this argument hashmap will be passed to initialize a command class.","lastModifiedDate":"2021-03-06"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     * The command class is determined by the 1st token of the command string. For example, for a command string \u0027find\u0027,","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"     * command class \u0027duke.command.FindCommand\u0027 will be initialized.","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * @param fullCommand The line of command to be parsed","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @return A Command instance which is ready to be executed","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     * @see Command","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"    public Command parse(String fullCommand) throws InvalidInputException, UnknownException {","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        String[] tokens \u003d fullCommand.split(\"\\\\s+\");","lastModifiedDate":"2021-03-06"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        // If tokenized command returns an empty array, raise an exception","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        if (tokens.length \u003d\u003d 0) {","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"            throw new InvalidInputException(InvalidInputException.Type.EMPTY_STRING);","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"        // If first token (command) is empty, there are empty spaces typed in at the front - so we remove it","lastModifiedDate":"2021-03-06"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens[0].isEmpty()) {","lastModifiedDate":"2021-03-06"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"            tokens \u003d Arrays.copyOfRange(tokens, 1, tokens.length);","lastModifiedDate":"2021-03-06"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens.length \u003d\u003d 0) {","lastModifiedDate":"2021-03-06"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InvalidInputException.Type.EMPTY_STRING);","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(\"command\", tokens[0]);","lastModifiedDate":"2021-03-06"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"        // Default key is \"payload\"","lastModifiedDate":"2021-03-06"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"        String key \u003d \"payload\";","lastModifiedDate":"2021-03-06"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"        ArrayList\u003cString\u003e values \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-06"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 1; i \u003c tokens.length; ++i) {","lastModifiedDate":"2021-03-06"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"            String token \u003d tokens[i];","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"            // Check whether this token is a new key","lastModifiedDate":"2021-03-06"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"            if (!token.isEmpty() \u0026\u0026 token.charAt(0) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"                // If it is, save current value into the map and start a new k-v pair","lastModifiedDate":"2021-03-06"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"                arguments.put(key, String.join(DELIMITER, values));","lastModifiedDate":"2021-03-06"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"                key \u003d token.substring(1);","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"                values.clear();","lastModifiedDate":"2021-03-06"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"            } else {","lastModifiedDate":"2021-03-06"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"                // If not, append this token to the end of the value","lastModifiedDate":"2021-03-06"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"                values.add(token);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-06"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        // Store the last k-v pair","lastModifiedDate":"2021-03-06"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        // Store even when `values` is empty, as that indicates an empty string","lastModifiedDate":"2021-03-06"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(key, String.join(DELIMITER, values));","lastModifiedDate":"2021-03-06"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a respective class from the command (by capitalize first character)","lastModifiedDate":"2021-03-06"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d tokens[0] + \"Command\";","lastModifiedDate":"2021-03-06"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d className.substring(0, 1).toUpperCase() + className.substring(1);","lastModifiedDate":"2021-03-06"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d Constants.COMMAND_CLASS_PREFIX + className;","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"        try {","lastModifiedDate":"2021-03-06"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            Class\u003c?\u003e cls \u003d Class.forName(className);","lastModifiedDate":"2021-03-06"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"            Constructor\u003c?\u003e constructor \u003d cls.getDeclaredConstructor(Ui.class, Data.class, HashMap.class);","lastModifiedDate":"2021-03-06"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d constructor.newInstance(ui, data, arguments);","lastModifiedDate":"2021-03-06"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"            return (Command) obj;","lastModifiedDate":"2021-03-06"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"        } catch (ClassNotFoundException e) {","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"            // *Command class cannot be found!","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InvalidInputException.Type.UNKNOWN_COMMAND, e);","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-06"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"            // Some other weird error occurred here","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"            throw new UnknownException(e);","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":99,"brandonfoong":14}},{"path":"src/main/java/seedu/duke/PatientManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * Main class of the application, where the entry point is.","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"public class PatientManager {","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    private Data data;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    private Ui ui;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    private Parser parser;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes all resources for the program.","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    private PatientManager(String filePath) {","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        Storage storage;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        if (filePath \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        ui.printMessage(\"Currently using save file: \" + storage.getFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            data \u003d new Data(storage, storage.load());","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        } catch (StorageException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"            // This only happens when the storage file is not found - print a friendly message to inform user","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(e.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            data \u003d new Data(storage);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        parser \u003d new Parser(ui, data);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     * This is the actual program logic for the application.","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    private void run() {","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"leowxx"},"content":"        ui.printWelcome();","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        while (true) {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"            String fullCommand \u003d null;","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            try {","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"                fullCommand \u003d ui.readInput();","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"            } catch (InvalidInputException invalidInputException) {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"                ui.printException(invalidInputException);","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"                break;","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"            if (fullCommand \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"                // Reached EOF from text ui tests but no exit command is executed - we still exit","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"            ui.printLine();","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"            try {","lastModifiedDate":"2021-03-06"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"                Command cmd \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"                cmd.execute();","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"                if (cmd.isExit()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"                    break;","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"                }","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-03-06"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"                ui.printException(e);","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            } finally {","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"                ui.printLine();","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        // Program Exits, do some cleaning","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        ui.closeScanner();","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"     * Main entry-point for the PatientManager application.","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"        PatientManager pm \u003d new PatientManager(args.length \u003e 0 ? args[0] : null);","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"        pm.run();","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Emkay16":3,"fsgmhoward":60,"-":7,"brandonfoong":9,"leowxx":1}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"import java.io.File;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":" * This class handles the loading and saving of data from/to a plaintext file on","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":" * the hard drive.","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"public class Storage {","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    private String filePath;","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor without a parameter. Default path will be used.","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    public Storage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        this(Constants.STORAGE_DEFAULT_PATH);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"     * This is the constructor of the Storage class.","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"leowxx"},"content":"     * @param filePath A String of the path to the file that is used for saving/loading","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"leowxx"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"leowxx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"leowxx"},"content":"     * Saves a SortedMap of data into the file specified by filePath.","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"leowxx"},"content":"     * @param patientData The data to be written to file","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * @throws StorageException when unusual events happen during file saving","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    public void save(SortedMap\u003cString, Patient\u003e patientData) throws StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"leowxx"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"leowxx"},"content":"            File inFile \u003d new File(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"leowxx"},"content":"            if (!inFile.exists()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"leowxx"},"content":"                inFile.createNewFile();","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"leowxx"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"leowxx"},"content":"            FileWriter fileWriter \u003d new FileWriter(inFile.getAbsolutePath(), false);","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"leowxx"},"content":"            StringBuffer message \u003d new StringBuffer();","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"            Set\u003cMap.Entry\u003cString, Patient\u003e\u003e patientSet \u003d patientData.entrySet();","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"            Iterator\u003cMap.Entry\u003cString, Patient\u003e\u003e patientIterator \u003d patientSet.iterator();","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"leowxx"},"content":"            while (patientIterator.hasNext()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"                Map.Entry\u003cString, Patient\u003e m \u003d patientIterator.next();","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"leowxx"},"content":"                String id \u003d (String)m.getKey();","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"leowxx"},"content":"                Patient patient \u003d (Patient)m.getValue();","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"leowxx"},"content":"                String records \u003d convertRecordToString(patient);","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"leowxx"},"content":"                message.append(id + Constants.ID_DELIMITER + records + \"\\n\");","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"leowxx"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"leowxx"},"content":"            fileWriter.write(message.toString());","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"leowxx"},"content":"            fileWriter.close();","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"leowxx"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"            throw new StorageException(StorageException.Type.FILE_CREATION_FAIL, e);","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"            throw new StorageException(StorageException.Type.FILE_WRITE_FAIL, e);","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"leowxx"},"content":"     * Convert records in a patient object into a string, separated by delimiters.","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Emkay16"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"leowxx"},"content":"     * @param patient Patient object whose records will be converted","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"leowxx"},"content":"     * @return A string to be used by the save() method","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"leowxx"},"content":"    public String convertRecordToString(Patient patient) {","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"leowxx"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"leowxx"},"content":"        TreeMap\u003cLocalDate, Record\u003e records \u003d patient.getRecords();","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"leowxx"},"content":"        for (Map.Entry\u003cLocalDate, Record\u003e record : records.entrySet()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"leowxx"},"content":"            String localDate \u003d record.getKey().format(DateTimeFormatter.ofPattern(Constants.DATE_PATTERN));","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"leowxx"},"content":"            Record patientRecord \u003d record.getValue();","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"leowxx"},"content":"            stringBuilder.append(localDate + Constants.DATE_DELIMITER + patientRecord.printFileConsultationDetail());","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"leowxx"},"content":"            stringBuilder.append(Constants.RECORDS_DELIMITER);","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"leowxx"},"content":"        return (stringBuilder.toString());","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":98,"author":{"gitId":"leowxx"},"content":"    //@@author leowxx","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"leowxx"},"content":"     * Reads from the data file and converts the data into a format usable by Patient Manager.","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"leowxx"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"leowxx"},"content":"     * @return data used by Patient Manager","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"leowxx"},"content":"     * @throws StorageException when unusual events happen during file loading","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"leowxx"},"content":"    public SortedMap\u003cString, Patient\u003e load() throws StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"leowxx"},"content":"        SortedMap\u003cString, Patient\u003e data \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"leowxx"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"leowxx"},"content":"            File inFile \u003d new File(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"leowxx"},"content":"            // If inFile does not exist, FNF Exception will be triggered and captured below","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"leowxx"},"content":"            Scanner scanner \u003d new Scanner(inFile);","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"leowxx"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"leowxx"},"content":"                String[] retrievedPatientsData \u003d scanner.nextLine().split(Constants.ID_DELIMITER);","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"leowxx"},"content":"                String id \u003d retrievedPatientsData[0];","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"leowxx"},"content":"                Patient patient;","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"leowxx"},"content":"                if (retrievedPatientsData.length \u003e 1) {","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"leowxx"},"content":"                    patient \u003d new Patient(id, convertStringToRecords(retrievedPatientsData[1]));","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"leowxx"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"leowxx"},"content":"                    patient \u003d new Patient(id);","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"leowxx"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"leowxx"},"content":"                data.put(id, patient);","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"leowxx"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"leowxx"},"content":"            scanner.close();","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"leowxx"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"leowxx"},"content":"            throw new StorageException(StorageException.Type.FILE_NOT_FOUND, e);","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"leowxx"},"content":"        return data;","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"Emkay16"},"content":"    //@@author Emkay16","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"Emkay16"},"content":"     * Converts lines read from the data file into records used by Patient Manager.","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"Emkay16"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"Emkay16"},"content":"     * @param recordString line of text read from data file","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"Emkay16"},"content":"     * @return TreeMap of records converted from recordString","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"Emkay16"},"content":"    public TreeMap\u003cLocalDate, Record\u003e convertStringToRecords(String recordString) {","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"Emkay16"},"content":"        TreeMap\u003cLocalDate, Record\u003e records \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Emkay16"},"content":"        String[] recordsPresent \u003d recordString.split(Constants.RECORDS_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"Emkay16"},"content":"        for (String r : recordsPresent) {","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"Emkay16"},"content":"            String[] splitString \u003d r.split(Constants.DATE_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"Emkay16"},"content":"            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(Constants.DATE_PATTERN);","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"Emkay16"},"content":"            final LocalDate dt \u003d LocalDate.parse(splitString[0], dateTimeFormatter);","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"Emkay16"},"content":"            ArrayList\u003cString\u003e prescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"Emkay16"},"content":"            ArrayList\u003cString\u003e symptoms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"Emkay16"},"content":"            ArrayList\u003cString\u003e diagnoses \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"Emkay16"},"content":"            String[] symptomSplitString \u003d splitString[1].split(Constants.SYMPTOM_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"Emkay16"},"content":"            if (!symptomSplitString[0].isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"Emkay16"},"content":"                symptoms \u003d splitStringIntoArrayList(symptomSplitString[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Emkay16"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"Emkay16"},"content":"            String[] diagnosisSplitString \u003d symptomSplitString[1].split(Constants.DIAGNOSIS_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"Emkay16"},"content":"            if (!diagnosisSplitString[0].isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"Emkay16"},"content":"                diagnoses \u003d splitStringIntoArrayList(diagnosisSplitString[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"Emkay16"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"Emkay16"},"content":"            String[] prescriptionSplitString \u003d diagnosisSplitString[1].split(Constants.PRESCRIPTION_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"Emkay16"},"content":"            if (prescriptionSplitString.length \u003e 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"Emkay16"},"content":"                prescriptions \u003d splitStringIntoArrayList(prescriptionSplitString[0]);","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"Emkay16"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"Emkay16"},"content":"            Record record \u003d new Record(symptoms, diagnoses, prescriptions);","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"Emkay16"},"content":"            records.put(dt, record);","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"Emkay16"},"content":"        return records;","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"Emkay16"},"content":"    private ArrayList\u003cString\u003e splitStringIntoArrayList(String stringToSplit) {","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"Emkay16"},"content":"        String[] stringArray \u003d stringToSplit.split(Constants.DETAILS_DELIMITER);","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"Emkay16"},"content":"        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":176,"author":{"gitId":"Emkay16"},"content":"        for (String string : stringArray) {","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"Emkay16"},"content":"            arrayList.add(string);","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"Emkay16"},"content":"        return arrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"Emkay16"},"content":"     * This is the getter for filePath.","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"Emkay16"},"content":"     * @return the file path of save file used by this storage instance","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"Emkay16"},"content":"    public String getFilePath() {","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"Emkay16"},"content":"        return filePath;","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"Emkay16":64,"fsgmhoward":25,"leowxx":101}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":" * This class handles all UI-related functions.","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"public class Ui {","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"    private Scanner userInputScanner;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"     * Initialize a UI handler.","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"    public Ui() {","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"        userInputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"     * Returns user input as a String.","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"     * @return user input","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    public String readInput() throws InvalidInputException {","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        String userInput \u003d null;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"            userInput \u003d userInputScanner.nextLine();","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        } catch (NoSuchElementException noSuchElementException) {","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"            throw new InvalidInputException(InvalidInputException.Type.END_OF_FILE, noSuchElementException);","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        return userInput;","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"leowxx"},"content":"     * Closes scanner.","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"leowxx"},"content":"    public void closeScanner() {","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"leowxx"},"content":"        userInputScanner.close();","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"leowxx"},"content":"     * Prints the String specified in @param.","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"leowxx"},"content":"     * @param message String to be printed","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"leowxx"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"leowxx"},"content":"        System.out.println(message);","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"leowxx"},"content":"     * Prints a welcome message.","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"leowxx"},"content":"    public void printWelcome() {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.WELCOME_MESSAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.INPUT_PROMPT);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"leowxx"},"content":"     * Prints the exception message specified in @param.","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"leowxx"},"content":"     * @param e Exception to be printed","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"leowxx"},"content":"    public void printException(Exception e) {","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"leowxx"},"content":"        printMessage(e.toString());","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"     * This prints a long breaking line to separate user input and command outputs.","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"    public void printLine() {","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"        printMessage(Constants.LONG_LINE);","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"fsgmhoward":6,"brandonfoong":14,"leowxx":55}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"    public AddCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"        String id \u003d arguments.get(\"payload\");","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        id \u003d id.toUpperCase();","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        if (!checkID(id)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"            throw new InvalidInputException(InvalidInputException.Type.INVALID_NRIC);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        } else if (data.getPatients().containsKey(id)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"            throw new InvalidInputException(InvalidInputException.Type.PATIENT_EXISTED);","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"        assert checkID(id) : \"validID should be true\";","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(id);","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        data.saveFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"        ui.printMessage(\"Patient \" + id + \" has been added!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"     * Checks whether the patient\u0027s ID is valid.","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"     * @param id Unique identifier of the patient to be retrieved","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"     * @return Flag on whether the patient\u0027s ID is valid","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"    private boolean checkID(String id) {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"        int stringLength \u003d id.length();","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"        // Checks if ID has 9 characters","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        if (stringLength !\u003d Constants.ID_NUMBER_OF_CHARACTERS) {","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"            return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        int checksum \u003d 0;","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        char firstLetter \u003d id.charAt(Constants.INDEX_OF_FIRST_CHARACTER);","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        char[] st \u003d {\u0027J\u0027, \u0027Z\u0027, \u0027I\u0027, \u0027H\u0027, \u0027G\u0027, \u0027F\u0027, \u0027E\u0027, \u0027D\u0027, \u0027C\u0027, \u0027B\u0027, \u0027A\u0027};","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        char[] fg \u003d {\u0027X\u0027, \u0027W\u0027, \u0027U\u0027, \u0027T\u0027, \u0027R\u0027, \u0027Q\u0027, \u0027P\u0027, \u0027N\u0027, \u0027M\u0027, \u0027L\u0027, \u0027K\u0027};","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"        // Checks if ID is valid","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"        for (int i \u003d 0; i \u003c stringLength; i++) {","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"            char c \u003d id.charAt(i);","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"            if (i \u003d\u003d Constants.INDEX_OF_FIRST_CHARACTER) {","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if first index of ID is S,T,F or G","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"                if (c !\u003d \u0027S\u0027 \u0026\u0026 c !\u003d \u0027T\u0027 \u0026\u0026 c !\u003d \u0027F\u0027 \u0026\u0026 c !\u003d \u0027G\u0027) {","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"hiongkaihan"},"content":"                    return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"hiongkaihan"},"content":"            } else if (i \u003d\u003d Constants.INDEX_OF_LAST_CHARACTER) {","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if last index of ID is a letter","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"hiongkaihan"},"content":"                if (!Character.isLetter(c)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"hiongkaihan"},"content":"                    return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"hiongkaihan"},"content":"                if (firstLetter \u003d\u003d \u0027T\u0027 || firstLetter \u003d\u003d \u0027G\u0027) {","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Constants.CHECKSUM_DIGIT;","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"hiongkaihan"},"content":"                checksum \u003d checksum % Constants.CHECKSUM_MOD;","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"hiongkaihan"},"content":"                if (firstLetter \u003d\u003d \u0027S\u0027 || firstLetter \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"hiongkaihan"},"content":"                    if (c !\u003d st[checksum]) {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"hiongkaihan"},"content":"                        return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"hiongkaihan"},"content":"                    }","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"hiongkaihan"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"hiongkaihan"},"content":"                    if (c !\u003d fg[checksum]) {","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"hiongkaihan"},"content":"                        return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"hiongkaihan"},"content":"                    }","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"            } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if the rest of the indexes are digits","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"hiongkaihan"},"content":"                if (!Character.isDigit(c)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"hiongkaihan"},"content":"                    return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"hiongkaihan"},"content":"                // Calculates the checksum of digits","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hiongkaihan"},"content":"                switch (i) {","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.FIRST_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.LAST_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 2;","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.SECOND_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 7;","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.THIRD_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 6;","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.FOURTH_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 5;","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.FIFTH_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 4;","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"hiongkaihan"},"content":"                case Constants.SIXTH_DIGIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"hiongkaihan"},"content":"                    checksum +\u003d Integer.parseInt(String.valueOf(c)) * 3;","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"hiongkaihan"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"hiongkaihan"},"content":"                default:","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"hiongkaihan"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"hiongkaihan"},"content":"        return true;","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":120,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"},{"lineNumber":122,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"fsgmhoward":4,"brandonfoong":5,"hiongkaihan":113}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.BaseException;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/command/Command.java */","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" * Base class of all the commands, providing necessary interfaces and methods","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" * for implementation.","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Command {","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    protected Boolean isExit \u003d false;","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a command.","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public Command(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     * Check whether program should exit after this command is finished.","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     * @return True for yes, False for no","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isExit() {","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        return this.isExit;","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * Abstract method to be implemented by each individual command.","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * This is where the actual program logic of each command is stored.","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    public abstract void execute() throws BaseException;","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":45}},{"path":"src/main/java/seedu/duke/command/CurrentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class CurrentCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public CurrentCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        if (data.currentPatient !\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(\"The currently loaded patient\u0027s ID is \" + data.currentPatient.getID() + \".\");","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        } else {","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(\"There is no patient being loaded now.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":28}},{"path":"src/main/java/seedu/duke/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"    public DeleteCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        if (arguments.containsKey(Constants.PATIENT_KEY)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"            String id \u003d arguments.get(Constants.PATIENT_KEY);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"            id \u003d id.toUpperCase();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"            deletePatient(id);","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            data.saveFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"        }  else if (arguments.containsKey(Constants.RECORD_KEY)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"            Patient patient \u003d data.currentPatient;","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"            if (patient \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"                throw new InvalidInputException(InvalidInputException.Type.NO_PATIENT_LOADED);","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"            String date \u003d arguments.get(Constants.RECORD_KEY);","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"            deleteRecord(patient, date);","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"            data.saveFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"            throw new InvalidInputException(InvalidInputException.Type.UNKNOWN_DELETE_ARGUMENT);","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"     * Deletes a patient from the list.","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"     * @param id Unique identifier of the patient to be retrieved","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"    private void deletePatient(String id) throws InvalidInputException {","lastModifiedDate":"2021-04-02"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        if (data.getPatient(id) \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"            throw new InvalidInputException(InvalidInputException.Type.PATIENT_NOT_FOUND);","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"hiongkaihan"},"content":"        data.deletePatient(id);","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"        ui.printMessage(\"Patient \" + id + \" has been deleted!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"     * Deletes a record a patient\u0027s consultation details.","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"     * @param patient    Patient of record that is being deleted","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"     * @param dateString Date of record that is being deleted","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"     * @throws InvalidInputException when an invalid date is given","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"    private void deleteRecord(Patient patient, String dateString) throws InvalidInputException {","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"hiongkaihan"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"hiongkaihan"},"content":"            date \u003d parseDate(dateString);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"hiongkaihan"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"hiongkaihan"},"content":"            throw new InvalidInputException(InvalidInputException.Type.INVALID_DATE);","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"hiongkaihan"},"content":"        if (patient.recordExist(date)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"hiongkaihan"},"content":"            patient.deleteRecord(date);","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"hiongkaihan"},"content":"            ui.printMessage(\"Record for \" + date + \" has been deleted!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"hiongkaihan"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"hiongkaihan"},"content":"            ui.printMessage(\"Record for \" + date + \" does not exist!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"hiongkaihan"},"content":"    private LocalDate parseDate(String dateString) throws DateTimeParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"hiongkaihan"},"content":"        if (!dateString.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"hiongkaihan"},"content":"            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(Constants.DATE_PATTERN));","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"hiongkaihan"},"content":"        return LocalDate.now();","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"fsgmhoward":4,"hiongkaihan":85}},{"path":"src/main/java/seedu/duke/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"    public ExitCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"        isExit \u003d true;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        ui.printMessage(Constants.EXIT_MESSAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Emkay16":27,"fsgmhoward":1}},{"path":"src/main/java/seedu/duke/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    public HelpCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    public void execute() {","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        String[] commands \u003d arguments.get(\"payload\").toLowerCase().split(\" \");","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        if (commands[0].isEmpty()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"            ui.printMessage(Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"                    + Constants.DELETE_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"                    + Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"                    + Constants.LOAD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"                    + Constants.RECORD_CONSULTATION_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"                    + Constants.RETRIEVE_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                    + Constants.CURRENT_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"                    + Constants.HELP_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"                    + Constants.EXIT_INFO_MESSAGE","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"            );","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"        } else {","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"            for (String command : commands) {","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"                switch (command) {","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"                case \"add\":","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.ADD_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"                case \"delete\":","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.DELETE_INFO_MESSAGE);","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"                case \"list\":","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.LIST_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"                case \"load\":","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.LOAD_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"                case \"record\":","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.RECORD_CONSULTATION_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"                case \"retrieve\":","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.RETRIEVE_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"                case \"current\":","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"                    ui.printMessage(Constants.CURRENT_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"                case \"help\":","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.HELP_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"                case \"exit\":","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.EXIT_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"Emkay16"},"content":"                default:","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(String.format(Constants.INVALID_COMMAND_MESSAGE, command) + System.lineSeparator());","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"Emkay16"},"content":"                }","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"Emkay16"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Emkay16":66,"fsgmhoward":4}},{"path":"src/main/java/seedu/duke/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"    public ListCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        SortedMap\u003cString, Patient\u003e patients \u003d data.getPatients();","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        int patientCount \u003d 0;","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        String list \u003d \"List of patients (in alphanumeric order):\";","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"        for (String patientID : patients.keySet()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"            list +\u003d \"\\n\" + ++patientCount + \". \" + patientID;","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        if (patientCount \u003d\u003d 0) {","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            // There is no patient in the list. We just inform the user about it.","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(Constants.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"        } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"            assert list !\u003d \"\" : \"List should not be empty\";","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"            ui.printMessage(list);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"fsgmhoward":6,"hiongkaihan":36}},{"path":"src/main/java/seedu/duke/command/LoadCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    public LoadCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"    public void execute() {","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        // TODO: Replace printed string with actual details of the patient.","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        String id \u003d arguments.get(\"payload\");","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        id \u003d id.toUpperCase();","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"        data.loadCurrentPatient(id);","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        if (data.currentPatient !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient \" + data.currentPatient.getID() + \"\\\u0027s data has been found and loaded.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient\\\u0027s data is not found.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"leowxx":31,"hiongkaihan":1}},{"path":"src/main/java/seedu/duke/command/RecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.StorageException;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"public class RecordCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    public RecordCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, StorageException {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        assert ui !\u003d null : \"Ui must not be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        assert arguments.containsKey(\"payload\") : \"Arguments must contain a value for the `payload` key\";","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InvalidInputException.Type.NO_PATIENT_LOADED);","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        String dateString \u003d arguments.get(Constants.PAYLOAD_KEY);","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"            date \u003d parseDate(dateString);","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"            throw new InvalidInputException(InvalidInputException.Type.INVALID_DATE);","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        addRecord(patient, date);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"        data.saveFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        printNewRecord(patient);","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"    private LocalDate parseDate(String dateString) throws DateTimeParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        if (!dateString.isEmpty()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(Constants.DATE_PATTERN));","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        return LocalDate.now();","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"    private void addRecord(Patient patient, LocalDate date) throws InvalidInputException {","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        String symptom \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        String diagnosis \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        String prescription \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        boolean containsSymptom \u003d arguments.containsKey(Constants.SYMPTOM_KEY);","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        boolean containsDiagnosis \u003d arguments.containsKey(Constants.DIAGNOSIS_KEY);","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        boolean containsPrescription \u003d arguments.containsKey(Constants.PRESCRIPTION_KEY);","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"        if (!containsSymptom \u0026\u0026 !containsDiagnosis \u0026\u0026 !containsPrescription) {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"            throw new InvalidInputException(InvalidInputException.Type.EMPTY_DESCRIPTION);","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"        if (containsSymptom) {","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"            symptom \u003d arguments.get(Constants.SYMPTOM_KEY);","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"        if (containsDiagnosis) {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"            diagnosis \u003d arguments.get(Constants.DIAGNOSIS_KEY);","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"        if (containsPrescription) {","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"            prescription \u003d arguments.get(Constants.PRESCRIPTION_KEY);","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"        patient.addRecord(date, symptom, diagnosis, prescription);","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"    private void printNewRecord(Patient patient) {","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(\"Added new record to patient \" + patient.getID() + \":\");","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(patient.recentlyAdded());","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"fsgmhoward":5,"brandonfoong":76}},{"path":"src/main/java/seedu/duke/command/RetrieveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"public class RetrieveCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    public RetrieveCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException {","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        assert ui !\u003d null : \"Ui must not be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InvalidInputException.Type.NO_PATIENT_LOADED);","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        TreeMap\u003cLocalDate, Record\u003e records \u003d patient.getRecords();","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(\"Here are \" + patient.getID() + \"\u0027s records:\");","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        for (Map.Entry\u003cLocalDate, Record\u003e entry : records.entrySet()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"            LocalDate date \u003d entry.getKey();","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"            Record record \u003d entry.getValue();","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"            printRecord(date, record);","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"    private void printRecord(LocalDate date, Record record) {","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(date.format(DateTimeFormatter.ofPattern(Constants.DATE_PATTERN)) + \":\");","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(record.toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"fsgmhoward":3,"brandonfoong":45}},{"path":"src/main/java/seedu/duke/exception/BaseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.exception;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public abstract class BaseException extends Exception {","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public final String classMessage;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the base exception class.","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     * @param classMessage message for the subclass of exception","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * @param message message for with detail on the actual type of exception","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * @param cause cause of this subclass of exception being thrown","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public BaseException(String classMessage, String message, Throwable cause) {","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(message, cause);","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        this.classMessage \u003d classMessage;","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        String s \u003d classMessage + \":\" + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"                + Constants.EXCEPTION_INDENT + getMessage();","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        Throwable cause \u003d this.getCause();","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        if (cause !\u003d null) {","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            s +\u003d System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"                    + \"... and is caused by ...\" + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"                    + Constants.EXCEPTION_INDENT + cause.toString(); ","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        return s;","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"fsgmhoward":34}},{"path":"src/main/java/seedu/duke/exception/InvalidInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.exception;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class InvalidInputException extends BaseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public static enum Type {","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        EMPTY_STRING(Constants.INVALID_INPUT_EMPTY_STRING),","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        UNKNOWN_COMMAND(Constants.INVALID_INPUT_UNKNOWN_COMMAND),","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"        INVALID_NRIC(Constants.INVALID_INPUT_INVALID_NRIC),","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        PATIENT_EXISTED(Constants.INVALID_INPUT_PATIENT_EXISTED),","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        NO_PATIENT_LOADED(Constants.INVALID_INPUT_NO_PATIENT_LOADED),","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"        EMPTY_DESCRIPTION(Constants.INVALID_INPUT_EMPTY_DESCRIPTION),","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"        INVALID_DATE(Constants.INVALID_INPUT_INVALID_DATE),","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"        UNKNOWN_DELETE_ARGUMENT(Constants.INVALID_INPUT_UNKNOWN_DELETE_ARGUMENT),","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"        PATIENT_NOT_FOUND(Constants.INVALID_INPUT_PATIENT_NOT_FOUND),","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        END_OF_FILE(Constants.INVALID_INPUT_END_OF_FILE);","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        public final String message;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        private Type(String message) {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            this.message \u003d message;","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the exception class for invalid input.","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * @param type type of invalid input received from user","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(Type type) {","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        this(type, null);","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the exception class for invalid input, with a cause as parameter.","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * @param type type of invalid input received from user","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @param cause cause of this subclass of exception being thrown","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(Type type, Throwable cause) {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        super(Constants.INVALID_INPUT, type.message, cause);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"fsgmhoward":37,"brandonfoong":2,"hiongkaihan":3}},{"path":"src/main/java/seedu/duke/exception/StorageException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.exception;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class StorageException extends BaseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public enum Type {","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        FILE_CREATION_FAIL(Constants.STORAGE_FILE_CREATION_FAIL),","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        FILE_WRITE_FAIL(Constants.STORAGE_FILE_WRITE_FAIL),","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"        FILE_NOT_FOUND(Constants.STORAGE_FILE_NOT_FOUND);","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        ","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        public final String message;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        private Type(String message) {","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"            this.message \u003d message;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the exception class for unexpected outcome of saving/loading events.","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * @param type type of unexpected outcome during loading/saving","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public StorageException(Type type) {","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        this(type, null);","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the exception class for unexpected outcome of saving/loading events,","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * with a cause as parameter.","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * @param type type of unexpected outcome during loading/saving","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param cause cause of this subclass of exception being thrown","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public StorageException(Type type, Throwable cause) {","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        super(Constants.STORAGE, type.message, cause);","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"fsgmhoward":36}},{"path":"src/main/java/seedu/duke/exception/UnknownException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.exception;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class UnknownException extends BaseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of exception for unknown problems encountered.","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"     * @param cause cause of this subclass of exception being thrown","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public UnknownException(Throwable cause) {","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        super(Constants.UNKNOWN, \"\", cause);","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"fsgmhoward":14}},{"path":"src/main/java/seedu/duke/model/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represents a patient, and no two patients should","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * contain the same ID field. The instance contains records for all visits.","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"public class Patient {","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * This is the unique identifier of the patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * In SG\u0027s context, we use NRIC/FIN for this field","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected String id;","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    protected TreeMap\u003cLocalDate, Record\u003e records;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    protected String symptom;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    protected String diagnosis;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    protected String prescription;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with an empty record list.","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id) {","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        this(id, new TreeMap\u003cLocalDate, Record\u003e());","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"     * Initialize a patient instance with a pre-defined record TreeMap.","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     * @param id      Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     * @param records Patient\u0027s visit record list","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"    public Patient(String id, TreeMap\u003cLocalDate, Record\u003e records) {","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        this.records \u003d records;","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        this.symptom \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        this.diagnosis \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        this.prescription \u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * Get unique identifier of the patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * @return Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    public String getID() {","lastModifiedDate":"2021-03-06"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"        return id;","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"    /* Functionals for manipulating records */","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     * Get all records associated with this patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"     * @return All records in a TreeMap, mapping consultation dates to records","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"    public TreeMap\u003cLocalDate, Record\u003e getRecords() {","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        return records;","lastModifiedDate":"2021-03-06"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"     * Add a single record into the patient\u0027s record list.","lastModifiedDate":"2021-03-06"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"     * @param date         Appointment date to add the record to","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"     * @param symptom      Patient\u0027s symptoms to add to the record","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"     * @param diagnosis    Patient\u0027s diagnosis to add to the record","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"     * @param prescription Patient\u0027s prescription to add to the record","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"    public void addRecord(LocalDate date, String symptom, String diagnosis, String prescription) {","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        if (!records.containsKey(date)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"            records.put(date, new Record());","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        Record record \u003d records.get(date);","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"        record.addDetails(symptom, diagnosis, prescription);","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"        this.symptom \u003d symptom;","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        this.diagnosis \u003d diagnosis;","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"        this.prescription \u003d prescription;","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"hiongkaihan"},"content":"     * Checks if a record exists from the patient\u0027s record list.","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"hiongkaihan"},"content":"     * @param date Appointment date of record to check","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"hiongkaihan"},"content":"     * @return     Boolean for whether the record exists","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"    public boolean recordExist(LocalDate date) {","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"        if (records.containsKey(date)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"hiongkaihan"},"content":"            return true;","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"hiongkaihan"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"hiongkaihan"},"content":"            return false;","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"hiongkaihan"},"content":"     * Deletes a record from the patient\u0027s record list.","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"hiongkaihan"},"content":"     * @param date Appointment date of record to delete","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"hiongkaihan"},"content":"    public void deleteRecord(LocalDate date) {","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"hiongkaihan"},"content":"        records.remove(date);","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"     * This returns a printable string with recently added information.","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"     * @return a printable string for information about recently added symptoms, diagnosis and prescription","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"    public String recentlyAdded() {","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"        String recentDetails \u003d System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"        if (symptom !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"            recentDetails +\u003d \"Symptom: \" + symptom + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"        if (diagnosis !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"            recentDetails +\u003d \"Diagnosis: \" + diagnosis + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"        if (prescription !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"            recentDetails +\u003d \"Prescription: \" + prescription + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"        return recentDetails;","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":121,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":53,"brandonfoong":47,"hiongkaihan":21}},{"path":"src/main/java/seedu/duke/model/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represent a visit record. It can contain","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * medical diagnosis, prescription, test results, etc.","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class Record {","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    protected ArrayList\u003cString\u003e symptoms;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    protected ArrayList\u003cString\u003e diagnoses;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    protected ArrayList\u003cString\u003e prescriptions;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"     * Initialize a new visit record.","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public Record() {","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        this.symptoms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        this.diagnoses \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        this.prescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"     * Generates a record with existing data.","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"    public Record(ArrayList\u003cString\u003e symptoms, ArrayList\u003cString\u003e diagnoses, ArrayList\u003cString\u003e prescriptions) {","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"        this.symptoms \u003d symptoms;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"        this.diagnoses \u003d diagnoses;","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"        this.prescriptions \u003d prescriptions;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"     * Obtain the consultation detail of this record.","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"     * @return A String containing the consultation details contained in this record","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public String getConsultationDetail() {","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        String consultationDetail \u003d \"\";","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        consultationDetail +\u003d \"Symptoms:\" + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        for (String symptom : symptoms) {","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            consultationDetail +\u003d \"\\t\" + symptom + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        consultationDetail +\u003d \"Diagnoses:\" + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        for (String diagnosis : diagnoses) {","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"            consultationDetail +\u003d \"\\t\" + diagnosis + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        consultationDetail +\u003d \"Prescriptions:\" + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        for (String prescription : prescriptions) {","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"            consultationDetail +\u003d \"\\t\" + prescription + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        return consultationDetail;","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"leowxx"},"content":"     * Obtain a print-friendly consultation detail of this record for the storage file.","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"leowxx"},"content":"     * @return A String containing the consultation details contained in this record, separated by delimiters.","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"leowxx"},"content":"    public String printFileConsultationDetail() {","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"leowxx"},"content":"        String consultationDetail \u003d \"\";","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"leowxx"},"content":"        for (String symptom : symptoms) {","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"            consultationDetail +\u003d symptom + Constants.DETAILS_DELIMITER;","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"leowxx"},"content":"        consultationDetail +\u003d Constants.SYMPTOM_DELIMITER;","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"leowxx"},"content":"        for (String diagnosis : diagnoses) {","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Emkay16"},"content":"            consultationDetail +\u003d diagnosis + Constants.DETAILS_DELIMITER;","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"leowxx"},"content":"        consultationDetail +\u003d Constants.DIAGNOSIS_DELIMITER;","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"leowxx"},"content":"        for (String prescription : prescriptions) {","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Emkay16"},"content":"            consultationDetail +\u003d prescription + Constants.DETAILS_DELIMITER;","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"leowxx"},"content":"        consultationDetail +\u003d Constants.PRESCRIPTION_DELIMITER;","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"leowxx"},"content":"        return consultationDetail;","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        return getConsultationDetail();","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"     * This adds 3 different type of details into this record.","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"     * @param symptom symptoms of the patient","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"     * @param diagnosis diagnosis based on patient\u0027s symptoms and other tests","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"     * @param prescription prescription given for this visit","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"    public void addDetails(String symptom, String diagnosis, String prescription) {","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"        if (symptom !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"            symptoms.add(symptom);","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"        if (diagnosis !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"            diagnoses.add(diagnosis);","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"        if (prescription !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"            prescriptions.add(prescription);","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"Emkay16":12,"fsgmhoward":25,"brandonfoong":42,"leowxx":20}},{"path":"src/test/java/seedu/duke/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"class AddCommandTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_patientAdded() {","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient S1234567D has been added!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_invalidID_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S12345677A\");","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Please key in a valid NRIC number!\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_patientAlreadyExists_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient already exists!\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"hiongkaihan":72}},{"path":"src/test/java/seedu/duke/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.DeleteCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"    public void executeDeleteCommand_patientDeleted() {","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"delete\");","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"p\", \"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"            deleteCommand.execute();","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient S1234567D has been deleted!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"    public void executeDeleteCommand_recordDeleted() {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"        String date \u003d \"29/03/2021\";","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"        LocalDate parseDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(Constants.DATE_PATTERN));","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"        patient.addRecord(parseDate, \"coughing\", \"\",\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"delete\");","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"r\", \"29/03/2021\");","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"            deleteCommand.execute();","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Record for 2021-03-29 has been deleted!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"hiongkaihan"},"content":"    public void executeDeleteCommand_invalidInput() {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"delete\");","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"hiongkaihan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-04-02"},{"lineNumber":81,"author":{"gitId":"hiongkaihan"},"content":"            deleteCommand.execute();","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-04-02"},{"lineNumber":83,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Kindly use /p or /r to indicate patient or record, refer to help for more clarification!\",","lastModifiedDate":"2021-04-02"},{"lineNumber":84,"author":{"gitId":"hiongkaihan"},"content":"                exception.getMessage());","lastModifiedDate":"2021-04-02"},{"lineNumber":85,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"hiongkaihan"},"content":"    public void executeDeleteCommand_patientDoesNotExist() {","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"delete\");","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"p\", \"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hiongkaihan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-04-02"},{"lineNumber":97,"author":{"gitId":"hiongkaihan"},"content":"            deleteCommand.execute();","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-04-02"},{"lineNumber":99,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient does not exist!\", exception.getMessage());","lastModifiedDate":"2021-04-02"},{"lineNumber":100,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"hiongkaihan"},"content":"    public void executeDeleteCommand_recordDoesNotExist() {","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"hiongkaihan"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"delete\");","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"r\", \"29/03/2021\");","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"hiongkaihan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(ui, data, arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"hiongkaihan"},"content":"            deleteCommand.execute();","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Record for 2021-03-29 does not exist!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"hiongkaihan":127}},{"path":"src/test/java/seedu/duke/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.command.ExitCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"public class ExitCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"    public void executeExitCommand_extraArguments_exitSuccess() {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"exit\");","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"now\");","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        ExitCommand exitCommand \u003d new ExitCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"            exitCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"        assertEquals(\"Goodbye, we hope to see you again!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Emkay16":36}},{"path":"src/test/java/seedu/duke/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.command.HelpCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"public class HelpCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"    public void executeHelpCommand_multipleCommands_allMessagesPrinted() {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"help\");","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"list add exit\");","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"            helpCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"        assertEquals(Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"                + Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"                + Constants.EXIT_INFO_MESSAGE  + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"    public void executeHelpCommand_multipleCommandsWithInvalidCommands_messagesPrinted() {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"help\");","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"list add bye\");","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"            helpCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"        assertEquals(Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"                + Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"                + String.format(Constants.INVALID_COMMAND_MESSAGE, \"bye\")","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"                + System.lineSeparator() + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Emkay16":63}},{"path":"src/test/java/seedu/duke/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.ListCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"public class ListCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public void executeListCommand_listEmpty_messagePrinted() {","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"list\");","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        ","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        ListCommand listCommand \u003d new ListCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        final ByteArrayOutputStream myOut \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        System.setOut(new PrintStream(myOut));","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        listCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        final String standardOutput \u003d myOut.toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(Constants.EMPTY_LIST_MESSAGE + System.lineSeparator(), standardOutput);","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"    public void executeListCommand() {","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"list\");","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"        ListCommand listCommand \u003d new ListCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"            listCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(\"List of patients (in alphanumeric order):\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"                + \"1. S1234567D\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":9,"hiongkaihan":47}},{"path":"src/test/java/seedu/duke/LoadCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"import seedu.duke.command.LoadCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"public class LoadCommandTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"    @Test","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"    public void executeLoadCommand() {","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"command\", \"load\");","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"payload\", \"S7654321B\");","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"        patient \u003d new Patient(\"S7654321B\");","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        LoadCommand loadCommand \u003d new LoadCommand(ui, data, arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        try {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"            loadCommand.execute();","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"            System.out.println(\"Error occurred while loading patient data.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        ui.closeScanner();","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"fsgmhoward":1,"leowxx":31}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.EchoCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.exception.InvalidInputException;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"public class ParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    Parser defaultParser \u003d new Parser(new Ui(), new Data());","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    HashMap\u003cString, String\u003e sampleArguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor for this class. This sets a sample arguments hashmap.","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    public ParserTest() {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"command\", \"echo\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"payload\", \"pVal1 pVal2\");","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyA\", \"valA\");","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyB\", \"valB1 valB2\");","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyC\", \"\");","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_emptyString_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"\";","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        Exception e \u003d assertThrows(InvalidInputException.class, () -\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(Constants.INVALID_INPUT_EMPTY_STRING, e.getMessage());","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"invalid_command a b c /p x\";","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        Exception e \u003d assertThrows(InvalidInputException.class, () -\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"            defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(Constants.INVALID_INPUT_UNKNOWN_COMMAND, e.getMessage());","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests whether a normal command (with or w/o leading/trailing spaces) can be parsed.","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_normalCommand_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        // Normal command","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand1 \u003d \"echo pVal1 pVal2 /keyA valA /keyB valB1 valB2 /keyC\";","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        // Command with leading/trailing spaces","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand2 \u003d \"     echo pVal1 pVal2 /keyA valA /keyB valB1 valB2 /keyC    \";","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"        // Command with separation of more than 1 spaces","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand3 \u003d \"     echo     pVal1  pVal2   /keyA valA   /keyB valB1   valB2 /keyC    \";","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand1);","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand2);","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand3);","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests single payload (without any parameters).","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_singlePayload_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"        String words \u003d \"Hi! This is PatientManager!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"echo \" + words;","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            // Capture standard output","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"            final ByteArrayOutputStream myOut \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"            System.setOut(new PrintStream(myOut));","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            command.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            final String standardOutput \u003d myOut.toString();","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"            assertEquals(words, standardOutput);","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests whether the data class is passed correctly.","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_customData_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"echo Hi!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"        SortedMap\u003cString, Patient\u003e patients \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"        String nric \u003d \"S1234567D\";","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(nric, new Patient(nric));","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"fsgmhoward"},"content":"        Data data \u003d new Data(null, patients);","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"fsgmhoward"},"content":"        Parser parser \u003d new Parser(new Ui(), data);","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"fsgmhoward"},"content":"            Data compareData \u003d ((EchoCommand) command).getData();","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(compareData.getPatient(nric) !\u003d null);","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"fsgmhoward"},"content":"            Data compareData \u003d ((EchoCommand) command).getData();","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(compareData.getPatient(nric) \u003d\u003d null);","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":133}},{"path":"src/test/java/seedu/duke/RecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"class RecordCommandTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_noPatientLoaded_exceptionThrown() {","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"2021-03-31\");","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"s\", \"coughing\");","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        });","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_patientLoaded_recordAdded() {","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"31/03/2021\");","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"s\", \"coughing\");","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        TreeMap\u003cLocalDate, Record\u003e records \u003d patient.getRecords();","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(1, records.size());","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"fsgmhoward":2,"brandonfoong":51}},{"path":"src/test/java/seedu/duke/RetrieveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RetrieveCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"class RetrieveCommandTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_noPatientLoaded_exceptionThrown() {","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"31/03/2021\");","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"s\", \"coughing\");","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        });","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_patientLoadedAndRecordsAdded_printsRecords() {","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"31/03/2021\");","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"s\", \"coughing\");","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out to a ByteArrayOutputStream","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"        String expected \u003d \"Here are \" + patient.getID() + \"\u0027s records:\" + System.lineSeparator()","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"                + \"31/03/2021:\" + System.lineSeparator()","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"                + \"Symptoms:\" + System.lineSeparator()","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"                + \"\\tcoughing\" + System.lineSeparator()","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"                + \"Diagnoses:\" + System.lineSeparator()","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"                + \"Prescriptions:\" + System.lineSeparator() + System.lineSeparator();","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(expected, bos.toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out back to standard output","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"fsgmhoward":2,"brandonfoong":71}},{"path":"src/test/java/seedu/duke/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"public class StorageTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public static final String TEST_FILE \u003d \"testFile.txt\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"    public void storeData() {","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        Storage storage \u003d new Storage(TEST_FILE);","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        Data data \u003d new Data(storage);","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        patient.addRecord(date, \"head pain, dizziness\", \"heat stroke\", \"cooling packs, medicine\");","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"        patient.addRecord(date.plus(1, ChronoUnit.DAYS), \"fainting\", \"severe heat stroke\", \"referral to hospital\");","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"        patient \u003d new Patient(\"S7654321B\");","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"        patient.addRecord(date, \"abdominal pain\", \"mild UTI\", \"antibiotics, referral to hospital\");","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            data.saveFile();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"leowxx"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"leowxx"},"content":"    public void loadData() {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        Storage storage \u003d new Storage(TEST_FILE);","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"        // No exception should be thrown if everything works fine","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"leowxx"},"content":"            SortedMap\u003cString, Patient\u003e data \u003d storage.load();","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"leowxx"},"content":"            for (String patientID : data.keySet()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"leowxx"},"content":"                System.out.println(patientID);","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"leowxx"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"        assertEquals(\"S1234567D\" + System.lineSeparator()","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"                + \"S7654321B\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"    //TODO: better tests","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Emkay16":14,"fsgmhoward":11,"leowxx":34}},{"path":"src/test/java/seedu/duke/command/EchoCommand.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * This is a command for testing purposes.","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public EchoCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        ui.printMessage(arguments.get(\"payload\"));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * This is the getter for arguments hashmap.","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * @return Arguments hashmap","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    public HashMap\u003cString, String\u003e getArguments() {","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        return arguments;","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * This is the getter for the data object.","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @return data object","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public Data getData() {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return data;","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":42}},{"path":"text-ui-test/runtest.bat","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@echo off","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"setlocal enableextensions","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"pushd %~dp0","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"call gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"cd build\\libs","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"for /f \"tokens\u003d*\" %%a in (","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u0027dir /b *.jar\u0027","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":") do (","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    set jarloc\u003d%%a","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"cd ..\\..\\text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"del pm.save","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"fsgmhoward":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"rm -f pm.save","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"diff EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"Test passed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    echo \"Test failed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Emkay16":1,"fsgmhoward":1,"-":23}}]
