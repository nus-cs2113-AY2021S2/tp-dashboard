[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    mainClassName \u003d \"seedu.duke.PatientManager\"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"fsgmhoward":1,"-":45,"brandonfoong":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"## Table of Contents","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"* [Setting up the project in your computer](#setting-up-the-project-in-your-computer)","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"* [Design and implementation](#design--implementation)","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"* [Product scope](#product-scope)","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"   * [Target user profile](#target-user-profile)","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"   * [Value proposition](#value-proposition)","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"* [User stories](#user-stories)","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"* [Testing](#testing)","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\u003c!-- * [Instructions for manual testing](#instructions-for-manual-testing) --\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"## Introduction","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for _general practitioners_ (GP)","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"who work in clinics to manage their patient list. This includes a recording/retrieval of","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below.","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"## Setting up the project in your computer","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"First, fork this repo, and clone the fork into your computer.","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"1. Configure the JDK: Follow the guide ","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"   [Intellij IDEA: Configuring the JDK @SE-EDU/guides](https://se-education.org/guides/tutorials/intellijJdk.html) \\","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"   IDEA: Configuring the JDK to ensure Intellij is configured ","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"   to use JDK 11.","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"2. Import the project as a Gradle project: Follow the guide ","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"   [Intellij IDEA: Importing a Gradle project @SE-EDU/guides](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) \\","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"   IDEA: Importing a Gradle project to import ","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"   the project into IDEA.","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"   \u003e ❗ Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"3. Verify the setup: Run `seedu.duke.PatientManager` and try a few commands. ","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"   Run the tests to ensure they all pass.","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Design \u0026 implementation","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"### Help command","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"When invoked by the user via the `help` command, information about the available commands is printed.","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"If arguments are provided, the arguments are parsed into the separate commands, and the information about each","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"command present in the arguments is printed in order. If the user provides an invalid command, an invalid command","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"message is shown, and the messages for the following commands are printed.","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"#### Alternatives considered","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"The original version of this command simply printed out the information messages of all commands. ","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"However, with a growing list of commands, we were worried that the help message would be too long and would","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"require scrolling.","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"The current version reads the arguments that are provided by the user, and prints out information messages for each","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"of the commands indicated. Unknown/invalid commands will not be skipped with a message indicating that the command is ","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"invalid, and the subsequent commands will continue to be processed. ","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"A future consideration would be to convert the message printed out when no arguments are provided to only print a list","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"of available commands for easier reference:","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"\u003e help","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"Emkay16"},"content":"-----------------------------------------------------------------","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"Emkay16"},"content":"List of available commands:","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"Emkay16"},"content":"...","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"Emkay16"},"content":"...","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"Emkay16"},"content":"Enter help \u003ccommand\u003e for more details of each command","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"Emkay16"},"content":"-----------------------------------------------------------------","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"### Architecture","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"The Architecture Diagram shown above gives a high-level explanation of PatientManager.","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"Given below is a brief overview of each component.","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"The user starts the program from the main class `PatientManager`.","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"This class is responsible for:","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"- When the app is launched: Initializing the other components in the correct sequence and connecting them with each other","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"- When the app exits: Shuts down the components and invokes cleanup methods where necessary","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"`Commons` contains constants that are shared across the other classes.","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"`UI` is responsible for reading user input.","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"It is also responsible for displaying the response from PatientManager to the screen.","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"`Logic` parses and executes commands.","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"`Model` contains the data of PatientManager in memory and models the various entities (e.g patients, medical records).","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"`Storage` manages writing and reading saved data to and from the hard disk.","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"#### How the architecture components interact with each other","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command `add S1234567D`.","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"{TO BE ADDED}","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"The sections below give more details for each component.","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"### UI Component","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"### Logic Component","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"### Model Component","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"API: `Patient.java`, `Record.java` and `Data.java` ","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"`Record.java` contains:","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"- all the symptoms recorded by a GP during the consultation","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"- all the diagnoses made by a GP during the consultation","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"- all the prescriptions made by a GP during the consultation","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"- the most recently added symptom/diagnosis/prescription, which corresponds to the most recently executed `record` command","lastModifiedDate":"2021-03-26"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"`Patient.java` contains:","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"- the patient\u0027s NRIC/FIN number, which uniquely identifies the patient","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"- a `TreeMap\u003cLocalDate, Record\u003e` which maps the patient\u0027s consultation dates to the visit records for that date","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"`Data.java`,","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"- stores a `SortedMap\u003cString, Patient\u003e`, which maps the patient\u0027s NRIC/FIN number to their corresponding `Patient` instance","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"- implements methods to add new patients and delete existing patients","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"- implements methods to load an existing patient\u0027s medical records","lastModifiedDate":"2021-03-26"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"### Storage Component","lastModifiedDate":"2021-03-26"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"### Common Classes","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":126,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"{Describe the target user profile}","lastModifiedDate":"2020-05-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":133,"author":{"gitId":"hiongkaihan"},"content":"Through Patient Manager, general practitioners are able to manage patients faster than a typical mouse/GUI driven app.","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"{Describe the value proposition: what problem does it solve?}","lastModifiedDate":"2020-05-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":137,"author":{"gitId":"hiongkaihan"},"content":"{more to be added}","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":143,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|GP in a polyclinic|add a new patient|record a patient|","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|GP in a polyclinic|view the list of patients|track the list of patients|","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|GP in a polyclinic|select a specific patient\u0027s records|access the patient\u0027s records|","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|GP in a polyclinic|add new record for a patient|refer to them during future consultations|","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|GP in a polyclinic|retrieve the patient\u0027s past records|refer to them during the current consultation|","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"hiongkaihan"},"content":"|v1.0|new User|view list of available commands|refer to them if I have any problems|","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"hiongkaihan"},"content":"|v2.0|GP in a polyclinic|delete a patient|remove patients are no longer required to be tracked|","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"hiongkaihan"},"content":"|v2.0|GP in a polyclinic|delete a patient\u0027s records|remove records that I no longer need|","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"hiongkaihan"},"content":"|v2.0|GP in a polyclinic|know if I entered a invalid Patient ID|make sure no mistake is made recording the patient\u0027s ID|","lastModifiedDate":"2021-03-23"},{"lineNumber":152,"author":{"gitId":"hiongkaihan"},"content":"|v2.0|GP in a polyclinic|load and save existing data|work on the data on another device|","lastModifiedDate":"2021-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":156,"author":{"gitId":"hiongkaihan"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed. ","lastModifiedDate":"2021-03-23"},{"lineNumber":157,"author":{"gitId":"hiongkaihan"},"content":"2. Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"hiongkaihan"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should ","lastModifiedDate":"2021-03-23"},{"lineNumber":159,"author":{"gitId":"hiongkaihan"},"content":"   be able to accomplish most of the tasks faster using commands than using the mouse. ","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"hiongkaihan"},"content":"   ","lastModifiedDate":"2021-03-23"},{"lineNumber":161,"author":{"gitId":"hiongkaihan"},"content":"{more to be added}","lastModifiedDate":"2021-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":167,"author":{"gitId":"fsgmhoward"},"content":"## Testing","lastModifiedDate":"2021-03-26"},{"lineNumber":168,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":169,"author":{"gitId":"fsgmhoward"},"content":"### Automated Testing","lastModifiedDate":"2021-03-26"},{"lineNumber":170,"author":{"gitId":"fsgmhoward"},"content":"We have both JUnit Test and IO Redirection Test. To run these tests, execute these commands in a shell or CMD:","lastModifiedDate":"2021-03-26"},{"lineNumber":171,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-26"},{"lineNumber":172,"author":{"gitId":"fsgmhoward"},"content":"### For JUnit tests","lastModifiedDate":"2021-03-26"},{"lineNumber":173,"author":{"gitId":"fsgmhoward"},"content":"# *nix OS and MacOSX bash","lastModifiedDate":"2021-03-26"},{"lineNumber":174,"author":{"gitId":"fsgmhoward"},"content":"./gradlew check","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"fsgmhoward"},"content":"# Windows CMD","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"fsgmhoward"},"content":"gradlew.bat check","lastModifiedDate":"2021-03-26"},{"lineNumber":177,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":178,"author":{"gitId":"fsgmhoward"},"content":"### For I/O redirection tests","lastModifiedDate":"2021-03-26"},{"lineNumber":179,"author":{"gitId":"fsgmhoward"},"content":"cd text-ui-test","lastModifiedDate":"2021-03-26"},{"lineNumber":180,"author":{"gitId":"fsgmhoward"},"content":"# *nix OS and MacOSX bash","lastModifiedDate":"2021-03-26"},{"lineNumber":181,"author":{"gitId":"fsgmhoward"},"content":"./runtest.sh","lastModifiedDate":"2021-03-26"},{"lineNumber":182,"author":{"gitId":"fsgmhoward"},"content":"# Windows CMD","lastModifiedDate":"2021-03-26"},{"lineNumber":183,"author":{"gitId":"fsgmhoward"},"content":"runtest.bat","lastModifiedDate":"2021-03-26"},{"lineNumber":184,"author":{"gitId":"fsgmhoward"},"content":"```","lastModifiedDate":"2021-03-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":186,"author":{"gitId":"fsgmhoward"},"content":"### Manual Testing","lastModifiedDate":"2021-03-26"},{"lineNumber":187,"author":{"gitId":"fsgmhoward"},"content":"The current version does not support storing the data on the local drive. To start with the manual testing process, you may refer to the \"QuickStart\" section of the [User Guide](UserGuide.md).","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"Emkay16":44,"fsgmhoward":20,"-":28,"brandonfoong":55,"hiongkaihan":40}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"# Patient Manager","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for _general practitioners_ (GP)","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"who work in clinics to manage their patient list. This includes a recording/retrieval of","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below.","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"Emkay16":6,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"# Patient Manager User Guide","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"Patient Manager is a _Command Line Interface_ (CLI) application for _general practitioners_ (GP) ","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"who work in clinics to manage their patient list. This includes a recording/retrieval of ","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"past record of visit, scheduling of the next appointment, and some other features listed below. ","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"With the Patient Manager, GPs will be able to reduce paperwork and have a more efficient way ","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"to organize the records of their patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"## Table of Contents","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"* [Quickstart](#quickstart)","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"* [Features](#features)","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"    * [Print a help message: `help`](#print-a-help-message-help)","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    * [Adding a patient: `add`](#adding-a-patient-add)","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"    * [Listing all patients: `list`](#listing-all-patients-list)","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"    * [Loading a patient\u0027s medical records: `load`](#loading-a-patients-medical-records-load)","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"    * [Displaying the current loaded patient: `current`](#displaying-the-current-loaded-patient-current)","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"    * [Recording a patient\u0027s consultation details: `record`](#recording-a-patients-consultation-details-record)","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    * [Retrieving a patient\u0027s consultation details: `retrieve`](#retrieving-a-patients-consultation-details-retrieve)","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"    * [Exiting the program: `exit`](#exiting-the-program-exit)","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"* [Command summary](#command-summary)","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"## Quickstart","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"1. Ensure that you have Java 11 installed on your local computer. If you do not have the correct version","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"   of Java installed, `Java 11` can be downloaded from ","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"   [here](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html).","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"   ","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"1. Obtain a copy of the latest version of the Patient Manager (tp.jar) from ","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"   [here](https://github.com/AY2021S2-CS2113T-W09-4/tp/releases) and place it in an empty folder.","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"   ","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"1. Open a terminal/command line (cmd)/powershell. A Windows 10 OS\u0027 screenshot is here:\\","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"   \\","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"   ![PowerShell](./images/WindowsPowerShell.png)","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"   ","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"1. Execute `java -jar tp.jar` to start the Patient Manager.","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"1. Once the welcome message appears, simply type in a command (e.g. [`help`](#print-a-help-message-help)) and hit `ENTER` at the end.","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"1. Refer to the Features section below for more detailed explanations and usage of the available commands.","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"### Print a help message: `help`","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"Prints out the help message with a brief explanation of the available commands. If one or more","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"commands are provided as arguments, the info messages for the indicated commands will be printed.","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"Usage: `help` `OPTIONAL_COMMAND(S)`","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"help list load exit","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"### Adding a patient: `add`","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"Emkay16"},"content":"Adds a patient to the list by entering their IC number.","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":67,"author":{"gitId":"Emkay16"},"content":"Usage: `add` `IC_NUMBER`","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"add S1234567D","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":75,"author":{"gitId":"Emkay16"},"content":"### Listing all patients: `list`","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Emkay16"},"content":"Shows a list of all patients.","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":79,"author":{"gitId":"Emkay16"},"content":"Usage: `list`","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":81,"author":{"gitId":"Emkay16"},"content":"### Loading a patient\u0027s medical records: `load`","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"Emkay16"},"content":"Finds the patient whose IC number matches the given search query and loads their medical records.","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Emkay16"},"content":"If none of the patients\u0027 IC numbers match the search query, it will print an error message.","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":86,"author":{"gitId":"Emkay16"},"content":"Usage: `load` `IC_NUMBER`","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":88,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"load S1234567D","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"Emkay16"},"content":"### Displaying the current loaded patient: `current`","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"Emkay16"},"content":"Displays the patient that has been loaded through the [`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"Emkay16"},"content":"If no patient has been loaded, it will inform the user that there is no loaded patient.","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"Emkay16"},"content":"Usage: `current`","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Emkay16"},"content":"### Recording a patient\u0027s consultation details: `record`","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"Emkay16"},"content":"Adds a patient\u0027s consultation details to the patient\u0027s records.","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"Emkay16"},"content":"This command requires that a patient has been loaded with the ","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"Emkay16"},"content":"[`load`](#loading-a-patients-medical-records-load) command. ","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"Emkay16"},"content":"If no patient has been loaded, it will print an error message.","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"Emkay16"},"content":"Usage: `record` `DETAILS`","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"Emkay16"},"content":"Example of usage:","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"Emkay16"},"content":"record fever and slight cough","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"Emkay16"},"content":"```","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"Emkay16"},"content":"### Retrieving a patient\u0027s consultation details: `retrieve`","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":118,"author":{"gitId":"Emkay16"},"content":"Retrieves all consultation details of a patient.","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"Emkay16"},"content":"This command requires that a patient has been loaded with the","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"Emkay16"},"content":"[`load`](#loading-a-patients-medical-records-load) command.","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"Emkay16"},"content":"If no patient has been loaded, it will print an error message.","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"Emkay16"},"content":"Usage: `retrieve`","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"Emkay16"},"content":"### Exiting the program: `exit`","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"Emkay16"},"content":"Exits the program","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"Emkay16"},"content":"Usage: `exit`","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":131,"author":{"gitId":"Emkay16"},"content":"---","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"Emkay16"},"content":"Listed below are all currently implemented commands in alphabetical order.\\","lastModifiedDate":"2021-03-19"},{"lineNumber":136,"author":{"gitId":"Emkay16"},"content":"Click on the commands to navigate to specific feature details.","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":138,"author":{"gitId":"Emkay16"},"content":"| Command                                                          | Usage              |","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"Emkay16"},"content":"|------------------------------------------------------------------|--------------------|","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"Emkay16"},"content":"| [add](#adding-a-patient-add)                                     | `add` `IC_NUMBER`  |","lastModifiedDate":"2021-03-19"},{"lineNumber":141,"author":{"gitId":"Emkay16"},"content":"| [current](#displaying-the-current-loaded-patient-current)        | `current`          |","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"Emkay16"},"content":"| [exit](#exiting-the-program-exit)                                | `exit`             |","lastModifiedDate":"2021-03-19"},{"lineNumber":143,"author":{"gitId":"Emkay16"},"content":"| [help](#print-a-help-message-help)                               | `help`             |","lastModifiedDate":"2021-03-19"},{"lineNumber":144,"author":{"gitId":"Emkay16"},"content":"| [list](#listing-all-patients-list)                               | `list`             |","lastModifiedDate":"2021-03-19"},{"lineNumber":145,"author":{"gitId":"Emkay16"},"content":"| [load](#loading-a-patients-medical-records-load)                 | `load` `IC_NUMBER` |","lastModifiedDate":"2021-03-19"},{"lineNumber":146,"author":{"gitId":"Emkay16"},"content":"| [record](#recording-a-patients-consultation-details-record)      | `record` `DETAILS` |","lastModifiedDate":"2021-03-19"},{"lineNumber":147,"author":{"gitId":"Emkay16"},"content":"| [retrieve](#retrieving-a-patients-consultation-details-retrieve) | `retrieve`         |","lastModifiedDate":"2021-03-19"},{"lineNumber":148,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"Emkay16":117,"fsgmhoward":2,"-":31}},{"path":"src/main/java/seedu/duke/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"public class Constants {","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"    public static final String ADD_INFO_MESSAGE \u003d \"Add a patient to the list\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: add\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"            + \"Argument(s): IC number\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: add /\u003cIC_NUMBER\u003e\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"            + \"Example: add S1234567D\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"    public static final String LIST_INFO_MESSAGE \u003d \"Show the list of all patients\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: list\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"    public static final String LOAD_INFO_MESSAGE \u003d \"Select a specified patient to add and retrieve records\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: load\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"            + \"Arguments(s): IC number\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: load \u003cIC_NUMBER\u003e\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"            + \"Example: load S1234567D\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    public static final String RECORD_CONSULTATION_INFO_MESSAGE \u003d \"Add a consultation record to the selected patient\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: record\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"            + \"Arguments(s): consultation details\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: record \u003cCONSULTATION DETAILS\u003e\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"            + \"Example: record fever\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    public static final String RETRIEVE_INFO_MESSAGE \u003d \"Retrieve past consultation record from the selected patient\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: retrieve\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CURRENT_INFO_MESSAGE \u003d \"Print out the current patient being loaded.\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            + \"Usage: current\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"    public static final String HELP_INFO_MESSAGE \u003d \"Display information about all commands or selected commands only\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: help\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"            + \"Argument(s): commands (optional)\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: help \u003cOPTIONAL COMMANDS\u003e\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"            + \"Example: help list add\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_INFO_MESSAGE \u003d \"Exit the program\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: exit\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"Invalid command: %s\";","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_MESSAGE \u003d \"Goodbye, we hope to see you again!\";","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Welcome to the Patient Manager.\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"    public static final String INPUT_PROMPT \u003d \"Please input a command: \";","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LONG_LINE \u003d \"----------------------------------------------------------------------\";","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    // Exception messages","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    public static final String EXCEPTION_PARSER_EMPTYSTRING \u003d \"Empty string is found when trying to parse command\";","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"    public static final String EXCEPTION_PARSER_INVALIDCOMMAND \u003d \"Invalid command is provided\";","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"    public static final String EXCEPTION_ADD_INVALIDNRIC \u003d \"Please key in a valid NRIC number!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"    public static final String EXCEPTION_ADD_PATIENTEXISTS \u003d \"Patient already exists!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"    public static final String EXCEPTION_LIST_EMPTY \u003d \"List is currently empty!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"    public static final String EXCEPTION_RECORD_RETRIEVE_NULLPATIENT \u003d \"No patient loaded!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"    public static final String EXCEPTION_RECORD_EMPTYPAYLOAD \u003d \"Please give me more details about the patient\u0027s visit\";","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"    // Number constants","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"    public static final int ID_NUMBER_OF_CHARACTERS \u003d 9;","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"    public static final int INDEX_OF_FIRST_CHARACTER \u003d 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"    public static final int INDEX_OF_LAST_CHARACTER \u003d 8;","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"Emkay16":30,"fsgmhoward":10,"brandonfoong":2,"hiongkaihan":9,"leowxx":2}},{"path":"src/main/java/seedu/duke/Data.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * This class (instance) contains all data of the running application. This","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" * includes patient list and miscellaneous config.","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"public class Data {","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    protected SortedMap\u003cString, Patient\u003e patients;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * This is the patient that is currently being selected. Command sub-classes can read/write","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * this attribute directly.","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * Before modification, if not loaded, it needs to call loadCurrentPatient(id) to load the patient.","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * After modification, saveCurrentPatient() needs to be called to write back any changes on this attribute.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public Patient currentPatient;","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     * This initilizes a empty data instance.","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public Data() {","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        this(new TreeMap\u003c\u003e());","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes a data instance with an existing patient list.","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     * @param patients The patient list","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    public Data(SortedMap\u003cString, Patient\u003e patients) {","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        this.patients \u003d patients;","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d null;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves the full hashmap of patients.","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient hashmap","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    public SortedMap\u003cString, Patient\u003e getPatients() {","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"        return patients;","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves a single patient bases on its unique identifier.","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be retrieved","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient instance associated with this ID if found, otherwise null is returned","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    public Patient getPatient(String id) {","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        return patients.get(id);","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     * Add or update a new patient to the hashmap of this database.","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"     * @param patient the patient to be added/updated","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    public void setPatient(Patient patient) {","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(patient.getID(), patient);","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"     * This loads a patient to the currentPatient attribute.","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"     * Take note that currentPatient can still be null if there is no patients with this id in the hashmap.","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be loaded","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    public void loadCurrentPatient(String id) {","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d getPatient(id);","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"     * This saves the patient in currentPatient attribute back to the hashmap.","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"    public void saveCurrentPatient() {","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"        setPatient(currentPatient);","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":79}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.lang.reflect.Constructor;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/Parser.java */","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" * This is the parser for parsing the line of command to tokens and construct the command class.","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class Parser {","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * This is the delimiter for string join.","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * default value is a single whitespace (for string split, it is any number of whitespaces)","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DELIMITER \u003d \" \";","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * This is the class prefix, which will be put in front of the class name when parsing the command.","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CLASS_PREFIX \u003d \"seedu.duke.command.\";","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the Parser class.","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Ui instance which will be passed to the command instances","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Data instance which will be passed to the command instances","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Parser(Ui ui, Data data) {","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * Parse a line of command, put it into a hash map, then construct a command instance","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Segments are splitted by \u0027/\u0027","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * Example: commandX some_description /optY Y_description Y_description_1 /optZ Z_description","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * Output argument hashmap:","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     * |   key   |             value             |","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"     * |---------|-------------------------------|","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * | command | commandX                      |","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * | payload | some_description              |","lastModifiedDate":"2021-03-06"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * | optY    | Y_description Y_description_1 |","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * | optZ    | Z_description                 |","lastModifiedDate":"2021-03-06"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * Then, ui, tasks and this argument hashmap will be passed to initialize a command class.","lastModifiedDate":"2021-03-06"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     * The command class is determined by the 1st token of the command string. For example, for a command string \u0027find\u0027,","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"     * command class \u0027duke.command.FindCommand\u0027 will be initialized.","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"     * @param fullCommand The line of command to be parsed","lastModifiedDate":"2021-03-06"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * @return A Command instance which is ready to be executed","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @see Command","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public Command parse(String fullCommand) throws Exception {","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-06"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        String[] tokens \u003d fullCommand.split(\"\\\\s+\");","lastModifiedDate":"2021-03-06"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        // If first token (command) is empty, there are empty spaces typed in at the front - so we remove it","lastModifiedDate":"2021-03-06"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens[0].isEmpty()) {","lastModifiedDate":"2021-03-06"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"            tokens \u003d Arrays.copyOfRange(tokens, 1, tokens.length);","lastModifiedDate":"2021-03-06"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens.length \u003d\u003d 0) {","lastModifiedDate":"2021-03-06"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception","lastModifiedDate":"2021-03-06"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(Constants.EXCEPTION_PARSER_EMPTYSTRING);","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(\"command\", tokens[0]);","lastModifiedDate":"2021-03-06"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        // Default key is \"payload\"","lastModifiedDate":"2021-03-06"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        String key \u003d \"payload\";","lastModifiedDate":"2021-03-06"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        ArrayList\u003cString\u003e values \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-06"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 1; i \u003c tokens.length; ++i) {","lastModifiedDate":"2021-03-06"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            // Check whether this token is a new key","lastModifiedDate":"2021-03-06"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"            if (tokens[i].charAt(0) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2021-03-06"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"                // If it is, save current value into the map and start a new k-v pair","lastModifiedDate":"2021-03-06"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"                arguments.put(key, String.join(DELIMITER, values));","lastModifiedDate":"2021-03-06"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                key \u003d tokens[i].substring(1);","lastModifiedDate":"2021-03-06"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"                values.clear();","lastModifiedDate":"2021-03-06"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"            } else {","lastModifiedDate":"2021-03-06"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"                // If not, append this token to the end of the value","lastModifiedDate":"2021-03-06"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"                values.add(tokens[i]);","lastModifiedDate":"2021-03-06"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-06"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"        // Store the last k-v pair","lastModifiedDate":"2021-03-06"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"        // Store even when `values` is empty, as that indicates an empty string","lastModifiedDate":"2021-03-06"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(key, String.join(DELIMITER, values));","lastModifiedDate":"2021-03-06"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a respective class from the command (by capitalize first character)","lastModifiedDate":"2021-03-06"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d tokens[0] + \"Command\";","lastModifiedDate":"2021-03-06"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d className.substring(0, 1).toUpperCase() + className.substring(1);","lastModifiedDate":"2021-03-06"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d CLASS_PREFIX + className;","lastModifiedDate":"2021-03-06"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        try {","lastModifiedDate":"2021-03-06"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            Class\u003c?\u003e cls \u003d Class.forName(className);","lastModifiedDate":"2021-03-06"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"            Constructor\u003c?\u003e constructor \u003d cls.getDeclaredConstructor(Ui.class, Data.class, HashMap.class);","lastModifiedDate":"2021-03-06"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d constructor.newInstance(ui, data, arguments);","lastModifiedDate":"2021-03-06"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            return (Command) obj;","lastModifiedDate":"2021-03-06"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-06"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"            // If any exception thrown above, it means the command is not formatted properly","lastModifiedDate":"2021-03-06"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception","lastModifiedDate":"2021-03-06"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(Constants.EXCEPTION_PARSER_INVALIDCOMMAND, e);","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":104}},{"path":"src/main/java/seedu/duke/PatientManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * Main class of the application, where the entry point is.","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class PatientManager {","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    private Data data;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    private Ui ui;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    private Parser parser;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes all resources for the program.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    private PatientManager() {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        data \u003d new Data();","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        parser \u003d new Parser(ui, data);","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * This is the actual program logic for the application.","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    private void run() {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        ui.printWelcome();","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        while (true) {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            String fullCommand \u003d ui.readInput();","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"            if (fullCommand \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                // Reached EOF but no exit command is executed - we still exit","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            ui.printLine();","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            try {","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"                Command cmd \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"                cmd.execute();","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"                if (cmd.isExit()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"                    break;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"                }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"                ui.printException(e);","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            } finally {","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"                ui.printLine();","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        // Program Exits, do some cleaning","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        ui.closeScanner();","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * Main entry-point for the PatientManager application.","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"        PatientManager pm \u003d new PatientManager();","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        pm.run();","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"fsgmhoward":51,"-":7,"leowxx":1}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * This class handles the loading and saving of data from/to a plaintext file on","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * the hard drive.","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: To be implemented","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Storage {","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    ","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":10}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":" * This class handles all UI-related functions.","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"public class Ui {","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"    private Scanner userInputScanner;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"     * Initialize a UI handler.","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"    public Ui() {","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"        userInputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"     * Returns user input as a String.","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"     * @return user input","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"    public String readInput() {","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        return userInputScanner.nextLine();","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"     * Closes scanner.","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"    public void closeScanner() {","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"        userInputScanner.close();","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"leowxx"},"content":"     * Prints the String specified in @param.","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"     * @param message String to be printed","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"leowxx"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"leowxx"},"content":"        System.out.println(message);","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"leowxx"},"content":"     * Prints a welcome message.","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"leowxx"},"content":"    public void printWelcome() {","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.WELCOME_MESSAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.INPUT_PROMPT);","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"leowxx"},"content":"     * Prints the exception message specified in @param.","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"leowxx"},"content":"     * @param e Exception to be printed","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"leowxx"},"content":"    public void printException(Exception e) {","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"leowxx"},"content":"        printMessage(e.toString());","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"     * This prints a long breaking line to separate user input and command outputs.","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    public void printLine() {","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        printMessage(Constants.LONG_LINE);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"fsgmhoward":6,"leowxx":57}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"    public AddCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        String patientID \u003d arguments.get(\"payload\");","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"        patientID \u003d patientID.toUpperCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        int stringLength \u003d patientID.length();","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"        boolean validID \u003d true;","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"        // Checks if ID has 9 characters","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        if (stringLength !\u003d Constants.ID_NUMBER_OF_CHARACTERS) {","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"            validID \u003d false;","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        // Checks if ID is valid","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        for (int i \u003d 0; i \u003c stringLength; i++) {","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"            char c \u003d patientID.charAt(i);","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"            if (i \u003d\u003d Constants.INDEX_OF_FIRST_CHARACTER) {","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if first index of ID is S,T,F or G","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"                if (c !\u003d \u0027S\u0027 \u0026\u0026 c !\u003d \u0027T\u0027 \u0026\u0026 c !\u003d \u0027F\u0027 \u0026\u0026 c !\u003d \u0027G\u0027) {","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"                    validID \u003d false;","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"            } else if (i \u003d\u003d Constants.INDEX_OF_LAST_CHARACTER) {","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if last index of ID is a letter","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"                if (!Character.isLetter(c)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"                    validID \u003d false;","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"            } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"                // Checks if the rest of the indexes are digits","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"                if (!Character.isDigit(c)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"                    validID \u003d false;","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"        if (!validID) {","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(Constants.EXCEPTION_ADD_INVALIDNRIC);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"hiongkaihan"},"content":"        } else if (data.getPatients().containsKey(patientID)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(Constants.EXCEPTION_ADD_PATIENTEXISTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"hiongkaihan"},"content":"        assert validID : \"validID should be true\";","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(patientID);","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"        ui.printMessage(\"Patient \" + patientID + \" has been added!\");","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"hiongkaihan":67}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/command/Command.java */","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" * Base class of all the commands, providing necessary interfaces and methods","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" * for implementation.","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Command {","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    protected Boolean isExit \u003d false;","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a command.","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public Command(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     * Check whether program should exit after this command is finished.","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     * @return True for yes, False for no","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isExit() {","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        return this.isExit;","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Abstract method to be implemented by each individual command.","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * This is where the actual program logic of each command is stored.","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"    public abstract void execute() throws Exception;","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":43,"brandonfoong":1}},{"path":"src/main/java/seedu/duke/command/CurrentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class CurrentCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public CurrentCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        if (data.currentPatient !\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(\"The currently loaded patient\u0027s ID is \" + data.currentPatient.getID() + \".\");","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        } else {","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            ui.printMessage(\"There is no patient being loaded now.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":28}},{"path":"src/main/java/seedu/duke/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"    public ExitCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"        isExit \u003d true;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        ui.printMessage(Constants.EXIT_MESSAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Emkay16":28}},{"path":"src/main/java/seedu/duke/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    public HelpCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    public void execute() {","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        String[] commands \u003d arguments.get(\"payload\").toLowerCase().split(\" \");","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        if (commands[0].isEmpty()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"            ui.printMessage(Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"                    + Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"                    + Constants.LOAD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"                    + Constants.RECORD_CONSULTATION_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"                    + Constants.RETRIEVE_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"                    + Constants.CURRENT_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"                    + Constants.HELP_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"                    + Constants.EXIT_INFO_MESSAGE","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"            );","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"        } else {","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"            for (String command : commands) {","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"                switch (command) {","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"                case \"add\":","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.ADD_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"                case \"list\":","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.LIST_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"                case \"load\":","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.LOAD_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"                case \"record\":","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.RECORD_CONSULTATION_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"                case \"retrieve\":","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.RETRIEVE_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"                case \"current\":","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"                    ui.printMessage(Constants.CURRENT_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"                case \"help\":","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.HELP_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"                case \"exit\":","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(Constants.EXIT_INFO_MESSAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"                    break;","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"                default:","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"                    ui.printMessage(String.format(Constants.INVALID_COMMAND_MESSAGE, command) + System.lineSeparator());","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"                }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Emkay16":62,"fsgmhoward":4}},{"path":"src/main/java/seedu/duke/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"    public ListCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        SortedMap\u003cString, Patient\u003e patients \u003d data.getPatients();","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        int patientCount \u003d 0;","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        String list \u003d \"List of patients (in alphanumeric order):\";","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"        for (String patientID : patients.keySet()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"            list +\u003d \"\\n\" + ++patientCount + \". \" + patientID;","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        if (patientCount \u003d\u003d 0) {","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(Constants.EXCEPTION_LIST_EMPTY);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"        } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"            assert list !\u003d \"\" : \"List should not be empty\";","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"            ui.printMessage(list);","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"fsgmhoward":3,"hiongkaihan":38}},{"path":"src/main/java/seedu/duke/command/LoadCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    public LoadCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"    public void execute() {","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        // TODO: Replace printed string with actual details of the patient.","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        String id \u003d arguments.get(\"payload\");","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        data.loadCurrentPatient(id);","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"        if (data.currentPatient !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient \" + data.currentPatient.getID() + \"\\\u0027s data has been found and loaded.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient\\\u0027s data is not found.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"leowxx":31}},{"path":"src/main/java/seedu/duke/command/RecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"public class RecordCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public RecordCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        assert ui !\u003d null : \"Ui must not be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        assert arguments.containsKey(\"payload\") : \"Arguments must contain a value for the `payload` key\";","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Implement proper exception","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"            throw new Exception(Constants.EXCEPTION_RECORD_RETRIEVE_NULLPATIENT);","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.get(\"payload\").length() \u003d\u003d 0) {","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"            throw new Exception(Constants.EXCEPTION_RECORD_EMPTYPAYLOAD);","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        String consultationDetail \u003d arguments.get(\"payload\");","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        Record record \u003d new Record(consultationDetail);","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        patient.addRecord(record);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(\"Added new record: \" + record.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"brandonfoong":40}},{"path":"src/main/java/seedu/duke/command/RetrieveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Constants;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"public class RetrieveCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    public RetrieveCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        assert ui !\u003d null : \"Ui must not be null\";","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Implement proper exception","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"            throw new Exception(Constants.EXCEPTION_RECORD_RETRIEVE_NULLPATIENT);","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cRecord\u003e records \u003d patient.getRecords();","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        ui.printMessage(\"Here is a list of \" + patient.getID() + \"\u0027s records:\");","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"            Record record \u003d records.get(i);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"            ui.printMessage(Integer.toString(i + 1) + \". \" + record.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"brandonfoong":39}},{"path":"src/main/java/seedu/duke/model/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represents a patient, and no two patients should","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" * contain the same ID field. The instance contains records for all visits.","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class Patient {","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     * This is the unique identifier of the patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * In SG\u0027s context, we use NRIC/FIN for this field","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected String id;","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected ArrayList\u003cRecord\u003e records;","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with an empty record list.","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id) {","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        this(id, new ArrayList\u003c\u003e());","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with a pre-defined record list.","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * @param records Patient\u0027s visit record list","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id, ArrayList\u003cRecord\u003e records) {","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        this.records \u003d records;","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * Get unique identifier of the patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @return Patient\u0027s unique identifier","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public String getID() {","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return id;","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    /* Functionals for manipulating records */","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * Get all records associated with this patient.","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * @return All records in an ArrayList","lastModifiedDate":"2021-03-06"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    public ArrayList\u003cRecord\u003e getRecords() {","lastModifiedDate":"2021-03-06"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        return records;","lastModifiedDate":"2021-03-06"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * Add a single record into the patient\u0027s record list.","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @param record Record to be inserted to the back","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        records.add(record);","lastModifiedDate":"2021-03-06"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":59}},{"path":"src/main/java/seedu/duke/model/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represent a visit record. It can contain","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * medical diagnosis, prescription, test results, etc.","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: For v1.0 iteration, we will just implement a single string field to store everything","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Record {","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected String consultationDetail;","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * Create a new visit record with details as a single string.","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param consultationDetail detail of the visit record (diagnosis, prescription, etc.)","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public Record(String consultationDetail) {","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        this.consultationDetail \u003d consultationDetail;","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * Obtain the consultation detail of this record.","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @return Consultation detail related to this record","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public String getConsultationDetail() {","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        return consultationDetail;","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        return consultationDetail;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":26,"brandonfoong":7}},{"path":"src/test/java/seedu/duke/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"class AddCommandTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_patientAdded() {","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S9841974H\");","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient S9841974H has been added!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_invalidID_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S12345677A\");","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Please key in a valid NRIC number!\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"    public void executeAddCommand_patientAlreadyExists_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S9841974H\");","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient already exists!\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"hiongkaihan":72}},{"path":"src/test/java/seedu/duke/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.command.ExitCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"public class ExitCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"    public void executeExitCommand_extraArguments_exitSuccess() {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"exit\");","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"now\");","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        ExitCommand exitCommand \u003d new ExitCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"            exitCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"        assertEquals(\"Goodbye, we hope to see you again!\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Emkay16":36}},{"path":"src/test/java/seedu/duke/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.command.HelpCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"public class HelpCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"    public void executeHelpCommand_multipleCommands_allMessagesPrinted() {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"help\");","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"list add exit\");","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"            helpCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Emkay16"},"content":"        assertEquals(Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Emkay16"},"content":"                + Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Emkay16"},"content":"                + Constants.EXIT_INFO_MESSAGE  + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"Emkay16"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"Emkay16"},"content":"    public void executeHelpCommand_multipleCommandsWithInvalidCommands_messagesPrinted() {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Emkay16"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"Emkay16"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"Emkay16"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"command\", \"help\");","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"Emkay16"},"content":"        arguments.put(\"payload\", \"list add bye\");","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"Emkay16"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"Emkay16"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"Emkay16"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"Emkay16"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"Emkay16"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"Emkay16"},"content":"            helpCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"Emkay16"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"Emkay16"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"Emkay16"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"Emkay16"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"Emkay16"},"content":"        assertEquals(Constants.LIST_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"Emkay16"},"content":"                        + Constants.ADD_INFO_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"Emkay16"},"content":"                        + String.format(Constants.INVALID_COMMAND_MESSAGE, \"bye\")","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Emkay16"},"content":"                        + System.lineSeparator() + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"Emkay16"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"Emkay16"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"Emkay16"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Emkay16":63}},{"path":"src/test/java/seedu/duke/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.ListCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"public class ListCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"    public void executeListCommand_listEmpty_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"list\");","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        ","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"        ListCommand listCommand \u003d new ListCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"            listCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"List is currently empty!\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"    public void executeListCommand() {","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"list\");","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"        ListCommand listCommand \u003d new ListCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"hiongkaihan"},"content":"        try {","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"hiongkaihan"},"content":"            listCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"hiongkaihan"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"hiongkaihan"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(\"List of patients (in alphanumeric order):\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"                + \"1. S1234567D\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"hiongkaihan"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"hiongkaihan"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":3,"hiongkaihan":52}},{"path":"src/test/java/seedu/duke/LoadCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"import seedu.duke.command.LoadCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"public class LoadCommandTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"    @Test","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"    public void executeLoadCommand() {","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"command\", \"load\");","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"payload\", \"S7654321B\");","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"        patient \u003d new Patient(\"S7654321B\");","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        LoadCommand loadCommand \u003d new LoadCommand(ui, data, arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        try {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"            loadCommand.execute();","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"            System.out.println(\"Error occurred while loading patient data.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        ui.closeScanner();","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"fsgmhoward":1,"leowxx":31}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.EchoCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"public class ParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    Parser defaultParser \u003d new Parser(new Ui(), new Data());","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    HashMap\u003cString, String\u003e sampleArguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor for this class. This sets a sample arguments hashmap.","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    public ParserTest() {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"command\", \"echo\");","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"payload\", \"pVal1 pVal2\");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyA\", \"valA\");","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyB\", \"valB1 valB2\");","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        sampleArguments.put(\"keyC\", \"\");","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_emptyString_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"\";","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        Exception e \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"            defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(e.getMessage(), Constants.EXCEPTION_PARSER_EMPTYSTRING);","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"invalid_command a b c /p x\";","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        Exception e \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"            defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        assertEquals(e.getMessage(), Constants.EXCEPTION_PARSER_INVALIDCOMMAND);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests whether a normal command (with or w/o leading/trailing spaces) can be parsed.","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_normalCommand_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        // Normal command","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand1 \u003d \"echo pVal1 pVal2 /keyA valA /keyB valB1 valB2 /keyC\";","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        // Command with leading/trailing spaces","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand2 \u003d \"     echo pVal1 pVal2 /keyA valA /keyB valB1 valB2 /keyC    \";","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"        // Command with separation of more than 1 spaces","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand3 \u003d \"     echo     pVal1  pVal2   /keyA valA   /keyB valB1   valB2 /keyC    \";","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand1);","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand2);","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand3);","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(((EchoCommand) command).getArguments().equals(sampleArguments));","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests single payload (without any parameters).","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_singlePayload_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"        String words \u003d \"Hi! This is PatientManager!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"echo \" + words;","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"            // Capture standard output","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            final ByteArrayOutputStream myOut \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"            System.setOut(new PrintStream(myOut));","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"            command.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            final String standardOutput \u003d myOut.toString();","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            assertEquals(standardOutput, words);","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"     * This test case tests whether the data class is passed correctly.","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"    public void parse_customData_parsedSuccessfully() {","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"        String fullCommand \u003d \"echo Hi!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":"        SortedMap\u003cString, Patient\u003e patients \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"        String nric \u003d \"S1234567D\";","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(nric, new Patient(nric));","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"fsgmhoward"},"content":"        Data data \u003d new Data(patients);","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"fsgmhoward"},"content":"        Parser parser \u003d new Parser(new Ui(), data);","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"fsgmhoward"},"content":"            Data compareData \u003d ((EchoCommand) command).getData();","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(compareData.getPatient(nric) !\u003d null);","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"fsgmhoward"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"fsgmhoward"},"content":"            Command command \u003d defaultParser.parse(fullCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(command instanceof EchoCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"fsgmhoward"},"content":"            Data compareData \u003d ((EchoCommand) command).getData();","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"fsgmhoward"},"content":"            assertTrue(compareData.getPatient(nric) \u003d\u003d null);","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"fsgmhoward"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"fsgmhoward":132}},{"path":"src/test/java/seedu/duke/RecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"class RecordCommandTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_noPatientLoaded_exceptionThrown() {","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        });","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_patientLoaded_recordAdded() {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cRecord\u003e records \u003d patient.getRecords();","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(1, records.size());","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_emptyPayload_exceptionThrown() {","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"\");","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"        });","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"Please give me more details about the patient\u0027s visit\", exception.getMessage());","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"fsgmhoward":3,"brandonfoong":64}},{"path":"src/test/java/seedu/duke/RetrieveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RetrieveCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"class RetrieveCommandTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_noPatientLoaded_exceptionThrown() {","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        });","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_patientLoadedAndRecordsAdded_printsRecords() {","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        Patient patient \u003d new Patient(\"S1234567D\");","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out to a ByteArrayOutputStream","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(new PrintStream(bos));","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(ui, data, arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"Here is a list of \" + patient.getID() + \"\u0027s records:\" + System.lineSeparator()","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"                + \"1. coughing\" + System.lineSeparator(), bos.toString());","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out back to standard output","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"fsgmhoward":2,"brandonfoong":64}},{"path":"src/test/java/seedu/duke/command/EchoCommand.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * This is a command for testing purposes.","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class.","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public EchoCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        ui.printMessage(arguments.get(\"payload\"));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * This is the getter for arguments hashmap.","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * @return Arguments hashmap","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    public HashMap\u003cString, String\u003e getArguments() {","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        return arguments;","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * This is the getter for the data object.","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @return data object","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public Data getData() {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return data;","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"fsgmhoward":42}}]
