[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    enableAssertions \u003d true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":46,"brandonfoong":1}},{"path":"src/main/java/seedu/duke/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"public class Constants {"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"    public static final String ADD_INFO_MESSAGE \u003d \"Add a patient to the list\\n\""},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: add\\n\""},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":"            + \"Argument(s): name, IC number\\n\""},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: add /\u003cIC_NUMBER\u003e\\n\""},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":"            + \"Example: add S1234567A\\n\\n\";"},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"    public static final String LIST_INFO_MESSAGE \u003d \"Show the list of all patients\\n\""},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: list\\n\\n\";"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"    public static final String LOAD_INFO_MESSAGE \u003d \"\u003cWIP\u003e Select a specified patient to add and retrieve records\\n\""},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: load\\n\""},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"            + \"Arguments(s): IC number\\n\""},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: load \u003cIC_NUMBER\u003e\\n\""},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"            + \"Example: load S1234567A\\n\\n\";"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    public static final String RECORD_CONSULTATION_INFO_MESSAGE \u003d \"Add a consultation record to the selected patient\\n\""},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"            + \"Command prefix: record\\n\""},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"            + \"Arguments(s): consultation details\\n\""},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: record \u003cCONSULTATION DETAILS\u003e\\n\""},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"            + \"Example: record fever\\n\\n\";"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    public static final String RETRIEVE_INFO_MESSAGE \u003d \"Retrieve past consultation record from the selected patient\\n\""},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: retrieve\\n\\n\";"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_INFO_MESSAGE \u003d \"Exit the program\\n\""},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"            + \"Usage: exit\\n\\n\";"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"    public static final String EXIT_MESSAGE \u003d \"Goodbye, we hope to see you again!\";"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Welcome to the Patient Manager.\\n\";"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"    public static final String INPUT_PROMPT \u003d \"Please input a command: \";"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"}"}],"authorContributionMap":{"Emkay16":27,"leowxx":2}},{"path":"src/main/java/seedu/duke/Data.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * This class (instance) contains all data of the running application. This"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * includes patient list and miscellaneous config."},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class Data {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, Patient\u003e patients;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * This is the patient that is currently being selected. Command sub-classes can read/write"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * this attribute directly."},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * Before modification, if not loaded, it needs to call loadCurrentPatient(id) to load the patient."},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * After modification, saveCurrentPatient() needs to be called to write back any changes on this attribute."},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public Patient currentPatient;"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * This initilizes a empty data instance."},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public Data() {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        this(new HashMap\u003c\u003e());"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes a data instance with an existing patient list."},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param patients The patient list"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Data(HashMap\u003cString, Patient\u003e patients) {"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.patients \u003d patients;"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d null;"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves the full hashmap of patients."},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient hashmap"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"    public HashMap\u003cString, Patient\u003e getPatients() {"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        return patients;"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves a single patient bases on its unique identifier."},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be retrieved"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient instance associated with this ID if found, otherwise null is returned"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    public Patient getPatient(String id) {"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        return patients.get(id);"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     * Add or update a new patient to the hashmap of this database."},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     * @param patient the patient to be added/updated"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"    public void setPatient(Patient patient) {"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(patient.getID(), patient);"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"     * This loads a patient to the currentPatient attribute."},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"     * Take note that currentPatient can still be null if there is no patients with this id in the hashmap."},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be loaded"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"    public void loadCurrentPatient(String id) {"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d getPatient(id);"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"     * This saves the patient in currentPatient attribute back to the hashmap."},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"    public void saveCurrentPatient() {"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"        setPatient(currentPatient);"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":78}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * Main class of the application, where the entry point is."},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    private Data data;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    private Parser parser;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes all resources for the program."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    private Duke() {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        data \u003d new Data();"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        parser \u003d new Parser(ui, data);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * This is the actual program logic for the application."},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    private void run() {"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        ui.printWelcome();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        while (true) {"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            String fullCommand \u003d ui.readInput();"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"            if (fullCommand \u003d\u003d null) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                // Reached EOF but no exit command is executed - we still exit"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"                Command cmd \u003d parser.parse(fullCommand);"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"                cmd.execute();"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"                if (cmd.isExit()) {"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception e) {"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"                ui.printException(e);"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"        // Program Exits, do some cleaning"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"        ui.closeScanner();"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"        duke.run();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fsgmhoward":42,"-":13,"leowxx":1}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.lang.reflect.Constructor;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/Parser.java */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" * This is the parser for parsing the line of command to tokens and construct the command class."},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * This is the delimiter for string join."},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * default value is a single whitespace (for string split, it is any number of whitespaces)"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DELIMITER \u003d \" \";"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * This is the class prefix, which will be put in front of the class name when parsing the command."},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CLASS_PREFIX \u003d \"seedu.duke.command.\";"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the Parser class."},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Ui instance which will be passed to the command instances"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Data instance which will be passed to the command instances"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Parser(Ui ui, Data data) {"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * Parse a line of command, put it into a hash map, then construct a command instance"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Segments are splitted by \u0027/\u0027"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * Example: commandX some_description /optY Y_description Y_description_1 /optZ Z_description"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * Output argument hashmap:"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     * |   key   |             value             |"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"     * |---------|-------------------------------|"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * | command | commandX                      |"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * | payload | some_description              |"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * | optY    | Y_description Y_description_1 |"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * | optZ    | Z_description                 |"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * Then, ui, tasks and this argument hashmap will be passed to initialize a command class."},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     * The command class is determined by the 1st token of the command string. For example, for a command string \u0027find\u0027,"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"     * command class \u0027duke.command.FindCommand\u0027 will be initialized."},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"     * @param fullCommand The line of command to be parsed"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * @return A Command instance which is ready to be executed"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @see Command"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public Command parse(String fullCommand) throws Exception {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        String[] tokens \u003d fullCommand.split(\"\\\\s+\");"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        // If first token (command) is empty, there are empty spaces typed in at the front - so we remove it"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens[0].isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"            tokens \u003d Arrays.copyOfRange(tokens, 1, tokens.length);"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens.length \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(\"Empty string is found when trying to parse command\");"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(\"command\", tokens[0]);"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        // Default key is \"payload\""},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        String key \u003d \"payload\";"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        ArrayList\u003cString\u003e values \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 1; i \u003c tokens.length; ++i) {"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            // Check whether this token is a new key"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"            if (tokens[i].charAt(0) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"                // If it is, save current value into the map and start a new k-v pair"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"                arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                key \u003d tokens[i].substring(1);"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"                values.clear();"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"                // If not, append this token to the end of the value"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"                values.add(tokens[i]);"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"        // Store the last k-v pair"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"        // Store even when `values` is empty, as that indicates an empty string"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a respective class from the command (by capitalize first character)"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d tokens[0] + \"Command\";"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d className.substring(0, 1).toUpperCase() + className.substring(1);"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d CLASS_PREFIX + className;"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            Class\u003c?\u003e cls \u003d Class.forName(className);"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"            Constructor\u003c?\u003e constructor \u003d cls.getDeclaredConstructor(Ui.class, Data.class, HashMap.class);"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d constructor.newInstance(ui, data, arguments);"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            return (Command) obj;"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"            // If any exception thrown above, it means the command is not formatted properly"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(\"Invalid command is provided\", e);"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":104}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * This class handles the loading and saving of data from/to a plaintext file on"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * the hard drive."},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: To be implemented"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    "},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":10}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":" * This class handles all UI-related functions."},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":" */"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"    private Scanner userInputScanner;"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"     * Initialize a UI handler."},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"        userInputScanner \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"     * Returns user input as a String."},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"     * @return user input"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"    public String readInput() {"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        return userInputScanner.nextLine();"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"     * Closes scanner."},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"    public void closeScanner() {"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"        userInputScanner.close();"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":33,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"leowxx"},"content":"     * Prints the String specified in @param."},{"lineNumber":35,"author":{"gitId":"leowxx"},"content":"     * @param message String to be printed"},{"lineNumber":36,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"leowxx"},"content":"    public void printMessage(String message) {"},{"lineNumber":38,"author":{"gitId":"leowxx"},"content":"        System.out.println(message);"},{"lineNumber":39,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":41,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"leowxx"},"content":"     * Prints a welcome message."},{"lineNumber":43,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"leowxx"},"content":"    public void printWelcome() {"},{"lineNumber":45,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.WELCOME_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"leowxx"},"content":"        printMessage(Constants.INPUT_PROMPT);"},{"lineNumber":47,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":49,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"leowxx"},"content":"     * Prints the exception message specified in @param."},{"lineNumber":51,"author":{"gitId":"leowxx"},"content":"     * @param e Exception to be printed"},{"lineNumber":52,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"leowxx"},"content":"    public void printException(Exception e) {"},{"lineNumber":54,"author":{"gitId":"leowxx"},"content":"        printMessage(e.toString());"},{"lineNumber":55,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":57,"author":{"gitId":"leowxx"},"content":"}"}],"authorContributionMap":{"leowxx":57}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"public class AddCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"    public AddCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    public void execute() throws Exception {"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        // TODO Replace by ui after ui is implemented"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        String patientID \u003d arguments.get(\"payload\");"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"        int stringLength \u003d patientID.length();"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"        // TODO more ways to check for invalid NRIC and other exceptions"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        if (stringLength !\u003d 9) {"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(\"Please key in a valid NRIC number!\");"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        } else if (data.getPatients().containsKey(patientID)) {"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(\"Patient already exists!\");"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"        Patient patient \u003d new Patient(patientID);"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"        data.setPatient(patient);"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"        System.out.print(\"Patient \" + patientID + \" has been added!\\n\");"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"}"}],"authorContributionMap":{"hiongkaihan":40}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/command/Command.java */"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" * Base class of all the commands, providing necessary interfaces and methods"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" * for implementation."},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, String\u003e arguments;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    protected Boolean isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a command."},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public Command(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        this.arguments \u003d arguments;"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     * Check whether program should exit after this command is finished."},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     * @return True for yes, False for no"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        return this.isExit;"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Abstract method to be implemented by each individual command."},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * This is where the actual program logic of each command is stored."},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"    public abstract void execute() throws Exception;"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":43,"brandonfoong":1}},{"path":"src/main/java/seedu/duke/command/EchoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * A demo of how the Command class is used."},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class EchoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public EchoCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        // Replace by ui after ui is implemented"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        ui.printMessage(\"You said this: \" + arguments.get(\"payload\"));"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        ui.printMessage(\"This is the full argument hashmap content: \" + arguments);"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":28}},{"path":"src/main/java/seedu/duke/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":"    public ExitCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"        isExit \u003d true;"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"    public void execute() throws Exception {"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"        ui.printMessage(Constants.EXIT_MESSAGE);"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"}"}],"authorContributionMap":{"Emkay16":28}},{"path":"src/main/java/seedu/duke/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Emkay16"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":3,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Constants;"},{"lineNumber":4,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Data;"},{"lineNumber":5,"author":{"gitId":"Emkay16"},"content":"import seedu.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":7,"author":{"gitId":"Emkay16"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":9,"author":{"gitId":"Emkay16"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Emkay16"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Emkay16"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":12,"author":{"gitId":"Emkay16"},"content":"     * @param ui Instance of Ui class, for UI input/output"},{"lineNumber":13,"author":{"gitId":"Emkay16"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config"},{"lineNumber":14,"author":{"gitId":"Emkay16"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":15,"author":{"gitId":"Emkay16"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Emkay16"},"content":"    public HelpCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":17,"author":{"gitId":"Emkay16"},"content":"        super(ui, data, arguments);"},{"lineNumber":18,"author":{"gitId":"Emkay16"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Emkay16"},"content":""},{"lineNumber":20,"author":{"gitId":"Emkay16"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Emkay16"},"content":"    public void execute() {"},{"lineNumber":22,"author":{"gitId":"Emkay16"},"content":"        ui.printMessage(Constants.ADD_INFO_MESSAGE"},{"lineNumber":23,"author":{"gitId":"Emkay16"},"content":"                + Constants.LIST_INFO_MESSAGE"},{"lineNumber":24,"author":{"gitId":"Emkay16"},"content":"                + Constants.LOAD_INFO_MESSAGE"},{"lineNumber":25,"author":{"gitId":"Emkay16"},"content":"                + Constants.RECORD_CONSULTATION_INFO_MESSAGE"},{"lineNumber":26,"author":{"gitId":"Emkay16"},"content":"                + Constants.RETRIEVE_INFO_MESSAGE"},{"lineNumber":27,"author":{"gitId":"Emkay16"},"content":"                + Constants.EXIT_INFO_MESSAGE"},{"lineNumber":28,"author":{"gitId":"Emkay16"},"content":"        );"},{"lineNumber":29,"author":{"gitId":"Emkay16"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Emkay16"},"content":"}"}],"authorContributionMap":{"Emkay16":30}},{"path":"src/main/java/seedu/duke/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Data;"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.Ui;"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"    public ListCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        super(ui, data, arguments);"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"    public void execute() throws Exception {"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":"        // Todo Replace by ui after ui is implemented"},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, Patient\u003e patients \u003d data.getPatients();"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"        int patientCount \u003d 0;"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        String list \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        for (String patientID : patients.keySet()) {"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":"            list +\u003d ++patientCount + \". \" + patientID + \"\\n\";"},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"        // Todo implement more exceptions"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"        if (patientCount \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"hiongkaihan"},"content":"            throw new Exception(\"List is currently empty!\");"},{"lineNumber":36,"author":{"gitId":"hiongkaihan"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"hiongkaihan"},"content":"            System.out.print(list);"},{"lineNumber":38,"author":{"gitId":"hiongkaihan"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"hiongkaihan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hiongkaihan"},"content":"}"}],"authorContributionMap":{"hiongkaihan":40}},{"path":"src/main/java/seedu/duke/command/LoadCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Data;"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":"import seedu.duke.Ui;"},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"public class LoadCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    public LoadCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"        super(ui, data, arguments);"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"    public void execute() {"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        // TODO: Replace printed string with actual details of the patient."},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        String id \u003d arguments.get(\"payload\");"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        data.loadCurrentPatient(id);"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"        if (data.currentPatient !\u003d null) {"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient \" + data.currentPatient.getID() + \"\\\u0027s data has been found and loaded.\");"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"            ui.printMessage(\"Patient\\\u0027s data is not found.\");"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":"}"}],"authorContributionMap":{"leowxx":31}},{"path":"src/main/java/seedu/duke/command/RecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"public class RecordCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public RecordCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws Exception {"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Replace System.out.println() with ui after ui is implemented"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Implement proper exception"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"            throw new Exception(\"No patient loaded!\");"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        String consultationDetail \u003d arguments.get(\"payload\");"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        Record record \u003d new Record(consultationDetail);"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        patient.addRecord(record);"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        System.out.println(\"Added new record: \" + record);"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":36}},{"path":"src/main/java/seedu/duke/command/RetrieveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Data;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.Ui;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"public class RetrieveCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"     * @param ui        Instance of Ui class, for UI input/output"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"     * @param data      Instance of Data class, for manipulating patient list and read/write miscellaneous config"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public RetrieveCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        super(ui, data, arguments);"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws Exception {"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Replace System.out.println() with ui after ui is implemented"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        // TODO: Implement proper exception"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d data.currentPatient;"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        if (patient \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"            throw new Exception(\"No patient loaded!\");"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cRecord\u003e records \u003d patient.getRecords();"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        for (Record record : records) {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(record);"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":36}},{"path":"src/main/java/seedu/duke/model/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represents a patient, and no two patients should"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" * contain the same ID field. The instance contains records for all visits."},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class Patient {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     * This is the unique identifier of the patient."},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * In SG\u0027s context, we use NRIC/FIN for this field"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected String id;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected ArrayList\u003cRecord\u003e records;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with an empty record list."},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id) {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        this(id, new ArrayList\u003c\u003e());"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with a pre-defined record list."},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * @param records Patient\u0027s visit record list"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id, ArrayList\u003cRecord\u003e records) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        this.id \u003d id;"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        this.records \u003d records;"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * Get unique identifier of the patient."},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @return Patient\u0027s unique identifier"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public String getID() {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return id;"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    /* Functionals for manipulating records */"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * Get all records associated with this patient."},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * @return All records in an ArrayList"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    public ArrayList\u003cRecord\u003e getRecords() {"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        return records;"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * Add a single record into the patient\u0027s record list."},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @param record Record to be inserted to the back"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public void addRecord(Record record) {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        records.add(record);"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":59}},{"path":"src/main/java/seedu/duke/model/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represent a visit record. It can contain"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * medical diagnosis, prescription, test results, etc."},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: For v1.0 iteration, we will just implement a single string field to store everything"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Record {"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected String consultationDetail;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * Create a new visit record with details as a single string."},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param consultationDetail detail of the visit record (diagnosis, prescription, etc.)"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public Record(String consultationDetail) {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        this.consultationDetail \u003d consultationDetail;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * Obtain the consultation detail of this record."},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @return Consultation detail related to this record"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public String getConsultationDetail() {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        return consultationDetail;"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        return consultationDetail;"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":26,"brandonfoong":7}},{"path":"src/test/java/seedu/duke/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hiongkaihan"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":3,"author":{"gitId":"hiongkaihan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"hiongkaihan"},"content":"import seedu.duke.command.AddCommand;"},{"lineNumber":5,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":6,"author":{"gitId":"hiongkaihan"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"hiongkaihan"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"hiongkaihan"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":10,"author":{"gitId":"hiongkaihan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":12,"author":{"gitId":"hiongkaihan"},"content":"class AddCommandTest {"},{"lineNumber":13,"author":{"gitId":"hiongkaihan"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"hiongkaihan"},"content":"    public void testAddCommand() {"},{"lineNumber":15,"author":{"gitId":"hiongkaihan"},"content":"        Data data \u003d new Data();"},{"lineNumber":16,"author":{"gitId":"hiongkaihan"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"command\", \"add\");"},{"lineNumber":18,"author":{"gitId":"hiongkaihan"},"content":"        arguments.put(\"payload\", \"S9841974H\");"},{"lineNumber":19,"author":{"gitId":"hiongkaihan"},"content":"        AddCommand addCommand \u003d new AddCommand(null, data, arguments);"},{"lineNumber":20,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":21,"author":{"gitId":"hiongkaihan"},"content":"        final PrintStream originalOut \u003d System.out;"},{"lineNumber":22,"author":{"gitId":"hiongkaihan"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"},{"lineNumber":23,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(new PrintStream(bos));"},{"lineNumber":24,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":25,"author":{"gitId":"hiongkaihan"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"hiongkaihan"},"content":"            addCommand.execute();"},{"lineNumber":27,"author":{"gitId":"hiongkaihan"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"hiongkaihan"},"content":"            System.out.println(\"Error\");"},{"lineNumber":29,"author":{"gitId":"hiongkaihan"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"hiongkaihan"},"content":""},{"lineNumber":31,"author":{"gitId":"hiongkaihan"},"content":"        assertEquals(\"Patient S9841974H has been added!\\n\", bos.toString());"},{"lineNumber":32,"author":{"gitId":"hiongkaihan"},"content":"        System.setOut(originalOut);"},{"lineNumber":33,"author":{"gitId":"hiongkaihan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hiongkaihan"},"content":"}"}],"authorContributionMap":{"hiongkaihan":34}},{"path":"src/test/java/seedu/duke/LoadCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":"import seedu.duke.command.LoadCommand;"},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"public class LoadCommandTest {"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"    public void executeLoadCommand() {"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"        Data data \u003d new Data();"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"command\", \"load\");"},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"        arguments.put(\"payload\", \"S7654321B\");"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"        Patient patient \u003d new Patient(\"S1234567A\");"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);"},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"        patient \u003d new Patient(\"S7654321B\");"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"        data.setPatient(patient);"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":"        LoadCommand loadCommand \u003d new LoadCommand(ui, data, arguments);"},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"leowxx"},"content":"            loadCommand.execute();"},{"lineNumber":26,"author":{"gitId":"leowxx"},"content":"        } catch (Exception exception) {"},{"lineNumber":27,"author":{"gitId":"leowxx"},"content":"            System.out.println(\"Error occurred while loading patient data.\");"},{"lineNumber":28,"author":{"gitId":"leowxx"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"leowxx"},"content":"        ui.closeScanner();"},{"lineNumber":30,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":32,"author":{"gitId":"leowxx"},"content":"}"}],"authorContributionMap":{"leowxx":32}},{"path":"src/test/java/seedu/duke/RecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Record;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.lang.reflect.Array;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"class RecordCommandTest {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_noPatientLoaded_exceptionThrown() {"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d new Patient(\"S1234567A\");"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(null, data, arguments);"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    public void executeRecordCommand_patientLoaded_recordAdded() {"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d new Patient(\"S1234567A\");"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(null, data, arguments);"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cRecord\u003e records \u003d patient.getRecords();"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(1, records.size());"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":50}},{"path":"src/test/java/seedu/duke/RetrieveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RecordCommand;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.command.RetrieveCommand;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.io.PrintStream;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"class RetrieveCommandTest {"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_noPatientLoaded_exceptionThrown() {"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d new Patient(\"S1234567A\");"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(null, data, arguments);"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        Exception exception \u003d assertThrows(Exception.class, () -\u003e {"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        });"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"No patient loaded!\", exception.getMessage());"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    public void executeRetrieveCommand_patientLoadedAndRecordsAdded_printsRecords() {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        Data data \u003d new Data();"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        Patient patient \u003d new Patient(\"S1234567A\");"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        data.setPatient(patient);"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        data.loadCurrentPatient(patient.getID());"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"command\", \"record\");"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        arguments.put(\"payload\", \"coughing\");"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        RecordCommand recordCommand \u003d new RecordCommand(null, data, arguments);"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"            recordCommand.execute();"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out to a ByteArrayOutputStream"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        final PrintStream originalOut \u003d System.out;"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(new PrintStream(bos));"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(null, data, arguments);"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"            retrieveCommand.execute();"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        } catch (Exception exception) {"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"An error occurred while running tests\");"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        assertEquals(\"coughing\" + System.lineSeparator(), bos.toString());"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"        // Bind System.out back to standard output"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        System.setOut(originalOut);"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":63}}]
