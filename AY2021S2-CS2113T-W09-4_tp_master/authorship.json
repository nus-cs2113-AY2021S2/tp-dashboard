[{"path":"src/main/java/seedu/duke/Data.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.model.Patient;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * This class (instance) contains all data of the running application. This"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * includes patient list and miscellaneous config."},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class Data {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, Patient\u003e patients;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * This is the patient that is currently being selected. Command sub-classes can read/write"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * this attribute directly."},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * Before modification, if not loaded, it needs to call loadCurrentPatient(id) to load the patient."},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * After modification, saveCurrentPatient() needs to be called to write back any changes on this attribute."},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public Patient currentPatient;"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * This initilizes a empty data instance."},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public Data() {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        this(new HashMap\u003c\u003e());"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * This initializes a data instance with an existing patient list."},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param patients The patient list"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Data(HashMap\u003cString, Patient\u003e patients) {"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.patients \u003d patients;"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d null;"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves the full hashmap of patients."},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient hashmap"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"    public HashMap\u003cString, Patient\u003e getPatients() {"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        return patients;"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * This retrieves a single patient bases on its unique identifier."},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be retrieved"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * @return the patient instance associated with this ID if found, otherwise null is returned"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    public Patient getPatient(String id) {"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        return patients.get(id);"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"     * Add or update a new patient to the hashmap of this database."},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"     * @param patient the patient to be added/updated"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"    public void setPatient(Patient patient) {"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        patients.put(patient.getID(), patient);"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"     * This loads a patient to the currentPatient attribute."},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"     * Take note that currentPatient can still be null if there is no patients with this id in the hashmap."},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"     * @param id unique identifier of the patient to be loaded"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"    public void loadCurrentPatient(String id) {"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        currentPatient \u003d getPatient(id);"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"     * This saves the patient in currentPatient attribute back to the hashmap."},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"    public void saveCurrentPatient() {"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"        setPatient(currentPatient);"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":78}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" * Main class of the application, where the entry point is."},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        System.out.println(\"Please input a command!\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        "},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        // Sample usage of parser"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        Parser parser \u003d new Parser(new Ui(), new Data());"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            Command c \u003d parser.parse(in.nextLine());"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            c.execute();"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: A better exception handler should be implemented (after Ui is done)"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            System.out.println(e);"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        "},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        in.close();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fsgmhoward":18,"-":19}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.lang.reflect.Constructor;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/Parser.java */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" * This is the parser for parsing the line of command to tokens and construct the command class."},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * This is the delimiter for string join."},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     * default value is a single whitespace (for string split, it is any number of whitespaces)"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DELIMITER \u003d \" \";"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * This is the class prefix, which will be put in front of the class name when parsing the command."},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CLASS_PREFIX \u003d \"seedu.duke.command.\";"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the Parser class."},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Ui instance which will be passed to the command instances"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Data instance which will be passed to the command instances"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    public Parser(Ui ui, Data data) {"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"     * Parse a line of command, put it into a hash map, then construct a command instance"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Segments are splitted by \u0027/\u0027"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * Example: commandX some_description /optY Y_description Y_description_1 /optZ Z_description"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     * Output argument hashmap:"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"     * |   key   |             value             |"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"     * |---------|-------------------------------|"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * | command | commandX                      |"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * | payload | some_description              |"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     * | optY    | Y_description Y_description_1 |"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"     * | optZ    | Z_description                 |"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"     * Then, ui, tasks and this argument hashmap will be passed to initialize a command class."},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"     * The command class is determined by the 1st token of the command string. For example, for a command string \u0027find\u0027,"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"     * command class \u0027duke.command.FindCommand\u0027 will be initialized."},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"     * @param fullCommand The line of command to be parsed"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * @return A Command instance which is ready to be executed"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @see Command"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public Command parse(String fullCommand) throws Exception {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        String[] tokens \u003d fullCommand.split(\"\\\\s+\");"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        // If first token (command) is empty, there are empty spaces typed in at the front - so we remove it"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens[0].isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"            tokens \u003d Arrays.copyOfRange(tokens, 1, tokens.length);"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens.length \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(\"Empty string is found when trying to parse command\");"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(\"command\", tokens[0]);"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        // Default key is \"payload\""},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        String key \u003d \"payload\";"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        ArrayList\u003cString\u003e values \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 1; i \u003c tokens.length; ++i) {"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            // Check whether this token is a new key"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"            if (tokens[i].charAt(0) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"                // If it is, save current value into the map and start a new k-v pair"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"                arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                key \u003d tokens[i].substring(1);"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"                values.clear();"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"                // If not, append this token to the end of the value"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"                values.add(tokens[i]);"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"        // Store the last k-v pair"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"        // Store even when `values` is empty, as that indicates an empty string"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a respective class from the command (by capitalize first character)"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d tokens[0] + \"Command\";"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d className.substring(0, 1).toUpperCase() + className.substring(1);"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d CLASS_PREFIX + className;"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            Class\u003c?\u003e cls \u003d Class.forName(className);"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"            Constructor\u003c?\u003e constructor \u003d cls.getDeclaredConstructor(Ui.class, Data.class, HashMap.class);"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d constructor.newInstance(ui, data, arguments);"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            return (Command) obj;"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"            // If any exception thrown above, it means the command is not formatted properly"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            // TODO: Exception handling using a custom exception"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            throw new Exception(\"Invalid command is provided\", e);"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":104}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * This class handles the loading and saving of data from/to a plaintext file on"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * the hard drive."},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: To be implemented"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    "},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":10}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leowxx"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":3,"author":{"gitId":"leowxx"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":5,"author":{"gitId":"leowxx"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"leowxx"},"content":"    private Scanner userInputScanner;"},{"lineNumber":7,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":8,"author":{"gitId":"leowxx"},"content":"    public Ui() {"},{"lineNumber":9,"author":{"gitId":"leowxx"},"content":"        userInputScanner \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":12,"author":{"gitId":"leowxx"},"content":"    public String readInput() {"},{"lineNumber":13,"author":{"gitId":"leowxx"},"content":"        return userInputScanner.nextLine();"},{"lineNumber":14,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":16,"author":{"gitId":"leowxx"},"content":"    public void closeScanner() {"},{"lineNumber":17,"author":{"gitId":"leowxx"},"content":"        userInputScanner.close();"},{"lineNumber":18,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":20,"author":{"gitId":"leowxx"},"content":"    public void printString(String printstr) {"},{"lineNumber":21,"author":{"gitId":"leowxx"},"content":"        System.out.println(printstr);"},{"lineNumber":22,"author":{"gitId":"leowxx"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"leowxx"},"content":""},{"lineNumber":24,"author":{"gitId":"leowxx"},"content":"}"}],"authorContributionMap":{"leowxx":24}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/* Adapted from https://github.com/fsgmhoward/ip/blob/master/src/main/java/duke/command/Command.java */"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" * Base class of all the commands, providing necessary interfaces and methods"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":" * for implementation."},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected Data data;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, String\u003e arguments;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    protected Boolean isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a command."},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public Command(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        this.data \u003d data;"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        this.arguments \u003d arguments;"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"     * Check whether program should exit after this command is finished."},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"     * @return True for yes, False for no"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        return this.isExit;"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"     * Abstract method to be implemented by each individual command."},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"     * This is where the actual program logic of each command is stored."},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    public abstract void execute();"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":44}},{"path":"src/main/java/seedu/duke/command/EchoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Data;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import seedu.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":" * A demo of how the Command class is used."},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public class EchoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * This is the constructor of the command. Arguments are passed to parent class."},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     * @param ui Instance of Ui class, for UI input/output"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"     * @param data Instance of Data class, for manipulating patient list and read/write miscallaneous config"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"     * @param arguments Arguments decomposed from the full command given by the user"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public EchoCommand(Ui ui, Data data, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, data, arguments);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        // Replace by ui after ui is implemented"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        System.out.println(\"You said this: \" + arguments.get(\"payload\"));"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        System.out.println(\"This is the full argument hashmap content: \" + arguments);"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":28}},{"path":"src/main/java/seedu/duke/model/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represents a patient, and no two patients should"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" * contain the same ID field. The instance contains records for all visits."},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class Patient {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"     * This is the unique identifier of the patient."},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * In SG\u0027s context, we use NRIC/FIN for this field"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected String id;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected ArrayList\u003cRecord\u003e records;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with an empty record list."},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id) {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        this(id, new ArrayList\u003c\u003e());"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"     * Initialize a patient instance with a pre-defined record list."},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * @param id Patient\u0027s unique identifier"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     * @param records Patient\u0027s visit record list"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    public Patient(String id, ArrayList\u003cRecord\u003e records) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        this.id \u003d id;"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        this.records \u003d records;"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"     * Get unique identifier of the patient."},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"     * @return Patient\u0027s unique identifier"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    public String getID() {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return id;"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    /* Functionals for manipulating records */"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"     * Get all records associated with this patient."},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"     * @return All records in an ArrayList"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    public ArrayList\u003cRecord\u003e getRecords() {"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"        return records;"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"     * Add a single record into the patient\u0027s record list."},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"     * @param record Record to be inserted to the back"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    public void addRecord(Record record) {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        records.add(record);"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":59}},{"path":"src/main/java/seedu/duke/model/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package seedu.duke.model;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":" * Each instance of this class represent a visit record. It can contain"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":" * medical diagnosis, prescription, test results, etc."},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":" * TODO: For v1.0 iteration, we will just implement a single string field to store everything"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":" */"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"public class Record {"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected String consultationDetail;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"     * Create a new visit record with details as a single string."},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"     * @param consultationDetail detail of the visit record (diagnosis, prescription, etc.)"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public Record(String consultationDetail) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        this.consultationDetail \u003d consultationDetail;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"     * Obtain the consultation detail of this record."},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"     * @return Consultation detail related to this record"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public String getConsultationDetail() {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        return consultationDetail;"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":26}}]
