[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    mainClassName \u003d \"seedu.fridgefriend.FridgeFriend\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    archiveBaseName \u003d \"fridgefriend\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"SimJJ96":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"# ABOUT US"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"We are a team based in [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg/)."},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"## Project Team"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio"},{"lineNumber":8,"author":{"gitId":"-"},"content":"----------|:------:|:--------------:|:---------:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"![Hu Wen Qi](team/hwq_pic.png) | Hu Wenqi | [Github](https://github.com/Vinci-Hu) | [Portfolio](team/wenqihu.md)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"![Kim Joohwan](team/jw_pic.png) | Kim Joohwan | [Github](https://github.com/joohwan58) | [Portfolio](team/joohwan.md)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"![Lee Yang Peng](team/lyp_pic.png)| Lee Yang Peng | [Github](https://github.com/Leeyp) | [Portfolio](team/leeyp.md)"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"![Ryan Kwok](team/kwokyto_pic.jpg) | Ryan Kwok | [Github](https://github.com/kwokyto) | [Portfolio](team/kwokyto.md)"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"![Sim Jing Jie](team/sjj_pic.png) | Sim Jing Jie | [Github](https://github.com/SimJJ96/) | [Portfolio](team/simjingjie.md)"}],"authorContributionMap":{"kwokyto":9,"-":9}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"joohwan58"},"content":"# FridgeFriend"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"{Give product intro here}"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"}],"authorContributionMap":{"joohwan58":1,"-":7}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"`FridgeFriend` is an app for managing food in the fridge, optimised for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"If you can type fast, `FridgeFriend` can track your cold or frozen groceries faster and easier than any other apps."},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"It is written in Java, and has more than 1.5kLoC."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Quick Start"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed."},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"1. Download the latest version of `FridgeFriend` from [here](https://github.com/AY2021S2-CS2113-T10-1/tp/releases/tag/v1.0)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"{Give detailed description of each feature}"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"**Notes about the command format:**"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user.\\"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"  e.g. `add FOOD_NAME`, `FOOD_NAME` is a parameter which can be used as `add chicken`."},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"  "},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"### Adding a food item: `add`"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"Adds a food item into the fridge."},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"Format: `add FOOD_NAME /cat FOOD_CATEGORY /exp EXPIRY_DATE /loc LOCATION_IN_THE_FRIDGE`"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"* The `FOOD_NAME` can be the name of a food but not an empty description."},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"* The `FOOD_CATEGORY` can be the basic food groups otherwise it will be categorised as others."},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"* The `EXPIRY_DATE` must be in the format `dd-mm-yyyy`."},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"* The `LOCATION_IN_THE_FRIDGE` can be a general compartment in a fridge."},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"Additional info:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"* Basic Food Groups:`MEAT`, `SEAFOOD`, `EGG`, `DAIRY`, `VEGETABLE`, `FRUIT`,"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"  `BEVERAGE`, `COOKED_DISH`, `READY_TO_EAT`, `FROZEN`, `OTHERS`"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"* Basic fridge location: `FREEZER`, `UPPER_SHELF`, `MIDDLE_SHELF`, `LOWER_SHELF`, "},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"  `DRAWERS`, `FRIDGE_DOOR`, `OTHERS`"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"```"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e add chicken /cat meat /exp 30-06-2021 /loc lower_shelf"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"Great! I have added chicken into your fridge."},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"Details: Food name: chicken, category: MEAT, expiry: 30-06-2021, stored in: LOWER_SHELF"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"```"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"Vinci-Hu"},"content":"### Display the list of all foods: `list`"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":50,"author":{"gitId":"Vinci-Hu"},"content":"Displays the full list of food items stored in the fridge."},{"lineNumber":51,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":52,"author":{"gitId":"Vinci-Hu"},"content":"Format: `list`"},{"lineNumber":53,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":54,"author":{"gitId":"Vinci-Hu"},"content":"* There should not be any descriptions after keyword `list`.  "},{"lineNumber":55,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":56,"author":{"gitId":"Vinci-Hu"},"content":"Example of usage:"},{"lineNumber":57,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":58,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e list"},{"lineNumber":60,"author":{"gitId":"Vinci-Hu"},"content":"Here are the items in your fridge:"},{"lineNumber":61,"author":{"gitId":"Vinci-Hu"},"content":"    1. chicken [MEAT]"},{"lineNumber":62,"author":{"gitId":"Vinci-Hu"},"content":"    2. grouper [SEAFOOD]"},{"lineNumber":63,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":64,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":65,"author":{"gitId":"Vinci-Hu"},"content":"### Display the list of foods by category: `list \u003cCATEGORY\u003e`"},{"lineNumber":66,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":67,"author":{"gitId":"Vinci-Hu"},"content":"Displays the list of food items under specified category stored in the fridge."},{"lineNumber":68,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":69,"author":{"gitId":"Vinci-Hu"},"content":"Format: `list CATEGORY_NAME`"},{"lineNumber":70,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":71,"author":{"gitId":"Vinci-Hu"},"content":"* The `CATEGORY_NAME` can only be recognized if it is in the pre-defined categories:"},{"lineNumber":72,"author":{"gitId":"Vinci-Hu"},"content":"`VEGETABLE, FRUIT, MEAT, SEAFOOD, EGG, DAIRY, BEVERAGE, COOKED_DISH, READY_TO_EAT, FROZEN, OTHER`"},{"lineNumber":73,"author":{"gitId":"kwokyto"},"content":"* The `CATEGORY_NAME` is case-insensitive."},{"lineNumber":74,"author":{"gitId":"kwokyto"},"content":"* If other category names are detected, `FridgeFriend` would give an error message."},{"lineNumber":75,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":76,"author":{"gitId":"Vinci-Hu"},"content":"Example of usage:"},{"lineNumber":77,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":78,"author":{"gitId":"Vinci-Hu"},"content":"*Situation 1: There is one food called chicken under MEAT category.*"},{"lineNumber":79,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":80,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":81,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e list MEAT"},{"lineNumber":82,"author":{"gitId":"Vinci-Hu"},"content":"These are the MEAT in your fridge:"},{"lineNumber":83,"author":{"gitId":"Vinci-Hu"},"content":"\t1. chicken"},{"lineNumber":84,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":85,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":86,"author":{"gitId":"kwokyto"},"content":"*Situation 2: There are no foods under READY_TO_EAT category.*"},{"lineNumber":87,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":88,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":89,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e list ready_to_eat"},{"lineNumber":90,"author":{"gitId":"Vinci-Hu"},"content":"These are the READY_TO_EAT in your fridge:"},{"lineNumber":91,"author":{"gitId":"Vinci-Hu"},"content":"```"},{"lineNumber":92,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":93,"author":{"gitId":"kwokyto"},"content":"### Remove a food item: `remove`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"kwokyto"},"content":"Removes a food item based on its index."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"kwokyto"},"content":"Format: `remove INDEX`"},{"lineNumber":98,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":99,"author":{"gitId":"kwokyto"},"content":"* The `INDEX` must be a valid index."},{"lineNumber":100,"author":{"gitId":"kwokyto"},"content":"* If the `INDEX` is out of bounds, `FridgeFriend` will give an error message."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"kwokyto"},"content":"Example of usage:"},{"lineNumber":103,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":104,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e list"},{"lineNumber":105,"author":{"gitId":"kwokyto"},"content":"Here are the items in your fridge:"},{"lineNumber":106,"author":{"gitId":"kwokyto"},"content":"        1. chicken [MEAT]"},{"lineNumber":107,"author":{"gitId":"kwokyto"},"content":"        2. mango [OTHER]"},{"lineNumber":108,"author":{"gitId":"kwokyto"},"content":"        3. milk [OTHER]"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e remove 2"},{"lineNumber":111,"author":{"gitId":"kwokyto"},"content":"Noted! I\u0027ve removed mango from your fridge."},{"lineNumber":112,"author":{"gitId":"kwokyto"},"content":"Now you have 2 food in the fridge."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e list"},{"lineNumber":115,"author":{"gitId":"kwokyto"},"content":"Here are the items in your fridge:"},{"lineNumber":116,"author":{"gitId":"kwokyto"},"content":"        1. chicken [MEAT]"},{"lineNumber":117,"author":{"gitId":"kwokyto"},"content":"        2. milk [OTHER]"},{"lineNumber":118,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Leeyp"},"content":"### Search: `search`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"Leeyp"},"content":"Checks if a certain food item is inside the fridge, and if the item is found, informs user of the food\u0027s storage location."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"Leeyp"},"content":"Format: `search FOOD_NAME`"},{"lineNumber":125,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":126,"author":{"gitId":"Leeyp"},"content":"* The `FOOD_NAME` can be the name of a food but not an empty description."},{"lineNumber":127,"author":{"gitId":"Leeyp"},"content":"* The command requires the user to input the exact name of the food item `FOOD_NAME` to be searched for."},{"lineNumber":128,"author":{"gitId":"Leeyp"},"content":"  The names of food items stored in the fridge can be determined with `list`. "},{"lineNumber":129,"author":{"gitId":"Leeyp"},"content":"* If there are multiple items with the same name in the fridge, only the first item added to the fridge"},{"lineNumber":130,"author":{"gitId":"Leeyp"},"content":"  in order of the output of `list` will be returned."},{"lineNumber":131,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":132,"author":{"gitId":"Leeyp"},"content":"Example of usage:"},{"lineNumber":133,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":134,"author":{"gitId":"Leeyp"},"content":"*In this example, Fridge contains only one item `grouper` stored in the `FREEZER` location.*"},{"lineNumber":135,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":136,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":137,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e search grouper"},{"lineNumber":138,"author":{"gitId":"kwokyto"},"content":"You have grouper stored in FREEZER of your fridge."},{"lineNumber":139,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":140,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e search oyster"},{"lineNumber":141,"author":{"gitId":"kwokyto"},"content":"You do not have oyster in your fridge."},{"lineNumber":142,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":143,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":144,"author":{"gitId":"kwokyto"},"content":"### List expiring foods: `expiring`"},{"lineNumber":145,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":146,"author":{"gitId":"kwokyto"},"content":"Displays a list of food items that are expiring within a week."},{"lineNumber":147,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":148,"author":{"gitId":"kwokyto"},"content":"Format: `expiring`"},{"lineNumber":149,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":150,"author":{"gitId":"kwokyto"},"content":"Example of usage:"},{"lineNumber":151,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":152,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":153,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e expiring"},{"lineNumber":154,"author":{"gitId":"kwokyto"},"content":"These are the food expiring in the next week:"},{"lineNumber":155,"author":{"gitId":"kwokyto"},"content":"1. Food name: chicken wings, category: MEAT, expiry: 21-03-2021, stored in: MIDDLE_SHELF"},{"lineNumber":156,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":157,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":158,"author":{"gitId":"kwokyto"},"content":"### Get help message: `help`"},{"lineNumber":159,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":160,"author":{"gitId":"kwokyto"},"content":"Prints a list of available commands and formats."},{"lineNumber":161,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":162,"author":{"gitId":"kwokyto"},"content":"Format: `help`"},{"lineNumber":163,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":164,"author":{"gitId":"kwokyto"},"content":"Example of usage:"},{"lineNumber":165,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":166,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":167,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e help"},{"lineNumber":168,"author":{"gitId":"kwokyto"},"content":"These are the list of available commands:"},{"lineNumber":169,"author":{"gitId":"kwokyto"},"content":"        add foodName /cat categoryName /exp dd-mm-yyyy /loc storageLocation"},{"lineNumber":170,"author":{"gitId":"kwokyto"},"content":"        list"},{"lineNumber":171,"author":{"gitId":"kwokyto"},"content":"        list categoryName"},{"lineNumber":172,"author":{"gitId":"kwokyto"},"content":"        remove index"},{"lineNumber":173,"author":{"gitId":"kwokyto"},"content":"        search searchString"},{"lineNumber":174,"author":{"gitId":"kwokyto"},"content":"        expiring"},{"lineNumber":175,"author":{"gitId":"kwokyto"},"content":"        help"},{"lineNumber":176,"author":{"gitId":"kwokyto"},"content":"        bye"},{"lineNumber":177,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":178,"author":{"gitId":"kwokyto"},"content":"This is the list of food categories:"},{"lineNumber":179,"author":{"gitId":"kwokyto"},"content":"        [VEGETABLE, FRUIT, MEAT, SEAFOOD, EGG, DAIRY, BEVERAGE, COOKED_DISH, READY_TO_EAT, FROZEN, OTHER]"},{"lineNumber":180,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":181,"author":{"gitId":"kwokyto"},"content":"This is the list of storage locations:"},{"lineNumber":182,"author":{"gitId":"kwokyto"},"content":"        [FREEZER, UPPER_SHELF, MIDDLE_SHELF, LOWER_SHELF, DRAWERS, FRIDGE_DOOR, OTHER]"},{"lineNumber":183,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":184,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":185,"author":{"gitId":"kwokyto"},"content":"### Exit the application: `bye`"},{"lineNumber":186,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":187,"author":{"gitId":"kwokyto"},"content":"Exits the application."},{"lineNumber":188,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":189,"author":{"gitId":"kwokyto"},"content":"Format: `bye`"},{"lineNumber":190,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":191,"author":{"gitId":"kwokyto"},"content":"Example of usage:"},{"lineNumber":192,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":193,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":194,"author":{"gitId":"kwokyto"},"content":"\u003e\u003e bye"},{"lineNumber":195,"author":{"gitId":"kwokyto"},"content":"Bye! Hope to see you again soon!"},{"lineNumber":196,"author":{"gitId":"kwokyto"},"content":"```"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer?"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"joohwan58"},"content":"**A**: Copy the `.jar` file along with `save` folder to the target computer and place them together into an empty folder."},{"lineNumber":203,"author":{"gitId":"Vinci-Hu"},"content":"As long as the target computer satisfies our project prerequisites, it can run with the saved data as before."},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"Vinci-Hu"},"content":"**Q**: What if I forget the correct format of a command?"},{"lineNumber":206,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":207,"author":{"gitId":"Vinci-Hu"},"content":"**A**: You will get a tip if you use any of the command keywords incorrectly."},{"lineNumber":208,"author":{"gitId":"Vinci-Hu"},"content":"Plus, you are always welcomed to use `help` command."},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"Vinci-Hu"},"content":"**Q**: How do I report a bug?"},{"lineNumber":211,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":212,"author":{"gitId":"Vinci-Hu"},"content":"**A**: You can either create a pull request or state in the issues."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"## Command Summary"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"kwokyto"},"content":"* Add food `add FOOD_NAME /cat FOOD_CATEGORY /exp EXPIRY_DATE /loc LOCATION_IN_THE_FRIDGE`"},{"lineNumber":217,"author":{"gitId":"kwokyto"},"content":"* List food `list`"},{"lineNumber":218,"author":{"gitId":"kwokyto"},"content":"* List food by category `list CATEGORY_NAME`"},{"lineNumber":219,"author":{"gitId":"kwokyto"},"content":"* Remove food `remove INDEX`"},{"lineNumber":220,"author":{"gitId":"kwokyto"},"content":"* Search for food `search FOOD_NAME`"},{"lineNumber":221,"author":{"gitId":"kwokyto"},"content":"* List expiring foods `expiring`"},{"lineNumber":222,"author":{"gitId":"kwokyto"},"content":"* Get help message `help`"},{"lineNumber":223,"author":{"gitId":"kwokyto"},"content":"* Exit application `bye`"}],"authorContributionMap":{"Leeyp":17,"kwokyto":103,"joohwan58":1,"Vinci-Hu":45,"-":34,"SimJJ96":23}},{"path":"docs/team/joohwan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"joohwan58"},"content":"# Kim Joohwan - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"joohwan58"},"content":"This is a student project for university software development course."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"joohwan58"},"content":"I am one of the contributors to the FridgeFriend project."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"joohwan58"},"content":"## Project: FridgeFriend"},{"lineNumber":9,"author":{"gitId":"joohwan58"},"content":""},{"lineNumber":10,"author":{"gitId":"joohwan58"},"content":"FridgeFriend is an app that helps you keep track of food in your fridge. It is optimised for use on a command line interface(CLI)."},{"lineNumber":11,"author":{"gitId":"-"},"content":"### Summary of Contributions"},{"lineNumber":12,"author":{"gitId":"joohwan58"},"content":""},{"lineNumber":13,"author":{"gitId":"joohwan58"},"content":"v1.0 tasks: implement the ability to save the data across different sessions."},{"lineNumber":14,"author":{"gitId":"joohwan58"},"content":""},{"lineNumber":15,"author":{"gitId":"joohwan58"},"content":"Code contributions:"},{"lineNumber":16,"author":{"gitId":"joohwan58"},"content":"- Implemented the \u0027Save\u0027 class to allow for saving of data into a text file"},{"lineNumber":17,"author":{"gitId":"joohwan58"},"content":"- Modified the \u0027Food\u0027 class to better work with the \u0027Save\u0027 class"},{"lineNumber":18,"author":{"gitId":"joohwan58"},"content":"- Created new exceptions to handle possible errors with \u0027Save\u0027 class"},{"lineNumber":19,"author":{"gitId":"joohwan58"},"content":""},{"lineNumber":20,"author":{"gitId":"joohwan58"},"content":"Docs:"},{"lineNumber":21,"author":{"gitId":"joohwan58"},"content":"- Added explanation of how to transfer save data between devices"},{"lineNumber":22,"author":{"gitId":"joohwan58"},"content":""},{"lineNumber":23,"author":{"gitId":"joohwan58"},"content":"Team contributions:"},{"lineNumber":24,"author":{"gitId":"joohwan58"},"content":"- Help review PRs and suggest changes"},{"lineNumber":25,"author":{"gitId":"joohwan58"},"content":"- Give suggestions and assist in meetings"}],"authorContributionMap":{"joohwan58":20,"-":5}},{"path":"docs/team/kwokyto.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Ryan Kwok - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"## Project: FridgeFriend"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"FridgeFriend is an app for managing food in the fridge, optimised for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"If you can type fast, FridgeFriend can track your cold or frozen groceries faster and easier than any other apps."},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"It is written in Java, and have about __kLoC."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"Given below are my contributions to the project"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"- **New Feature**: Added the ability to display a help message"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"  - What it does: Provides the user with a list of available commands and formats."},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"  - Justification: Allows the user the ease of using commands without having to memorise them."},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"  - Pull request: ([#49](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/49))"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"- **New Feature**: Added the ability to search for items that are expiring"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"  - What it does: Allows the user to get a list of all food items that are going to expire in a week."},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"  - Justification: Improves the product signicantly because a user can effectively track the status of"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"  all food items in the fridge with a single command."},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"  - Pull request: ([#66](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/66))"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"- **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dkwokyto)"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"- **Enhancements to existing features**"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"  - Write and refactored major classes ([#44](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/45))"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"    - `Fridge`"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    - `Parser`"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"    - `Ui`"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"    - `ByeCommand`"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"    - `InvalidIndexException`"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"    - `InvalidInputException`"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"  - Write additional tests for `Parser` class ([#47](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/47)])"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"  - Write `Logger` class ([#51](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/51))"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"  - Write logging for `FridgeFriend` ([#52](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/52))"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"  - Improve Coding Standards for `Storage` class ([#68](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/68))"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"- **Documentation**"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"  - User Guide"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"    - Added introduction ([#75](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/75/))"},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"    - Added documentation for the feature `expiring` ([#69](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/69))"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"    - Added documentation for the feature `remove`, `help`, and `bye` ([#75](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/75/))"},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"    - Standardised input/output format for existing documentation of all features ([#75](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/75/))"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"  - Developer Guide"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"    - Added implementation details of the `xxx` feature ([#xx](placeholder))"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"- **Community**"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"  - Pull Requests reviewed with non-trivial review comments ("},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"      [#38](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/38)"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"      [#54](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/54)"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"      [#56](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/56)"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"      [#61](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/61))"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"  - Contributed to forum discussions ("},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":"      examples:"},{"lineNumber":56,"author":{"gitId":"kwokyto"},"content":"      [1](https://github.com/nus-cs2113-AY2021S2/forum/issues/45)"},{"lineNumber":57,"author":{"gitId":"kwokyto"},"content":"      [2](https://github.com/nus-cs2113-AY2021S2/forum/issues/49))"},{"lineNumber":58,"author":{"gitId":"kwokyto"},"content":"  - Reported bugs and suggestions for other teams in the class ("},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"      examples:"},{"lineNumber":60,"author":{"gitId":"kwokyto"},"content":"      [#xx](placeholder))"}],"authorContributionMap":{"kwokyto":56,"-":4}},{"path":"docs/team/leeyp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Lee Yang Peng- Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"This is a student project for university software development course."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":"I am one of the contributors to the FridgeFriend project."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"## Project: FridgeFriend"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"FridgeFriend is an app for managing food in the fridge, optimised for use via a Command Line Interface (CLI)."},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"If you can type fast, FridgeFriend can track your cold or frozen groceries faster and easier than any other apps."},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"It is written in Java."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Summary of Contributions"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"Given below are my contributions to the project:"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"`v1.0 tasks`: In charge of implementing the skeletal version of FridgeFriend."},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"**Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dleeyp)"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"**Version 1.0**"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"- Implemented the skeletal version of FridgeFriend."},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"- Created preliminary J-Unit tests for the `Food` Class."},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"- Contributed to defensive code by adding logging and assertion statements."},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"**Documentation**"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"- User Guide"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"    - Added documentation for the command `search` ([#72](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/72))"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"**Community**"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"- Review pull requests and help maintain group repo"},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"- Gave suggestions and help debug in weekly meetings"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"- [Contributed to Class forum discussions](https://nus-cs2113-ay2021s2.github.io/dashboards/contents/forum-activities.html#1-lee-peng-leeyp-21-posts) "}],"authorContributionMap":{"Leeyp":27,"-":8}},{"path":"docs/team/simjingjie.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Sim Jing Jie- Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"This is a student project for university software development course."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"I am one of the contributors to FridgeFriend project."},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"- **Basic Feature** `add`: Added the ability to add a food item to the fridge"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    * What it does: Add the food item that the user specify into a list."},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    * Pull request: "},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"        - `add` ([#38](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/38))"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"        - JUnit-Test-Add ([#54](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/54))"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"- **Basic Feature** `remove`: Added the ability to remove a food item from the fridge"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    * What it does: Remove the index of the food item that the user specify. "},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    * Pull request:"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        - `remove` ([#38](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/38))"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        - JUnit-Test-Remove ([#56](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/56))"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"- **Basic Feature** `search`: Added the ability to search a specific food item from the fridge"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    * What it does: Search the specific food item that the user specify."},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    * Pull request:"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        - `search` ([#38](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/38))"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        - JUnit-Test-Search ([#58](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/58))"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"- **Basic Feature** `list`: Added the ability to list the item by a category or list all the items"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    * What it does: list all the food items in the fridge or list the food items by a category. "},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"    * Pull request:"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        - `list` ([#38](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/38))"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        - JUnit-Test-List([#60](https://github.com/AY2021S2-CS2113-T10-1/tp/pull/60))"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"- **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dSimjj96)"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"- **Documentation**"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    - User Guide"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        - Added documentation for the command `add`"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"- **Community**"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    - Review pull requests and maintain group repo"}],"authorContributionMap":{"-":4,"SimJJ96":37}},{"path":"docs/team/wenqihu.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Hu Wenqi - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"Vinci-Hu"},"content":"This is a student project for university software development course."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Vinci-Hu"},"content":"I am one of the contributors to the FridgeFriend project."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"Vinci-Hu"},"content":"Iter 1: In charge of the food related classes and enums"},{"lineNumber":10,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":11,"author":{"gitId":"Vinci-Hu"},"content":"- **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s2.github.io/tp-dashboard/?search\u003dVinci-Hu)"},{"lineNumber":12,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":13,"author":{"gitId":"Vinci-Hu"},"content":"- **Version 1.0**"},{"lineNumber":14,"author":{"gitId":"Vinci-Hu"},"content":"  -  In charge of the food related classes and enums"},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":"     - `Food`"},{"lineNumber":16,"author":{"gitId":"Vinci-Hu"},"content":"     - `FoodCategory`"},{"lineNumber":17,"author":{"gitId":"Vinci-Hu"},"content":"     - `FoodStorageLocation`"},{"lineNumber":18,"author":{"gitId":"Vinci-Hu"},"content":"    - J-Unit tests for `Food`"},{"lineNumber":19,"author":{"gitId":"Vinci-Hu"},"content":"    - Write logging and add asserts"},{"lineNumber":20,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":21,"author":{"gitId":"Vinci-Hu"},"content":"- **Documentation**"},{"lineNumber":22,"author":{"gitId":"Vinci-Hu"},"content":"  - User Guide"},{"lineNumber":23,"author":{"gitId":"Vinci-Hu"},"content":"    - Added documentation for the command `list` ([#]())"},{"lineNumber":24,"author":{"gitId":"Vinci-Hu"},"content":"    - Added FAQs ([#]())"},{"lineNumber":25,"author":{"gitId":"Vinci-Hu"},"content":"  - Developer Guide"},{"lineNumber":26,"author":{"gitId":"Vinci-Hu"},"content":"    - Added implementation details of the `xxx` feature ([]())"},{"lineNumber":27,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":28,"author":{"gitId":"Vinci-Hu"},"content":"- **Community**"},{"lineNumber":29,"author":{"gitId":"Vinci-Hu"},"content":"  - Review pull requests and help maintain group repo"},{"lineNumber":30,"author":{"gitId":"Vinci-Hu"},"content":"  - Gave suggestions and help debug in weekly meetings"}],"authorContributionMap":{"Vinci-Hu":24,"-":6}},{"path":"src/main/java/seedu/fridgefriend/FridgeFriend.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.command.Command;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.LoggingHandler;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Parser;"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Storage;"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":" * FridgeFriend is an app for managing food in the fridge, optimised for use via a Command Line Interface (CLI)."},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":" * If you can type fast, `FridgeFriend` can track your cold or frozen groceries faster and easier than any other apps."},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":" * It is written in Java, and has more than 1.5kLoC."},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":" * "},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":" * @author Hu Wen Qi"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":" * @author Kim Joohwan"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":" * @author Lee Yang Peng"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":" * @author Ryan Kwok"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":" * @author Sing Jing Jie"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":" * @version 1.0"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"public class FridgeFriend {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"    private static boolean isExit \u003d false;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    public static Fridge fridge \u003d new Fridge();"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    public FridgeFriend() {"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"        new Ui();"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"        new LoggingHandler();"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"FridgeFriend application initialised.\");"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"        new Storage();"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    public static void main(String[] args) {"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"        Ui.printWelcomeMessage();"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"        Storage.load(fridge);"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"        run();"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"        Storage.save(fridge);"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"        Ui.printByeMessage();"},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"    private static void run() {"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Main programme loop started.\");"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"        while (!isExit) {"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"                String input \u003d Ui.getNextLine();"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"                Command command \u003d Parser.getCommand(input);"},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"                executeCommand(command);"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"            } catch (Exception exception) {"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"                Ui.printExceptionMessage(exception);"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"                LoggingHandler.logInfo(\"Error found.\", exception);"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Main programme loop exited.\");"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"    private static void executeCommand(Command command) throws InvalidInputException, InvalidIndexException {"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"        command.setData(fridge);"},{"lineNumber":62,"author":{"gitId":"kwokyto"},"content":"        command.execute();"},{"lineNumber":63,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":45,"SimJJ96":19}},{"path":"src/main/java/seedu/fridgefriend/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":6,"author":{"gitId":"Vinci-Hu"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":" * Represents a command to add a food item into the Fridge."},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":" * When calling constructor, foodName, category, expiryDate, and location are necessary fields"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":"    private final Food foodToAdd;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"    public AddCommand(String foodName, FoodCategory category, String expiryString,"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"            FoodStorageLocation location) throws InvalidDateException {"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"        this.foodToAdd \u003d new Food(category, foodName, expiryString, location);"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    public void execute() {"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"        addFood();"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        showResults();"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    private void addFood() {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        assert foodToAdd !\u003d null : \"Unable to add a null food\";"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(foodToAdd);"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private void showResults() {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        Ui.printMessage(getMessagePrintedToUser());"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"     * Returns the results of add command."},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"     * @return the message shown to the user"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    public String getMessagePrintedToUser() {"},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"        String message \u003d \"Great! I have added \""},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"                + foodToAdd.getFoodName()"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"                + \" into your fridge.\\n\""},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"                + \"Details: \""},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"                + foodToAdd.toString();"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":15,"Vinci-Hu":2,"SimJJ96":35}},{"path":"src/main/java/seedu/fridgefriend/command/ByeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":" * Represents a command to exit the application."},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"public class ByeCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"    public ByeCommand() {"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"        super();"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"    public boolean isExit() {"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"        return isExit;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"    public void setExit(boolean isExit) {"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"    public void execute() {"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"        setExit(true);"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":25}},{"path":"src/main/java/seedu/fridgefriend/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" * Represent an executable command."},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    protected Fridge fridge;"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"    protected boolean isExit;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"    public Command() {"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"        isExit \u003d false;"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"    public boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"        return isExit;"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    public abstract void execute() throws InvalidInputException, InvalidIndexException;"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public void setData(Fridge fridge) {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        this.fridge \u003d fridge;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":12,"SimJJ96":17}},{"path":"src/main/java/seedu/fridgefriend/command/ExpiringCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":" * Represents a command to find food items that are expring within a week."},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"public class ExpiringCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"    private static final LocalDate cutOff \u003d LocalDate.now().plusDays(7);"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    private String message \u003d \"These are the food expiring in the next week:\";"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"    private int index \u003d 1;"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"    public ExpiringCommand() {"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"    public void execute() {"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"        for (int i \u003d 0; i \u003c fridge.getSize(); i +\u003d 1) {"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"            updateMessage(fridge.getFood(i));"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"        Ui.printMessage(message);"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"     * Updates the message to be shown to the user based on the food\u0027s expiry date."},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"     * @param food food item in the fridge"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"    private void updateMessage(Food food) {"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"        LocalDate expiry \u003d food.getExpiryDate().getExpiry();"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"        if (expiry.isBefore(cutOff)) {"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"            addToMessage(food);"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"     * Adds food description and list index to the return message."},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"     * @param food food item that is expiring in a week"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"    private void addToMessage(Food food) {"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"        String entry \u003d \"\\n\" + index + \". \" + food.toString();"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"        message +\u003d entry;"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"        index +\u003d 1;"},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":51}},{"path":"src/main/java/seedu/fridgefriend/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.util.EnumSet;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":" * Represents a command to exit the application."},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"public class HelpCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    private static final String COMMANDS \u003d \"These are the list of available commands:\\n\""},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"            + \"\\tadd foodName /cat categoryName /exp dd-mm-yyyy /loc storageLocation\\n\""},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"            + \"\\tlist\\n\""},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"            + \"\\tlist categoryName\\n\""},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"            + \"\\tremove index\\n\""},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"            + \"\\tsearch searchString\\n\""},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"            + \"\\texpiring\\n\""},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"            + \"\\thelp\\n\""},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"            + \"\\tbye\";"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    private static final String CATEGORIES \u003d \"This is the list of food categories:\\n\\t\""},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"            + EnumSet.allOf(FoodCategory.class).toString();"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"    private static final String LOCATIONS \u003d \"This is the list of storage locations:\\n\\t\""},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"            + EnumSet.allOf(FoodStorageLocation.class).toString();"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"    public HelpCommand() {"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"    public void execute() {"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"        String helpMessage \u003d COMMANDS + \"\\n\\n\" + CATEGORIES + \"\\n\\n\" + LOCATIONS;"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"        Ui.printMessage(helpMessage);"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":40}},{"path":"src/main/java/seedu/fridgefriend/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":" * Represents a command to list the items in the fridge to the user."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" * When calling constructor, description is a necessary field"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":" * to specify whether to list everything or list by category."},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    private static final int EXTRA_INDEX \u003d 1;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private static final int START_INDEX_SHOWN_TO_USER \u003d 1;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    private final FoodCategory foodCategory;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    private final String category;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    private int indexShownToUserByCategory;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public ListCommand(String categoryType) {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        this.category \u003d categoryType.toUpperCase();"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        this.foodCategory \u003d FoodCategory.convertStringToFoodCategory(category);"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"        this.indexShownToUserByCategory \u003d START_INDEX_SHOWN_TO_USER;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"    public void execute() throws InvalidInputException {"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        if (category.equals(\"\")) {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"            listAll();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"            listByCategory();"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"    private void listByCategory() throws InvalidInputException {"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        checkIsValidCategory();"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"        String message \u003d getListByCategoryMessage();"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"        Ui.printMessage(message);"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    private void listAll() {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        Ui.printMessage(getListAllMessage());"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     * Returns the food that match the category that was specified."},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"     * @return string of food that match the category in the fridge"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    public String getListByCategoryMessage() {"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder message \u003d new StringBuilder(\"These are the \" + foodCategory + \" in your fridge:\");"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c fridge.getSize(); i++) {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"            message.append(getMatchCategoryFoodDescription(i));"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"        assert message !\u003d null : \"message string should not be null\";"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"        return message.toString();"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"     * Returns all the food in the fridge."},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"     * @return string of the food names that are in the fridge"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"    public String getListAllMessage() {"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder message \u003d new StringBuilder(\"Here are the items in your fridge:\");"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c fridge.getSize(); i++) {"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"            message.append(getFoodDescription(i));"},{"lineNumber":70,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"        return message.toString();"},{"lineNumber":72,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"    private String getFoodDescription(int index) {"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"        int indexShownToUser \u003d index + EXTRA_INDEX;"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"        Food food \u003d fridge.getFood(index);"},{"lineNumber":77,"author":{"gitId":"kwokyto"},"content":"        String foodDescription \u003d "},{"lineNumber":78,"author":{"gitId":"kwokyto"},"content":"                \"\\n\\t\" + indexShownToUser +  \". \""},{"lineNumber":79,"author":{"gitId":"kwokyto"},"content":"                + food.getFoodName() + \" [\""},{"lineNumber":80,"author":{"gitId":"kwokyto"},"content":"                + food.getCategory() + \"]\";"},{"lineNumber":81,"author":{"gitId":"kwokyto"},"content":"        return foodDescription;"},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"    private void checkIsValidCategory() throws InvalidInputException {"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"        if (!FoodCategory.contains(category)) {"},{"lineNumber":86,"author":{"gitId":"kwokyto"},"content":"            String errorMessage \u003d \"Sorry my friend, please enter a valid food category.\";"},{"lineNumber":87,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidInputException(errorMessage);"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"    private String getMatchCategoryFoodDescription(int index) {"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":"        String foodDescription \u003d \"\";"},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"        Food food \u003d fridge.getFood(index);"},{"lineNumber":94,"author":{"gitId":"kwokyto"},"content":"        FoodCategory category \u003d food.getCategory();"},{"lineNumber":95,"author":{"gitId":"kwokyto"},"content":"        if (category.equals(foodCategory)) {"},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"            foodDescription \u003d \"\\n\\t\" + indexShownToUserByCategory + \". \" + food.getFoodName();"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"            ++indexShownToUserByCategory;"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"        return foodDescription;"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"Leeyp":2,"kwokyto":21,"SimJJ96":79}},{"path":"src/main/java/seedu/fridgefriend/command/RemoveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":" * Represents a command to remove a food item from the fridge by index specify by user."},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"public class RemoveCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    private static final int EXTRA_INDEX \u003d 1;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    private final int indexToRemove;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    private Food foodToBeRemoved;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"     * Constructor creates a RemoveCommand object."},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"     * @param indexToRemove integer index given by user"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidIndexException if provided index is out of bounds"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"    public RemoveCommand(int indexToRemove) {"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"        int actualIndexToRemoved \u003d indexToRemove - EXTRA_INDEX;"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"        this.indexToRemove \u003d actualIndexToRemoved;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    public void execute() throws InvalidIndexException {"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"        removeFood();"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        showResults();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private void removeFood() throws InvalidIndexException {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"            this.foodToBeRemoved \u003d fridge.getFood(indexToRemove);"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        } catch (Exception e) {"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidIndexException(e);"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        fridge.removeByIndex(indexToRemove);"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    private void showResults() {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        Ui.printMessage(getMessagePrintedToUser());"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     * Return the results after remove the item from the fridge."},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"     * @return the message shown to user"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    public String getMessagePrintedToUser() {"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"        String message \u003d \"Noted! I\u0027ve removed \" + foodToBeRemoved.getFoodName()"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"                + \" from your fridge.\\n\""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have \" + fridge.getSize()"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"                + \" food in the fridge.\";"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":14,"SimJJ96":45}},{"path":"src/main/java/seedu/fridgefriend/command/SearchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.Ui;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.LoggingHandler;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":" * Represents a command to search for a specific food item in the fridge."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"public class SearchCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    public static final int NOT_FOUND \u003d -1;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private String foodName;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public SearchCommand(String foodName) throws EmptyDescriptionException {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        if (foodName.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        this.foodName \u003d foodName;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    public void execute() {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        showResults();"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    private void showResults() {"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        Ui.printMessage(getMessagePrintedToUser());"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"     * Returns the result of the command."},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"     * @return the message shown to the user"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    public String getMessagePrintedToUser() {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        int indexOfFoodStored \u003d getIndexOfFoodStored();"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"        String message;"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"        if (indexOfFoodStored \u003e\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"            LoggingHandler.logInfo(\"Search for food successful: \" + foodName + \" found.\");"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"You have \" + foodName + \" stored in \""},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"                    + fridge.getFood(indexOfFoodStored).getStorageLocation()"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"                    + \" of your fridge.\";"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"            LoggingHandler.logInfo(\"Search for food unsuccessful: No \" + foodName + \" found.\");"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"            message \u003d \"You do not have \" + foodName + \" in your fridge.\";"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"        assert message !\u003d null : \"message string should not be null\";"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"    private int getIndexOfFoodStored() {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        assert !foodName.equals(null) : \"Unable to search a null food name\";"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c fridge.getSize(); i +\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"            Food food \u003d fridge.getFood(i);"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"            if (food.getFoodName().equals(foodName)) {"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"                return i;"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"        return NOT_FOUND;"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"Leeyp":1,"kwokyto":8,"SimJJ96":55}},{"path":"src/main/java/seedu/fridgefriend/exception/EmptyDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signal that the input format given does not fulfill the criteria."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"    private static final String errorMessage \u003d \"Sorry my friend, the description cannot be empty.\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public EmptyDescriptionException() {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(errorMessage);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":1,"SimJJ96":11}},{"path":"src/main/java/seedu/fridgefriend/exception/InvalidDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":" * Signal that the input format of the date field is incorrect."},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"public class InvalidDateException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"    private static final String errorMessage \u003d \"Sorry my friend, the date must be in the form \u0027dd-mm-yy\u0027.\\n\";"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"    public InvalidDateException(String message) {"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"        super(errorMessage + message);"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":12}},{"path":"src/main/java/seedu/fridgefriend/exception/InvalidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"public class InvalidIndexException extends Exception {"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"    private static final String errorMessage \u003d \"Please enter a valid index to remove food.\";"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"    public InvalidIndexException(Exception e) {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":7,"SimJJ96":2}},{"path":"src/main/java/seedu/fridgefriend/exception/InvalidInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signals that the format of the input is incorrect."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"    private static final String errorMessage \u003d \"Sorry my friend, please give a valid input.\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public InvalidInputException() {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(errorMessage);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"    public InvalidInputException(String message) {"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"kwokyto":5,"SimJJ96":11}},{"path":"src/main/java/seedu/fridgefriend/exception/StorageLoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":" * Indicates that an error occured while loading the saved data."},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"public class StorageLoadingException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"    private static final String errorMessage \u003d \"There was an error loading the data for FridgeFriend!\\n\";"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"    public StorageLoadingException(Exception e) {"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"        super(errorMessage + e.getLocalizedMessage());"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":12}},{"path":"src/main/java/seedu/fridgefriend/exception/StorageSavingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.exception;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":" * Indicates that an error occured while loading the saved data."},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"public class StorageSavingException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"    private static final String errorMessage \u003d \"There was an error saving the data for FridgeFriend!\\n\";"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"    public StorageSavingException(Exception e) {"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"        super(errorMessage + e.getLocalizedMessage());"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":12}},{"path":"src/main/java/seedu/fridgefriend/food/ExpiryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"public class ExpiryDate {"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"    protected LocalDate expiry;"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"    public ExpiryDate(String string) throws InvalidDateException {"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":"            assert string !\u003d null : \"date string should not be null\";"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"            LocalDate expiry \u003d LocalDate.parse(string, formatter);"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"            this.expiry \u003d expiry;            "},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"            String message \u003d e.getLocalizedMessage();"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidDateException(message);"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    public LocalDate getExpiry() {"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"        return expiry;"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"        return this.expiry.format(formatter);"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":30,"Vinci-Hu":1,"SimJJ96":1}},{"path":"src/main/java/seedu/fridgefriend/food/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.utilities.LoggingHandler;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":6,"author":{"gitId":"Vinci-Hu"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Vinci-Hu"},"content":" * Represents a portion of a specific food that is stored in the smart fridge."},{"lineNumber":8,"author":{"gitId":"Vinci-Hu"},"content":" * When calling constructor, FoodCategory and foodName are NECESSARY fields."},{"lineNumber":9,"author":{"gitId":"Vinci-Hu"},"content":" * The date fields are represented by strings for now, they are OPTIONAL as well as storage location."},{"lineNumber":10,"author":{"gitId":"Vinci-Hu"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Vinci-Hu"},"content":"public class Food {"},{"lineNumber":12,"author":{"gitId":"Vinci-Hu"},"content":"    protected FoodCategory category;"},{"lineNumber":13,"author":{"gitId":"Vinci-Hu"},"content":"    protected String foodName;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    protected ExpiryDate expiryDate;"},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":"    protected FoodStorageLocation storageLocation;"},{"lineNumber":16,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":17,"author":{"gitId":"Vinci-Hu"},"content":"    public Food(FoodCategory category, String foodName) {"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Food object initiated. food name: \" + foodName);"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"        this.setCategory(category);"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"        this.setFoodName(foodName);"},{"lineNumber":21,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"    public Food(FoodCategory category, String foodName, String expiryString,"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"            FoodStorageLocation storageLocation) throws InvalidDateException {"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Food object initiated. food name: \" + foodName);"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"        this.setCategory(category);"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"        this.setFoodName(foodName);"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"        this.setExpiryDate(expiryString);"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"        this.setStorageLocation(storageLocation);"},{"lineNumber":30,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":32,"author":{"gitId":"Vinci-Hu"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Vinci-Hu"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"joohwan58"},"content":"        String format \u003d \"Food name: %1$s, category: %2$s, expiry: %3$s, stored in: %4$s\";"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"        return String.format("},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"                format,"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"                getFoodName(),"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"                getCategory().name(), "},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"                getExpiryDate().toString(), "},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"                getStorageLocation().name());"},{"lineNumber":41,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":43,"author":{"gitId":"Vinci-Hu"},"content":"    public FoodCategory getCategory() {"},{"lineNumber":44,"author":{"gitId":"Vinci-Hu"},"content":"        return category;"},{"lineNumber":45,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":47,"author":{"gitId":"Vinci-Hu"},"content":"    public void setCategory(FoodCategory category) {"},{"lineNumber":48,"author":{"gitId":"Vinci-Hu"},"content":"        this.category \u003d category;"},{"lineNumber":49,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":51,"author":{"gitId":"Vinci-Hu"},"content":"    public String getFoodName() {"},{"lineNumber":52,"author":{"gitId":"Vinci-Hu"},"content":"        return foodName;"},{"lineNumber":53,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":55,"author":{"gitId":"Vinci-Hu"},"content":"    public void setFoodName(String foodName) {"},{"lineNumber":56,"author":{"gitId":"Vinci-Hu"},"content":"        this.foodName \u003d foodName;"},{"lineNumber":57,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"    public ExpiryDate getExpiryDate() {"},{"lineNumber":60,"author":{"gitId":"Vinci-Hu"},"content":"        return expiryDate;"},{"lineNumber":61,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":63,"author":{"gitId":"kwokyto"},"content":"    public void setExpiryDate(String expiryString) throws InvalidDateException {"},{"lineNumber":64,"author":{"gitId":"kwokyto"},"content":"        ExpiryDate expiryDate \u003d new ExpiryDate(expiryString);"},{"lineNumber":65,"author":{"gitId":"Vinci-Hu"},"content":"        this.expiryDate \u003d expiryDate;"},{"lineNumber":66,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Expiry date has been changed to \""},{"lineNumber":67,"author":{"gitId":"Vinci-Hu"},"content":"                + expiryDate + \" in food object \" + foodName);"},{"lineNumber":68,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":70,"author":{"gitId":"Vinci-Hu"},"content":"    public FoodStorageLocation getStorageLocation() {"},{"lineNumber":71,"author":{"gitId":"Vinci-Hu"},"content":"        return storageLocation;"},{"lineNumber":72,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":74,"author":{"gitId":"Vinci-Hu"},"content":"    public void setStorageLocation(FoodStorageLocation storageLocation) {"},{"lineNumber":75,"author":{"gitId":"Vinci-Hu"},"content":"        this.storageLocation \u003d storageLocation;"},{"lineNumber":76,"author":{"gitId":"kwokyto"},"content":"        LoggingHandler.logInfo(\"Storage location has been changed to \""},{"lineNumber":77,"author":{"gitId":"Vinci-Hu"},"content":"                + storageLocation + \" in food object \" + foodName);"},{"lineNumber":78,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Vinci-Hu"},"content":"}"}],"authorContributionMap":{"kwokyto":25,"joohwan58":1,"Vinci-Hu":52,"SimJJ96":1}},{"path":"src/main/java/seedu/fridgefriend/food/FoodCategory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":3,"author":{"gitId":"Vinci-Hu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Vinci-Hu"},"content":" * Subject to changes with discussion."},{"lineNumber":5,"author":{"gitId":"Vinci-Hu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Vinci-Hu"},"content":"public enum FoodCategory {"},{"lineNumber":7,"author":{"gitId":"Vinci-Hu"},"content":"    VEGETABLE,      // e.g. eggplant, spinach, bok choy, including beans and fungus"},{"lineNumber":8,"author":{"gitId":"Vinci-Hu"},"content":"    FRUIT,          // e.g. strawberry, apple, grapes"},{"lineNumber":9,"author":{"gitId":"Vinci-Hu"},"content":"    MEAT,           // e.g. pork, beef, lamb, chicken"},{"lineNumber":10,"author":{"gitId":"Vinci-Hu"},"content":"    SEAFOOD,        // e.g. salmon, mackerel, crab, prawn"},{"lineNumber":11,"author":{"gitId":"Vinci-Hu"},"content":"    EGG,            // e.g. egg, duck egg, quail egg"},{"lineNumber":12,"author":{"gitId":"Vinci-Hu"},"content":"    DAIRY,          // e.g. milk, butter, cheese, yoghurt"},{"lineNumber":13,"author":{"gitId":"Vinci-Hu"},"content":"    BEVERAGE,       // e.g. coke, orange juice"},{"lineNumber":14,"author":{"gitId":"Vinci-Hu"},"content":"    COOKED_DISH,    // e.g. tomato scrambled eggs, chicken soup"},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":"    READY_TO_EAT,   // e.g. sandwich"},{"lineNumber":16,"author":{"gitId":"Vinci-Hu"},"content":"    FROZEN,    // e.g. frozen dumpling, ice cream"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    OTHER;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    public static boolean contains(String string) {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        for (FoodCategory foodCategory : values()) {"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"            if (foodCategory.name().equals(string)) {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"                return true;"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"Vinci-Hu"},"content":"    public static FoodCategory convertStringToFoodCategory(String rawCategoryStr) {"},{"lineNumber":29,"author":{"gitId":"Vinci-Hu"},"content":"        String processedCategoryStr \u003d rawCategoryStr.toUpperCase();"},{"lineNumber":30,"author":{"gitId":"Vinci-Hu"},"content":"        if (FoodCategory.contains(processedCategoryStr)) {"},{"lineNumber":31,"author":{"gitId":"Vinci-Hu"},"content":"            return FoodCategory.valueOf(processedCategoryStr);"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"            return FoodCategory.OTHER;"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"}"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""}],"authorContributionMap":{"Vinci-Hu":20,"SimJJ96":20}},{"path":"src/main/java/seedu/fridgefriend/food/FoodStorageLocation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":3,"author":{"gitId":"Vinci-Hu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Vinci-Hu"},"content":" * Assume the fridge has these storage locations"},{"lineNumber":5,"author":{"gitId":"Vinci-Hu"},"content":" * Reference: https://styledegree.sg/the-right-way-to-store-organize-food-in-fridge/"},{"lineNumber":6,"author":{"gitId":"Vinci-Hu"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Vinci-Hu"},"content":"public enum FoodStorageLocation {"},{"lineNumber":8,"author":{"gitId":"Vinci-Hu"},"content":"    FREEZER,"},{"lineNumber":9,"author":{"gitId":"Vinci-Hu"},"content":"    UPPER_SHELF,"},{"lineNumber":10,"author":{"gitId":"Vinci-Hu"},"content":"    MIDDLE_SHELF,"},{"lineNumber":11,"author":{"gitId":"Vinci-Hu"},"content":"    LOWER_SHELF,"},{"lineNumber":12,"author":{"gitId":"Vinci-Hu"},"content":"    DRAWERS,"},{"lineNumber":13,"author":{"gitId":"Vinci-Hu"},"content":"    FRIDGE_DOOR,"},{"lineNumber":14,"author":{"gitId":"Vinci-Hu"},"content":"    OTHER;"},{"lineNumber":15,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":16,"author":{"gitId":"Vinci-Hu"},"content":"    public static boolean contains(String string) {"},{"lineNumber":17,"author":{"gitId":"Vinci-Hu"},"content":"        for (FoodStorageLocation location : values()) {"},{"lineNumber":18,"author":{"gitId":"Vinci-Hu"},"content":"            if (location.name().equals(string)) {"},{"lineNumber":19,"author":{"gitId":"Vinci-Hu"},"content":"                return true;"},{"lineNumber":20,"author":{"gitId":"Vinci-Hu"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"Vinci-Hu"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Vinci-Hu"},"content":"        return false;"},{"lineNumber":23,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":25,"author":{"gitId":"Vinci-Hu"},"content":"    public static FoodStorageLocation convertStringToLocation(String rawLocationStr) {"},{"lineNumber":26,"author":{"gitId":"Vinci-Hu"},"content":"        String processedLocationStr \u003d rawLocationStr.toUpperCase();"},{"lineNumber":27,"author":{"gitId":"Vinci-Hu"},"content":"        if (FoodStorageLocation.contains(processedLocationStr)) {"},{"lineNumber":28,"author":{"gitId":"Vinci-Hu"},"content":"            return FoodStorageLocation.valueOf(processedLocationStr);"},{"lineNumber":29,"author":{"gitId":"Vinci-Hu"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"Vinci-Hu"},"content":"            return FoodStorageLocation.OTHER;"},{"lineNumber":31,"author":{"gitId":"Vinci-Hu"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Vinci-Hu"},"content":"}"}],"authorContributionMap":{"Vinci-Hu":32,"SimJJ96":1}},{"path":"src/main/java/seedu/fridgefriend/food/Fridge.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"public class Fridge {"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"    private ArrayList\u003cFood\u003e fridge \u003d new ArrayList\u003c\u003e();"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    public void add(Food food) {"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"        fridge.add(food);"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    public int getSize() {"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"        return fridge.size();"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public Food getFood(int i) {"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"        return fridge.get(i);"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    public void removeByIndex(int index) {"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"        fridge.remove(index);"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":18,"SimJJ96":7}},{"path":"src/main/java/seedu/fridgefriend/utilities/LoggingHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.utilities;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.util.logging.Level;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":" * Represents a logging object with name FridgeFriend."},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"public class LoggingHandler {"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"    private static Logger logger \u003d Logger.getLogger(\"FridgeFriend\");"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level INFO."},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"    public static void logInfo(String message) {"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"        logger.setLevel(Level.WARNING);"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.INFO, message);"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level INFO with an exception."},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"    public static void logInfo(String message, Throwable e) {"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"        logger.setLevel(Level.WARNING);"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.INFO, message, e);"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level WARNING."},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"    public static void logWarning(String message) {"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.WARNING, message);"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level WARNING with an exception."},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"    public static void logWarning(String message, Throwable e) {"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.WARNING, message, e);"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level SEVERE."},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"    public static void logSevere(String message) {"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.SEVERE, message);"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"     * Logs a message at level SEVERE with an exception."},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"    public static void logSevere(String message, Throwable e) {"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"        logger.log(Level.SEVERE, message, e);"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":55}},{"path":"src/main/java/seedu/fridgefriend/utilities/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.utilities;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import static seedu.fridgefriend.food.FoodCategory.convertStringToFoodCategory;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import static seedu.fridgefriend.food.FoodStorageLocation.convertStringToLocation;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.AddCommand;"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.ByeCommand;"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.Command;"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.ExpiringCommand;"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.RemoveCommand;"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.SearchCommand;"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.EmptyDescriptionException;"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":" * Represents an object that deals with making sense of the user command."},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"public class Parser {"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"    public static final int COMMAND_WORD \u003d 0;"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"    public static final int LIMIT \u003d 2;"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"     * Returns a Command object based on the user\u0027s raw input."},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"     * @param input user\u0027s raw input"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"     * @return Command object"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the required description field is empty"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidInputException if the command is not recognised"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidIndexException if the index given in description is out of bounds"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date input cannot be parsed"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"    public static Command getCommand(String input)"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidInputException, "},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"            InvalidIndexException, InvalidDateException {"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"        String[] parsedInput \u003d parseInput(input);"},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"        Command command \u003d parseCommand(parsedInput);"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"        return command;"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"     * Parses input into command and description."},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"     * @param input user input string"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"     * @return String array of command and description"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidInputException if the input is empty"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":"    public static String[] parseInput(String input) throws InvalidInputException {"},{"lineNumber":56,"author":{"gitId":"kwokyto"},"content":"        if (input.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidInputException();"},{"lineNumber":58,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"        //remove trailing whitespaces and parse input into two separated by a whitespace"},{"lineNumber":60,"author":{"gitId":"kwokyto"},"content":"        String[] words \u003d input.trim().split(\"\\\\s+\", Parser.LIMIT);"},{"lineNumber":61,"author":{"gitId":"kwokyto"},"content":"        if (words.length \u003d\u003d Parser.LIMIT) {"},{"lineNumber":62,"author":{"gitId":"kwokyto"},"content":"            return words;"},{"lineNumber":63,"author":{"gitId":"kwokyto"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"kwokyto"},"content":"            //return an array of command and empty description"},{"lineNumber":65,"author":{"gitId":"kwokyto"},"content":"            return new String[] {words[COMMAND_WORD], \"\"};"},{"lineNumber":66,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":69,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"kwokyto"},"content":"     * Returns the appropriate Command object based on command and description."},{"lineNumber":71,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":72,"author":{"gitId":"kwokyto"},"content":"     * @param parsedInput string array containing command and description"},{"lineNumber":73,"author":{"gitId":"kwokyto"},"content":"     * @return Command object"},{"lineNumber":74,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the required description field is empty"},{"lineNumber":75,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidInputException if the command is not recognised"},{"lineNumber":76,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidIndexException if the index given in description is out of bounds"},{"lineNumber":77,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date input cannot be parsed"},{"lineNumber":78,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kwokyto"},"content":"    public static Command parseCommand(String[] parsedInput)"},{"lineNumber":80,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidInputException, "},{"lineNumber":81,"author":{"gitId":"kwokyto"},"content":"            InvalidIndexException, InvalidDateException {"},{"lineNumber":82,"author":{"gitId":"kwokyto"},"content":"        String commandString \u003d parsedInput[COMMAND_WORD];"},{"lineNumber":83,"author":{"gitId":"kwokyto"},"content":"        String description \u003d parsedInput[1];"},{"lineNumber":84,"author":{"gitId":"kwokyto"},"content":"        Command command;"},{"lineNumber":85,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":86,"author":{"gitId":"kwokyto"},"content":"        switch (commandString.toLowerCase()) {"},{"lineNumber":87,"author":{"gitId":"kwokyto"},"content":"        case \"add\":"},{"lineNumber":88,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getAddCommand(description);"},{"lineNumber":89,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"kwokyto"},"content":"        case \"list\":"},{"lineNumber":91,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getListCommand(description);"},{"lineNumber":92,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"kwokyto"},"content":"        case \"remove\":"},{"lineNumber":94,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getRemoveCommand(description);"},{"lineNumber":95,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"kwokyto"},"content":"        case \"search\":"},{"lineNumber":97,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getSearchCommand(description);"},{"lineNumber":98,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"kwokyto"},"content":"        case \"expiring\":"},{"lineNumber":100,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getExpiringCommand();"},{"lineNumber":101,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"kwokyto"},"content":"        case \"help\":"},{"lineNumber":103,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getHelpCommand();"},{"lineNumber":104,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"kwokyto"},"content":"        case \"bye\":"},{"lineNumber":106,"author":{"gitId":"kwokyto"},"content":"            command \u003d Parser.getByeCommand();"},{"lineNumber":107,"author":{"gitId":"kwokyto"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"kwokyto"},"content":"        default:"},{"lineNumber":109,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidInputException();"},{"lineNumber":110,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"kwokyto"},"content":"        assert command !\u003d null : \"Command should not be null\";"},{"lineNumber":112,"author":{"gitId":"kwokyto"},"content":"        return command;"},{"lineNumber":113,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":115,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"kwokyto"},"content":"     * Define arguments format for add food command."},{"lineNumber":117,"author":{"gitId":"kwokyto"},"content":"     * A Pattern object which defines how the input string for food item"},{"lineNumber":118,"author":{"gitId":"kwokyto"},"content":"     * that should look like. [^/]+ implies 1 or more characters except for \u0027/\u0027"},{"lineNumber":119,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"kwokyto"},"content":"    public static final Pattern FOOD_DATA_ARGS_FORMAT \u003d"},{"lineNumber":121,"author":{"gitId":"kwokyto"},"content":"            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""},{"lineNumber":122,"author":{"gitId":"kwokyto"},"content":"                    + \" /cat (?\u003ccategory\u003e[^/]+)\""},{"lineNumber":123,"author":{"gitId":"kwokyto"},"content":"                    + \" /exp (?\u003cexpiryDate\u003e[^/]+)\""},{"lineNumber":124,"author":{"gitId":"kwokyto"},"content":"                    + \" /loc (?\u003cstorageLocation\u003e[^/]+)\");"},{"lineNumber":125,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":126,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"kwokyto"},"content":"     * Parses description into name, foodCategory, expiryDate and storageLocation."},{"lineNumber":128,"author":{"gitId":"kwokyto"},"content":"     * Matcher objects will try to parse a string according to the Pattern we define"},{"lineNumber":129,"author":{"gitId":"kwokyto"},"content":"     * like above FOOD_DATA_ARGS_FORMAT. For other future parsers can copy the usage here."},{"lineNumber":130,"author":{"gitId":"kwokyto"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"kwokyto"},"content":"     * @param foodDescription the string in the required format of food description"},{"lineNumber":132,"author":{"gitId":"kwokyto"},"content":"     * @return a new AddCommand for Food"},{"lineNumber":133,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the description is empty"},{"lineNumber":134,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidInputException if the description cannot parse"},{"lineNumber":135,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date input cannot be parsed"},{"lineNumber":136,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"kwokyto"},"content":"    public static Command parseFoodDescription(String foodDescription)"},{"lineNumber":138,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidInputException, InvalidDateException {"},{"lineNumber":139,"author":{"gitId":"kwokyto"},"content":"        if (foodDescription.isEmpty()) {"},{"lineNumber":140,"author":{"gitId":"kwokyto"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":141,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"kwokyto"},"content":"        final Matcher matcher \u003d FOOD_DATA_ARGS_FORMAT.matcher(foodDescription.trim());"},{"lineNumber":143,"author":{"gitId":"kwokyto"},"content":"        // Validate foodDescription string format"},{"lineNumber":144,"author":{"gitId":"kwokyto"},"content":"        if (!matcher.matches()) {"},{"lineNumber":145,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidInputException();"},{"lineNumber":146,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"kwokyto"},"content":"        return new AddCommand(matcher.group(\"name\"), convertStringToFoodCategory(matcher.group(\"category\")),"},{"lineNumber":148,"author":{"gitId":"kwokyto"},"content":"                matcher.group(\"expiryDate\"), convertStringToLocation(matcher.group(\"storageLocation\")));"},{"lineNumber":149,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":151,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"kwokyto"},"content":"     * Returns an AddCommand object based on description."},{"lineNumber":153,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":154,"author":{"gitId":"kwokyto"},"content":"     * @param description description for command"},{"lineNumber":155,"author":{"gitId":"kwokyto"},"content":"     * @return AddCommand object"},{"lineNumber":156,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the description is empty"},{"lineNumber":157,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidInputException if the description cannot parse"},{"lineNumber":158,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date input cannot be parsed"},{"lineNumber":159,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"kwokyto"},"content":"    public static Command getAddCommand(String description) "},{"lineNumber":161,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidInputException, InvalidDateException {"},{"lineNumber":162,"author":{"gitId":"kwokyto"},"content":"        Command addCommand \u003d parseFoodDescription(description);"},{"lineNumber":163,"author":{"gitId":"kwokyto"},"content":"        return addCommand;"},{"lineNumber":164,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":166,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"kwokyto"},"content":"     * Returns a ListCommand object based on description."},{"lineNumber":168,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":169,"author":{"gitId":"kwokyto"},"content":"     * @param description description for command"},{"lineNumber":170,"author":{"gitId":"kwokyto"},"content":"     * @return ListCommand object"},{"lineNumber":171,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"kwokyto"},"content":"    public static Command getListCommand(String description) {"},{"lineNumber":173,"author":{"gitId":"kwokyto"},"content":"        Command listCommand \u003d new ListCommand(description);"},{"lineNumber":174,"author":{"gitId":"kwokyto"},"content":"        return listCommand;"},{"lineNumber":175,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":177,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"kwokyto"},"content":"     * Returns a RemoveCommand object based on description."},{"lineNumber":179,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":180,"author":{"gitId":"kwokyto"},"content":"     * @param description description for command"},{"lineNumber":181,"author":{"gitId":"kwokyto"},"content":"     * @return RemoveCommand object"},{"lineNumber":182,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the description is empty"},{"lineNumber":183,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidIndexException if the index given in description is out of bounds"},{"lineNumber":184,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"kwokyto"},"content":"    public static Command getRemoveCommand(String description)"},{"lineNumber":186,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidIndexException {"},{"lineNumber":187,"author":{"gitId":"kwokyto"},"content":"        int index \u003d parseIntegerDescription(description);"},{"lineNumber":188,"author":{"gitId":"kwokyto"},"content":"        Command removeCommand \u003d new RemoveCommand(index);"},{"lineNumber":189,"author":{"gitId":"kwokyto"},"content":"        return removeCommand;"},{"lineNumber":190,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":192,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"kwokyto"},"content":"     * Returns a SearchCommand object based on description."},{"lineNumber":194,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":195,"author":{"gitId":"kwokyto"},"content":"     * @param description description for command"},{"lineNumber":196,"author":{"gitId":"kwokyto"},"content":"     * @return SearchCommand object"},{"lineNumber":197,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the description is empty"},{"lineNumber":198,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"kwokyto"},"content":"    public static Command getSearchCommand(String description) throws EmptyDescriptionException {"},{"lineNumber":200,"author":{"gitId":"kwokyto"},"content":"        Command searchCommand \u003d new SearchCommand(description);"},{"lineNumber":201,"author":{"gitId":"kwokyto"},"content":"        return searchCommand;"},{"lineNumber":202,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":204,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"kwokyto"},"content":"     * Returns an ExpiringCommand object."},{"lineNumber":206,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":208,"author":{"gitId":"kwokyto"},"content":"    private static Command getExpiringCommand() {"},{"lineNumber":209,"author":{"gitId":"kwokyto"},"content":"        Command expiringCommand \u003d new ExpiringCommand();"},{"lineNumber":210,"author":{"gitId":"kwokyto"},"content":"        return expiringCommand;"},{"lineNumber":211,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":213,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"kwokyto"},"content":"     * Returns a HelpCommand object."},{"lineNumber":215,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":217,"author":{"gitId":"kwokyto"},"content":"    public static Command getHelpCommand() {"},{"lineNumber":218,"author":{"gitId":"kwokyto"},"content":"        Command helpCommand \u003d new HelpCommand();"},{"lineNumber":219,"author":{"gitId":"kwokyto"},"content":"        return helpCommand;"},{"lineNumber":220,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":222,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"kwokyto"},"content":"     * Returns a ByeCommand object."},{"lineNumber":224,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":225,"author":{"gitId":"kwokyto"},"content":"    public static Command getByeCommand() {"},{"lineNumber":226,"author":{"gitId":"kwokyto"},"content":"        Command byeCommand \u003d new ByeCommand();"},{"lineNumber":227,"author":{"gitId":"kwokyto"},"content":"        return byeCommand;"},{"lineNumber":228,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":230,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"kwokyto"},"content":"     * Parses the description into an integer."},{"lineNumber":232,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":233,"author":{"gitId":"kwokyto"},"content":"     * @param description description for command"},{"lineNumber":234,"author":{"gitId":"kwokyto"},"content":"     * @return integer index"},{"lineNumber":235,"author":{"gitId":"kwokyto"},"content":"     * @throws EmptyDescriptionException if the description is empty"},{"lineNumber":236,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidIndexException if the description is not a number"},{"lineNumber":237,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"kwokyto"},"content":"    public static int parseIntegerDescription(String description)"},{"lineNumber":239,"author":{"gitId":"kwokyto"},"content":"            throws EmptyDescriptionException, InvalidIndexException {"},{"lineNumber":240,"author":{"gitId":"kwokyto"},"content":"        if (description.isEmpty()) {"},{"lineNumber":241,"author":{"gitId":"kwokyto"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":242,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":244,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":245,"author":{"gitId":"kwokyto"},"content":"            int index \u003d Integer.parseInt(description);"},{"lineNumber":246,"author":{"gitId":"kwokyto"},"content":"            return index;"},{"lineNumber":247,"author":{"gitId":"kwokyto"},"content":"        } catch (Exception e) {"},{"lineNumber":248,"author":{"gitId":"kwokyto"},"content":"            throw new InvalidIndexException(e);"},{"lineNumber":249,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":252,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":251,"SimJJ96":1}},{"path":"src/main/java/seedu/fridgefriend/utilities/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.utilities;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.StorageLoadingException;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.StorageSavingException;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"import java.nio.file.Files;"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"import java.nio.file.Path;"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"import java.nio.file.Paths;"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"    private static String filePath \u003d \"data/data.txt\";"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"    private static String directory \u003d \"data\";"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"    private static Fridge fridge;"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"     * Loads the saved data into a fridge."},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"     * @param fridgeInput fridge to be populated"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"    public static void load(Fridge fridgeInput) {"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"        fridge \u003d fridgeInput;"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"            checkDirectory();"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"            StorageLoadingException exception \u003d new StorageLoadingException(e);"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"            Ui.printExceptionMessage(exception);"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"     * Creates a textfile and the folder directory if it does not already exist."},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date cannot be parsed"},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"     * @throws FileNotFoundException if file does not exist"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"    private static void checkDirectory() throws FileNotFoundException, InvalidDateException {"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"        Path path \u003d Paths.get(filePath); //creates Path instance"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"            Files.createDirectories(Paths.get(directory));"},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"            Files.createFile(path); //creates file at specified location"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"            loadData();"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":56,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kwokyto"},"content":"     * Reads the data from the textfile."},{"lineNumber":58,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"     * @throws FileNotFoundException if file does not exist"},{"lineNumber":60,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if the date cannot be parsed"},{"lineNumber":61,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"kwokyto"},"content":"    private static void loadData() throws FileNotFoundException, InvalidDateException {"},{"lineNumber":63,"author":{"gitId":"kwokyto"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":64,"author":{"gitId":"kwokyto"},"content":"        Scanner scanner \u003d new Scanner(file); // create a Scanner using the File as the source"},{"lineNumber":65,"author":{"gitId":"kwokyto"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":66,"author":{"gitId":"kwokyto"},"content":"            String line \u003d scanner.nextLine();"},{"lineNumber":67,"author":{"gitId":"kwokyto"},"content":"            readData(line);"},{"lineNumber":68,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"kwokyto"},"content":"        scanner.close();"},{"lineNumber":70,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":72,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"kwokyto"},"content":"     * Adds a food item to a fridge based on saved data."},{"lineNumber":74,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":75,"author":{"gitId":"kwokyto"},"content":"     * @param line string in data file to be read"},{"lineNumber":76,"author":{"gitId":"kwokyto"},"content":"     * @throws InvalidDateException if date in data file cannot be parsed"},{"lineNumber":77,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"kwokyto"},"content":"    private static void readData(String line) throws InvalidDateException {"},{"lineNumber":79,"author":{"gitId":"kwokyto"},"content":"        String[] parameters \u003d line.split(\":\");"},{"lineNumber":80,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":81,"author":{"gitId":"kwokyto"},"content":"        String name \u003d parameters[1].substring(1, parameters[1].indexOf((\",\")));"},{"lineNumber":82,"author":{"gitId":"kwokyto"},"content":"        String categoryStr \u003d parameters[2].substring(1, parameters[2].indexOf((\",\")));"},{"lineNumber":83,"author":{"gitId":"kwokyto"},"content":"        FoodCategory category \u003d FoodCategory.convertStringToFoodCategory(categoryStr);"},{"lineNumber":84,"author":{"gitId":"kwokyto"},"content":"        String expiry \u003d parameters[3].substring(1, parameters[3].indexOf((\",\")));"},{"lineNumber":85,"author":{"gitId":"kwokyto"},"content":"        String storageStr \u003d parameters[4];"},{"lineNumber":86,"author":{"gitId":"kwokyto"},"content":"        FoodStorageLocation storage \u003d FoodStorageLocation.convertStringToLocation(storageStr);"},{"lineNumber":87,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":88,"author":{"gitId":"kwokyto"},"content":"        Food food \u003d new Food(category, name, expiry, storage); "},{"lineNumber":89,"author":{"gitId":"kwokyto"},"content":"        fridge.add(food);"},{"lineNumber":90,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":92,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"kwokyto"},"content":"     * Overwrites the current textfile with data from the current session."},{"lineNumber":94,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":95,"author":{"gitId":"kwokyto"},"content":"     * @param fridgeInput fridge to be populated"},{"lineNumber":96,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"kwokyto"},"content":"    public static void save(Fridge fridgeInput) {"},{"lineNumber":98,"author":{"gitId":"kwokyto"},"content":"        fridge \u003d fridgeInput;"},{"lineNumber":99,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"kwokyto"},"content":"            clearFile();"},{"lineNumber":101,"author":{"gitId":"kwokyto"},"content":"            populateData();"},{"lineNumber":102,"author":{"gitId":"kwokyto"},"content":"        } catch (Exception e) {"},{"lineNumber":103,"author":{"gitId":"kwokyto"},"content":"            StorageSavingException exception \u003d new StorageSavingException(e);"},{"lineNumber":104,"author":{"gitId":"kwokyto"},"content":"            Ui.printExceptionMessage(exception);"},{"lineNumber":105,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":108,"author":{"gitId":"kwokyto"},"content":"    private static void clearFile() throws IOException {"},{"lineNumber":109,"author":{"gitId":"kwokyto"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":110,"author":{"gitId":"kwokyto"},"content":"        fileWriter.write(\"\"); //clear file"},{"lineNumber":111,"author":{"gitId":"kwokyto"},"content":"        fileWriter.close();"},{"lineNumber":112,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":114,"author":{"gitId":"kwokyto"},"content":"    private static void populateData() throws IOException {"},{"lineNumber":115,"author":{"gitId":"kwokyto"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"},{"lineNumber":116,"author":{"gitId":"kwokyto"},"content":"        for (int i \u003d 0; i \u003c fridge.getSize(); i++) {"},{"lineNumber":117,"author":{"gitId":"kwokyto"},"content":"            fileWriter.write(fridge.getFood(i).toString() + \"\\n\");"},{"lineNumber":118,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"kwokyto"},"content":"        fileWriter.close();"},{"lineNumber":120,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":121}},{"path":"src/main/java/seedu/fridgefriend/utilities/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.utilities;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":" * Represents an object that deals with interactions with the user."},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"    public static final Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"     * Retrieves the next line of input provided by the user."},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"     * @return string of next input"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"    public static String getNextLine() {"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"        String line \u003d scanner.nextLine();    "},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":"        return line;"},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"     * Prints to user a message with an added border below it."},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"     * @param message message to be printed"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"    public static void printMessage(String message) {"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"        System.out.println(message);"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"        System.out.println(\"-----------------------------------------------------------------\");"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"        String logo \u003d"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"                \"  ______    _     _            ______    _                _ \\n\""},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":"                + \" |  ____|  (_)   | |          |  ____|  (_)              | |\\n\""},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"                + \" | |__ _ __ _  __| | __ _  ___| |__ _ __ _  ___ _ __   __| |\\n\""},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"                + \" |  __| \u0027__| |/ _` |/ _` |/ _ \\\\  __| \u0027__| |/ _ \\\\ \u0027_ \\\\ / _` |\\n\""},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"                + \" | |  | |  | | (_| | (_| |  __/ |  | |  | |  __/ | | | (_| |\\n\""},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"                + \" |_|  |_|  |_|\\\\__,_|\\\\__, |\\\\___|_|  |_|  |_|\\\\___|_| |_|\\\\__,_|\\n\""},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"                + \"                     __/ |\\n\""},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"                + \"                    |___/\\n\\n\";"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m FridgeFriend!\\n\" + \"What can I do for you?\";"},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"        printMessage(logo + welcomeMessage);"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"    public static void printByeMessage() {"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"        String byeMessage \u003d \"Bye! Hope to see you again soon!\";"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"        printMessage(byeMessage);"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":"    public static void printExceptionMessage(Exception exception) {"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"        String exceptionMessage \u003d exception.getMessage();"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"        printMessage(exceptionMessage);"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":55}},{"path":"src/test/java/seedu/fridgefriend/FridgeFriendTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"class FridgeFriendTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":10,"SimJJ96":2}},{"path":"src/test/java/seedu/fridgefriend/command/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.ExpiryDate;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"class AddCommandTest {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private Fridge fridge;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    @BeforeEach"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        fridge \u003d new Fridge();"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    public void addCommand_foodInCorrectFormat_successfullyAdded() throws InvalidDateException {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        AddCommand addCommand \u003d new AddCommand(\"chicken\", FoodCategory.MEAT,"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"                \"30-06-2021\", FoodStorageLocation.FREEZER);"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        addCommand.setData(fridge);"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"        addCommand.execute();"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(\"chicken\", fridge.getFood(0).getFoodName());"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(FoodCategory.MEAT, fridge.getFood(0).getCategory());"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(FoodStorageLocation.FREEZER, fridge.getFood(0).getStorageLocation());"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        ExpiryDate expiryDate \u003d new ExpiryDate(\"30-06-2021\");"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expiryDate.getExpiry(), fridge.getFood(0).getExpiryDate().getExpiry());"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"Great! I have added chicken into your fridge.\\n\""},{"lineNumber":37,"author":{"gitId":"joohwan58"},"content":"                + \"Details: Food name: chicken, category: MEAT, \""},{"lineNumber":38,"author":{"gitId":"joohwan58"},"content":"                + \"expiry: 30-06-2021, stored in: FREEZER\";"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d addCommand.getMessagePrintedToUser();"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    public void addCommand_invalidDate_InvalidDateException() {"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"            Command addCommand \u003d new AddCommand(\"chicken\", FoodCategory.MEAT,"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"                    \"abcd\", FoodStorageLocation.FREEZER);"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        });"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"joohwan58":2,"SimJJ96":48}},{"path":"src/test/java/seedu/fridgefriend/command/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"class ListCommandTest {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private Fridge fridge;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    @BeforeEach"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    public void setUp() throws Exception {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        fridge \u003d new Fridge();"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        Food chicken \u003d new Food(FoodCategory.MEAT, \"chicken\","},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"                \"31-07-2021\", FoodStorageLocation.LOWER_SHELF);"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(chicken);"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        Food lettuce \u003d new Food(FoodCategory.VEGETABLE,\"lettuce\","},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"                \"17-03-2021\", FoodStorageLocation.MIDDLE_SHELF);"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(lettuce);"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        Food pork \u003d new Food(FoodCategory.MEAT, \"pork\","},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"                \"31-07-2021\", FoodStorageLocation.LOWER_SHELF);"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(pork);"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    public void listCommand_listAValidCategory_ListTheCategoryInCorrectSequence() {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        ListCommand listCommand \u003d new ListCommand(\"MEAT\");"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        listCommand.setData(fridge);"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"These are the MEAT in your fridge:\\n\""},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"                + \"\\t1. chicken\\n\""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"                + \"\\t2. pork\";"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d listCommand.getListByCategoryMessage();"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    public void listCommand_listAnInvalidCategory_invalidInputException() {"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"        assertThrows(InvalidInputException.class, () -\u003e"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"                new ListCommand(\"abc123\").execute());"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"    public void listCommand_listAll_listAllFoodInFridge() {"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"        ListCommand listCommand \u003d new ListCommand(\"\");"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        listCommand.setData(fridge);"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"Here are the items in your fridge:\\n\""},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"                + \"\\t1. chicken [MEAT]\\n\""},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"                + \"\\t2. lettuce [VEGETABLE]\\n\""},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"                + \"\\t3. pork [MEAT]\";"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d listCommand.getListAllMessage();"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":63}},{"path":"src/test/java/seedu/fridgefriend/command/RemoveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"class RemoveCommandTest {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private Fridge fridge;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    /*Solution below adapted from https://github.com/se-edu/addressbook-level2/blob/master"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"            /test/java/seedu/addressbook/commands/DeleteCommandTest.java*/"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    @BeforeEach"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public void setUp() throws Exception {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        fridge \u003d new Fridge();"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        Food chicken \u003d new Food(FoodCategory.MEAT, \"chicken\","},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"                \"30-06-2021\", FoodStorageLocation.FREEZER);"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(chicken);"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        Food pork \u003d new Food(FoodCategory.MEAT, \"pork\","},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"                \"31-07-2021\",FoodStorageLocation.LOWER_SHELF);"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(pork);"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        Food lettuce \u003d new Food(FoodCategory.VEGETABLE,\"lettuce\","},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"                \"17-03-2021\", FoodStorageLocation.MIDDLE_SHELF);"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(lettuce);"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    public void removeCommand_validIndex_successfullyRemove() throws InvalidIndexException {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(1);"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        removeCommand.setData(fridge);"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"        removeCommand.execute();"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d removeCommand.getMessagePrintedToUser();"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"Noted! I\u0027ve removed chicken\""},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"                + \" from your fridge.\\n\""},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have 2\""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"                + \" food in the fridge.\";"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage,actualMessage);"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"    public void removeCommand_invalidIndex_invalidIndexException() {"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        assertThrows(InvalidIndexException.class, () -\u003e"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"                new RemoveCommand(10).execute());"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":55}},{"path":"src/test/java/seedu/fridgefriend/command/SearchCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package seedu.fridgefriend.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.exception.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Food;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodCategory;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.FoodStorageLocation;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import seedu.fridgefriend.food.Fridge;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"class SearchCommandTest {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private Fridge fridge;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    @BeforeEach"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    public void setUp() throws Exception {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        fridge \u003d new Fridge();"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        Food chicken \u003d new Food(FoodCategory.MEAT, \"chicken\","},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"                \"30-06-2021\", FoodStorageLocation.FREEZER);"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(chicken);"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        Food pork \u003d new Food(FoodCategory.MEAT, \"pork\","},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"                \"31-07-2021\", FoodStorageLocation.LOWER_SHELF);"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(pork);"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        Food lettuce \u003d new Food(FoodCategory.VEGETABLE,\"lettuce\","},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"                \"17-03-2021\", FoodStorageLocation.MIDDLE_SHELF);"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        fridge.add(lettuce);"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private SearchCommand searchCommand(String foodName) throws EmptyDescriptionException {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        SearchCommand searchCommand \u003d new SearchCommand(foodName);"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        searchCommand.setData(fridge);"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        return searchCommand;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    public void searchCommand_foodInFridge_foodFound() throws EmptyDescriptionException {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"You have chicken stored in FREEZER of your fridge.\";"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d searchCommand(\"chicken\").getMessagePrintedToUser();"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    public void searchCommand_foodNotInFridge_foodNotFound() throws EmptyDescriptionException {"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"        String expectedMessage \u003d \"You do not have oyster in your fridge.\";"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        String actualMessage \u003d searchCommand(\"oyster\").getMessagePrintedToUser();"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    public void searchCommand_emptyString_emptyDescriptionException() {"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        assertThrows(EmptyDescriptionException.class, () -\u003e"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"                searchCommand(\"\"));"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":60}},{"path":"src/test/java/seedu/fridgefriend/food/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.food;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidDateException;"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"public class FoodTest {"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    void testNewFood() {"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"        Food pork \u003d new Food(FoodCategory.MEAT, \"pork\");"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodCategory.MEAT, pork.getCategory());"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"        assertEquals(\"pork\", pork.getFoodName());"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Vinci-Hu"},"content":"    void invalidDate_wrongDateFormat_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"        Food chicken \u003d new Food(FoodCategory.MEAT, \"chicken\");"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"            chicken.setExpiryDate(\"15-3-2021\");"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"    void testStorageLocation() {"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"        Food grouper \u003d new Food(FoodCategory.SEAFOOD, \"grouper\");"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"        grouper.setStorageLocation(FoodStorageLocation.FREEZER);"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodStorageLocation.FREEZER, grouper.getStorageLocation());"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"    void testChangeFoodDescriptionCategory() {"},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"        Food chocolate \u003d new Food(FoodCategory.DAIRY, \"chocolate\");"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodCategory.DAIRY, chocolate.getCategory());"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"        assertEquals(\"chocolate\", chocolate.getFoodName());"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"        chocolate.setFoodName(\"melted chocolate\");"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"        chocolate.setCategory(FoodCategory.OTHER);"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodCategory.OTHER, chocolate.getCategory());"},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"        assertEquals(\"melted chocolate\", chocolate.getFoodName());"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"    void testNewFoodAllParameters() throws InvalidDateException {"},{"lineNumber":47,"author":{"gitId":"Vinci-Hu"},"content":"        Food eggs \u003d new Food(FoodCategory.EGG, \"eggs\","},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"                \"20-03-2021\", FoodStorageLocation.UPPER_SHELF);"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodCategory.EGG, eggs.getCategory());"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"        assertEquals(\"eggs\", eggs.getFoodName());"},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"        assertEquals(\"20-03-2021\", eggs.getExpiryDate().toString());"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"        assertEquals(FoodStorageLocation.UPPER_SHELF, eggs.getStorageLocation());"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Vinci-Hu"},"content":""},{"lineNumber":55,"author":{"gitId":"Vinci-Hu"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"Vinci-Hu"},"content":"    void testUpdateExpiryDate() throws InvalidDateException {"},{"lineNumber":57,"author":{"gitId":"Vinci-Hu"},"content":"        Food eggs \u003d new Food(FoodCategory.EGG, \"eggs\","},{"lineNumber":58,"author":{"gitId":"Vinci-Hu"},"content":"                \"20-03-2021\", FoodStorageLocation.UPPER_SHELF);"},{"lineNumber":59,"author":{"gitId":"Vinci-Hu"},"content":"        eggs.setExpiryDate(\"12-04-2021\");"},{"lineNumber":60,"author":{"gitId":"Vinci-Hu"},"content":"        assertEquals(\"12-04-2021\", eggs.getExpiryDate().toString());"},{"lineNumber":61,"author":{"gitId":"Vinci-Hu"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":41,"kwokyto":11,"Vinci-Hu":10}},{"path":"src/test/java/seedu/fridgefriend/utilities/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"package seedu.fridgefriend.utilities;"},{"lineNumber":2,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":3,"author":{"gitId":"kwokyto"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kwokyto"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"kwokyto"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":7,"author":{"gitId":"kwokyto"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":9,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.EmptyDescriptionException;"},{"lineNumber":10,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidIndexException;"},{"lineNumber":11,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.exception.InvalidInputException;"},{"lineNumber":12,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.ByeCommand;"},{"lineNumber":13,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.Command;"},{"lineNumber":14,"author":{"gitId":"kwokyto"},"content":"import seedu.fridgefriend.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":16,"author":{"gitId":"kwokyto"},"content":"// Solution below adapted from https://github.com/se-edu/addressbook-level2/blob/157fcf19c6b73289dc4cc7b2dd1152bc2b8e197a/test/java/seedu/addressbook/parser/ParserTest.java"},{"lineNumber":17,"author":{"gitId":"kwokyto"},"content":"public class ParserTest {"},{"lineNumber":18,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":19,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"    public void parse_emptyInput_InvalidInputException() {"},{"lineNumber":21,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidInputException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"kwokyto"},"content":"            Parser.parseInput(\"\");"},{"lineNumber":23,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":26,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"kwokyto"},"content":"    public void parse_listCommand_parsedCorrectly() {"},{"lineNumber":28,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"kwokyto"},"content":"            assertEquals(Parser.getCommand(\"list\").getClass(), ListCommand.class);"},{"lineNumber":30,"author":{"gitId":"kwokyto"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"kwokyto"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":35,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"kwokyto"},"content":"    public void parse_byeCommand_parsedCorrectly() {"},{"lineNumber":37,"author":{"gitId":"kwokyto"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"kwokyto"},"content":"            assertEquals(Parser.getCommand(\"bye\").getClass(), ByeCommand.class);"},{"lineNumber":39,"author":{"gitId":"kwokyto"},"content":"        } catch (Exception e) {"},{"lineNumber":40,"author":{"gitId":"kwokyto"},"content":"            fail();"},{"lineNumber":41,"author":{"gitId":"kwokyto"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":44,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"kwokyto"},"content":"    public void parse_addCommandNoArgs_EmptyDescriptionException() {"},{"lineNumber":46,"author":{"gitId":"kwokyto"},"content":"        assertThrows(EmptyDescriptionException.class, () -\u003e {"},{"lineNumber":47,"author":{"gitId":"kwokyto"},"content":"            Parser.getCommand(\"add\");"},{"lineNumber":48,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":49,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":51,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"kwokyto"},"content":"    public void parse_addCommandMissingArgs_InvalidInputException() {"},{"lineNumber":53,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidInputException.class, () -\u003e {"},{"lineNumber":54,"author":{"gitId":"kwokyto"},"content":"            Parser.getCommand(\"add /cat meat\");"},{"lineNumber":55,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":56,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":58,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"kwokyto"},"content":"    public void parse_removeCommandNoArgs_EmptyDescriptionException() {"},{"lineNumber":60,"author":{"gitId":"kwokyto"},"content":"        assertThrows(EmptyDescriptionException.class, () -\u003e {"},{"lineNumber":61,"author":{"gitId":"kwokyto"},"content":"            Parser.getCommand(\"remove\");"},{"lineNumber":62,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":63,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":65,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"kwokyto"},"content":"    public void parse_removeCommandAlphabeticalArgs_InvalidIndexException() {"},{"lineNumber":67,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidIndexException.class, () -\u003e {"},{"lineNumber":68,"author":{"gitId":"kwokyto"},"content":"            Parser.getCommand(\"remove abc\");"},{"lineNumber":69,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":70,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":72,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"kwokyto"},"content":"    public void parse_removeCommandArgOutOfBounds_InvalidIndexException() {"},{"lineNumber":74,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidIndexException.class, () -\u003e {"},{"lineNumber":75,"author":{"gitId":"kwokyto"},"content":"            Command command \u003d Parser.getCommand(\"remove -1\");"},{"lineNumber":76,"author":{"gitId":"kwokyto"},"content":"            command.execute();"},{"lineNumber":77,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"kwokyto"},"content":"        assertThrows(InvalidIndexException.class, () -\u003e {"},{"lineNumber":79,"author":{"gitId":"kwokyto"},"content":"            Command command \u003d Parser.getCommand(\"remove 10000\");"},{"lineNumber":80,"author":{"gitId":"kwokyto"},"content":"            command.execute();"},{"lineNumber":81,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":82,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kwokyto"},"content":""},{"lineNumber":84,"author":{"gitId":"kwokyto"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"kwokyto"},"content":"    public void parse_searchCommandNoArg_EmptyDescriptionException() {"},{"lineNumber":86,"author":{"gitId":"kwokyto"},"content":"        assertThrows(EmptyDescriptionException.class, () -\u003e {"},{"lineNumber":87,"author":{"gitId":"kwokyto"},"content":"            Parser.getCommand(\"search\");"},{"lineNumber":88,"author":{"gitId":"kwokyto"},"content":"        });"},{"lineNumber":89,"author":{"gitId":"kwokyto"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kwokyto"},"content":"    "},{"lineNumber":91,"author":{"gitId":"kwokyto"},"content":"}"}],"authorContributionMap":{"kwokyto":91}},{"path":"text-ui-test/runtest.bat","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@echo off"},{"lineNumber":2,"author":{"gitId":"-"},"content":"setlocal enableextensions"},{"lineNumber":3,"author":{"gitId":"-"},"content":"pushd %~dp0"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"cd .."},{"lineNumber":6,"author":{"gitId":"-"},"content":"call gradlew clean shadowJar"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"cd build\\libs"},{"lineNumber":9,"author":{"gitId":"-"},"content":"for /f \"tokens\u003d*\" %%a in ("},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u0027dir /b *.jar\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":") do ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    set jarloc\u003d%%a"},{"lineNumber":13,"author":{"gitId":"-"},"content":")"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"cd ..\\..\\text-ui-test"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"},{"lineNumber":20,"author":{"gitId":"kwokyto"},"content":"FC ACTUAL.TXT EXPECTED.TXT "}],"authorContributionMap":{"kwokyto":1,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"kwokyto"},"content":"!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\""},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd .."},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":14,"author":{"gitId":"-"},"content":"dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"},{"lineNumber":15,"author":{"gitId":"-"},"content":"diff EXPECTED-UNIX.TXT ACTUAL.TXT"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"Test passed!\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":20,"author":{"gitId":"-"},"content":"else"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    echo \"Test failed!\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":23,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kwokyto":1,"-":22}}]
