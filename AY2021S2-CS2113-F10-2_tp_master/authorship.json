[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    mainClassName \u003d \"seedu.duke.Healthier\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"Song0180":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"![](https://avatars.githubusercontent.com/u/55625337?s\u003d460\u0026u\u003d8cf010d3f5099773aec99b0ebe41c4902552a392\u0026v\u003d4) | Song Yu | [Github](https://github.com/Song0180) | [LinkedIn](https://www.linkedin.com/in/daniel-yu-song/)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Li Pingrui | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"}],"authorContributionMap":{"PingruiLi":1,"-":8,"Song0180":1}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"# Healther - Your No. 1 Personal Fitness Management Application"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"Healtheir targets people who care about fitness, who exercise regularly (at least 3 times/week) and have diet plans. It is designed for users of age group 18-30.  "},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"This app is used via **Command Line Interface (CLI)**. If the user is proficient in using command-line tools \u0026 typing, then it could be very efficient to use. This app also provides several shortcut commands for advanced users for further efficient operations."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"}],"authorContributionMap":{"-":6,"Song0180":4}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"# Healthier | User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"Healtheir targets people who care about fitness, who exercise regularly (at least 3 times/week) and have diet plans. It is designed for users of age group 18-30.  "},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"This app is used via **Command Line Interface (CLI)**. If the user is proficient in using command-line tools \u0026 typing, then it could be very efficient to use. This app also provides several shortcut commands for advanced users for further efficient operations."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"---"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"## Table of Content"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"* [Quick start](README.md#quick-start)"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"* [Features](README.md#features)"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"* [Command summary](README.md#command-summary)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"## Quick Start"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"This is a cross-platform application, you can run it on any operating system as long as **Java 11** is installed. "},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"\u003e To verify if you have **Java 11** installed, simply type command `java --version` in your terminal."},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"1. Download the `tp.jar` file from the [latest release](https://github.com/AY2021S2-CS2113-F10-2/tp/releases)."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"1. Open a new terminal at the folder where the `Tp.jar` file is located."},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"1. Run the applictaion use command `java -jar Tp.jar`"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"1. Refer to the [Features](README.md#features) section below for more info on commands."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"\u003e **Note:**"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"\u003e * All commands should be input in `lower_case`. It is always the first word supplied by the user."},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"\u003e   e.g. `add`, `view`, `delete` etc."},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"\u003e * Parameters of a command are denoted in `UPPER_CASE`. They must be supplied by the user, otherwise the command will not be recognized."},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"\u003e   The actual input of the parameters can be in any case. "},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"\u003e   "},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"\u003e   e.g. in `add XXX`, `XXX` is a parameter which can be used as ``."},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"\u003e * Redundant parameters for single-word commands (e.g. `help`) will be ignored. "},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"\u003e    e.g. if the command `help hahahaha` is input, it is equivalent to `help`."},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"\u003e * After the appliction starts running, it checks if a `data` folder exists in the same directory where `tp.jar` is located."},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"\u003e   If the folder does not exist, the application will create a new folder `data`, "},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"\u003e   which is used to store the `data.txt` file which contains details of the user\u0027s data."},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"\u003e"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"\u003e * The text file `data.txt` will be automatically updated after each operation of the app. "},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"\u003e"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"### Get help from instructions on how to use this app : `help`"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"Adds a to-do type of task to the task list."},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"Format: `help`"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"Example: `help`"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"### Input Exercise Data: `add`"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"Add one exercise activity with the duration and the date."},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"Format: `add  t/E a/ACTIVITY_NAME  d/DURATION  [date/DD-MM-YYYY]`"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"* Add one exercise record. The name of exercise activity `a/ACTIVITY_NAME` and duration `d/DURATION` **MUST** be specified. "},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"* The name of the exercise should be a `String`."},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"* The tag value should be `E` in the upper case, which specifies that the current record is for **exercise data**."},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"* The default unit of duration is in **minutes**. An `integer` is expected for the duration, other formats are **not acceptable**."},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"* The date of the exercise activity `[date/DD-MM-YYYY]` is optional. If not provided, the system date will be used."},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"* The date should be **less than or equal to** the current date."},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"* The date format should be `DD-MM-YYYY`, other formats are not acceptable."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Example of usage:  "},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"`add t/E a/running d/40 add one exercise record of running for 40 minutes. `  "},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"Output:  "},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"A new exercise activity record is added successfully!"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"Record summary: 40 minutes running exercise on XX-XX-XXXX(Today)."},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  "},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"`add t/E a/football d/60 date/05-01-2020 add the exercise record of football for 60 mins at the date of 05-01-2020.`  "},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"Output:  "},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"A new exercise activity record is added successfully!"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"Record summary: 60 minutes football exercise on 05-01-2020."},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"**Q**: {?}"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"**A**: {your answer here}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"## Command summary"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"Action | Format, Examples"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"--- | ---"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"Help | `help`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"-":22,"Song0180":79}},{"path":"src/main/java/seedu/duke/Healthier.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.User;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import seedu.duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import seedu.duke.command.CommandResult;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import seedu.duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.commandparser.CommandParser;"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"import seedu.duke.ui.UI;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"public class Healthier {"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    private UI ui;"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    private final User currentUser \u003d new User();"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"    private final FitCenter currentFitCenter \u003d currentUser.getFitCenter();"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private void start() {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        ui \u003d new UI();"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        ui.printGreetings();"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    private void loopCommand() {"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        CommandParser commandParser \u003d new CommandParser();"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        Command command;"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"        do {"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            String userInput \u003d ui.getUserInput();"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"            command \u003d commandParser.parseCommand(userInput);"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"            CommandResult result \u003d command.execute(currentFitCenter);"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"            UI.printMessage(result.getFeedback());"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"            commandParser.clearParserParams();"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"        } while (!ExitCommand.isExitCommand(command));"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"    private void exit() {"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        ui.printExitMessage();"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        System.exit(0);"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        start();"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        loopCommand();"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"        exit();"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"    public static void main(String[] args) {"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"        new Healthier().run();"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"PingruiLi":20,"-":5,"Song0180":22}},{"path":"src/main/java/seedu/duke/account/FitCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.account;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.command.CommandRecordType;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import seedu.duke.record.Record;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import seedu.duke.record.RecordList;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import seedu.duke.record.RecordType;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":" * Manages the fitness of a user through list of records."},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"public class FitCenter {"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    private final RecordList sleepRecordList \u003d new RecordList(RecordType.SLEEP);"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    private final RecordList exerciseRecordList \u003d new RecordList(RecordType.EXERCISE);"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    private final RecordList dietRecordList \u003d new RecordList(RecordType.DIET);"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"    private final RecordList bodyRecordList \u003d new RecordList(RecordType.BODYWEIGHT);"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    private RecordList getRecordListByType(CommandRecordType type) {"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        switch (type) {"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"        case SLEEP:"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"            return sleepRecordList;"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"        case EXERCISE:"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"            return exerciseRecordList;"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"        case DIET:"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"            return dietRecordList;"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"        case BODY_WEIGHT:"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"            return bodyRecordList;"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"        default:"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"            return null;"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"     * Adds a given record to a list that stores the same type of records."},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"     * @param type   the type of the record."},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"     * @param record the record to add."},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"    public void addRecordToList(CommandRecordType type, Record record) {"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"            list.addRecord(record);"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"     * Removes a given record from a list that stores the same type of records."},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"     * Returns the summary of the deleted record."},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"     * @param type  the type of the record."},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"     * @param index the index of the record in the list."},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"     *              EXCEPTION!"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"    public String removeRecordFromList(CommandRecordType type, int index) throws IndexOutOfBoundsException {"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"            return list.removeRecord(index);"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"     * Prints the list of record of a selected type."},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"     * @param type the type of the record that the list stores."},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"    public String getRecordListString(CommandRecordType type) {"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"            return list.getRecordsToPrint();"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"        return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"     * Prints the list of record of a selected type on a specific date."},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"     * @param type the type of the record that the list stores."},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"     * @param date the date of records."},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"    public String getRecordListString(CommandRecordType type, LocalDate date) {"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"            return list.getRecordsToPrint(date);"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"        return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"    public String getRecordListString(CommandRecordType type, String optionalParam) {"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"            return list.getRecordsToPrint(optionalParam);"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"        return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"    public String getRecordListString(CommandRecordType type, LocalDate date, String optionalParam) {"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"        RecordList list \u003d getRecordListByType(type);"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"        if (list !\u003d null) {"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"            return list.getRecordsToPrint(date, optionalParam);"},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":"        return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"PingruiLi":4,"Song0180":106}},{"path":"src/main/java/seedu/duke/account/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.account;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents different genders."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public enum Gender {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    MALE, FEMALE, UNKNOWN, OTHER"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":8}},{"path":"src/main/java/seedu/duke/account/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.account;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents a user of this app."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public class User {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    private static final int DEFAULT_AGE \u003d 20;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"    private static final double DEFAULT_WEIGHT \u003d 50;"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"    private String name;"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    private Gender gender;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    private int age;"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    private double bodyWeight;"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    private FitCenter fitCenter \u003d new FitCenter();"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * Initializes a default user object with default attributes."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    public User() {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"        this.name \u003d \"Default User\";"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        this.gender \u003d Gender.UNKNOWN;"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        this.age \u003d DEFAULT_AGE;"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"        this.bodyWeight \u003d DEFAULT_WEIGHT;"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"     * Initializes a user object. Assumes that all params are not null."},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     * @param name       the name of the user."},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     * @param gender     the gender of the user."},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"     * @param age        the age of the user."},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"     * @param bodyWeight the body weight of the user."},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    public User(String name, Gender gender, int age, double bodyWeight) {"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"        this.gender \u003d gender;"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"        this.age \u003d age;"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"        this.bodyWeight \u003d bodyWeight;"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     * Gets the name of the user."},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     * @return the name of the user."},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"    public String getName() {"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"        return name;"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"     * Gets the gender of the user."},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"     * @return the gender of the user in Gender."},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"    public Gender getGender() {"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"        return gender;"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     * Gets the age of the user."},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"     * @return the age of the user."},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"    public int getAge() {"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"        return age;"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     * Gets the body weight of the user."},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"     * @return the body weight of the user in KG."},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"    public double getBodyWeight() {"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"        return bodyWeight;"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"     * Sets the body weight of the user."},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"     * @param bodyWeight the new body weight in KG."},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"    public void setBodyWeight(double bodyWeight) {"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"        this.bodyWeight \u003d bodyWeight;"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"     * Gets the fit center of the user."},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"     * @return the fit center of the user."},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"    public FitCenter getFitCenter() {"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"        return fitCenter;"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"        return \"User Name: \" + name + \"\\nGender: \" + gender + \"\\nAge: \" + age + \"\\nBody Weight: \" + bodyWeight;"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":100}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.exception.TypeException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.record.Record;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"public class AddCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d \"A new %s record is added successfully!\\nRecord summary:%s\";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private Record record;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private CommandRecordType recordType;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public AddCommand(CommandRecordType recordType, HashMap\u003cString,String\u003e params)"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"            throws ParseException, TypeException, NumberFormatException {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"        SimpleDateFormat spf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        this.recordType \u003d recordType;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        spf.setLenient(false);"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        String dateString \u003d params.get(\"date\");"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        LocalDate localDate;"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        if (dateString !\u003d null) {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            Date date \u003d spf.parse(dateString);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            localDate \u003d date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            localDate \u003d LocalDate.now();"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        switch (recordType) {"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        case EXERCISE:"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"            //record \u003d new DietRecord(recordType.EXERCISE, params.get(\"activity\"), params.get(\"duration\"), localDate);"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"            recordType \u003d CommandRecordType.EXERCISE;"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(params.get(\"activity\") + params.get(\"duration\") + localDate.toString());"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        case DIET:"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"            //record \u003d new DietRecord(recordType.DIET, params.get(\"food\"), params.get(\"weight\"), localDate);"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"            recordType \u003d CommandRecordType.DIET;"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(params.get(\"food\") + params.get(\"weight\") + localDate.toString());"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"        case SLEEP:"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"            //record \u003d new DietRecord(recordType.SLEEP, params.get(\"duration\"), localDate);"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"            recordType \u003d CommandRecordType.SLEEP;"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(params.get(\"duration\") + localDate.toString());"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"        case BODY_WEIGHT:"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"            //record \u003d new DietRecord(recordType.BODYWEIGHT, params.get(\"weight\"), localDate);"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"            recordType \u003d CommandRecordType.BODY_WEIGHT;"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(params.get(\"weight\") + localDate.toString());"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        default:"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(\"There is something wrong within the system.\");"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"    public CommandResult execute(FitCenter fitCenter) {"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"        fitCenter.addRecordToList(recordType, record);"},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d String.format(FEEDBACK_FORMAT, record.getType(), record.getRecordSummary());"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":55,"Song0180":8}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    protected String feedback;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"    public abstract CommandResult execute(FitCenter fitCenter);"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":8,"Song0180":1}},{"path":"src/main/java/seedu/duke/command/CommandRecordType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import java.util.Locale;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"public enum CommandRecordType {"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    EXERCISE(\"E\"), DIET(\"D\"), SLEEP(\"S\"), BODY_WEIGHT(\"W\"), INVALID(\"I\");"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    private String recordType;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"    CommandRecordType(String type) {"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"        recordType \u003d type;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    /*public static boolean isValidType(String type) {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        boolean isValid \u003d false;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        for (int i \u003d 0; i \u003c CommandRecordType.values().length; i++) {"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            if (type.toUpperCase(Locale.ROOT).equals(CommandRecordType.values()[i].recordType)"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"            \u0026\u0026 !CommandRecordType.values()[i].recordType.equals(\"I\")) {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"                isValid \u003d true;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        return isValid;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    public static CommandRecordType getType(String typeString) {"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        for (int i \u003d 0; i \u003c CommandRecordType.values().length; i++) {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            if (typeString.toUpperCase(Locale.ROOT).equals(CommandRecordType.values()[i].recordType)) {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"                return CommandRecordType.values()[i];"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        return INVALID;"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":31,"Song0180":1}},{"path":"src/main/java/seedu/duke/command/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class CommandResult {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    private String feedback;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult(String feedback) {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public String getFeedback() {"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"        return feedback;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":13}},{"path":"src/main/java/seedu/duke/command/CommandType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public enum CommandType {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    ADD, VIEW, DELETE;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":5}},{"path":"src/main/java/seedu/duke/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.record.RecordType;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d \"You have successfully deleted the %s record of \""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            + \"index %s!\\nRecord summary: %s\\nDisplaying current exercise records:\";"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private CommandRecordType recordType;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private RecordType type;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private int indexToDelete;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public DeleteCommand(CommandRecordType recordType, HashMap\u003cString, String\u003e params) throws NumberFormatException {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        this.recordType \u003d recordType;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        indexToDelete \u003d Integer.parseInt(params.get(\"index\"));"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"    public CommandResult execute(FitCenter fitCenter) {"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"            String recordSummary \u003d fitCenter.removeRecordFromList(recordType, indexToDelete);"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            feedback \u003d String.format(FEEDBACK_FORMAT, type, indexToDelete, recordSummary);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(feedback);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(\"The index you entered is out of bound.\\n\""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"                    + \"Here are the tasks of type \" + type + \":\\n\");"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":29,"Song0180":4}},{"path":"src/main/java/seedu/duke/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":" * Terminates the application from running."},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    public CommandResult execute(FitCenter fitCenter) {"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"        return new CommandResult(Messages.MESSAGE_EXIT);"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    public static boolean isExitCommand(Command command) {"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"        return command instanceof ExitCommand;"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":18}},{"path":"src/main/java/seedu/duke/command/InvalidCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    private final String feedback;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(String errorMessage) {"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d errorMessage;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(CommandType commandType) {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        switch (commandType) {"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"        case ADD:"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"            feedback \u003d Messages.MESSAGE_INVALID_COMMAND_SYNTAX + Messages.MESSAGE_INVALID_ADD_COMMAND;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        case VIEW:"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"            feedback \u003d Messages.MESSAGE_INVALID_COMMAND_SYNTAX + Messages.MESSAGE_INVALID_VIEW_COMMAND;"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"            break;"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        default:"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"            feedback \u003d Messages.MESSAGE_SYSTEM_ERROR;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"    public CommandResult execute(FitCenter fitCenter) {"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":22,"Song0180":8}},{"path":"src/main/java/seedu/duke/command/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class ViewCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    private CommandRecordType recordType;"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"    private HashMap\u003cString, String\u003e specifiedParams \u003d null;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    public ViewCommand(CommandRecordType type) {"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"        recordType \u003d type;"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    public ViewCommand(CommandRecordType type, HashMap\u003cString, String\u003e params) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"        recordType \u003d type;"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        String dateString \u003d params.get(\"date\");"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        if (dateString !\u003d null) {"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"            SimpleDateFormat spf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"            spf.setLenient(false);"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"            Date date \u003d spf.parse(dateString); //just for format checking"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"        specifiedParams \u003d params;"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"    private String getRecordsWithOptionalParam(FitCenter fitCenter, String optionalParam) {"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"        return fitCenter.getRecordListString(recordType, LocalDate.parse(specifiedParams.get(\"date\")), optionalParam);"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    private String getRecordsWithoutOptionalParam(FitCenter fitCenter) {"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"        if (specifiedParams !\u003d null) {"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"            return fitCenter.getRecordListString(recordType, LocalDate.parse(specifiedParams.get(\"date\")));"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"            return fitCenter.getRecordListString(recordType);"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"    public CommandResult execute(FitCenter fitCenter) {"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"        switch (recordType) {"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"        case SLEEP:"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"            //FALL-THROUGH"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        case BODY_WEIGHT:"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"            feedback \u003d getRecordsWithoutOptionalParam(fitCenter);"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"        case EXERCISE:"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"            if (specifiedParams !\u003d null \u0026\u0026 specifiedParams.size() \u003e 2) {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"                feedback \u003d getRecordsWithOptionalParam(fitCenter, specifiedParams.get(\"activity\"));"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"            } else {"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"                feedback \u003d getRecordsWithoutOptionalParam(fitCenter);"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"        case DIET:"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"            if (specifiedParams !\u003d null \u0026\u0026 specifiedParams.size() \u003e 2) {"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"                feedback \u003d getRecordsWithOptionalParam(fitCenter, specifiedParams.get(\"food\"));"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"                feedback \u003d getRecordsWithoutOptionalParam(fitCenter);"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"            feedback \u003d Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":15,"Song0180":55}},{"path":"src/main/java/seedu/duke/commandparser/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.commandparser;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.account.FitCenter;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.AddCommand;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.CommandRecordType;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.CommandType;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.InvalidCommand;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.ViewCommand;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.Command;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.exception.TypeException;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"import java.text.ParseException;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"import java.util.HashMap;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"import java.util.Locale;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandRecordType.EXERCISE;"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandRecordType.DIET;"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandRecordType.BODY_WEIGHT;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandRecordType.SLEEP;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandRecordType.INVALID;"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandType.ADD;"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.command.CommandType.VIEW;"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"public class CommandParser {"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"    private final HashMap\u003cString, String\u003e params;"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"    public CommandParser() {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    public Command parseCommand(String userInput) {"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        String[] inputParts \u003d getInputParts(userInput);"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"        String commandWord \u003d getCommandWord(inputParts);"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        switch (commandWord) {"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        case \"add\":"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"            return prepareAdd(inputParts);"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        case \"view\":"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"            return prepareView(inputParts);"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"        case \"delete\":"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"            return prepareDelete(inputParts);"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"        case \"exit\":"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"            return new ExitCommand();"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(Messages.MESSAGE_INVALID_COMMAND + Messages.MESSAGE_HELP);"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"    private String getCommandWord(String[] inputParts) {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"        return inputParts[0];"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"    private String[] getInputParts(String userInput) {"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"        return userInput.trim().split(\"\\\\s+\", 2);"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"    private Command prepareAdd(String[] inputParts) {"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"            if (inputParts.length \u003c 2) {"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":"            CommandRecordType recordType \u003d CommandRecordType.getType(inputParts[1]);"},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"            if (recordType \u003d\u003d INVALID) {"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"            String[] typeContent \u003d getTypeAndContent(inputParts[1]);"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"            if (typeContent.length \u003c 2) {"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"            String content \u003d typeContent[1];"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"            content \u003d content.trim();"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"            switch (recordType) {"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":"            case EXERCISE:"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"                return prepareAddExercise(content);"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"            case BODY_WEIGHT:"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"                return prepareAddBodyWeight(content);"},{"lineNumber":82,"author":{"gitId":"PingruiLi"},"content":"            case DIET:"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"                return prepareAddDiet(content);"},{"lineNumber":84,"author":{"gitId":"PingruiLi"},"content":"            case SLEEP:"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"                return prepareAddSleep(content);"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"            default:"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(Messages.MESSAGE_INVALID_COMMAND_WORD);"},{"lineNumber":88,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        } catch (ParseException e) {"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(Messages.MESSAGE_INVALID_DATE_FORMAT);"},{"lineNumber":91,"author":{"gitId":"PingruiLi"},"content":"        } catch (TypeException e) {"},{"lineNumber":92,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e.toString());"},{"lineNumber":93,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":94,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(\"Please check the value you filled in for the number field\");"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"    private String[] getTypeAndContent(String inputPart) {"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"        return inputPart.split(\"\\\\s+\", 2);"},{"lineNumber":100,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":"    private Command prepareView(String[] inputParts) {"},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"            if (inputParts.length \u003c 2) {"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"PingruiLi"},"content":"            CommandRecordType recordType \u003d CommandRecordType.getType(inputParts[1]);"},{"lineNumber":108,"author":{"gitId":"PingruiLi"},"content":"            if (recordType \u003d\u003d INVALID) {"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"            String typeContent \u003d inputParts[1];"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"            String optionalParams \u003d getOptionalParamsForView(typeContent);"},{"lineNumber":113,"author":{"gitId":"PingruiLi"},"content":"            if (optionalParams.equals(\"\")) {"},{"lineNumber":114,"author":{"gitId":"PingruiLi"},"content":"                return new ViewCommand(recordType);"},{"lineNumber":115,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"            switch (recordType) {"},{"lineNumber":117,"author":{"gitId":"PingruiLi"},"content":"            case EXERCISE:"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"                return prepareViewExercise(optionalParams);"},{"lineNumber":119,"author":{"gitId":"PingruiLi"},"content":"            case BODY_WEIGHT:"},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"                return prepareViewBodyWeight(optionalParams);"},{"lineNumber":121,"author":{"gitId":"PingruiLi"},"content":"            case DIET:"},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"                return prepareViewDiet(optionalParams);"},{"lineNumber":123,"author":{"gitId":"PingruiLi"},"content":"            case SLEEP:"},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"                return prepareViewSleep(optionalParams);"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"            default:"},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"        } catch (ParseException e) {"},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(\"The date format is incorrect\");"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"    private String getOptionalParamsForView(String typeContent) {"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"        String[] rawInput \u003d typeContent.split(\"\\\\s+\", 2);"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"        if (rawInput.length \u003d\u003d 1) {"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"            return \"\";"},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"            return rawInput[1].trim();"},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":"    private boolean checkDateValid(String dateString) {"},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":"        return dateString.startsWith(\"date/\") \u0026\u0026 dateString.length() \u003e 5;"},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":"    private Command prepareDelete(String[] inputParts) {"},{"lineNumber":147,"author":{"gitId":"PingruiLi"},"content":"        try {"},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":"            if (inputParts.length \u003c 2) {"},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(\"Invalid\");"},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"PingruiLi"},"content":"            CommandRecordType recordType \u003d CommandRecordType.getType(inputParts[1]);"},{"lineNumber":152,"author":{"gitId":"PingruiLi"},"content":"            if (recordType \u003d\u003d INVALID) {"},{"lineNumber":153,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(\"Invalid\");"},{"lineNumber":154,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"Song0180"},"content":"            String[] typeIndex \u003d inputParts[1].split(\"\\\\s+\", 2);"},{"lineNumber":156,"author":{"gitId":"Song0180"},"content":"            if (typeIndex.length \u003c 2) {"},{"lineNumber":157,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(\"Invalid\");"},{"lineNumber":158,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"Song0180"},"content":"            String index \u003d typeIndex[1];"},{"lineNumber":160,"author":{"gitId":"Song0180"},"content":"            boolean isIndexValid \u003d index.startsWith(\"i/\") \u0026\u0026 index.length() \u003e\u003d 3;"},{"lineNumber":161,"author":{"gitId":"Song0180"},"content":"            if (!isIndexValid) {"},{"lineNumber":162,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(\"Invalid\");"},{"lineNumber":163,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"Song0180"},"content":"            index \u003d index.substring(2);"},{"lineNumber":165,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"index\", index);"},{"lineNumber":166,"author":{"gitId":"PingruiLi"},"content":"            return new DeleteCommand(recordType, params);"},{"lineNumber":167,"author":{"gitId":"PingruiLi"},"content":"            //System.out.println(index);"},{"lineNumber":168,"author":{"gitId":"PingruiLi"},"content":"            //return new InvalidCommand(\"Invalid\");"},{"lineNumber":169,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":170,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(\"The index should be an integer\");"},{"lineNumber":171,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":174,"author":{"gitId":"Song0180"},"content":"    private Command prepareViewExercise(String optionalParams) throws ParseException {"},{"lineNumber":175,"author":{"gitId":"Song0180"},"content":"        String activity;"},{"lineNumber":176,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":177,"author":{"gitId":"Song0180"},"content":"        boolean hasActivity \u003d optionalParams.contains(\"a/\");"},{"lineNumber":178,"author":{"gitId":"Song0180"},"content":"        boolean hasDate \u003d optionalParams.contains(\"date/\");"},{"lineNumber":179,"author":{"gitId":"PingruiLi"},"content":"        if (!hasActivity \u0026\u0026 !hasDate) {"},{"lineNumber":180,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":181,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"PingruiLi"},"content":"        if (hasActivity) {"},{"lineNumber":183,"author":{"gitId":"Song0180"},"content":"            activity \u003d parseExerciseActivity(optionalParams, false);"},{"lineNumber":184,"author":{"gitId":"PingruiLi"},"content":"            if (activity.equals(\"\")) {"},{"lineNumber":185,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":186,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"PingruiLi"},"content":"            if (!hasDate) {"},{"lineNumber":188,"author":{"gitId":"Song0180"},"content":"                params.put(\"activity\", activity);"},{"lineNumber":189,"author":{"gitId":"Song0180"},"content":"                return new ViewCommand(EXERCISE, params);"},{"lineNumber":190,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"PingruiLi"},"content":"            String[] activityDate \u003d getDate(activity);"},{"lineNumber":192,"author":{"gitId":"PingruiLi"},"content":"            if (activityDate.length \u003d\u003d 0) {"},{"lineNumber":193,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":194,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"PingruiLi"},"content":"            activity \u003d activityDate[0];"},{"lineNumber":196,"author":{"gitId":"PingruiLi"},"content":"            date \u003d activityDate[1];"},{"lineNumber":197,"author":{"gitId":"Song0180"},"content":"            params.put(\"activity\", activity);"},{"lineNumber":198,"author":{"gitId":"Song0180"},"content":"            params.put(\"date\", date);"},{"lineNumber":199,"author":{"gitId":"Song0180"},"content":"            return new ViewCommand(EXERCISE, params);"},{"lineNumber":200,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"Song0180"},"content":"        if (!checkDateValid(optionalParams)) {"},{"lineNumber":202,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":203,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"Song0180"},"content":"        date \u003d optionalParams.substring(5);"},{"lineNumber":205,"author":{"gitId":"Song0180"},"content":"        params.put(\"date\", date);"},{"lineNumber":206,"author":{"gitId":"Song0180"},"content":"        return new ViewCommand(EXERCISE, params);"},{"lineNumber":207,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":209,"author":{"gitId":"Song0180"},"content":"    private Command prepareViewDiet(String optionalParams) throws ParseException {"},{"lineNumber":210,"author":{"gitId":"Song0180"},"content":"        String food;"},{"lineNumber":211,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":212,"author":{"gitId":"PingruiLi"},"content":"        boolean hasFood \u003d optionalParams.contains(\"f/\");"},{"lineNumber":213,"author":{"gitId":"PingruiLi"},"content":"        boolean hasDate \u003d optionalParams.contains(\"date/\");"},{"lineNumber":214,"author":{"gitId":"PingruiLi"},"content":"        if (!hasFood \u0026\u0026 !hasDate) {"},{"lineNumber":215,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":216,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"PingruiLi"},"content":"        if (hasFood) {"},{"lineNumber":218,"author":{"gitId":"PingruiLi"},"content":"            food \u003d parseDiet(optionalParams, false);"},{"lineNumber":219,"author":{"gitId":"PingruiLi"},"content":"            if (food.equals(\"\")) {"},{"lineNumber":220,"author":{"gitId":"Song0180"},"content":"                //System.out.println(\"Invalid\");"},{"lineNumber":221,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":222,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"PingruiLi"},"content":"            if (!hasDate) {"},{"lineNumber":224,"author":{"gitId":"Song0180"},"content":"                //System.out.println(activity);"},{"lineNumber":225,"author":{"gitId":"Song0180"},"content":"                params.put(\"food\", food);"},{"lineNumber":226,"author":{"gitId":"Song0180"},"content":"                //return;"},{"lineNumber":227,"author":{"gitId":"Song0180"},"content":"                return new ViewCommand(DIET, params);"},{"lineNumber":228,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"Song0180"},"content":"            String[] foodDate \u003d getDate(food);"},{"lineNumber":230,"author":{"gitId":"Song0180"},"content":"            if (foodDate.length \u003d\u003d 0) {"},{"lineNumber":231,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(VIEW);"},{"lineNumber":232,"author":{"gitId":"Song0180"},"content":"                //System.out.println(\"Invalid\");"},{"lineNumber":233,"author":{"gitId":"Song0180"},"content":"                //return;"},{"lineNumber":234,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"Song0180"},"content":"            food \u003d foodDate[0];"},{"lineNumber":236,"author":{"gitId":"Song0180"},"content":"            date \u003d foodDate[1];"},{"lineNumber":237,"author":{"gitId":"Song0180"},"content":"            params.put(\"food\", food);"},{"lineNumber":238,"author":{"gitId":"Song0180"},"content":"            params.put(\"date\", date);"},{"lineNumber":239,"author":{"gitId":"Song0180"},"content":"            return new ViewCommand(DIET, params);"},{"lineNumber":240,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"Song0180"},"content":"        if (!checkDateValid(optionalParams)) {"},{"lineNumber":242,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":243,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"PingruiLi"},"content":"        date \u003d optionalParams.substring(5);"},{"lineNumber":245,"author":{"gitId":"Song0180"},"content":"        params.put(\"date\", date);"},{"lineNumber":246,"author":{"gitId":"Song0180"},"content":"        return new ViewCommand(DIET, params);"},{"lineNumber":247,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":249,"author":{"gitId":"Song0180"},"content":"    private Command prepareViewSleep(String optionalParams) throws ParseException {"},{"lineNumber":250,"author":{"gitId":"Song0180"},"content":"        if (!checkDateValid(optionalParams)) {"},{"lineNumber":251,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":252,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"Song0180"},"content":"        String date \u003d optionalParams.substring(5);"},{"lineNumber":254,"author":{"gitId":"Song0180"},"content":"        params.put(\"date\", date);"},{"lineNumber":255,"author":{"gitId":"Song0180"},"content":"        return new ViewCommand(SLEEP, params);"},{"lineNumber":256,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":258,"author":{"gitId":"Song0180"},"content":"    private Command prepareViewBodyWeight(String optionalParams) throws ParseException {"},{"lineNumber":259,"author":{"gitId":"Song0180"},"content":"        if (!checkDateValid(optionalParams)) {"},{"lineNumber":260,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(VIEW);"},{"lineNumber":261,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"Song0180"},"content":"        String date \u003d optionalParams.substring(5);"},{"lineNumber":263,"author":{"gitId":"Song0180"},"content":"        params.put(\"date\", date);"},{"lineNumber":264,"author":{"gitId":"Song0180"},"content":"        return new ViewCommand(BODY_WEIGHT, params);"},{"lineNumber":265,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":267,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddSleep(String content) throws ParseException, TypeException, NumberFormatException {"},{"lineNumber":268,"author":{"gitId":"Song0180"},"content":"        String duration \u003d parseDuration(content, false);"},{"lineNumber":269,"author":{"gitId":"PingruiLi"},"content":"        if (duration.equals(\"\")) {"},{"lineNumber":270,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":271,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"PingruiLi"},"content":"        boolean hasDate \u003d content.contains(\"date/\");"},{"lineNumber":273,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":274,"author":{"gitId":"PingruiLi"},"content":"        if (hasDate) {"},{"lineNumber":275,"author":{"gitId":"PingruiLi"},"content":"            String[] durationDate \u003d getDate(duration);"},{"lineNumber":276,"author":{"gitId":"PingruiLi"},"content":"            if (durationDate.length \u003d\u003d 0) {"},{"lineNumber":277,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":278,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":279,"author":{"gitId":"PingruiLi"},"content":"            duration \u003d durationDate[0];"},{"lineNumber":280,"author":{"gitId":"PingruiLi"},"content":"            date \u003d durationDate[1];"},{"lineNumber":281,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"duration\", duration);"},{"lineNumber":282,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"date\", date);"},{"lineNumber":283,"author":{"gitId":"PingruiLi"},"content":"            return new AddCommand(SLEEP, params);"},{"lineNumber":284,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"duration\", duration);"},{"lineNumber":286,"author":{"gitId":"PingruiLi"},"content":"        return new AddCommand(SLEEP, params);"},{"lineNumber":287,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":289,"author":{"gitId":"PingruiLi"},"content":"    private String[] getDate(String stringWithDate) {"},{"lineNumber":290,"author":{"gitId":"PingruiLi"},"content":"        String[] paramDateRaw \u003d stringWithDate.split(\"date/\", 2);"},{"lineNumber":291,"author":{"gitId":"PingruiLi"},"content":"        String date \u003d paramDateRaw[1].trim();"},{"lineNumber":292,"author":{"gitId":"PingruiLi"},"content":"        String param \u003d paramDateRaw[0].trim();"},{"lineNumber":293,"author":{"gitId":"PingruiLi"},"content":"        boolean isParamValid \u003d param.length() \u003e 0;"},{"lineNumber":294,"author":{"gitId":"PingruiLi"},"content":"        boolean isDateValid \u003d date.length() \u003d\u003d 10;"},{"lineNumber":295,"author":{"gitId":"PingruiLi"},"content":"        if (!isParamValid || !isDateValid) {"},{"lineNumber":296,"author":{"gitId":"PingruiLi"},"content":"            return new String[0];"},{"lineNumber":297,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"PingruiLi"},"content":"        String[] paramDate \u003d new String[2];"},{"lineNumber":299,"author":{"gitId":"PingruiLi"},"content":"        paramDate[0] \u003d param;"},{"lineNumber":300,"author":{"gitId":"PingruiLi"},"content":"        paramDate[1] \u003d date;"},{"lineNumber":301,"author":{"gitId":"PingruiLi"},"content":"        return paramDate;"},{"lineNumber":302,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":304,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddDiet(String content) throws ParseException, TypeException, NumberFormatException {"},{"lineNumber":305,"author":{"gitId":"Song0180"},"content":"        String[] foodWeight \u003d getFoodAndFoodWeight(content);"},{"lineNumber":306,"author":{"gitId":"PingruiLi"},"content":"        if (foodWeight.length \u003c 2) {"},{"lineNumber":307,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":308,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"PingruiLi"},"content":"        String foodRawInput \u003d foodWeight[0].trim();"},{"lineNumber":310,"author":{"gitId":"PingruiLi"},"content":"        String weightRawInput \u003d foodWeight[1].trim();"},{"lineNumber":311,"author":{"gitId":"PingruiLi"},"content":"        String food \u003d parseDiet(foodRawInput, false);"},{"lineNumber":312,"author":{"gitId":"PingruiLi"},"content":"        if (food.equals(\"\")) {"},{"lineNumber":313,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":314,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"PingruiLi"},"content":"        String weight \u003d parseWeight(weightRawInput, true);"},{"lineNumber":316,"author":{"gitId":"PingruiLi"},"content":"        if (weight.equals(\"\")) {"},{"lineNumber":317,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":318,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"PingruiLi"},"content":"        boolean hasDate \u003d weightRawInput.contains(\"date/\");"},{"lineNumber":320,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":321,"author":{"gitId":"PingruiLi"},"content":"        if (hasDate) {"},{"lineNumber":322,"author":{"gitId":"PingruiLi"},"content":"            String[] weightDate \u003d getDate(weight);"},{"lineNumber":323,"author":{"gitId":"PingruiLi"},"content":"            if (weightDate.length \u003d\u003d 0) {"},{"lineNumber":324,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":325,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":326,"author":{"gitId":"PingruiLi"},"content":"            weight \u003d weightDate[0];"},{"lineNumber":327,"author":{"gitId":"PingruiLi"},"content":"            date \u003d weightDate[1];"},{"lineNumber":328,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"food\", food);"},{"lineNumber":329,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"weight\", weight);"},{"lineNumber":330,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"date\", date);"},{"lineNumber":331,"author":{"gitId":"PingruiLi"},"content":"            return new AddCommand(DIET, params);"},{"lineNumber":332,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"food\", food);"},{"lineNumber":334,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"weight\", weight);"},{"lineNumber":335,"author":{"gitId":"PingruiLi"},"content":"        return new AddCommand(DIET, params);"},{"lineNumber":336,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":338,"author":{"gitId":"Song0180"},"content":"    private String[] getFoodAndFoodWeight(String content) {"},{"lineNumber":339,"author":{"gitId":"Song0180"},"content":"        return content.split(\"w/\", 2);"},{"lineNumber":340,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":342,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddBodyWeight(String content) throws ParseException, TypeException, NumberFormatException {"},{"lineNumber":343,"author":{"gitId":"Song0180"},"content":"        String weight \u003d parseWeight(content, false);"},{"lineNumber":344,"author":{"gitId":"PingruiLi"},"content":"        if (weight.equals(\"\")) {"},{"lineNumber":345,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":346,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"PingruiLi"},"content":"        boolean hasDate \u003d content.contains(\"date/\");"},{"lineNumber":348,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":349,"author":{"gitId":"PingruiLi"},"content":"        if (hasDate) {"},{"lineNumber":350,"author":{"gitId":"PingruiLi"},"content":"            String[] weightDate \u003d getDate(weight);"},{"lineNumber":351,"author":{"gitId":"PingruiLi"},"content":"            if (weightDate.length \u003d\u003d 0) {"},{"lineNumber":352,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":353,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":354,"author":{"gitId":"PingruiLi"},"content":"            weight \u003d weightDate[0];"},{"lineNumber":355,"author":{"gitId":"PingruiLi"},"content":"            date \u003d weightDate[1];"},{"lineNumber":356,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"weight\", weight);"},{"lineNumber":357,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"date\", date);"},{"lineNumber":358,"author":{"gitId":"PingruiLi"},"content":"            return new AddCommand(BODY_WEIGHT, params);"},{"lineNumber":359,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"weight\", weight);"},{"lineNumber":361,"author":{"gitId":"PingruiLi"},"content":"        return new AddCommand(BODY_WEIGHT, params);"},{"lineNumber":362,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":363,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":364,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddExercise(String content) throws ParseException, TypeException, NumberFormatException {"},{"lineNumber":365,"author":{"gitId":"Song0180"},"content":"        String[] activityDuration \u003d getActivityAndDuration(content);"},{"lineNumber":366,"author":{"gitId":"PingruiLi"},"content":"        if (activityDuration.length \u003c 2) {"},{"lineNumber":367,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":368,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":369,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":370,"author":{"gitId":"PingruiLi"},"content":"        String activityRawInput \u003d activityDuration[0].trim();"},{"lineNumber":371,"author":{"gitId":"PingruiLi"},"content":"        String activity \u003d parseExerciseActivity(activityRawInput, false);"},{"lineNumber":372,"author":{"gitId":"PingruiLi"},"content":"        if (activity.equals(\"\")) {"},{"lineNumber":373,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":374,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":375,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":376,"author":{"gitId":"PingruiLi"},"content":"        String durationRawInput \u003d activityDuration[1].trim();"},{"lineNumber":377,"author":{"gitId":"PingruiLi"},"content":"        String duration \u003d parseDuration(durationRawInput, true);"},{"lineNumber":378,"author":{"gitId":"PingruiLi"},"content":"        if (duration.equals(\"\")) {"},{"lineNumber":379,"author":{"gitId":"Song0180"},"content":"            return new InvalidCommand(ADD);"},{"lineNumber":380,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":381,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":382,"author":{"gitId":"PingruiLi"},"content":"        boolean hasDate \u003d durationRawInput.contains(\"date/\");"},{"lineNumber":383,"author":{"gitId":"Song0180"},"content":"        String date;"},{"lineNumber":384,"author":{"gitId":"PingruiLi"},"content":"        if (hasDate) {"},{"lineNumber":385,"author":{"gitId":"PingruiLi"},"content":"            String[] durationDate \u003d getDate(duration);"},{"lineNumber":386,"author":{"gitId":"PingruiLi"},"content":"            if (durationDate.length \u003d\u003d 0) {"},{"lineNumber":387,"author":{"gitId":"Song0180"},"content":"                return new InvalidCommand(ADD);"},{"lineNumber":388,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":389,"author":{"gitId":"PingruiLi"},"content":"            duration \u003d durationDate[0];"},{"lineNumber":390,"author":{"gitId":"PingruiLi"},"content":"            date \u003d durationDate[1];"},{"lineNumber":391,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"activity\", activity);"},{"lineNumber":392,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"duration\", duration);"},{"lineNumber":393,"author":{"gitId":"PingruiLi"},"content":"            params.put(\"date\", date);"},{"lineNumber":394,"author":{"gitId":"PingruiLi"},"content":"            return new AddCommand(EXERCISE, params);"},{"lineNumber":395,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":397,"author":{"gitId":"Song0180"},"content":"        duration \u003d duration.substring(2);"},{"lineNumber":398,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"activity\", activity);"},{"lineNumber":399,"author":{"gitId":"PingruiLi"},"content":"        params.put(\"duration\", duration);"},{"lineNumber":400,"author":{"gitId":"PingruiLi"},"content":"        return new AddCommand(EXERCISE, params);"},{"lineNumber":401,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":403,"author":{"gitId":"Song0180"},"content":"    private String[] getActivityAndDuration(String content) {"},{"lineNumber":404,"author":{"gitId":"Song0180"},"content":"        return content.split(\"d/\", 2);"},{"lineNumber":405,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":406,"author":{"gitId":"PingruiLi"},"content":"    /*"},{"lineNumber":407,"author":{"gitId":"PingruiLi"},"content":"    private CommandRecordType parseType(String input) {"},{"lineNumber":408,"author":{"gitId":"PingruiLi"},"content":"        boolean isTypeKeywordValid \u003d input.startsWith(\"t/\") \u0026\u0026 input.length() \u003e\u003d 3;"},{"lineNumber":409,"author":{"gitId":"PingruiLi"},"content":"        if (!isTypeKeywordValid) {"},{"lineNumber":410,"author":{"gitId":"PingruiLi"},"content":"            return INVALID;"},{"lineNumber":411,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":412,"author":{"gitId":"PingruiLi"},"content":"        String type \u003d \"\" + input.charAt(2);"},{"lineNumber":413,"author":{"gitId":"PingruiLi"},"content":"        if (!CommandRecordType.isValidType(type)) {"},{"lineNumber":414,"author":{"gitId":"PingruiLi"},"content":"            return INVALID;"},{"lineNumber":415,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":416,"author":{"gitId":"PingruiLi"},"content":"        return type.toUpperCase(Locale.ROOT);"},{"lineNumber":417,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":419,"author":{"gitId":"PingruiLi"},"content":"    */"},{"lineNumber":420,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":421,"author":{"gitId":"Song0180"},"content":"    private String parseExerciseActivity(String activityRawInput, boolean isPrefixChecked) {"},{"lineNumber":422,"author":{"gitId":"PingruiLi"},"content":"        boolean isActivityValid;"},{"lineNumber":423,"author":{"gitId":"Song0180"},"content":"        if (isPrefixChecked) {"},{"lineNumber":424,"author":{"gitId":"PingruiLi"},"content":"            isActivityValid \u003d activityRawInput.length() \u003e 0;"},{"lineNumber":425,"author":{"gitId":"PingruiLi"},"content":"            if (!isActivityValid) {"},{"lineNumber":426,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":427,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":428,"author":{"gitId":"PingruiLi"},"content":"            return activityRawInput;"},{"lineNumber":429,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":430,"author":{"gitId":"PingruiLi"},"content":"            isActivityValid \u003d activityRawInput.length() \u003e\u003d 3 \u0026\u0026 activityRawInput.startsWith(\"a/\");"},{"lineNumber":431,"author":{"gitId":"PingruiLi"},"content":"            if (!isActivityValid) {"},{"lineNumber":432,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":433,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":434,"author":{"gitId":"PingruiLi"},"content":"            return activityRawInput.substring(2);"},{"lineNumber":435,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":436,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":438,"author":{"gitId":"PingruiLi"},"content":"    private String parseWeight(String bodyWeightRawInput, boolean prefixChecked) {"},{"lineNumber":439,"author":{"gitId":"Song0180"},"content":"        boolean isBodyWeightValid;"},{"lineNumber":440,"author":{"gitId":"PingruiLi"},"content":"        if (prefixChecked) {"},{"lineNumber":441,"author":{"gitId":"Song0180"},"content":"            isBodyWeightValid \u003d bodyWeightRawInput.length() \u003e 0;"},{"lineNumber":442,"author":{"gitId":"Song0180"},"content":"            if (!isBodyWeightValid) {"},{"lineNumber":443,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":444,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":445,"author":{"gitId":"PingruiLi"},"content":"            return bodyWeightRawInput;"},{"lineNumber":446,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":447,"author":{"gitId":"Song0180"},"content":"            isBodyWeightValid \u003d bodyWeightRawInput.length() \u003e\u003d 3 \u0026\u0026 bodyWeightRawInput.startsWith(\"w/\");"},{"lineNumber":448,"author":{"gitId":"Song0180"},"content":"            if (!isBodyWeightValid) {"},{"lineNumber":449,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":450,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":451,"author":{"gitId":"PingruiLi"},"content":"            return bodyWeightRawInput.substring(2);"},{"lineNumber":452,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":453,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":455,"author":{"gitId":"PingruiLi"},"content":"    private String parseDuration(String durationRawInput, boolean prefixChecked) {"},{"lineNumber":456,"author":{"gitId":"PingruiLi"},"content":"        boolean isDurationValid;"},{"lineNumber":457,"author":{"gitId":"PingruiLi"},"content":"        if (prefixChecked) {"},{"lineNumber":458,"author":{"gitId":"PingruiLi"},"content":"            isDurationValid \u003d durationRawInput.length() \u003e 0;"},{"lineNumber":459,"author":{"gitId":"PingruiLi"},"content":"            if (!isDurationValid) {"},{"lineNumber":460,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":461,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":462,"author":{"gitId":"PingruiLi"},"content":"            return durationRawInput;"},{"lineNumber":463,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":464,"author":{"gitId":"PingruiLi"},"content":"            isDurationValid \u003d durationRawInput.length() \u003e\u003d 3 \u0026\u0026 durationRawInput.startsWith(\"d/\");"},{"lineNumber":465,"author":{"gitId":"PingruiLi"},"content":"            if (!isDurationValid) {"},{"lineNumber":466,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":467,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":468,"author":{"gitId":"PingruiLi"},"content":"            return durationRawInput.substring(2);"},{"lineNumber":469,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":470,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":471,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":472,"author":{"gitId":"PingruiLi"},"content":"    private String parseDiet(String dietRawInput, boolean prefixChecked) {"},{"lineNumber":473,"author":{"gitId":"PingruiLi"},"content":"        boolean isDietValid;"},{"lineNumber":474,"author":{"gitId":"PingruiLi"},"content":"        if (prefixChecked) {"},{"lineNumber":475,"author":{"gitId":"PingruiLi"},"content":"            isDietValid \u003d dietRawInput.length() \u003e 0;"},{"lineNumber":476,"author":{"gitId":"PingruiLi"},"content":"            if (!isDietValid) {"},{"lineNumber":477,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":478,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":479,"author":{"gitId":"PingruiLi"},"content":"            return dietRawInput;"},{"lineNumber":480,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":481,"author":{"gitId":"PingruiLi"},"content":"            isDietValid \u003d dietRawInput.length() \u003e\u003d 3 \u0026\u0026 dietRawInput.startsWith(\"f/\");"},{"lineNumber":482,"author":{"gitId":"PingruiLi"},"content":"            if (!isDietValid) {"},{"lineNumber":483,"author":{"gitId":"PingruiLi"},"content":"                return \"\";"},{"lineNumber":484,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":485,"author":{"gitId":"PingruiLi"},"content":"            return dietRawInput.substring(2);"},{"lineNumber":486,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":487,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":488,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":489,"author":{"gitId":"PingruiLi"},"content":"    public void clearParserParams() {"},{"lineNumber":490,"author":{"gitId":"PingruiLi"},"content":"        params.clear();"},{"lineNumber":491,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":492,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":493,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":294,"Song0180":199}},{"path":"src/main/java/seedu/duke/common/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.common;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Container for commonly used messages."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Welcome to your personal fitness app - Healthier\\n\""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"            + \"What\u0027s in your mind today?\\n\";"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_BYE \u003d \"Nice work today!\\n\""},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"            + \"You are one step closer to ultimate fitness!\\n\""},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"            + \"See you again soon :)\\n\";"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_EXIT \u003d \"Thank you for using this app. The app is exiting...\";"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_HELP \u003d \"Not sure how to use this app?\\n\""},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"            + \"Use command \u0027help\u0027 to see what you can do.\";"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_NO_RECORD \u003d \"Sorry, no records found.\\n\""},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"            + \"You can try adding records by using command \u0027add\u0027.\";"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_SEE_HELP \u003d \"To learn more about the commands, try use command \u0027help\u0027\";"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_CANT_VIEW_LIST \u003d \"Sorry, cannot view record list of an incorrect record type.\";"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_SYSTEM_ERROR \u003d \"There is something wrong within the system.\";"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"The date format is incorrect. Please try again.\\n\";"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_COMMAND \u003d \"Sorry, the command you entered cannot be recognized.\\n\\n\";"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d \"The command word is invalid. \""},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"            + \"Enter help to see help messages\\n\";"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_COMMAND_SYNTAX \u003d \"Sorry, \""},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"            + \"the syntax of the command entered is incorrect.\\n\\n\";"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_ADD_COMMAND \u003d \"The syntax for add command is:\\n\""},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"            + \"1. Add exercise record\\n\\tadd t/E a/ACTIVITY_NAME d/DURATION [date/DD-MM-YYYY]\\n\""},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"            + \"2. Add diet record\\n\\tadd t/D f/FOOD_NAME w/WEIGHT [date/DD-MM-YYYY]\\n\""},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"            + \"3. Add sleep record\\n\\tadd t/S d/DURATION [date/DD-MM-YYYY]\\n\""},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"            + \"4. Add body weight record\\n\\tadd t/W w/WEIGHT [date/DD-MM-YYYY]\";"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"    public static final String MESSAGE_INVALID_VIEW_COMMAND \u003d \"The syntax for view command is:\\n\""},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"            + \"1. View exercise records\\n\\tview t/E [a/ACTIVITY_NAME] [date/DD-MM-YYYY]\\n\""},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"            + \"2. View diet records\\n\\tview t/D [f/FOOD_NAME] [date/DD-MM-YYYY]\\n\""},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"            + \"3. View sleep records\\n\\tview t/S [date/DD-MM-YYYY]\\n\""},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"            + \"4. View body weight records\\n\\tview t/W [date/DD-MM-YYYY]\";"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":36}},{"path":"src/main/java/seedu/duke/exception/TypeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.record.FoodCategory;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"public class TypeException extends Exception {"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    private String invalidType;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    public TypeException(String type) {"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"        invalidType \u003d type;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        if (invalidType.equals(\"food type exception\")) {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            return \"The food type is invalid, the acceptable food list is:\\n\" + FoodCategory.validFoodList;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        return \"\";"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":18}},{"path":"src/main/java/seedu/duke/record/BodyWeight.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lowwilliam"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":3,"author":{"gitId":"lowwilliam"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":5,"author":{"gitId":"lowwilliam"},"content":"public class BodyWeight extends Record {"},{"lineNumber":6,"author":{"gitId":"lowwilliam"},"content":"    private double weight;"},{"lineNumber":7,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":8,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"lowwilliam"},"content":"     * Initializes the object with given record type and date."},{"lineNumber":10,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"lowwilliam"},"content":"     * @param type the type of the record."},{"lineNumber":12,"author":{"gitId":"lowwilliam"},"content":"     * @param date the date of the record."},{"lineNumber":13,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"lowwilliam"},"content":"    public BodyWeight(RecordType type, LocalDate date, double weight) {"},{"lineNumber":15,"author":{"gitId":"lowwilliam"},"content":"        super(type, date);"},{"lineNumber":16,"author":{"gitId":"lowwilliam"},"content":"        this.weight \u003d weight;"},{"lineNumber":17,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":19,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lowwilliam"},"content":"     * Gets the body weight summary."},{"lineNumber":21,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lowwilliam"},"content":"     * @return the summary of body weight."},{"lineNumber":23,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lowwilliam"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"lowwilliam"},"content":"    public String getRecordSummary() {"},{"lineNumber":26,"author":{"gitId":"lowwilliam"},"content":"        return null;"},{"lineNumber":27,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":29,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lowwilliam"},"content":"     * Gets the weight date."},{"lineNumber":31,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lowwilliam"},"content":"     * @return the user\u0027s weight."},{"lineNumber":33,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lowwilliam"},"content":"    public double getWeight() {"},{"lineNumber":35,"author":{"gitId":"lowwilliam"},"content":"        return weight;"},{"lineNumber":36,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":38,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lowwilliam"},"content":"     * Sets a new weight of user."},{"lineNumber":40,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lowwilliam"},"content":"     * @param weight set users\u0027 weight."},{"lineNumber":42,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lowwilliam"},"content":"    public void setWeight(double weight) {"},{"lineNumber":44,"author":{"gitId":"lowwilliam"},"content":"        this.weight \u003d weight;"},{"lineNumber":45,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lowwilliam"},"content":"}"}],"authorContributionMap":{"lowwilliam":46}},{"path":"src/main/java/seedu/duke/record/Diet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lowwilliam"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.exception.TypeException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"lowwilliam"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.Locale;"},{"lineNumber":8,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.record.FoodCategory.INVALID;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"import static seedu.duke.record.RecordType.DIET;"},{"lineNumber":11,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class Diet extends Record {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private double calory;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private FoodCategory food;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private double amount;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private LocalDate date;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private String formattedDate;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    private static final String SUMMARY_FORMAT \u003d \"%sg %s on %s\";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    private static final String LIST_VIEW_FORMAT \u003d \"%s     %s      %sg\";"},{"lineNumber":20,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":21,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lowwilliam"},"content":"     * Initializes the object with given record type and date."},{"lineNumber":23,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lowwilliam"},"content":"     * @param date the date of the record."},{"lineNumber":25,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    public Diet(String foodString, String amountString, LocalDate date) throws TypeException, NumberFormatException {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        super(DIET, date);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        food \u003d FoodCategory.getFoodCategory(foodString);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        if (food \u003d\u003d INVALID) {"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            throw new TypeException(\"food type exception\");"},{"lineNumber":31,"author":{"gitId":"lowwilliam"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        amount \u003d Double.parseDouble(amountString);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        calory \u003d amount * food.getCaloriePer100g();"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"        formattedDate \u003d date.format(DATE_FORMATTER);"},{"lineNumber":36,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":38,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lowwilliam"},"content":"     * Gets the summary of users\u0027 diet record."},{"lineNumber":40,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lowwilliam"},"content":"     * @return the diet summary."},{"lineNumber":42,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lowwilliam"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"lowwilliam"},"content":"    public String getRecordSummary() {"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"        return String.format(SUMMARY_FORMAT, \"\" + amount, food.toString().toLowerCase(Locale.ROOT), formattedDate);"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"    public String getListViewFormat() {"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"        return String.format(SUMMARY_FORMAT, food.toString().toLowerCase(Locale.ROOT), \"\" + amount, formattedDate);"},{"lineNumber":50,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lowwilliam"},"content":"}"}],"authorContributionMap":{"lowwilliam":23,"PingruiLi":28}},{"path":"src/main/java/seedu/duke/record/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lowwilliam"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":3,"author":{"gitId":"lowwilliam"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":5,"author":{"gitId":"lowwilliam"},"content":"public class Food {"},{"lineNumber":6,"author":{"gitId":"lowwilliam"},"content":"    private static HashMap\u003cString, Integer\u003e foodCalPer;"},{"lineNumber":7,"author":{"gitId":"lowwilliam"},"content":"    private FoodCategory category;"},{"lineNumber":8,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":9,"author":{"gitId":"lowwilliam"},"content":"    private String name;"},{"lineNumber":10,"author":{"gitId":"lowwilliam"},"content":"    private double weight;"},{"lineNumber":11,"author":{"gitId":"lowwilliam"},"content":"    private double calorie;"},{"lineNumber":12,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":13,"author":{"gitId":"lowwilliam"},"content":"    public Food(String name, double weight, double calorie, FoodCategory category) {"},{"lineNumber":14,"author":{"gitId":"lowwilliam"},"content":"        this.name \u003d name;"},{"lineNumber":15,"author":{"gitId":"lowwilliam"},"content":"        this.weight \u003d weight;"},{"lineNumber":16,"author":{"gitId":"lowwilliam"},"content":"        this.calorie \u003d calorie;"},{"lineNumber":17,"author":{"gitId":"lowwilliam"},"content":"        this.category \u003d category;"},{"lineNumber":18,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":20,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lowwilliam"},"content":"     * Gets the name of food which user added."},{"lineNumber":22,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"lowwilliam"},"content":"     * @return name the name of the food."},{"lineNumber":24,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lowwilliam"},"content":"    public String getName() {"},{"lineNumber":26,"author":{"gitId":"lowwilliam"},"content":"        return name;"},{"lineNumber":27,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":29,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lowwilliam"},"content":"     * Sets a name for a food user add."},{"lineNumber":31,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lowwilliam"},"content":"     * @param name to give the food a name."},{"lineNumber":33,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lowwilliam"},"content":"    public void setName(String name) {"},{"lineNumber":35,"author":{"gitId":"lowwilliam"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":38,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lowwilliam"},"content":"     * Gets the food weight."},{"lineNumber":40,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lowwilliam"},"content":"     * @return weight the weight of food."},{"lineNumber":42,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lowwilliam"},"content":"    public double getWeight() {"},{"lineNumber":44,"author":{"gitId":"lowwilliam"},"content":"        return weight;"},{"lineNumber":45,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":47,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lowwilliam"},"content":"     * Sets weight for a kind of food."},{"lineNumber":49,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"lowwilliam"},"content":"     * @param weight to measure the weight of food."},{"lineNumber":51,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"lowwilliam"},"content":"    public void setWeight(double weight) {"},{"lineNumber":53,"author":{"gitId":"lowwilliam"},"content":"        this.weight \u003d weight;"},{"lineNumber":54,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":56,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lowwilliam"},"content":"     * Gets the calorie data."},{"lineNumber":58,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"lowwilliam"},"content":"     * @return calorie the calorie data."},{"lineNumber":60,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"lowwilliam"},"content":"    public double getCal() {"},{"lineNumber":62,"author":{"gitId":"lowwilliam"},"content":"        return calorie;"},{"lineNumber":63,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":65,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"lowwilliam"},"content":"     * Sets a new calorie of food."},{"lineNumber":67,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"lowwilliam"},"content":"     * @param calorie the calorie of food."},{"lineNumber":69,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"lowwilliam"},"content":"    public void setCal(double calorie) {"},{"lineNumber":71,"author":{"gitId":"lowwilliam"},"content":"        this.calorie \u003d calorie;"},{"lineNumber":72,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":74,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"lowwilliam"},"content":"     * Gets the category of the food."},{"lineNumber":76,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"lowwilliam"},"content":"     * @return category the food category."},{"lineNumber":78,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"lowwilliam"},"content":"    public FoodCategory getCategory() {"},{"lineNumber":80,"author":{"gitId":"lowwilliam"},"content":"        return category;"},{"lineNumber":81,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":83,"author":{"gitId":"lowwilliam"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"lowwilliam"},"content":"     * Sets a new category of food."},{"lineNumber":85,"author":{"gitId":"lowwilliam"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"lowwilliam"},"content":"     * @param category set new category."},{"lineNumber":87,"author":{"gitId":"lowwilliam"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"lowwilliam"},"content":"    public void setCategory(FoodCategory category) {"},{"lineNumber":89,"author":{"gitId":"lowwilliam"},"content":"        this.category \u003d category;"},{"lineNumber":90,"author":{"gitId":"lowwilliam"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lowwilliam"},"content":"}"}],"authorContributionMap":{"lowwilliam":91}},{"path":"src/main/java/seedu/duke/record/FoodCategory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lowwilliam"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"lowwilliam"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import seedu.duke.command.CommandRecordType;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"lowwilliam"},"content":"public enum FoodCategory {"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    VEGETABLE(25),"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    PROTEIN(140),"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    FRUIT(40),"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    GRAIN(350),"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    INVALID(0);"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private double caloriePer100g;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    public static final String validFoodList \u003d \"1.VEGETABLE\\n2.FRUIT\\n3.PROTEIN\\n4.GRAIN\";"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private FoodCategory(double caloriePer100g) {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        this.caloriePer100g \u003d caloriePer100g;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public double getCaloriePer100g() {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        return caloriePer100g;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    public static FoodCategory getFoodCategory(String foodString) {"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        for (int i \u003d 0; i \u003c FoodCategory.values().length; i++) {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            if (foodString.toUpperCase(Locale.ROOT).equals(FoodCategory.values()[i].toString())) {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"                return FoodCategory.values()[i];"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        return INVALID;"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lowwilliam"},"content":"}"}],"authorContributionMap":{"lowwilliam":4,"PingruiLi":28}},{"path":"src/main/java/seedu/duke/record/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":" * Represents the record for a type of Health info. Contains the date and type of the record."},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"public abstract class Record {"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    protected RecordType type;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    protected static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"     * Initializes the object with given record type and date."},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * @param type the type of the record."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     * @param date the date of the record."},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"    public Record(RecordType type, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"     * Gets the date of the record."},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     * @return the date of the record in LocalDate."},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"    public LocalDate getDate() {"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"        return date;"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"     * Sets the date of the record."},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"     * @param date the date of the record in LocalDate."},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"    public void setDate(LocalDate date) {"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     * Gets the type of the record."},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"     * @return the type of the record defined in enum RecordType."},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"    public RecordType getType() {"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"        return type;"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"     * Gets a text summary of the record. To be implemented by child classes."},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"     * @return a text summary of the record in String."},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"    public abstract String getRecordSummary();"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"PingruiLi":2,"Song0180":57}},{"path":"src/main/java/seedu/duke/record/RecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import seedu.duke.record.comparator.RecordDateComparator;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":" * Represents the list that contains all records of one type."},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"public class RecordList {"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    private final ArrayList\u003cRecord\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"    private RecordType type;"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    public RecordList(RecordType type) {"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"        this.type \u003d type;"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"     * Adds a record to the current list."},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"     * @param newRecord the new record to add."},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    public void addRecord(Record newRecord) {"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"        records.add(newRecord);"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"        records.sort(new RecordDateComparator());"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     * Removes a record from the current list by index."},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"     * Return the summary of the deleted record."},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"     * @param index the index of the record."},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public String removeRecord(int index) {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        Record recordToRemove \u003d records.get(index);"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        String recordSummary \u003d recordToRemove.getRecordSummary();"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"        records.remove(index);"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        return recordSummary;"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     * Gets all records in a string."},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"     * @return a string of all records."},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"    public String getRecordsToPrint() {"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"        if (records.isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"            return Messages.MESSAGE_NO_RECORD;"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"            StringBuilder recordStringBuilder \u003d new StringBuilder();"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"            for (Record record : records) {"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"                recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"            return recordStringBuilder.toString();"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     * Gets all records with a given date in a string."},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"     * @param date the date of the record."},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"     * @return a string of all records with a given date."},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"    public String getRecordsToPrint(LocalDate date) {"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"        if (records.isEmpty()) {"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"            return Messages.MESSAGE_NO_RECORD;"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"            StringBuilder recordStringBuilder \u003d new StringBuilder();"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"            for (Record record : records) {"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"                if (record.getDate().isEqual(date)) {"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"                    recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"            return recordStringBuilder.toString();"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"     * Gets all records that match the pattern in the given parameter."},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"     * @param optionalParam an optional parameter for filtering the records."},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"     * @return a string of all records that match the pattern in the given parameter."},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"    public String getRecordsToPrint(String optionalParam) {"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"        if (records.isEmpty()) {"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"            return Messages.MESSAGE_NO_RECORD;"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"            StringBuilder recordStringBuilder \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"            if (type.equals(RecordType.EXERCISE)) {"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"                /*"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"                for (Exercise record : records) {"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"                    if (record.getWorkOut().equals(optionalParam)) {"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"                        recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"                    }"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"                }"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"                */"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"                return recordStringBuilder.toString();"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"            } else if (type.equals(RecordType.DIET)) {"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"                /*"},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":"                for (Diet record : records) {"},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"                    if (record.getFood().equals(optionalParam)) {"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"                        recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"                    }"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"                 */"},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":"                return recordStringBuilder.toString();"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"            } else {"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"                return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"     * Gets all records that match the pattern in the given parameter on a given date."},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"     * @param date          the date of the record."},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":"     * @param optionalParam an optional parameter for filtering the records."},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"     * @return a string of all records that match the pattern in the given parameter on a given date."},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"    public String getRecordsToPrint(LocalDate date, String optionalParam) {"},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":"        if (records.isEmpty()) {"},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"            return Messages.MESSAGE_NO_RECORD;"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"            StringBuilder recordStringBuilder \u003d new StringBuilder();"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"            if (type.equals(RecordType.EXERCISE)) {"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"                /*"},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"                for (Exercise record : records) {"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"                    if (record.getDate().isEqual(date) \u0026\u0026 record.getWorkOut().equals(optionalParam)) {"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"                        recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":"                    }"},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"                 */"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"                return recordStringBuilder.toString();"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"            } else if (type.equals(RecordType.DIET)) {"},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":"                /*"},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"                for (Diet record : records) {"},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"                    if (record.getDate().isEqual(date) \u0026\u0026 record.getFood().equals(optionalParam)) {"},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":"                        recordStringBuilder.append(record.getRecordSummary()).append(\"\\n\");"},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":"                    }"},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":"                }"},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":"                */"},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"                return recordStringBuilder.toString();"},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":"            } else {"},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":"                return Messages.MESSAGE_CANT_VIEW_LIST;"},{"lineNumber":147,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"PingruiLi":5,"Song0180":145}},{"path":"src/main/java/seedu/duke/record/RecordType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.record;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents the type of a record. Contains 4 kinds of type."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public enum RecordType {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    SLEEP, EXERCISE, DIET, BODYWEIGHT"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":8}},{"path":"src/main/java/seedu/duke/record/comparator/RecordDateComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.record.comparator;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.record.Record;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":" * Comparator for comparing two records by date."},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"public class RecordDateComparator implements Comparator\u003cRecord\u003e {"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    public int compare(Record record1, Record record2) {"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"        LocalDate date1 \u003d record1.getDate();"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"        LocalDate date2 \u003d record2.getDate();"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"        if (date1.isBefore(date2)) {"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"            return -1;"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"        } else if (date1.isAfter(date2)) {"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"            return 1;"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"            return 0;"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":24}},{"path":"src/main/java/seedu/duke/ui/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import seedu.duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"public class UI {"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"    public static final String DIVIDER \u003d \"----------------------------------------------------------------\\n\";"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"    public static final String DIVIDER_LINE_ONLY \u003d \"----------------------------------------------------------------\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private Scanner sc;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    public UI() {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public String getUserInput() {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        return sc.nextLine();"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public void printGreetings() {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(DIVIDER"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"                + Messages.MESSAGE_WELCOME"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"                + DIVIDER);"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public void printExitMessage() {"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(DIVIDER"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"                + Messages.MESSAGE_BYE"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"                + DIVIDER);"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public void printHelpPrompt() {"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(DIVIDER"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"                + Messages.MESSAGE_HELP"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"                + DIVIDER_LINE_ONLY);"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"    public static void printMessage(String message) {"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"        System.out.println(DIVIDER"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"                + message"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"                + \"\\n\""},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"                + DIVIDER_LINE_ONLY);"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"    public static void printDivider() {"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"PingruiLi":16,"Song0180":33}},{"path":"src/test/java/seedu/duke/HealthierTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"class HealthierTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":11,"Song0180":1}}]
